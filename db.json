{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"src/images/components.png","path":"images/components.png","modified":1,"renderable":0},{"_id":"src/images/devtools-storage-chrome.png","path":"images/devtools-storage-chrome.png","modified":1,"renderable":0},{"_id":"src/images/data.png","path":"images/data.png","modified":1,"renderable":0},{"_id":"src/images/devtools-storage-edge.png","path":"images/devtools-storage-edge.png","modified":1,"renderable":0},{"_id":"src/images/dom-tree.png","path":"images/dom-tree.png","modified":1,"renderable":0},{"_id":"src/images/hn-architecture.png","path":"images/hn-architecture.png","modified":1,"renderable":0},{"_id":"src/images/hn.png","path":"images/hn.png","modified":1,"renderable":0},{"_id":"src/images/lifecycle.png","path":"images/lifecycle.png","modified":1,"renderable":0},{"_id":"src/images/logged-proxied-data.png","path":"images/logged-proxied-data.png","modified":1,"renderable":0},{"_id":"src/images/mvvm.png","path":"images/mvvm.png","modified":1,"renderable":0},{"_id":"src/images/props-events.png","path":"images/props-events.png","modified":1,"renderable":0},{"_id":"src/images/search-by-algolia.png","path":"images/search-by-algolia.png","modified":1,"renderable":0},{"_id":"src/images/state.png","path":"images/state.png","modified":1,"renderable":0},{"_id":"src/images/transition.png","path":"images/transition.png","modified":1,"renderable":0},{"_id":"src/images/typescript-type-error.png","path":"images/typescript-type-error.png","modified":1,"renderable":0},{"_id":"src/images/vue-component-with-preprocessors.png","path":"images/vue-component-with-preprocessors.png","modified":1,"renderable":0},{"_id":"src/images/vue-component.png","path":"images/vue-component.png","modified":1,"renderable":0},{"_id":"themes/vue/source/browserconfig.xml","path":"browserconfig.xml","modified":1,"renderable":1},{"_id":"themes/vue/source/manifest.json","path":"manifest.json","modified":1,"renderable":1},{"_id":"src/images/devtools-storage.png","path":"images/devtools-storage.png","modified":1,"renderable":0},{"_id":"themes/vue/source/css/benchmark.styl","path":"css/benchmark.styl","modified":1,"renderable":1},{"_id":"themes/vue/source/css/index.styl","path":"css/index.styl","modified":1,"renderable":1},{"_id":"themes/vue/source/css/page.styl","path":"css/page.styl","modified":1,"renderable":1},{"_id":"themes/vue/source/css/search.styl","path":"css/search.styl","modified":1,"renderable":1},{"_id":"themes/vue/source/js/common.js","path":"js/common.js","modified":1,"renderable":1},{"_id":"themes/vue/source/js/smooth-scroll.min.js","path":"js/smooth-scroll.min.js","modified":1,"renderable":1},{"_id":"themes/vue/source/js/css.escape.js","path":"js/css.escape.js","modified":1,"renderable":1},{"_id":"themes/vue/source/images/100offer.png","path":"images/100offer.png","modified":1,"renderable":1},{"_id":"themes/vue/source/images/2mhost.png","path":"images/2mhost.png","modified":1,"renderable":1},{"_id":"themes/vue/source/images/aaha.png","path":"images/aaha.png","modified":1,"renderable":1},{"_id":"themes/vue/source/images/actualize.png","path":"images/actualize.png","modified":1,"renderable":1},{"_id":"themes/vue/source/images/anymod.png","path":"images/anymod.png","modified":1,"renderable":1},{"_id":"themes/vue/source/images/bit-wide.png","path":"images/bit-wide.png","modified":1,"renderable":1},{"_id":"themes/vue/source/images/bit.png","path":"images/bit.png","modified":1,"renderable":1},{"_id":"themes/vue/source/images/bmqb.png","path":"images/bmqb.png","modified":1,"renderable":1},{"_id":"themes/vue/source/images/chaitin.png","path":"images/chaitin.png","modified":1,"renderable":1},{"_id":"themes/vue/source/images/check.png","path":"images/check.png","modified":1,"renderable":1},{"_id":"themes/vue/source/images/codepilot.png","path":"images/codepilot.png","modified":1,"renderable":1},{"_id":"themes/vue/source/images/coin-bch.png","path":"images/coin-bch.png","modified":1,"renderable":1},{"_id":"themes/vue/source/images/coin-btc.png","path":"images/coin-btc.png","modified":1,"renderable":1},{"_id":"themes/vue/source/images/coin-eth.png","path":"images/coin-eth.png","modified":1,"renderable":1},{"_id":"themes/vue/source/images/coin-ltc.png","path":"images/coin-ltc.png","modified":1,"renderable":1},{"_id":"themes/vue/source/images/conf.png","path":"images/conf.png","modified":1,"renderable":1},{"_id":"themes/vue/source/images/datacamp.png","path":"images/datacamp.png","modified":1,"renderable":1},{"_id":"themes/vue/source/images/dopamine.png","path":"images/dopamine.png","modified":1,"renderable":1},{"_id":"themes/vue/source/images/down.png","path":"images/down.png","modified":1,"renderable":1},{"_id":"themes/vue/source/images/famebroker.png","path":"images/famebroker.png","modified":1,"renderable":1},{"_id":"themes/vue/source/images/feed.png","path":"images/feed.png","modified":1,"renderable":1},{"_id":"themes/vue/source/images/frontend-meetups.png","path":"images/frontend-meetups.png","modified":1,"renderable":1},{"_id":"themes/vue/source/images/frontend-love.png","path":"images/frontend-love.png","modified":1,"renderable":1},{"_id":"themes/vue/source/images/hackr-io.png","path":"images/hackr-io.png","modified":1,"renderable":1},{"_id":"themes/vue/source/images/htmlburger.png","path":"images/htmlburger.png","modified":1,"renderable":1},{"_id":"themes/vue/source/images/icons.png","path":"images/icons.png","modified":1,"renderable":1},{"_id":"themes/vue/source/images/icons8.png","path":"images/icons8.png","modified":1,"renderable":1},{"_id":"themes/vue/source/images/infinitynewtab.png","path":"images/infinitynewtab.png","modified":1,"renderable":1},{"_id":"themes/vue/source/images/itunescn.png","path":"images/itunescn.png","modified":1,"renderable":1},{"_id":"themes/vue/source/images/jsfiddle.png","path":"images/jsfiddle.png","modified":1,"renderable":1},{"_id":"themes/vue/source/images/jsguru.png","path":"images/jsguru.png","modified":1,"renderable":1},{"_id":"themes/vue/source/images/juejin.png","path":"images/juejin.png","modified":1,"renderable":1},{"_id":"themes/vue/source/images/laravel.png","path":"images/laravel.png","modified":1,"renderable":1},{"_id":"themes/vue/source/images/logo.png","path":"images/logo.png","modified":1,"renderable":1},{"_id":"themes/vue/source/images/logovue.png","path":"images/logovue.png","modified":1,"renderable":1},{"_id":"themes/vue/source/images/menu.png","path":"images/menu.png","modified":1,"renderable":1},{"_id":"themes/vue/source/images/monterail.png","path":"images/monterail.png","modified":1,"renderable":1},{"_id":"themes/vue/source/images/neds.png","path":"images/neds.png","modified":1,"renderable":1},{"_id":"themes/vue/source/images/onsen-ui.png","path":"images/onsen-ui.png","modified":1,"renderable":1},{"_id":"themes/vue/source/images/paypal.png","path":"images/paypal.png","modified":1,"renderable":1},{"_id":"themes/vue/source/images/patreon.png","path":"images/patreon.png","modified":1,"renderable":1},{"_id":"themes/vue/source/images/pubnub.png","path":"images/pubnub.png","modified":1,"renderable":1},{"_id":"themes/vue/source/images/search.png","path":"images/search.png","modified":1,"renderable":1},{"_id":"themes/vue/source/images/someline.png","path":"images/someline.png","modified":1,"renderable":1},{"_id":"themes/vue/source/images/stdlib.png","path":"images/stdlib.png","modified":1,"renderable":1},{"_id":"themes/vue/source/images/strikingly.png","path":"images/strikingly.png","modified":1,"renderable":1},{"_id":"themes/vue/source/images/tde.png","path":"images/tde.png","modified":1,"renderable":1},{"_id":"themes/vue/source/images/teamextension.png","path":"images/teamextension.png","modified":1,"renderable":1},{"_id":"themes/vue/source/images/tmvuejs2.png","path":"images/tmvuejs2.png","modified":1,"renderable":1},{"_id":"themes/vue/source/images/tooltwist.png","path":"images/tooltwist.png","modified":1,"renderable":1},{"_id":"themes/vue/source/images/valuecoders.png","path":"images/valuecoders.png","modified":1,"renderable":1},{"_id":"themes/vue/source/images/vehikl.png","path":"images/vehikl.png","modified":1,"renderable":1},{"_id":"themes/vue/source/images/vuejobs.png","path":"images/vuejobs.png","modified":1,"renderable":1},{"_id":"themes/vue/source/images/vuejobs.svg","path":"images/vuejobs.svg","modified":1,"renderable":1},{"_id":"themes/vue/source/images/vuejsadmin.png","path":"images/vuejsadmin.png","modified":1,"renderable":1},{"_id":"themes/vue/source/images/vuemastery.png","path":"images/vuemastery.png","modified":1,"renderable":1},{"_id":"themes/vue/source/images/vueschool.png","path":"images/vueschool.png","modified":1,"renderable":1},{"_id":"themes/vue/source/images/vuetify.png","path":"images/vuetify.png","modified":1,"renderable":1},{"_id":"themes/vue/source/images/xfive.png","path":"images/xfive.png","modified":1,"renderable":1},{"_id":"src/images/memory-leak-example.png","path":"images/memory-leak-example.png","modified":1,"renderable":0},{"_id":"themes/vue/source/js/vue.min.js","path":"js/vue.min.js","modified":1,"renderable":1},{"_id":"themes/vue/source/images/nsoft.png","path":"images/nsoft.png","modified":1,"renderable":1},{"_id":"src/images/devtools-timetravel.gif","path":"images/devtools-timetravel.gif","modified":1,"renderable":0},{"_id":"themes/vue/source/images/icons/android-icon-144x144.png","path":"images/icons/android-icon-144x144.png","modified":1,"renderable":1},{"_id":"themes/vue/source/images/icons/android-icon-192x192.png","path":"images/icons/android-icon-192x192.png","modified":1,"renderable":1},{"_id":"themes/vue/source/images/icons/android-icon-36x36.png","path":"images/icons/android-icon-36x36.png","modified":1,"renderable":1},{"_id":"themes/vue/source/images/icons/android-icon-48x48.png","path":"images/icons/android-icon-48x48.png","modified":1,"renderable":1},{"_id":"themes/vue/source/images/icons/android-icon-72x72.png","path":"images/icons/android-icon-72x72.png","modified":1,"renderable":1},{"_id":"themes/vue/source/images/icons/android-icon-96x96.png","path":"images/icons/android-icon-96x96.png","modified":1,"renderable":1},{"_id":"themes/vue/source/images/icons/apple-icon-114x114.png","path":"images/icons/apple-icon-114x114.png","modified":1,"renderable":1},{"_id":"themes/vue/source/images/icons/apple-icon-120x120.png","path":"images/icons/apple-icon-120x120.png","modified":1,"renderable":1},{"_id":"themes/vue/source/images/icons/apple-icon-144x144.png","path":"images/icons/apple-icon-144x144.png","modified":1,"renderable":1},{"_id":"themes/vue/source/images/icons/apple-icon-152x152.png","path":"images/icons/apple-icon-152x152.png","modified":1,"renderable":1},{"_id":"themes/vue/source/images/icons/apple-icon-180x180.png","path":"images/icons/apple-icon-180x180.png","modified":1,"renderable":1},{"_id":"themes/vue/source/images/icons/apple-icon-57x57.png","path":"images/icons/apple-icon-57x57.png","modified":1,"renderable":1},{"_id":"themes/vue/source/images/icons/apple-icon-60x60.png","path":"images/icons/apple-icon-60x60.png","modified":1,"renderable":1},{"_id":"themes/vue/source/images/icons/apple-icon-72x72.png","path":"images/icons/apple-icon-72x72.png","modified":1,"renderable":1},{"_id":"themes/vue/source/images/icons/apple-icon-76x76.png","path":"images/icons/apple-icon-76x76.png","modified":1,"renderable":1},{"_id":"themes/vue/source/images/icons/apple-icon-precomposed.png","path":"images/icons/apple-icon-precomposed.png","modified":1,"renderable":1},{"_id":"themes/vue/source/images/icons/apple-icon.png","path":"images/icons/apple-icon.png","modified":1,"renderable":1},{"_id":"themes/vue/source/images/icons/browserconfig.xml","path":"images/icons/browserconfig.xml","modified":1,"renderable":1},{"_id":"themes/vue/source/images/icons/favicon-16x16.png","path":"images/icons/favicon-16x16.png","modified":1,"renderable":1},{"_id":"themes/vue/source/images/icons/favicon-32x32.png","path":"images/icons/favicon-32x32.png","modified":1,"renderable":1},{"_id":"themes/vue/source/images/icons/favicon-96x96.png","path":"images/icons/favicon-96x96.png","modified":1,"renderable":1},{"_id":"themes/vue/source/images/icons/favicon.ico","path":"images/icons/favicon.ico","modified":1,"renderable":1},{"_id":"themes/vue/source/images/icons/manifest.json","path":"images/icons/manifest.json","modified":1,"renderable":1},{"_id":"themes/vue/source/images/icons/ms-icon-144x144.png","path":"images/icons/ms-icon-144x144.png","modified":1,"renderable":1},{"_id":"themes/vue/source/images/icons/ms-icon-150x150.png","path":"images/icons/ms-icon-150x150.png","modified":1,"renderable":1},{"_id":"themes/vue/source/images/icons/ms-icon-310x310.png","path":"images/icons/ms-icon-310x310.png","modified":1,"renderable":1},{"_id":"themes/vue/source/images/icons/ms-icon-70x70.png","path":"images/icons/ms-icon-70x70.png","modified":1,"renderable":1},{"_id":"themes/vue/source/js/vue.js","path":"js/vue.js","modified":1,"renderable":1},{"_id":"src/images/breakpoint_set.png","path":"images/breakpoint_set.png","modified":1,"renderable":0},{"_id":"src/images/config_add.png","path":"images/config_add.png","modified":1,"renderable":0},{"_id":"src/images/breakpoint_hit.png","path":"images/breakpoint_hit.png","modified":1,"renderable":0},{"_id":"src/images/vuetron-heirarchy.gif","path":"images/vuetron-heirarchy.gif","modified":1,"renderable":0}],"Cache":[{"_id":"src/index.md","hash":"fd945de1e31344f0d8be59bcc87e3f5fda468e11","modified":1531973056851},{"_id":"themes/vue/_config.yml","hash":"ef8e5c77097c7b733f05aba95489111992b5afb3","modified":1531973056865},{"_id":"src/_posts/011-component.md","hash":"dc6bea9c00bb7e7c8b5009026e2ac78986c50312","modified":1531973056809},{"_id":"src/_posts/012-release.md","hash":"fa3d912b80c623e665eddc689d39f5feacc4f18c","modified":1531973056809},{"_id":"src/_posts/1.0.0-release.md","hash":"f530bc04b8a0635fdbc8f2659fb1129cf02c233b","modified":1531973056810},{"_id":"src/_posts/announcing-2.0.md","hash":"289e35fd375f2bb058acc157e77b2367b1bc4265","modified":1531973056810},{"_id":"src/_posts/common-gotchas.md","hash":"e410fbfb6717dfe4e090d983825f95408ba3071b","modified":1531973056810},{"_id":"src/_posts/march-update.md","hash":"35317ee656c5ff190db107fdb48f57c3761c0bb8","modified":1531973056811},{"_id":"src/_posts/vue-011-release.md","hash":"2be60f8115795ffb2047b6a2d4e18fe2477cd517","modified":1531973056811},{"_id":"src/_posts/vue-cli.md","hash":"20c913472a116c717f0a9d3d8fd174764fd5b417","modified":1531973056811},{"_id":"src/_posts/vue-next.md","hash":"a0ac9a662aece66b050544ac9467673811083a35","modified":1531973056811},{"_id":"src/_posts/vuejs-010-release.md","hash":"d89462ea33e99c8869a7d1445a2c7a26c95146bb","modified":1531973056811},{"_id":"src/_posts/why-no-template-url.md","hash":"b62a1f01eaa924cf3aa3d1bd5f7e721604fe8cca","modified":1531973056812},{"_id":"src/images/components.png","hash":"2f4056d9c0448a3204386ddefd84025ea8a58967","modified":1531973056817},{"_id":"src/images/devtools-storage-chrome.png","hash":"4c6defcd7f965e743c5a9d9242766e67b7a79a38","modified":1531973056820},{"_id":"src/images/data.png","hash":"7071337f9071f93ebf85639ede38b0f40fd75d98","modified":1531973056820},{"_id":"src/images/devtools-storage-edge.png","hash":"4550f8c408787ed427c5f6b07530533690be1a3c","modified":1531973056821},{"_id":"src/images/dom-tree.png","hash":"820025017bfcf319d411f6eb2a6f07d543132028","modified":1531973056824},{"_id":"src/images/hn-architecture.png","hash":"0b4adafb587478119e1fb5808f8f04481268a3ce","modified":1531973056825},{"_id":"src/images/hn.png","hash":"d0a6b7b011d305d62504cae3bbce54d111783e82","modified":1531973056825},{"_id":"src/images/lifecycle.png","hash":"53345be1363e09b3e43e34d27c030c4f376b060a","modified":1531973056826},{"_id":"src/images/logged-proxied-data.png","hash":"0e875c2ded04180d9fc73785fbc91351b8159648","modified":1531973056827},{"_id":"src/images/mvvm.png","hash":"b83d7f54d5f2df09a662a7057cd521d23b67e451","modified":1531973056828},{"_id":"src/images/props-events.png","hash":"0f0328ec572bda3f864bb65eea5dbbf32b59504c","modified":1531973056828},{"_id":"src/images/search-by-algolia.png","hash":"b580b0eb3965b62ce9bb1bab1ed0577448f73075","modified":1531973056829},{"_id":"src/images/state.png","hash":"8d8033027c49fee1f795cdca0736c4315efc54fa","modified":1531973056829},{"_id":"src/images/transition.png","hash":"918faae8f4e8e8d0b02c7516ba3c9931b9161487","modified":1531973056829},{"_id":"src/images/typescript-type-error.png","hash":"f282f85d3fe94a7ebd2f741efad3d55a5469dcc5","modified":1531973056830},{"_id":"src/images/vue-component-with-preprocessors.png","hash":"daed0210c92685fd128bd5e8b9338700619b2442","modified":1531973056831},{"_id":"src/images/vue-component.png","hash":"a9155a78d17b79c5f8e28f4ccf48864fcf172efb","modified":1531973056831},{"_id":"src/menu/index.md","hash":"189f0685b3420069e60d21599ace0e653ed99ecb","modified":1531973056851},{"_id":"src/support-vuejs/index.md","hash":"8fc0659ff1294ff70d7b34d8539d7ed7f5c1913c","modified":1531973056853},{"_id":"src/perf/index.md","hash":"4e99a00b4c42175ad476c1ed112e02c144ff630f","modified":1531973056853},{"_id":"src/v2/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1531973056853},{"_id":"themes/vue/layout/layout.ejs","hash":"cecc1576c5620ba66adb27015825b18b9b85ac48","modified":1531973056868},{"_id":"themes/vue/layout/index.ejs","hash":"ab501e0540fdeccf7ba36719dd5e0ddabd772177","modified":1531973056867},{"_id":"themes/vue/layout/page.ejs","hash":"2e1541d31448a25bedf867700189808b986c66a7","modified":1531973056868},{"_id":"themes/vue/layout/post.ejs","hash":"c14db1616a9c9e3023e2b4dfb97a031a196e9475","modified":1531973056870},{"_id":"themes/vue/layout/search-page.ejs","hash":"97809e816775efd22be3bffbc673b73b6148c67b","modified":1531973056870},{"_id":"themes/vue/layout/sponsors-page.ejs","hash":"ec14ef668e844b10b0ca2984fdfe213c238c91df","modified":1531973056870},{"_id":"themes/vue/source/browserconfig.xml","hash":"115f1a6d4b6a6ca0661f12b3d9a6123f213d78b7","modified":1531973056871},{"_id":"themes/vue/source/manifest.json","hash":"036fdc7c5b6bc82e9985ea49cc25e5b931eadc03","modified":1531973056901},{"_id":"src/images/devtools-storage.png","hash":"edc4425d005028a30d2f2ae66183ecb65f0d988f","modified":1531973056822},{"_id":"src/v2/cookbook/adding-instance-properties.md","hash":"a5fee3eaa1298716e6d7fdcd6a1f92c6203fbf0c","modified":1531973056854},{"_id":"src/v2/cookbook/avoiding-memory-leaks.md","hash":"7e825a2b8a69226c0de23a087e01235276d89a64","modified":1531973056855},{"_id":"src/v2/cookbook/client-side-storage.md","hash":"41c87bf330ac8e8f8259d41c771ce4b32474fe9a","modified":1531973056855},{"_id":"src/v2/cookbook/creating-custom-scroll-directives.md","hash":"45618fb9d36a237e9a926a30d7ca3680eaea27df","modified":1531973056855},{"_id":"src/v2/cookbook/debugging-in-vscode.md","hash":"d6de90bb5e4d4376188e7183a581aad53a647cd2","modified":1531973056856},{"_id":"src/v2/cookbook/dockerize-vuejs-app.md","hash":"1e239d2a28553c407699190aed9f0eb741e478ac","modified":1531973056856},{"_id":"src/v2/cookbook/editable-svg-icons.md","hash":"945e189cea91cfc8f0f377da1b80eb8b9e64b0fb","modified":1531973056856},{"_id":"src/v2/cookbook/form-validation.md","hash":"069475a7bee5c1b874a6300539f907241fce2ccd","modified":1531973056856},{"_id":"src/v2/cookbook/index.md","hash":"fae962e0d6092bfc371d7dd9b59143dcae7defe8","modified":1531973056857},{"_id":"src/v2/cookbook/packaging-sfc-for-npm.md","hash":"c0f610f50cd67060bda5f4fdd35e69ff608ebb57","modified":1531973056859},{"_id":"src/v2/cookbook/serverless-blog.md","hash":"6ad63ec1dcb5ace064026a22c816bbf078c6f8ec","modified":1531973056860},{"_id":"src/v2/cookbook/unit-testing-vue-components.md","hash":"c3b893203d8374abbdf3f9b86071e1c6acb3b136","modified":1531973056860},{"_id":"src/v2/cookbook/using-axios-to-consume-apis.md","hash":"ee9519e5c8df06f61c6bcf2af837b21d174500b1","modified":1531973056860},{"_id":"src/v2/examples/commits.md","hash":"8a946162b0e550331c79041b6240073fd1bd5598","modified":1531973056860},{"_id":"src/v2/examples/deepstream.md","hash":"14216982daf959d4a5ba9e4aa871cc25091a99be","modified":1531973056861},{"_id":"src/v2/examples/elastic-header.md","hash":"d50b9889e6e9915a50afc3d9c34e679908d0e749","modified":1531973056861},{"_id":"src/v2/examples/firebase.md","hash":"0a778afde801f9509252741e6130cd03180f02ee","modified":1531973056861},{"_id":"src/v2/examples/grid-component.md","hash":"564e9ec73099df5d8fd3be34d735671cb6604553","modified":1531973056861},{"_id":"src/v2/examples/hackernews.md","hash":"74a2b3210a2005ebbc7a00d9c33e78c13175593b","modified":1531973056861},{"_id":"src/v2/examples/index.md","hash":"7722f8a9d6eb75460338dea482a6c551932aa74a","modified":1531973056861},{"_id":"src/v2/examples/modal.md","hash":"7aa3dcb09644971aeda4170e06c77e91dc11ebbc","modified":1531973056862},{"_id":"src/v2/examples/select2.md","hash":"bc2d2269dbdcc4fe42cfaa4736f4f274f6d94b92","modified":1531973056862},{"_id":"src/v2/examples/svg.md","hash":"79138027310406e2d4cf63c4ba440399246b3755","modified":1531973056862},{"_id":"src/v2/examples/todomvc.md","hash":"bce8452fb4eae120a328666092ca40da4f85dd78","modified":1531973056863},{"_id":"src/v2/examples/tree-view.md","hash":"21c71d43245946a23f6cb8f379dc7254b2e6e7e2","modified":1531973056863},{"_id":"src/v2/guide/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1531973056863},{"_id":"src/v2/guide/index.md","hash":"9b4ddf034c3827dbfedead94b698b36f44e83572","modified":1531973056864},{"_id":"src/v2/guide/installation.md","hash":"8490eb1a3484d611c60234902bdfeb221ca9c14e","modified":1531973056864},{"_id":"src/v2/search/index.md","hash":"7f76b8a040366f4d8e4b23d06d5e021fc45ce5c2","modified":1531973056865},{"_id":"src/v2/style-guide/index.md","hash":"c9cf0e83733c4700b29a7b2f6ff62222f9086dc8","modified":1531973056865},{"_id":"themes/vue/layout/icons/bch.ejs","hash":"d5d3f724738964e5ea4dcb5ca733c5a3ce6268ad","modified":1531973056866},{"_id":"themes/vue/layout/icons/btc.ejs","hash":"fed9b5d4b5e19813dc6dea1e58143d402b8692e0","modified":1531973056866},{"_id":"themes/vue/layout/icons/github-dark.ejs","hash":"beffc9f0efdbf78868f6f59ee3a75d9a9ecd8cda","modified":1531973056866},{"_id":"themes/vue/layout/icons/eth.ejs","hash":"36e176c7e64e56c0e2b5da03d6a297344862b550","modified":1531973056866},{"_id":"themes/vue/layout/icons/github.ejs","hash":"188ffb2152598973849360eafeb18d4f907cf32a","modified":1531973056866},{"_id":"themes/vue/layout/icons/ltc.ejs","hash":"6d74d8a03ae0729d84e58c5a776916d7fb217543","modified":1531973056867},{"_id":"themes/vue/layout/icons/medium.ejs","hash":"11850bc444cc7b966bc804930fb7aa9bb4790f8d","modified":1531973056867},{"_id":"themes/vue/layout/icons/play.ejs","hash":"af4cb73bbfdadd794e0fba125fdcd66fc3263f22","modified":1531973056867},{"_id":"themes/vue/layout/icons/twitter.ejs","hash":"4fc8410bd2bc266c81d87399c8b66c5cbae5ce69","modified":1531973056867},{"_id":"themes/vue/layout/partials/ad-text.ejs","hash":"4b7836bc7f2a212772a8029297cbbbe21b1de654","modified":1531973056868},{"_id":"themes/vue/layout/partials/ad.ejs","hash":"2e78b67cab9e528922814527fadad5daeaab5cbb","modified":1531973056868},{"_id":"themes/vue/layout/partials/conf.ejs","hash":"5c5cd81cb4025c9a8790be69ce0a702aac72f8a4","modified":1531973056868},{"_id":"themes/vue/layout/partials/ecosystem_dropdown.ejs","hash":"9b799bbe57ff10eb819879693c4eb50a22cea766","modified":1531973056868},{"_id":"themes/vue/layout/partials/language_dropdown.ejs","hash":"2a4a7d2ffce73711b4f39e2f0342f0052e0d384b","modified":1531973056869},{"_id":"themes/vue/layout/partials/header.ejs","hash":"f3488aea27ef27f67a509cc01a1c03e5d152d4ba","modified":1531973056869},{"_id":"themes/vue/layout/partials/learn_dropdown.ejs","hash":"8844d3f2e72738bcd69d81ab5a8b8dd7d49290d5","modified":1531973056869},{"_id":"themes/vue/layout/partials/main_menu.ejs","hash":"f4fa54ba60852c62627df12606c6c507ec80f511","modified":1531973056869},{"_id":"themes/vue/layout/partials/sidebar.ejs","hash":"ea6e2da42c796434ae285f4f2b4030655d357fb3","modified":1531973056869},{"_id":"themes/vue/layout/partials/sponsors.ejs","hash":"4e49de0c6554f8ee7f011fb132f2610910f84cfb","modified":1531973056869},{"_id":"themes/vue/layout/partials/sponsors_sidebar.ejs","hash":"22a55f6bc53a2e5dab69532a03d99c756b71cc54","modified":1531973056870},{"_id":"themes/vue/layout/partials/support_vue_dropdown.ejs","hash":"11c7e689d8c1a571afced042c0ffd12ee5958f2f","modified":1531973056870},{"_id":"themes/vue/layout/partials/toc.ejs","hash":"0aee5c8a797c85c44c3ab1bf6130c6fbe33645f9","modified":1531973056870},{"_id":"themes/vue/source/css/_ad.styl","hash":"88c9bdde012a1d64312800554b074bc8ecbe28dd","modified":1531973056871},{"_id":"themes/vue/source/css/_animations.styl","hash":"709eff86f230249ea35a7d6374d21b81e870cb1c","modified":1531973056871},{"_id":"themes/vue/source/css/_api.styl","hash":"d1d041953b75246d6733324ea0073bc5491468b1","modified":1531973056871},{"_id":"themes/vue/source/css/_common.styl","hash":"6a625d69ae9f539d720cdc65d2698686b6894969","modified":1531973056871},{"_id":"themes/vue/source/css/_demo.styl","hash":"412b6d64faf10a7eb4d92adc9e05c8cb9069c22e","modified":1531973056872},{"_id":"themes/vue/source/css/_header.styl","hash":"adfe7e2d51b910a63aeef70c30fad934f8f5fc1b","modified":1531973056872},{"_id":"themes/vue/source/css/_migration.styl","hash":"6c95c614220e0318913282fe793f84b0e99ab7a6","modified":1531973056872},{"_id":"themes/vue/source/css/_modal.styl","hash":"1bfa0421be9fc11623bd6506582af8a3d3b8c4eb","modified":1531973056872},{"_id":"themes/vue/source/css/_offline-menu.styl","hash":"bdd13f1a8814197cd629fc433ca8874b5af929ec","modified":1531973056872},{"_id":"themes/vue/source/css/_scrimba.styl","hash":"16dc38ef54d9e4a579e4cc545e6121f277bf640b","modified":1531973056873},{"_id":"themes/vue/source/css/_search-page.styl","hash":"b836d30b5fa0366ea1308b2e1d8e5fa987e0ccd2","modified":1531973056873},{"_id":"themes/vue/source/css/_settings.styl","hash":"f4f372fd9cff02a8b6b1759b8403d65babe1eb54","modified":1531973056873},{"_id":"themes/vue/source/css/_sidebar.styl","hash":"d81d78014a18ad67ec3719a54c38c1b50b0ecdc5","modified":1531973056873},{"_id":"themes/vue/source/css/_sponsors-index.styl","hash":"821a79fb1c8ac5e968524ce3fd53bf0b959828f4","modified":1531973056873},{"_id":"themes/vue/source/css/_sponsors-page.styl","hash":"6a4d63b0fd2dac24ca105d15b34d65d4cbc11e34","modified":1531973056873},{"_id":"themes/vue/source/css/_sponsors-sidebar.styl","hash":"f89beb5ac90ef8dcb80089191e2dd5f82f8bf50c","modified":1531973056874},{"_id":"themes/vue/source/css/_style-guide.styl","hash":"e3f11c65cfc816bf5694a7ce0f45249ddd1b53ab","modified":1531973056874},{"_id":"themes/vue/source/css/_syntax.styl","hash":"039cfb37c3d17622912cef729b1bb3268b4dfb1d","modified":1531973056874},{"_id":"themes/vue/source/css/_team.styl","hash":"a090ade9cd76f14b96f976fb96fecf033e197b80","modified":1531973056874},{"_id":"themes/vue/source/css/benchmark.styl","hash":"f676e3d142530aef8a4f29a22360f4516047a1ff","modified":1531973056875},{"_id":"themes/vue/source/css/index.styl","hash":"6b31928fe439c7fa232aaaa9008366dd685ee2bb","modified":1531973056875},{"_id":"themes/vue/source/css/page.styl","hash":"d042e8182da9e0feba510b25ddc9d65887066d1a","modified":1531973056875},{"_id":"themes/vue/source/css/search.styl","hash":"12ad5cb786a3b1aab2ab7e01dcf84fa9d7d0dd3c","modified":1531973056875},{"_id":"themes/vue/source/js/common.js","hash":"d5806f99572d975ee7b0e4ca3f70cc08241346e3","modified":1531973056899},{"_id":"themes/vue/source/js/smooth-scroll.min.js","hash":"48d800d2b3be86c704e002502999413504bbd04d","modified":1531973056899},{"_id":"themes/vue/source/js/css.escape.js","hash":"1d0e28a08261de3955b0ee18432e304c1f468441","modified":1531973056899},{"_id":"themes/vue/source/images/100offer.png","hash":"5395e9d3245ba26c47106b6399f98c8b9ee23124","modified":1531973056875},{"_id":"themes/vue/source/images/2mhost.png","hash":"3562bc1e832de5f5daa0fa4cf5c37d97c7671008","modified":1531973056876},{"_id":"themes/vue/source/images/aaha.png","hash":"081c1d01fd9d611e6270d45d87c15b41fbc1aaed","modified":1531973056876},{"_id":"themes/vue/source/images/actualize.png","hash":"add8c93ab16663c20c0551c8c950e7595fa60404","modified":1531973056876},{"_id":"themes/vue/source/images/anymod.png","hash":"5d310988fa06a6391fa4ba428f6d007a576845f4","modified":1531973056876},{"_id":"themes/vue/source/images/bit-wide.png","hash":"f25674448f3baaf1a383920fd4014d412b043814","modified":1531973056877},{"_id":"themes/vue/source/images/bit.png","hash":"8d1e7b29b66f60a63133dd1f1cf440f345cb24ab","modified":1531973056877},{"_id":"themes/vue/source/images/bmqb.png","hash":"c33925baad9600ed9540d58c942006db0b565924","modified":1531973056877},{"_id":"themes/vue/source/images/chaitin.png","hash":"a61b1ec393b9600d173255fed72fd873a72b8225","modified":1531973056877},{"_id":"themes/vue/source/images/check.png","hash":"b22174f8a966abf7a46eba7991be7a7ae5e16637","modified":1531973056877},{"_id":"themes/vue/source/images/codepilot.png","hash":"9f70116b962285b6fb8fcf1d0a5c1251b7a0b740","modified":1531973056878},{"_id":"themes/vue/source/images/coin-bch.png","hash":"783293c8b782e7772e61f62e1168ae175a0a1456","modified":1531973056878},{"_id":"themes/vue/source/images/coin-btc.png","hash":"4dc6d5b671dba33b3e293180ccc9ec2f0b480a6b","modified":1531973056878},{"_id":"themes/vue/source/images/coin-eth.png","hash":"aadb0a7d299f9a2baf2bf2d281f70d1e26e15a48","modified":1531973056878},{"_id":"themes/vue/source/images/coin-ltc.png","hash":"2bf87f92612990bc609dcc8826a344be05166717","modified":1531973056878},{"_id":"themes/vue/source/images/conf.png","hash":"88a0a36efe26956cf9c7bf659b56464db7711ee3","modified":1531973056878},{"_id":"themes/vue/source/images/datacamp.png","hash":"b69725a97c88a614db6b842d3b2c5ca37124fc3f","modified":1531973056879},{"_id":"themes/vue/source/images/dopamine.png","hash":"2ea0928227dd6cb44ceeca4ed877feb2be741ff1","modified":1531973056879},{"_id":"themes/vue/source/images/down.png","hash":"6ded74a98bb128e76bfd45cffede2679fd0598f0","modified":1531973056879},{"_id":"themes/vue/source/images/famebroker.png","hash":"5f727d0bc49edd03ab6b32de7b546e1b91141061","modified":1531973056879},{"_id":"themes/vue/source/images/feed.png","hash":"eba32c4f87e5ea1f89dce9c68d8603c8f82a8cd9","modified":1531973056879},{"_id":"themes/vue/source/images/frontend-meetups.png","hash":"19047fe8ea92eebf11600359957a5be42a126acb","modified":1531973056880},{"_id":"themes/vue/source/images/frontend-love.png","hash":"ef3695d6a19646599211f886e3a27cd75a374ef6","modified":1531973056880},{"_id":"themes/vue/source/images/hackr-io.png","hash":"791aa990a3b672de16200cbd34b7877de71a2207","modified":1531973056880},{"_id":"themes/vue/source/images/htmlburger.png","hash":"a6c54ce4ae3ad4b5f1b02a3bb1ca7da838eee8f5","modified":1531973056880},{"_id":"themes/vue/source/images/icons.png","hash":"50aa19eac3a7bf6acb435838b7a890050a4a6d8d","modified":1531973056881},{"_id":"themes/vue/source/images/icons8.png","hash":"4d44e5b251f72dffe37ac7007042fc0b7beb34fb","modified":1531973056887},{"_id":"themes/vue/source/images/infinitynewtab.png","hash":"23ee29addf580272596aa7437e5679fe1bb093b2","modified":1531973056888},{"_id":"themes/vue/source/images/itunescn.png","hash":"036d9d7fe167a6e49a6177a2a3f830745d9a0cd0","modified":1531973056888},{"_id":"themes/vue/source/images/jsfiddle.png","hash":"aaaae508c8f3488487c4f33883e91ae2b6006800","modified":1531973056888},{"_id":"themes/vue/source/images/jsguru.png","hash":"2e390bff8e63415c312b76cf5b855030e864b6d5","modified":1531973056888},{"_id":"themes/vue/source/images/juejin.png","hash":"b71c1f890801f2f5e47ad9209e36cadbe4d5e7f7","modified":1531973056888},{"_id":"themes/vue/source/images/laravel.png","hash":"010281d898830dbb8c848f6a272ba46ddc95e800","modified":1531973056889},{"_id":"themes/vue/source/images/logo.png","hash":"25a778c33d8697348d6cad7bdd6477f1182f1fdc","modified":1531973056889},{"_id":"themes/vue/source/images/logovue.png","hash":"555257b8c5e7ecf34ce4f9b952eeaf006adfa339","modified":1531973056889},{"_id":"themes/vue/source/images/menu.png","hash":"45d62574f2a22017c2aa2001964eaf560f1f70c6","modified":1531973056889},{"_id":"themes/vue/source/images/monterail.png","hash":"9af782b7550abbc0f5a0538837cd261e8445581a","modified":1531973056890},{"_id":"themes/vue/source/images/neds.png","hash":"20baa1d810bc493fee9f6c4c0977a7927aa875f3","modified":1531973056890},{"_id":"themes/vue/source/images/onsen-ui.png","hash":"0dc98d72d447a8f4d3b8c43cb0890362597de194","modified":1531973056891},{"_id":"themes/vue/source/images/paypal.png","hash":"b1c3741633ff0c0f8f8a0e80d68202c14a524009","modified":1531973056891},{"_id":"themes/vue/source/images/patreon.png","hash":"bb0d0dd23c4058d8be63cdf0ccba1e6a13b05acf","modified":1531973056891},{"_id":"themes/vue/source/images/pubnub.png","hash":"1598b1cb7246b3fbcec24a65e6a18261228ee9bb","modified":1531973056891},{"_id":"themes/vue/source/images/search.png","hash":"7f519d31bc3c6ca005b6ca5d8ff5ded172df627a","modified":1531973056892},{"_id":"themes/vue/source/images/someline.png","hash":"ebf5845686658c6ab912afe5528d738b386a8fb7","modified":1531973056892},{"_id":"themes/vue/source/images/stdlib.png","hash":"f574448f5c4ac47b82e3a7d914511dd520040bd5","modified":1531973056892},{"_id":"themes/vue/source/images/strikingly.png","hash":"8734fc6617029f70832c33d44e3cb7d62ef30d38","modified":1531973056893},{"_id":"themes/vue/source/images/tde.png","hash":"d0d69b08401572da5403b0d67fbec2b724f29963","modified":1531973056894},{"_id":"themes/vue/source/images/teamextension.png","hash":"023e296f3ca9d9f3b80126b6c02ab1407876d0a7","modified":1531973056894},{"_id":"themes/vue/source/images/tmvuejs2.png","hash":"89b9418962dc97177593a32512d6427165a364b4","modified":1531973056894},{"_id":"themes/vue/source/images/tooltwist.png","hash":"e625a481e2eb3f7194273d58b250d0fafd42e462","modified":1531973056894},{"_id":"themes/vue/source/images/valuecoders.png","hash":"9f743ecc8025a917d2a2535f14a773303d2ee545","modified":1531973056895},{"_id":"themes/vue/source/images/vehikl.png","hash":"e5f045088e79ac5d3aedd2d4efc5b37d15431df0","modified":1531973056896},{"_id":"themes/vue/source/images/vuejobs.png","hash":"149231804a4686f1ec890f7d984207ea83cf8190","modified":1531973056896},{"_id":"themes/vue/source/images/vuejobs.svg","hash":"96416259e5443984c5d9a48b98bc593b4e211bc5","modified":1531973056897},{"_id":"themes/vue/source/images/vuejsadmin.png","hash":"3bd9893f7b8af6f25c7a11e3b72bef5ef7a4b8c5","modified":1531973056897},{"_id":"themes/vue/source/images/vuemastery.png","hash":"a783b81f0d9ded6e8d46991cc8d18ff878e17656","modified":1531973056897},{"_id":"themes/vue/source/images/vueschool.png","hash":"101c74997820dd12ab87dec875df56cad3495ffa","modified":1531973056898},{"_id":"themes/vue/source/images/vuetify.png","hash":"66254951f82e0639fb588b362f72b80839d9f411","modified":1531973056898},{"_id":"themes/vue/source/images/xfive.png","hash":"f24c3707a9503bd69aa7394ade53fe2877d9f571","modified":1531973056898},{"_id":"src/images/memory-leak-example.png","hash":"7c2df66d99f06df266d294aa7c923fe5e8af7657","modified":1531973056828},{"_id":"src/v2/api/index.md","hash":"6a0f09bbd2815c747caaccd68150729fb008254c","modified":1531973056854},{"_id":"themes/vue/source/js/vue.min.js","hash":"28bb1c91e37b53f4ebb48ce482dccb240003e078","modified":1531973056901},{"_id":"themes/vue/source/images/nsoft.png","hash":"83658cfc868b76c19e3ef12c33368c9c99a8f41d","modified":1531973056891},{"_id":"src/images/devtools-timetravel.gif","hash":"43ddab8e7869a513c2058d2892b54d0c556ef5e2","modified":1531973056824},{"_id":"themes/vue/source/images/icons/android-icon-144x144.png","hash":"e12846d2ee6af400bffa01a255f39f31bcd43341","modified":1531973056881},{"_id":"themes/vue/source/images/icons/android-icon-192x192.png","hash":"9b73601653d137fe70f4813333292cd0a216f9c7","modified":1531973056881},{"_id":"themes/vue/source/images/icons/android-icon-36x36.png","hash":"d1667cf3e378d53080518a63c7406cddb974afe7","modified":1531973056881},{"_id":"themes/vue/source/images/icons/android-icon-48x48.png","hash":"d87e08fc54f00649f9d731fbfcac7c8d42956bc6","modified":1531973056881},{"_id":"themes/vue/source/images/icons/android-icon-72x72.png","hash":"7891d8b97cbd94402f3d2565f2079119dedd83bc","modified":1531973056882},{"_id":"themes/vue/source/images/icons/android-icon-96x96.png","hash":"dd47ec5bd2819438f75d3b2b2bb6f7462b26b516","modified":1531973056882},{"_id":"themes/vue/source/images/icons/apple-icon-114x114.png","hash":"115387dd5324edc98bfd438bc7e42a97995a22b8","modified":1531973056882},{"_id":"themes/vue/source/images/icons/apple-icon-120x120.png","hash":"c069b178c9eec9dbb0968c6675c3d88c85d8faeb","modified":1531973056882},{"_id":"themes/vue/source/images/icons/apple-icon-144x144.png","hash":"e12846d2ee6af400bffa01a255f39f31bcd43341","modified":1531973056883},{"_id":"themes/vue/source/images/icons/apple-icon-152x152.png","hash":"375b0881b61acee93b643de0a1603caa730c5550","modified":1531973056883},{"_id":"themes/vue/source/images/icons/apple-icon-180x180.png","hash":"23b1f9941525254bb2b0a105fe1d1408a086d20f","modified":1531973056883},{"_id":"themes/vue/source/images/icons/apple-icon-57x57.png","hash":"e09769dfc6569e205c42cd008a19e7583f42d0cf","modified":1531973056883},{"_id":"themes/vue/source/images/icons/apple-icon-60x60.png","hash":"348c255d724efb96edc6b1cdc6e94e81c6db0d4a","modified":1531973056884},{"_id":"themes/vue/source/images/icons/apple-icon-72x72.png","hash":"7891d8b97cbd94402f3d2565f2079119dedd83bc","modified":1531973056884},{"_id":"themes/vue/source/images/icons/apple-icon-76x76.png","hash":"a18c5a3fd62fe6fd23b000ffa886cd3540558c44","modified":1531973056884},{"_id":"themes/vue/source/images/icons/apple-icon-precomposed.png","hash":"5431fca5202a4a4582ef19d4a6cd27eeb72995e1","modified":1531973056884},{"_id":"themes/vue/source/images/icons/apple-icon.png","hash":"5431fca5202a4a4582ef19d4a6cd27eeb72995e1","modified":1531973056884},{"_id":"themes/vue/source/images/icons/browserconfig.xml","hash":"853389b6c4273965899eb1302d665eb91395fd0c","modified":1531973056885},{"_id":"themes/vue/source/images/icons/favicon-16x16.png","hash":"27539f912cf75025e21d50e0e0f19e102c23080c","modified":1531973056885},{"_id":"themes/vue/source/images/icons/favicon-32x32.png","hash":"a770d0948174dfe4a97d45ae262e0dd3a7a4950b","modified":1531973056885},{"_id":"themes/vue/source/images/icons/favicon-96x96.png","hash":"dd47ec5bd2819438f75d3b2b2bb6f7462b26b516","modified":1531973056885},{"_id":"themes/vue/source/images/icons/favicon.ico","hash":"74dad5e0a20200aa8d574a7a6cf9d0b63c41ea14","modified":1531973056886},{"_id":"themes/vue/source/images/icons/manifest.json","hash":"d11febf9e708a9e11baee37ed7dc5e99902580be","modified":1531973056886},{"_id":"themes/vue/source/images/icons/ms-icon-144x144.png","hash":"e12846d2ee6af400bffa01a255f39f31bcd43341","modified":1531973056886},{"_id":"themes/vue/source/images/icons/ms-icon-150x150.png","hash":"33bc9a235fad9f15ecf422f27ebe439c1a1d0953","modified":1531973056886},{"_id":"themes/vue/source/images/icons/ms-icon-310x310.png","hash":"a34b2f30e58b4743fae1df4d31d945d864574f02","modified":1531973056887},{"_id":"themes/vue/source/images/icons/ms-icon-70x70.png","hash":"1fea35510195f46746c08b1ccdd606cf71da03cc","modified":1531973056887},{"_id":"themes/vue/source/js/vue.js","hash":"e7bebefc32cb9c0d8261e764e8f24c1cd41c217f","modified":1531973056900},{"_id":"src/images/breakpoint_set.png","hash":"db3c2527261d19c83424b69d789fca4a85dbec07","modified":1531973056817},{"_id":"src/images/config_add.png","hash":"ef17eaeb40ca00f9c66d813c569c1b54160db1a9","modified":1531973056820},{"_id":"src/images/breakpoint_hit.png","hash":"56c93842cb88a37df7dd327507c5c44f94459e72","modified":1531973056815},{"_id":"src/images/vuetron-heirarchy.gif","hash":"9046d2579ee044cb793f7ce41727323e896e847c","modified":1531973056850},{"_id":"public/api/index.html","hash":"c9f0675039fb57c59b92b18474eb4f9140732fe5","modified":1532514409398},{"_id":"public/guide/class-and-style.html","hash":"970d4f993423e3d86413d315fe8fab5bad5aae0b","modified":1532514409449},{"_id":"public/guide/comparison.html","hash":"25850f1a4700c5305be71224f7a5cd3686e71e98","modified":1532514409457},{"_id":"public/guide/components.html","hash":"ac958e3d99e1b93df5fde31e95bb4ee2cb903af4","modified":1532514409457},{"_id":"public/guide/computed.html","hash":"96e3f4afeda86496a9078df974419c0a1d37e1c1","modified":1532514409457},{"_id":"public/guide/conditional.html","hash":"c6311d6806399fcfeebb3d38db377000f0ba20bf","modified":1532514409457},{"_id":"public/guide/custom-directive.html","hash":"d44daebd462e74d838560b80855b20084f673f88","modified":1532514409457},{"_id":"public/guide/deployment.html","hash":"c5b31d7025c5749f3f49cc1eef8ef4643239aab8","modified":1532514409457},{"_id":"public/guide/events.html","hash":"8b247e0b17642e6f2d94b39a9c5a30ffce35654b","modified":1532514409457},{"_id":"public/guide/forms.html","hash":"5a11591db0b014ae607fa7926fcb039ab56b66fc","modified":1532514409457},{"_id":"public/guide/index.html","hash":"e2b3d8b93afe5e766d9131ed574e0540d935b641","modified":1532514409457},{"_id":"public/guide/installation.html","hash":"1b0ef502e9b94e6e600eecbd198a73ba7e22d6af","modified":1532514409457},{"_id":"public/guide/instance.html","hash":"5edcf2972c13eee9e5deaf4936bc26268e834a25","modified":1532514409457},{"_id":"public/guide/join.html","hash":"f31da6e98e785258938fed5b13b02b776a8f0098","modified":1532514409457},{"_id":"public/guide/list.html","hash":"5c42ddd4f0c24c277cbb01be24404690d09a8a9b","modified":1532514409457},{"_id":"public/guide/migration-vue-router.html","hash":"146720fedd3855128fe39e8d9855c7cead9dc14d","modified":1532514409457},{"_id":"public/guide/migration-vuex.html","hash":"98193c186c31c9f82e4ef9d15eda478d6334d168","modified":1532514409457},{"_id":"public/guide/migration.html","hash":"02d5dd7fb011b540ac6b2ebd54c6aeb1a68a4327","modified":1532514409457},{"_id":"public/guide/mixins.html","hash":"4cbab0c07672782b6d42678ffec17873fcd0eb45","modified":1532514409458},{"_id":"public/guide/plugins.html","hash":"ef61f5d30721719cadd935718871b757465435eb","modified":1532514409458},{"_id":"public/guide/reactivity.html","hash":"6416a919fa2cea085484a090f7e05a2b44c2bab6","modified":1532514409458},{"_id":"public/guide/render-function.html","hash":"a29c7cba96378e3c8521eed1950fa32a6f77a189","modified":1532514409458},{"_id":"public/guide/routing.html","hash":"8945e59bf128ec03dd5040407c017f5596ed796d","modified":1532514409458},{"_id":"public/guide/single-file-components.html","hash":"f948a1559acb573f62b2593d5c60968978ed3161","modified":1532514409458},{"_id":"public/guide/ssr.html","hash":"efc8457a72454695edba3386e71653eb19bee86c","modified":1532514409458},{"_id":"public/guide/state-management.html","hash":"f7712e9d5875a243badc5f5a2425b104b0bb626e","modified":1532514409458},{"_id":"public/guide/syntax.html","hash":"75e4af69b22c8ec64b8c391f1b94dd64d5163aad","modified":1532514409458},{"_id":"public/guide/transitioning-state.html","hash":"1f5cabe1606bfdd3aa999cc2982d93f46e319c1b","modified":1532514409458},{"_id":"public/guide/transitions.html","hash":"ead910e781daf4430d4ac1c52570e194543ca015","modified":1532514409458},{"_id":"public/guide/unit-testing.html","hash":"9747699833d0356a5917ae4cc0068833847da2dd","modified":1532514409458},{"_id":"public/examples/commits.html","hash":"d7448d159ad4dad3eb4c3f63cb5971330e62e82d","modified":1532514409458},{"_id":"public/examples/elastic-header.html","hash":"6b445fee8ad128496b592e928ef297eeb7be1ec4","modified":1532514409458},{"_id":"public/examples/firebase.html","hash":"f00b36c0efc07818424eaecbb296e82dcc426ce0","modified":1532514409458},{"_id":"public/examples/grid-component.html","hash":"c2b990091a2977fc8446a19b438cbbe76d9bc5d0","modified":1532514409458},{"_id":"public/examples/hackernews.html","hash":"a51131e06269681c38cb1cbdfa359339f53143cc","modified":1532514409458},{"_id":"public/examples/index.html","hash":"a6ffd730fde22ef518953b62e12f79a3472c958c","modified":1532514409458},{"_id":"public/examples/modal.html","hash":"d5474beb09b1399f7aba07d04d335ccca1a6d1f6","modified":1532514409458},{"_id":"public/examples/select2.html","hash":"d3d6ae69df79ea8025a1893b11169a4c6a933631","modified":1532514409458},{"_id":"public/examples/svg.html","hash":"5b1fa13f3f832fe334c06175cca67c227152385b","modified":1532514409458},{"_id":"public/examples/todomvc.html","hash":"fb57cee2468f6c9c5424069f3923e2138ddb7b31","modified":1532514409458},{"_id":"public/examples/tree-view.html","hash":"0c09ebb15415a6bc3fcc3749bbe5fd9229110de4","modified":1532514409458},{"_id":"public/atom.xml","hash":"97fc71d3a4922b4e63461e8b42d4cb8e2403795e","modified":1532514409458},{"_id":"public/index.html","hash":"fd6f6594ebda4576edf3ab5d701234c3ed6dd50d","modified":1532514409473},{"_id":"public/menu/index.html","hash":"5ad55767ca38f8009dc53628f5ae8f31dddcf42c","modified":1532514409473},{"_id":"public/perf/index.html","hash":"52b0762451f8363de665a433a849574da3cbc935","modified":1532514409474},{"_id":"public/v2/examples/commits.html","hash":"03778c4b854449cb94fb42e007b927ea22ae3531","modified":1532514409474},{"_id":"public/v2/examples/deepstream.html","hash":"28bab1c9fe30e754911c4823c3b1fd8ec7c06e04","modified":1532514409474},{"_id":"public/v2/examples/elastic-header.html","hash":"caff6b27d5df70994cee5b27631fc0b849a9c598","modified":1532514409474},{"_id":"public/v2/examples/firebase.html","hash":"7fdc30d6baeea1ca76eb85c57a998902574b7619","modified":1532514409474},{"_id":"public/v2/examples/grid-component.html","hash":"6358138c6ffc5ef242ea2e01c94b500f7739b10e","modified":1532514409474},{"_id":"public/v2/examples/hackernews.html","hash":"271652db81b2881b3251d8834480c00efe02001d","modified":1532514409474},{"_id":"public/v2/examples/index.html","hash":"4a042a79de4380e6076183db0b41263c8d410359","modified":1532514409474},{"_id":"public/v2/examples/modal.html","hash":"7dfdc9178567d0851a0b38a8ff40733ad1763531","modified":1532514409474},{"_id":"public/v2/examples/select2.html","hash":"ed4e8eba0aa64b1335fb95cda015e605c4e0948f","modified":1532514409474},{"_id":"public/v2/examples/svg.html","hash":"282f20e3bc746f18da2415710a091f358c3d7772","modified":1532514409474},{"_id":"public/v2/examples/todomvc.html","hash":"0b331fa8e7dfe34b60aa3b0826fbe6829f73e8b6","modified":1532514409474},{"_id":"public/v2/examples/tree-view.html","hash":"931450f2b0f4b1f21acad4b3759907b442f7960d","modified":1532514409474},{"_id":"public/v2/search/index.html","hash":"bade27de4ef95e27f0c2965caa575b1a854c0afa","modified":1532514409474},{"_id":"public/2016/03/14/march-update/index.html","hash":"f72738255fff049e6acac207b67db4a48ebc26ca","modified":1532514409474},{"_id":"public/2016/02/06/common-gotchas/index.html","hash":"535bbf53b88043bf3155252aa28e657559fb935a","modified":1532514409474},{"_id":"public/2015/12/28/vue-cli/index.html","hash":"4e35ddffd09c027fdcf6d0d9a777e28ccfe28485","modified":1532514409474},{"_id":"public/2015/10/28/why-no-template-url/index.html","hash":"5d05242ad9f8f4c7d15b82b5840c092b24cb1dda","modified":1532514409474},{"_id":"public/2015/10/26/1.0.0-release/index.html","hash":"be6a31ded9e7ecc388d08fb60de128fbe6a9e2fa","modified":1532514409474},{"_id":"public/2014/12/08/011-component/index.html","hash":"e973f5e4d7f765c5feba182cafc2332990ea48b3","modified":1532514409474},{"_id":"public/2014/11/09/vue-011-release/index.html","hash":"2843bd470908309123af4d43d9b912b1ea64190e","modified":1532514409475},{"_id":"public/2014/07/29/vue-next/index.html","hash":"e823352ca5d4262aaf43d6eaa5314aa084093dd4","modified":1532514409475},{"_id":"public/2014/03/22/vuejs-010-release/index.html","hash":"54bf23469d086912bc1f1c4b97f775140dd22fd5","modified":1532514409475},{"_id":"public/archives/index.html","hash":"e226f5bacb34729819dc37202d5b78ca64a97f8b","modified":1532514409475},{"_id":"public/archives/page/2/index.html","hash":"f4cf8b1064612baf4c172f7f5b6a162cb8485187","modified":1532514409475},{"_id":"public/archives/2014/index.html","hash":"b7ae800c9f113321628e9ad14b7b7f792dbfdffc","modified":1532514409475},{"_id":"public/archives/2014/03/index.html","hash":"eec8fa0e5aa34240af175661092b5b88b0ca595a","modified":1532514409475},{"_id":"public/archives/2014/07/index.html","hash":"a3a273c7675a5d4bf4fe4d83f68df3bc5abb488d","modified":1532514409475},{"_id":"public/archives/2014/11/index.html","hash":"cb2ba024aa512421fb9b3b4c23daea818e5ca5fc","modified":1532514409475},{"_id":"public/archives/2014/12/index.html","hash":"7aa45fac0dadb3be34b78f7463f8e0ba8170ce9d","modified":1532514409475},{"_id":"public/archives/2015/index.html","hash":"ac79226aaa156157e5bd5873423844c4a47f8a71","modified":1532514409475},{"_id":"public/archives/2015/06/index.html","hash":"371ee43b50ca89ec0bec1c56da281944190fa887","modified":1532514409475},{"_id":"public/archives/2015/10/index.html","hash":"72ee51090c43b03625f1d90f64d1a0c3f3a307b0","modified":1532514409475},{"_id":"public/archives/2015/12/index.html","hash":"2195a4cf47148f3c8386faec9a12ba300d5f2563","modified":1532514409475},{"_id":"public/archives/2016/index.html","hash":"99f72c713537ca27d827e9f42769919e60b59cb2","modified":1532514409475},{"_id":"public/archives/2016/02/index.html","hash":"377c8e718a601c590979625ef666dd54e844b29c","modified":1532514409475},{"_id":"public/archives/2016/03/index.html","hash":"3554f3540bab59faaaa7824b4ee5f108935ba460","modified":1532514409475},{"_id":"public/archives/2016/04/index.html","hash":"f562f25c504efbb8d472d43e8accc8f5e817bd0c","modified":1532514409475},{"_id":"public/page/2/index.html","hash":"f8c5c6777642fa6dbea0ae08ed20fe8310deafc8","modified":1532514409475},{"_id":"public/support-vuejs/index.html","hash":"7bf1e336733d74cc5658e1bcfa71726302951071","modified":1532514409475},{"_id":"public/v2/cookbook/adding-instance-properties.html","hash":"b3b6562acfa2ee02e56aedc0dd93a31d0260364c","modified":1532514409476},{"_id":"public/v2/cookbook/creating-custom-scroll-directives.html","hash":"62f0125a5b52109e4b28fdf7655715fe6ecbd137","modified":1532514409476},{"_id":"public/v2/cookbook/avoiding-memory-leaks.html","hash":"2c0b0f23eb09fa48ddf73f293fb15cc9a21059ec","modified":1532514409476},{"_id":"public/v2/cookbook/debugging-in-vscode.html","hash":"0abbe7eab2547988f46e8b0ef9a6483bb0709594","modified":1532514409476},{"_id":"public/v2/cookbook/dockerize-vuejs-app.html","hash":"1e52c0fea5b46fa807ea385ce07a2c46a0c5933e","modified":1532514409476},{"_id":"public/v2/cookbook/editable-svg-icons.html","hash":"3cc658ada68a96a0668c93d1b6b7259dedcc4f92","modified":1532514409476},{"_id":"public/v2/cookbook/index.html","hash":"b0605a8fabc46d6c96c945951b6258f021459f30","modified":1532514409476},{"_id":"public/v2/guide/index.html","hash":"cac96c05a26d899652167d0476629ac31e63ab1f","modified":1532514409476},{"_id":"public/v2/cookbook/client-side-storage.html","hash":"e7629659e2aaff4942fca7a3a73daa24b757c696","modified":1532514409476},{"_id":"public/v2/cookbook/form-validation.html","hash":"95b8eb988820adbb22fcd0d047c0b8c03bb6928b","modified":1532514409476},{"_id":"public/v2/cookbook/packaging-sfc-for-npm.html","hash":"3f7bd74521d8b2b75e4ce4784dfed243af215584","modified":1532514409476},{"_id":"public/v2/cookbook/serverless-blog.html","hash":"4010037aab1fbe5ecc9a877157b6b6d35a4a5784","modified":1532514409476},{"_id":"public/v2/cookbook/unit-testing-vue-components.html","hash":"f5b01b992c602b025bd95b86966b048a3957ff7f","modified":1532514409476},{"_id":"public/v2/cookbook/using-axios-to-consume-apis.html","hash":"1de2e43090ea9a48450c62a5e92863208f3a6164","modified":1532514409476},{"_id":"public/v2/guide/installation.html","hash":"3b2511fff22980b2b2e3192a615dc85bb409ccbf","modified":1532514409476},{"_id":"public/v2/style-guide/index.html","hash":"d31a16656d232c99591ceab10e5a2fb7c29f5fc0","modified":1532514409476},{"_id":"public/v2/api/index.html","hash":"357b1217f07ae2d01be7630e0cff6d3870375052","modified":1532514409476},{"_id":"public/2016/04/27/announcing-2.0/index.html","hash":"9e5d51232ab79e3567fdfa3e665bcf7424a2b9ad","modified":1532514409476},{"_id":"public/2015/06/11/012-release/index.html","hash":"fe29009559f6509244859bd52ce64efd3cdbb3ce","modified":1532514409477},{"_id":"public/images/data.png","hash":"7071337f9071f93ebf85639ede38b0f40fd75d98","modified":1532514409488},{"_id":"public/images/components.png","hash":"2f4056d9c0448a3204386ddefd84025ea8a58967","modified":1532514409488},{"_id":"public/images/devtools-storage-edge.png","hash":"4550f8c408787ed427c5f6b07530533690be1a3c","modified":1532514409488},{"_id":"public/images/devtools-storage-chrome.png","hash":"4c6defcd7f965e743c5a9d9242766e67b7a79a38","modified":1532514409489},{"_id":"public/images/dom-tree.png","hash":"820025017bfcf319d411f6eb2a6f07d543132028","modified":1532514409489},{"_id":"public/images/hn-architecture.png","hash":"0b4adafb587478119e1fb5808f8f04481268a3ce","modified":1532514409489},{"_id":"public/images/hn.png","hash":"d0a6b7b011d305d62504cae3bbce54d111783e82","modified":1532514409489},{"_id":"public/images/lifecycle.png","hash":"53345be1363e09b3e43e34d27c030c4f376b060a","modified":1532514409489},{"_id":"public/images/logged-proxied-data.png","hash":"0e875c2ded04180d9fc73785fbc91351b8159648","modified":1532514409489},{"_id":"public/images/mvvm.png","hash":"b83d7f54d5f2df09a662a7057cd521d23b67e451","modified":1532514409489},{"_id":"public/images/props-events.png","hash":"0f0328ec572bda3f864bb65eea5dbbf32b59504c","modified":1532514409489},{"_id":"public/images/search-by-algolia.png","hash":"b580b0eb3965b62ce9bb1bab1ed0577448f73075","modified":1532514409489},{"_id":"public/images/state.png","hash":"8d8033027c49fee1f795cdca0736c4315efc54fa","modified":1532514409489},{"_id":"public/images/transition.png","hash":"918faae8f4e8e8d0b02c7516ba3c9931b9161487","modified":1532514409489},{"_id":"public/images/typescript-type-error.png","hash":"f282f85d3fe94a7ebd2f741efad3d55a5469dcc5","modified":1532514409489},{"_id":"public/images/vue-component-with-preprocessors.png","hash":"daed0210c92685fd128bd5e8b9338700619b2442","modified":1532514409489},{"_id":"public/browserconfig.xml","hash":"115f1a6d4b6a6ca0661f12b3d9a6123f213d78b7","modified":1532514409489},{"_id":"public/images/vue-component.png","hash":"a9155a78d17b79c5f8e28f4ccf48864fcf172efb","modified":1532514409489},{"_id":"public/images/100offer.png","hash":"5395e9d3245ba26c47106b6399f98c8b9ee23124","modified":1532514409489},{"_id":"public/images/2mhost.png","hash":"3562bc1e832de5f5daa0fa4cf5c37d97c7671008","modified":1532514409489},{"_id":"public/images/aaha.png","hash":"081c1d01fd9d611e6270d45d87c15b41fbc1aaed","modified":1532514409489},{"_id":"public/images/actualize.png","hash":"add8c93ab16663c20c0551c8c950e7595fa60404","modified":1532514409490},{"_id":"public/images/anymod.png","hash":"5d310988fa06a6391fa4ba428f6d007a576845f4","modified":1532514409490},{"_id":"public/images/bit-wide.png","hash":"f25674448f3baaf1a383920fd4014d412b043814","modified":1532514409490},{"_id":"public/images/bit.png","hash":"8d1e7b29b66f60a63133dd1f1cf440f345cb24ab","modified":1532514409490},{"_id":"public/images/bmqb.png","hash":"c33925baad9600ed9540d58c942006db0b565924","modified":1532514409490},{"_id":"public/images/chaitin.png","hash":"a61b1ec393b9600d173255fed72fd873a72b8225","modified":1532514409490},{"_id":"public/images/check.png","hash":"b22174f8a966abf7a46eba7991be7a7ae5e16637","modified":1532514409490},{"_id":"public/images/coin-bch.png","hash":"783293c8b782e7772e61f62e1168ae175a0a1456","modified":1532514409490},{"_id":"public/images/codepilot.png","hash":"9f70116b962285b6fb8fcf1d0a5c1251b7a0b740","modified":1532514409490},{"_id":"public/images/coin-btc.png","hash":"4dc6d5b671dba33b3e293180ccc9ec2f0b480a6b","modified":1532514409490},{"_id":"public/images/coin-ltc.png","hash":"2bf87f92612990bc609dcc8826a344be05166717","modified":1532514409490},{"_id":"public/images/coin-eth.png","hash":"aadb0a7d299f9a2baf2bf2d281f70d1e26e15a48","modified":1532514409490},{"_id":"public/images/conf.png","hash":"88a0a36efe26956cf9c7bf659b56464db7711ee3","modified":1532514409490},{"_id":"public/images/datacamp.png","hash":"b69725a97c88a614db6b842d3b2c5ca37124fc3f","modified":1532514409490},{"_id":"public/images/dopamine.png","hash":"2ea0928227dd6cb44ceeca4ed877feb2be741ff1","modified":1532514409490},{"_id":"public/images/down.png","hash":"6ded74a98bb128e76bfd45cffede2679fd0598f0","modified":1532514409490},{"_id":"public/images/famebroker.png","hash":"5f727d0bc49edd03ab6b32de7b546e1b91141061","modified":1532514409490},{"_id":"public/images/feed.png","hash":"eba32c4f87e5ea1f89dce9c68d8603c8f82a8cd9","modified":1532514409490},{"_id":"public/images/frontend-meetups.png","hash":"19047fe8ea92eebf11600359957a5be42a126acb","modified":1532514409491},{"_id":"public/images/frontend-love.png","hash":"ef3695d6a19646599211f886e3a27cd75a374ef6","modified":1532514409491},{"_id":"public/images/hackr-io.png","hash":"791aa990a3b672de16200cbd34b7877de71a2207","modified":1532514409491},{"_id":"public/images/htmlburger.png","hash":"a6c54ce4ae3ad4b5f1b02a3bb1ca7da838eee8f5","modified":1532514409491},{"_id":"public/images/icons.png","hash":"50aa19eac3a7bf6acb435838b7a890050a4a6d8d","modified":1532514409491},{"_id":"public/images/icons8.png","hash":"4d44e5b251f72dffe37ac7007042fc0b7beb34fb","modified":1532514409491},{"_id":"public/images/infinitynewtab.png","hash":"23ee29addf580272596aa7437e5679fe1bb093b2","modified":1532514409491},{"_id":"public/images/itunescn.png","hash":"036d9d7fe167a6e49a6177a2a3f830745d9a0cd0","modified":1532514409491},{"_id":"public/images/jsfiddle.png","hash":"aaaae508c8f3488487c4f33883e91ae2b6006800","modified":1532514409491},{"_id":"public/images/jsguru.png","hash":"2e390bff8e63415c312b76cf5b855030e864b6d5","modified":1532514409491},{"_id":"public/images/juejin.png","hash":"b71c1f890801f2f5e47ad9209e36cadbe4d5e7f7","modified":1532514409491},{"_id":"public/images/laravel.png","hash":"010281d898830dbb8c848f6a272ba46ddc95e800","modified":1532514409491},{"_id":"public/images/logo.png","hash":"25a778c33d8697348d6cad7bdd6477f1182f1fdc","modified":1532514409491},{"_id":"public/images/logovue.png","hash":"555257b8c5e7ecf34ce4f9b952eeaf006adfa339","modified":1532514409491},{"_id":"public/images/menu.png","hash":"45d62574f2a22017c2aa2001964eaf560f1f70c6","modified":1532514409491},{"_id":"public/images/monterail.png","hash":"9af782b7550abbc0f5a0538837cd261e8445581a","modified":1532514409491},{"_id":"public/images/neds.png","hash":"20baa1d810bc493fee9f6c4c0977a7927aa875f3","modified":1532514409491},{"_id":"public/images/onsen-ui.png","hash":"0dc98d72d447a8f4d3b8c43cb0890362597de194","modified":1532514409491},{"_id":"public/images/paypal.png","hash":"b1c3741633ff0c0f8f8a0e80d68202c14a524009","modified":1532514409491},{"_id":"public/images/patreon.png","hash":"bb0d0dd23c4058d8be63cdf0ccba1e6a13b05acf","modified":1532514409492},{"_id":"public/images/pubnub.png","hash":"1598b1cb7246b3fbcec24a65e6a18261228ee9bb","modified":1532514409492},{"_id":"public/images/search.png","hash":"7f519d31bc3c6ca005b6ca5d8ff5ded172df627a","modified":1532514409492},{"_id":"public/images/someline.png","hash":"ebf5845686658c6ab912afe5528d738b386a8fb7","modified":1532514409492},{"_id":"public/images/stdlib.png","hash":"f574448f5c4ac47b82e3a7d914511dd520040bd5","modified":1532514409492},{"_id":"public/images/strikingly.png","hash":"8734fc6617029f70832c33d44e3cb7d62ef30d38","modified":1532514409492},{"_id":"public/images/tde.png","hash":"d0d69b08401572da5403b0d67fbec2b724f29963","modified":1532514409492},{"_id":"public/images/teamextension.png","hash":"023e296f3ca9d9f3b80126b6c02ab1407876d0a7","modified":1532514409492},{"_id":"public/images/tmvuejs2.png","hash":"89b9418962dc97177593a32512d6427165a364b4","modified":1532514409492},{"_id":"public/images/tooltwist.png","hash":"e625a481e2eb3f7194273d58b250d0fafd42e462","modified":1532514409492},{"_id":"public/images/valuecoders.png","hash":"9f743ecc8025a917d2a2535f14a773303d2ee545","modified":1532514409492},{"_id":"public/images/vehikl.png","hash":"e5f045088e79ac5d3aedd2d4efc5b37d15431df0","modified":1532514409492},{"_id":"public/images/vuejobs.png","hash":"149231804a4686f1ec890f7d984207ea83cf8190","modified":1532514409492},{"_id":"public/images/vuejobs.svg","hash":"96416259e5443984c5d9a48b98bc593b4e211bc5","modified":1532514409492},{"_id":"public/images/vuejsadmin.png","hash":"3bd9893f7b8af6f25c7a11e3b72bef5ef7a4b8c5","modified":1532514409492},{"_id":"public/images/vuemastery.png","hash":"a783b81f0d9ded6e8d46991cc8d18ff878e17656","modified":1532514409492},{"_id":"public/images/vueschool.png","hash":"101c74997820dd12ab87dec875df56cad3495ffa","modified":1532514409492},{"_id":"public/images/vuetify.png","hash":"66254951f82e0639fb588b362f72b80839d9f411","modified":1532514409493},{"_id":"public/images/xfive.png","hash":"f24c3707a9503bd69aa7394ade53fe2877d9f571","modified":1532514409493},{"_id":"public/images/icons/android-icon-144x144.png","hash":"e12846d2ee6af400bffa01a255f39f31bcd43341","modified":1532514409493},{"_id":"public/images/icons/android-icon-192x192.png","hash":"9b73601653d137fe70f4813333292cd0a216f9c7","modified":1532514409493},{"_id":"public/images/icons/android-icon-36x36.png","hash":"d1667cf3e378d53080518a63c7406cddb974afe7","modified":1532514409493},{"_id":"public/images/icons/android-icon-48x48.png","hash":"d87e08fc54f00649f9d731fbfcac7c8d42956bc6","modified":1532514409493},{"_id":"public/images/icons/android-icon-72x72.png","hash":"7891d8b97cbd94402f3d2565f2079119dedd83bc","modified":1532514409493},{"_id":"public/images/icons/android-icon-96x96.png","hash":"dd47ec5bd2819438f75d3b2b2bb6f7462b26b516","modified":1532514409493},{"_id":"public/images/icons/apple-icon-114x114.png","hash":"115387dd5324edc98bfd438bc7e42a97995a22b8","modified":1532514409493},{"_id":"public/images/icons/apple-icon-120x120.png","hash":"c069b178c9eec9dbb0968c6675c3d88c85d8faeb","modified":1532514409493},{"_id":"public/images/icons/apple-icon-144x144.png","hash":"e12846d2ee6af400bffa01a255f39f31bcd43341","modified":1532514409493},{"_id":"public/images/icons/apple-icon-152x152.png","hash":"375b0881b61acee93b643de0a1603caa730c5550","modified":1532514409493},{"_id":"public/images/icons/apple-icon-180x180.png","hash":"23b1f9941525254bb2b0a105fe1d1408a086d20f","modified":1532514409493},{"_id":"public/images/icons/apple-icon-57x57.png","hash":"e09769dfc6569e205c42cd008a19e7583f42d0cf","modified":1532514409493},{"_id":"public/images/icons/apple-icon-60x60.png","hash":"348c255d724efb96edc6b1cdc6e94e81c6db0d4a","modified":1532514409493},{"_id":"public/images/icons/apple-icon-72x72.png","hash":"7891d8b97cbd94402f3d2565f2079119dedd83bc","modified":1532514409493},{"_id":"public/images/icons/apple-icon-76x76.png","hash":"a18c5a3fd62fe6fd23b000ffa886cd3540558c44","modified":1532514409493},{"_id":"public/images/icons/apple-icon-precomposed.png","hash":"5431fca5202a4a4582ef19d4a6cd27eeb72995e1","modified":1532514409493},{"_id":"public/images/icons/apple-icon.png","hash":"5431fca5202a4a4582ef19d4a6cd27eeb72995e1","modified":1532514409494},{"_id":"public/images/icons/browserconfig.xml","hash":"853389b6c4273965899eb1302d665eb91395fd0c","modified":1532514409494},{"_id":"public/images/icons/favicon-16x16.png","hash":"27539f912cf75025e21d50e0e0f19e102c23080c","modified":1532514409494},{"_id":"public/images/icons/favicon-32x32.png","hash":"a770d0948174dfe4a97d45ae262e0dd3a7a4950b","modified":1532514409494},{"_id":"public/images/icons/favicon-96x96.png","hash":"dd47ec5bd2819438f75d3b2b2bb6f7462b26b516","modified":1532514409494},{"_id":"public/images/icons/favicon.ico","hash":"74dad5e0a20200aa8d574a7a6cf9d0b63c41ea14","modified":1532514409494},{"_id":"public/images/icons/ms-icon-144x144.png","hash":"e12846d2ee6af400bffa01a255f39f31bcd43341","modified":1532514409494},{"_id":"public/images/icons/ms-icon-150x150.png","hash":"33bc9a235fad9f15ecf422f27ebe439c1a1d0953","modified":1532514409494},{"_id":"public/images/icons/ms-icon-70x70.png","hash":"1fea35510195f46746c08b1ccdd606cf71da03cc","modified":1532514409494},{"_id":"public/images/icons/ms-icon-310x310.png","hash":"a34b2f30e58b4743fae1df4d31d945d864574f02","modified":1532514409494},{"_id":"public/images/devtools-storage.png","hash":"edc4425d005028a30d2f2ae66183ecb65f0d988f","modified":1532514409776},{"_id":"public/images/nsoft.png","hash":"83658cfc868b76c19e3ef12c33368c9c99a8f41d","modified":1532514409777},{"_id":"public/css/benchmark.css","hash":"3424ee8c27052da2ab9f544027f49e1550385e9d","modified":1532514409781},{"_id":"public/manifest.json","hash":"88ab1128f74cd43aa1e9624e0961d7fc31e320ed","modified":1532514409781},{"_id":"public/css/search.css","hash":"ac9a0e8c8da7919174caea15d9704c192ea3a2c4","modified":1532514409781},{"_id":"public/js/smooth-scroll.min.js","hash":"48d800d2b3be86c704e002502999413504bbd04d","modified":1532514409781},{"_id":"public/js/css.escape.js","hash":"1d0e28a08261de3955b0ee18432e304c1f468441","modified":1532514409781},{"_id":"public/images/icons/manifest.json","hash":"aebdc9d6447e8b045dccf52f3b6b4000442d927f","modified":1532514409781},{"_id":"public/css/index.css","hash":"5bcbab1e1c90b5c118898df727f811a297c1277f","modified":1532514409781},{"_id":"public/css/page.css","hash":"dd4e8f582d5a3e6b2dc6baedbe604ad5776553d3","modified":1532514409781},{"_id":"public/images/memory-leak-example.png","hash":"7c2df66d99f06df266d294aa7c923fe5e8af7657","modified":1532514409787},{"_id":"public/js/common.js","hash":"d5806f99572d975ee7b0e4ca3f70cc08241346e3","modified":1532514409792},{"_id":"public/images/devtools-timetravel.gif","hash":"43ddab8e7869a513c2058d2892b54d0c556ef5e2","modified":1532514409792},{"_id":"public/images/breakpoint_set.png","hash":"db3c2527261d19c83424b69d789fca4a85dbec07","modified":1532514409813},{"_id":"public/images/config_add.png","hash":"ef17eaeb40ca00f9c66d813c569c1b54160db1a9","modified":1532514409813},{"_id":"public/images/breakpoint_hit.png","hash":"56c93842cb88a37df7dd327507c5c44f94459e72","modified":1532514409816},{"_id":"public/js/vue.min.js","hash":"28bb1c91e37b53f4ebb48ce482dccb240003e078","modified":1532514409818},{"_id":"public/js/vue.js","hash":"e7bebefc32cb9c0d8261e764e8f24c1cd41c217f","modified":1532514409824},{"_id":"public/images/vuetron-heirarchy.gif","hash":"9046d2579ee044cb793f7ce41727323e896e847c","modified":1532514409828}],"Category":[],"Data":[],"Page":[{"index":true,"_content":"","source":"index.md","raw":"index: true\n---\n","date":"2018-07-19T04:04:16.851Z","updated":"2018-07-19T04:04:16.851Z","path":"index.html","title":"","comments":1,"layout":"page","_id":"cjk0zidlv0000vkrt6p1igrcx","content":"","site":{"data":{}},"excerpt":"","more":""},{"type":"menu","_content":"","source":"menu/index.md","raw":"---\ntype: menu\n---\n","date":"2018-07-19T04:04:16.851Z","updated":"2018-07-19T04:04:16.851Z","path":"menu/index.html","title":"","comments":1,"layout":"page","_id":"cjk0zidnh0002vkrtave34izx","content":"","site":{"data":{}},"excerpt":"","more":""},{"sponsors":true,"_content":"","source":"support-vuejs/index.md","raw":"---\nsponsors: true\n---\n","date":"2018-07-19T04:04:16.853Z","updated":"2018-07-19T04:04:16.853Z","path":"support-vuejs/index.html","title":"","comments":1,"layout":"page","_id":"cjk0zidnj0004vkrta4mvblob","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"Performance Comparisons","_content":"\n## TodoMVC Benchmark\n\n> *Last Updated: 2014-10-12*\n\nLooking for the TodoMVC Benchmark? It's been removed because after discussion with some other framework authors we have agreed that:\n\n1. The original intention of these benchmarks were for comparing Browser performance rather than that of frameworks. The \"synchronously trigger an action xxx times\" test routine doesn't reflect meaningful real world user actions.\n\n2. Due to internal implementation differences, frameworks that uses async rendering (e.g. Vue, Om, Mercury) gains the advantage by skipping part of the calculations that happened in the same event loop. The real world user experience doesn't demonstrate such dramatic difference.\n\n3. Overall this benchmark suite gave rise to more controversy than constructive insights, so it's been removed and I'd be happy to replace it with a more meaningful way to measure front-end performance.\n","source":"perf/index.md","raw":"---\ntitle: Performance Comparisons\n---\n\n## TodoMVC Benchmark\n\n> *Last Updated: 2014-10-12*\n\nLooking for the TodoMVC Benchmark? It's been removed because after discussion with some other framework authors we have agreed that:\n\n1. The original intention of these benchmarks were for comparing Browser performance rather than that of frameworks. The \"synchronously trigger an action xxx times\" test routine doesn't reflect meaningful real world user actions.\n\n2. Due to internal implementation differences, frameworks that uses async rendering (e.g. Vue, Om, Mercury) gains the advantage by skipping part of the calculations that happened in the same event loop. The real world user experience doesn't demonstrate such dramatic difference.\n\n3. Overall this benchmark suite gave rise to more controversy than constructive insights, so it's been removed and I'd be happy to replace it with a more meaningful way to measure front-end performance.\n","date":"2018-07-19T04:04:16.853Z","updated":"2018-07-19T04:04:16.853Z","path":"perf/index.html","comments":1,"layout":"page","_id":"cjk0zidnm0006vkrtppgddbv3","content":"<h2 id=\"TodoMVC-Benchmark\"><a href=\"#TodoMVC-Benchmark\" class=\"headerlink\" title=\"TodoMVC Benchmark\"></a>TodoMVC Benchmark</h2><blockquote>\n<p><em>Last Updated: 2014-10-12</em></p>\n</blockquote>\n<p>Looking for the TodoMVC Benchmark? It’s been removed because after discussion with some other framework authors we have agreed that:</p>\n<ol>\n<li><p>The original intention of these benchmarks were for comparing Browser performance rather than that of frameworks. The “synchronously trigger an action xxx times” test routine doesn’t reflect meaningful real world user actions.</p>\n</li>\n<li><p>Due to internal implementation differences, frameworks that uses async rendering (e.g. Vue, Om, Mercury) gains the advantage by skipping part of the calculations that happened in the same event loop. The real world user experience doesn’t demonstrate such dramatic difference.</p>\n</li>\n<li><p>Overall this benchmark suite gave rise to more controversy than constructive insights, so it’s been removed and I’d be happy to replace it with a more meaningful way to measure front-end performance.</p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"TodoMVC-Benchmark\"><a href=\"#TodoMVC-Benchmark\" class=\"headerlink\" title=\"TodoMVC Benchmark\"></a>TodoMVC Benchmark</h2><blockquote>\n<p><em>Last Updated: 2014-10-12</em></p>\n</blockquote>\n<p>Looking for the TodoMVC Benchmark? It’s been removed because after discussion with some other framework authors we have agreed that:</p>\n<ol>\n<li><p>The original intention of these benchmarks were for comparing Browser performance rather than that of frameworks. The “synchronously trigger an action xxx times” test routine doesn’t reflect meaningful real world user actions.</p>\n</li>\n<li><p>Due to internal implementation differences, frameworks that uses async rendering (e.g. Vue, Om, Mercury) gains the advantage by skipping part of the calculations that happened in the same event loop. The real world user experience doesn’t demonstrate such dramatic difference.</p>\n</li>\n<li><p>Overall this benchmark suite gave rise to more controversy than constructive insights, so it’s been removed and I’d be happy to replace it with a more meaningful way to measure front-end performance.</p>\n</li>\n</ol>\n"},{"title":"Adding Instance Properties","type":"cookbook","order":2,"_content":"\n## Base Example\n\nThere may be data/utilities you'd like to use in many components, but you don't want to [pollute the global scope](https://github.com/getify/You-Dont-Know-JS/blob/master/scope%20%26%20closures/ch3.md). In these cases, you can make them available to each Vue instance by defining them on the prototype:\n\n```js\nVue.prototype.$appName = 'My App'\n```\n\nNow `$appName` is available on all Vue instances, even before creation. If we run:\n\n```js\nnew Vue({\n  beforeCreate: function() {\n    console.log(this.$appName)\n  }\n})\n```\n\nThen `\"My App\"` will be logged to the console!\n\n## The Importance of Scoping Instance Properties\n\nYou may be wondering:\n\n> \"Why does `appName` start with `$`? Is that important? What does it do?\n\nNo magic is happening here. `$` is a convention Vue uses for properties that are available to all instances. This avoids conflicts with any defined data, computed properties, or methods.\n\n> \"Conflicts? What do you mean?\"\n\nAnother great question! If you set:\n\n```js\nVue.prototype.appName = 'My App'\n```\n\nThen what would you expect to be logged below?\n\n```js\nnew Vue({\n  data: {\n    // Uh oh - appName is *also* the name of the\n    // instance property we defined!\n    appName: 'The name of some other app'\n  },\n  beforeCreate: function() {\n    console.log(this.appName)\n  },\n  created: function() {\n    console.log(this.appName)\n  }\n})\n```\n\nIt would be `\"My App\"`, then `\"The name of some other app\"`, because `this.appName` is overwritten ([sort of](https://github.com/getify/You-Dont-Know-JS/blob/master/this%20%26%20object%20prototypes/ch5.md)) by `data` when the instance is created. We scope instance properties with `$` to avoid this. You can even use your own convention if you'd like, such as `$_appName` or `ΩappName`, to prevent even conflicts with plugins or future features.\n\n## Real-World Example: Replacing Vue Resource with Axios\n\nLet's say you're replacing the [now-retired Vue Resource](https://medium.com/the-vue-point/retiring-vue-resource-871a82880af4). You really enjoyed accessing request methods through `this.$http` and you want to do the same thing with Axios instead.\n\nAll you have to do is include axios in your project:\n\n```html\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/axios/0.15.2/axios.js\"></script>\n\n<div id=\"app\">\n  <ul>\n    <li v-for=\"user in users\">{{ user.name }}</li>\n  </ul>\n</div>\n```\n\nAlias `axios` to `Vue.prototype.$http`:\n\n```js\nVue.prototype.$http = axios\n```\n\nThen you'll be able to use methods like `this.$http.get` in any Vue instance:\n\n```js\nnew Vue({\n  el: '#app',\n  data: {\n    users: []\n  },\n  created() {\n    var vm = this\n    this.$http\n      .get('https://jsonplaceholder.typicode.com/users')\n      .then(function(response) {\n        vm.users = response.data\n      })\n  }\n})\n```\n\n## The Context of Prototype Methods\n\nIn case you're not aware, methods added to a prototype in JavaScript gain the context of the instance. That means they can use `this` to access data, computed properties, methods, or anything else defined on the instance.\n\nLet's take advantage of this in a `$reverseText` method:\n\n```js\nVue.prototype.$reverseText = function(propertyName) {\n  this[propertyName] = this[propertyName]\n    .split('')\n    .reverse()\n    .join('')\n}\n\nnew Vue({\n  data: {\n    message: 'Hello'\n  },\n  created: function() {\n    console.log(this.message) // => \"Hello\"\n    this.$reverseText('message')\n    console.log(this.message) // => \"olleH\"\n  }\n})\n```\n\nNote that the context binding will **not** work if you use an ES6/2015 arrow function, as they implicitly bind to their parent scope. That means the arrow function version:\n\n```js\nVue.prototype.$reverseText = propertyName => {\n  this[propertyName] = this[propertyName]\n    .split('')\n    .reverse()\n    .join('')\n}\n```\n\nWould throw an error:\n\n```log\nUncaught TypeError: Cannot read property 'split' of undefined\n```\n\n## When To Avoid This Pattern\n\nAs long as you're vigilant in scoping prototype properties, using this pattern is quite safe - as in, unlikely to produce bugs.\n\nHowever, it can sometimes cause confusion with other developers. They might see `this.$http`, for example, and think, \"Oh, I didn't know about this Vue feature!\" Then they move to a different project and are confused when `this.$http` is undefined. Or, maybe they want to Google how to do something, but can't find results because they don't realize they're actually using Axios under an alias.\n\n**The convenience comes at the cost of explicitness.** When looking at a component, it's impossible to tell where `$http` came from. Vue itself? A plugin? A coworker?\n\nSo what are the alternatives?\n\n## Alternative Patterns\n\n### When Not Using a Module System\n\nIn applications with **no** module system (e.g. via Webpack or Browserify), there's a pattern that's often used with _any_ JavaScript-enhanced frontend: a global `App` object.\n\nIf what you want to add has nothing to do with Vue specifically, this may be a good alternative to reach for. Here's an example:\n\n```js\nvar App = Object.freeze({\n  name: 'My App',\n  version: '2.1.4',\n  helpers: {\n    // This is a purely functional version of\n    // the $reverseText method we saw earlier\n    reverseText: function(text) {\n      return text\n        .split('')\n        .reverse()\n        .join('')\n    }\n  }\n})\n```\n\n<p class=\"tip\">If you raised an eyebrow at `Object.freeze`, what it does is prevent the object from being changed in the future. This essentially makes all its properties constants, protecting you from future state bugs.</p>\n\nNow the source of these shared properties is more obvious: there's an `App` object defined somewhere in the app. To find it, developers can run a project-wide search.\n\nAnother advantage is that `App` can now be used _anywhere_ in your code, whether it's Vue-related or not. That includes attaching values directly to instance options, rather than having to enter a function to access properties on `this`:\n\n```js\nnew Vue({\n  data: {\n    appVersion: App.version\n  },\n  methods: {\n    reverseText: App.helpers.reverseText\n  }\n})\n```\n\n### When Using a Module System\n\nWhen you have access to a module system, you can easily organize shared code into modules, then `require`/`import` those modules wherever they're needed. This is the epitome of explicitness, because in each file you gain a list of dependencies. You know _exactly_ where each one came from.\n\nWhile certainly more verbose, this approach is definitely the most maintainable, especially when working with other developers and/or building a large app.\n","source":"v2/cookbook/adding-instance-properties.md","raw":"---\ntitle: Adding Instance Properties\ntype: cookbook\norder: 2\n---\n\n## Base Example\n\nThere may be data/utilities you'd like to use in many components, but you don't want to [pollute the global scope](https://github.com/getify/You-Dont-Know-JS/blob/master/scope%20%26%20closures/ch3.md). In these cases, you can make them available to each Vue instance by defining them on the prototype:\n\n```js\nVue.prototype.$appName = 'My App'\n```\n\nNow `$appName` is available on all Vue instances, even before creation. If we run:\n\n```js\nnew Vue({\n  beforeCreate: function() {\n    console.log(this.$appName)\n  }\n})\n```\n\nThen `\"My App\"` will be logged to the console!\n\n## The Importance of Scoping Instance Properties\n\nYou may be wondering:\n\n> \"Why does `appName` start with `$`? Is that important? What does it do?\n\nNo magic is happening here. `$` is a convention Vue uses for properties that are available to all instances. This avoids conflicts with any defined data, computed properties, or methods.\n\n> \"Conflicts? What do you mean?\"\n\nAnother great question! If you set:\n\n```js\nVue.prototype.appName = 'My App'\n```\n\nThen what would you expect to be logged below?\n\n```js\nnew Vue({\n  data: {\n    // Uh oh - appName is *also* the name of the\n    // instance property we defined!\n    appName: 'The name of some other app'\n  },\n  beforeCreate: function() {\n    console.log(this.appName)\n  },\n  created: function() {\n    console.log(this.appName)\n  }\n})\n```\n\nIt would be `\"My App\"`, then `\"The name of some other app\"`, because `this.appName` is overwritten ([sort of](https://github.com/getify/You-Dont-Know-JS/blob/master/this%20%26%20object%20prototypes/ch5.md)) by `data` when the instance is created. We scope instance properties with `$` to avoid this. You can even use your own convention if you'd like, such as `$_appName` or `ΩappName`, to prevent even conflicts with plugins or future features.\n\n## Real-World Example: Replacing Vue Resource with Axios\n\nLet's say you're replacing the [now-retired Vue Resource](https://medium.com/the-vue-point/retiring-vue-resource-871a82880af4). You really enjoyed accessing request methods through `this.$http` and you want to do the same thing with Axios instead.\n\nAll you have to do is include axios in your project:\n\n```html\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/axios/0.15.2/axios.js\"></script>\n\n<div id=\"app\">\n  <ul>\n    <li v-for=\"user in users\">{{ user.name }}</li>\n  </ul>\n</div>\n```\n\nAlias `axios` to `Vue.prototype.$http`:\n\n```js\nVue.prototype.$http = axios\n```\n\nThen you'll be able to use methods like `this.$http.get` in any Vue instance:\n\n```js\nnew Vue({\n  el: '#app',\n  data: {\n    users: []\n  },\n  created() {\n    var vm = this\n    this.$http\n      .get('https://jsonplaceholder.typicode.com/users')\n      .then(function(response) {\n        vm.users = response.data\n      })\n  }\n})\n```\n\n## The Context of Prototype Methods\n\nIn case you're not aware, methods added to a prototype in JavaScript gain the context of the instance. That means they can use `this` to access data, computed properties, methods, or anything else defined on the instance.\n\nLet's take advantage of this in a `$reverseText` method:\n\n```js\nVue.prototype.$reverseText = function(propertyName) {\n  this[propertyName] = this[propertyName]\n    .split('')\n    .reverse()\n    .join('')\n}\n\nnew Vue({\n  data: {\n    message: 'Hello'\n  },\n  created: function() {\n    console.log(this.message) // => \"Hello\"\n    this.$reverseText('message')\n    console.log(this.message) // => \"olleH\"\n  }\n})\n```\n\nNote that the context binding will **not** work if you use an ES6/2015 arrow function, as they implicitly bind to their parent scope. That means the arrow function version:\n\n```js\nVue.prototype.$reverseText = propertyName => {\n  this[propertyName] = this[propertyName]\n    .split('')\n    .reverse()\n    .join('')\n}\n```\n\nWould throw an error:\n\n```log\nUncaught TypeError: Cannot read property 'split' of undefined\n```\n\n## When To Avoid This Pattern\n\nAs long as you're vigilant in scoping prototype properties, using this pattern is quite safe - as in, unlikely to produce bugs.\n\nHowever, it can sometimes cause confusion with other developers. They might see `this.$http`, for example, and think, \"Oh, I didn't know about this Vue feature!\" Then they move to a different project and are confused when `this.$http` is undefined. Or, maybe they want to Google how to do something, but can't find results because they don't realize they're actually using Axios under an alias.\n\n**The convenience comes at the cost of explicitness.** When looking at a component, it's impossible to tell where `$http` came from. Vue itself? A plugin? A coworker?\n\nSo what are the alternatives?\n\n## Alternative Patterns\n\n### When Not Using a Module System\n\nIn applications with **no** module system (e.g. via Webpack or Browserify), there's a pattern that's often used with _any_ JavaScript-enhanced frontend: a global `App` object.\n\nIf what you want to add has nothing to do with Vue specifically, this may be a good alternative to reach for. Here's an example:\n\n```js\nvar App = Object.freeze({\n  name: 'My App',\n  version: '2.1.4',\n  helpers: {\n    // This is a purely functional version of\n    // the $reverseText method we saw earlier\n    reverseText: function(text) {\n      return text\n        .split('')\n        .reverse()\n        .join('')\n    }\n  }\n})\n```\n\n<p class=\"tip\">If you raised an eyebrow at `Object.freeze`, what it does is prevent the object from being changed in the future. This essentially makes all its properties constants, protecting you from future state bugs.</p>\n\nNow the source of these shared properties is more obvious: there's an `App` object defined somewhere in the app. To find it, developers can run a project-wide search.\n\nAnother advantage is that `App` can now be used _anywhere_ in your code, whether it's Vue-related or not. That includes attaching values directly to instance options, rather than having to enter a function to access properties on `this`:\n\n```js\nnew Vue({\n  data: {\n    appVersion: App.version\n  },\n  methods: {\n    reverseText: App.helpers.reverseText\n  }\n})\n```\n\n### When Using a Module System\n\nWhen you have access to a module system, you can easily organize shared code into modules, then `require`/`import` those modules wherever they're needed. This is the epitome of explicitness, because in each file you gain a list of dependencies. You know _exactly_ where each one came from.\n\nWhile certainly more verbose, this approach is definitely the most maintainable, especially when working with other developers and/or building a large app.\n","date":"2018-07-19T04:04:16.854Z","updated":"2018-07-19T04:04:16.854Z","path":"v2/cookbook/adding-instance-properties.html","comments":1,"layout":"page","_id":"cjk0zidog000fvkrtf1kbuite","content":"<h2 id=\"Base-Example\"><a href=\"#Base-Example\" class=\"headerlink\" title=\"Base Example\"></a>Base Example</h2><p>There may be data/utilities you’d like to use in many components, but you don’t want to <a href=\"https://github.com/getify/You-Dont-Know-JS/blob/master/scope%20%26%20closures/ch3.md\" target=\"_blank\" rel=\"noopener\">pollute the global scope</a>. In these cases, you can make them available to each Vue instance by defining them on the prototype:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">Vue.prototype.$appName = <span class=\"string\">'My App'</span></span><br></pre></td></tr></table></figure>\n<p>Now <code>$appName</code> is available on all Vue instances, even before creation. If we run:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  beforeCreate: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.$appName)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>Then <code>&quot;My App&quot;</code> will be logged to the console!</p>\n<h2 id=\"The-Importance-of-Scoping-Instance-Properties\"><a href=\"#The-Importance-of-Scoping-Instance-Properties\" class=\"headerlink\" title=\"The Importance of Scoping Instance Properties\"></a>The Importance of Scoping Instance Properties</h2><p>You may be wondering:</p>\n<blockquote>\n<p>“Why does <code>appName</code> start with <code>$</code>? Is that important? What does it do?</p>\n</blockquote>\n<p>No magic is happening here. <code>$</code> is a convention Vue uses for properties that are available to all instances. This avoids conflicts with any defined data, computed properties, or methods.</p>\n<blockquote>\n<p>“Conflicts? What do you mean?”</p>\n</blockquote>\n<p>Another great question! If you set:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">Vue.prototype.appName = <span class=\"string\">'My App'</span></span><br></pre></td></tr></table></figure>\n<p>Then what would you expect to be logged below?</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Uh oh - appName is *also* the name of the</span></span><br><span class=\"line\">    <span class=\"comment\">// instance property we defined!</span></span><br><span class=\"line\">    appName: <span class=\"string\">'The name of some other app'</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  beforeCreate: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.appName)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  created: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.appName)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>It would be <code>&quot;My App&quot;</code>, then <code>&quot;The name of some other app&quot;</code>, because <code>this.appName</code> is overwritten (<a href=\"https://github.com/getify/You-Dont-Know-JS/blob/master/this%20%26%20object%20prototypes/ch5.md\" target=\"_blank\" rel=\"noopener\">sort of</a>) by <code>data</code> when the instance is created. We scope instance properties with <code>$</code> to avoid this. You can even use your own convention if you’d like, such as <code>$_appName</code> or <code>ΩappName</code>, to prevent even conflicts with plugins or future features.</p>\n<h2 id=\"Real-World-Example-Replacing-Vue-Resource-with-Axios\"><a href=\"#Real-World-Example-Replacing-Vue-Resource-with-Axios\" class=\"headerlink\" title=\"Real-World Example: Replacing Vue Resource with Axios\"></a>Real-World Example: Replacing Vue Resource with Axios</h2><p>Let’s say you’re replacing the <a href=\"https://medium.com/the-vue-point/retiring-vue-resource-871a82880af4\" target=\"_blank\" rel=\"noopener\">now-retired Vue Resource</a>. You really enjoyed accessing request methods through <code>this.$http</code> and you want to do the same thing with Axios instead.</p>\n<p>All you have to do is include axios in your project:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://cdnjs.cloudflare.com/ajax/libs/axios/0.15.2/axios.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"user in users\"</span>&gt;</span>&#123;&#123; user.name &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>Alias <code>axios</code> to <code>Vue.prototype.$http</code>:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">Vue.prototype.$http = axios</span><br></pre></td></tr></table></figure>\n<p>Then you’ll be able to use methods like <code>this.$http.get</code> in any Vue instance:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  el: <span class=\"string\">'#app'</span>,</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    users: []</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  created() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> vm = <span class=\"keyword\">this</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.$http</span><br><span class=\"line\">      .get(<span class=\"string\">'https://jsonplaceholder.typicode.com/users'</span>)</span><br><span class=\"line\">      .then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">response</span>) </span>&#123;</span><br><span class=\"line\">        vm.users = response.data</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h2 id=\"The-Context-of-Prototype-Methods\"><a href=\"#The-Context-of-Prototype-Methods\" class=\"headerlink\" title=\"The Context of Prototype Methods\"></a>The Context of Prototype Methods</h2><p>In case you’re not aware, methods added to a prototype in JavaScript gain the context of the instance. That means they can use <code>this</code> to access data, computed properties, methods, or anything else defined on the instance.</p>\n<p>Let’s take advantage of this in a <code>$reverseText</code> method:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">Vue.prototype.$reverseText = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">propertyName</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>[propertyName] = <span class=\"keyword\">this</span>[propertyName]</span><br><span class=\"line\">    .split(<span class=\"string\">''</span>)</span><br><span class=\"line\">    .reverse()</span><br><span class=\"line\">    .join(<span class=\"string\">''</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    message: <span class=\"string\">'Hello'</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  created: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.message) <span class=\"comment\">// =&gt; \"Hello\"</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.$reverseText(<span class=\"string\">'message'</span>)</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.message) <span class=\"comment\">// =&gt; \"olleH\"</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>Note that the context binding will <strong>not</strong> work if you use an ES6/2015 arrow function, as they implicitly bind to their parent scope. That means the arrow function version:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">Vue.prototype.$reverseText = <span class=\"function\"><span class=\"params\">propertyName</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>[propertyName] = <span class=\"keyword\">this</span>[propertyName]</span><br><span class=\"line\">    .split(<span class=\"string\">''</span>)</span><br><span class=\"line\">    .reverse()</span><br><span class=\"line\">    .join(<span class=\"string\">''</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Would throw an error:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">Uncaught TypeError: Cannot read property &apos;split&apos; of undefined</span><br></pre></td></tr></table></figure>\n<h2 id=\"When-To-Avoid-This-Pattern\"><a href=\"#When-To-Avoid-This-Pattern\" class=\"headerlink\" title=\"When To Avoid This Pattern\"></a>When To Avoid This Pattern</h2><p>As long as you’re vigilant in scoping prototype properties, using this pattern is quite safe - as in, unlikely to produce bugs.</p>\n<p>However, it can sometimes cause confusion with other developers. They might see <code>this.$http</code>, for example, and think, “Oh, I didn’t know about this Vue feature!” Then they move to a different project and are confused when <code>this.$http</code> is undefined. Or, maybe they want to Google how to do something, but can’t find results because they don’t realize they’re actually using Axios under an alias.</p>\n<p><strong>The convenience comes at the cost of explicitness.</strong> When looking at a component, it’s impossible to tell where <code>$http</code> came from. Vue itself? A plugin? A coworker?</p>\n<p>So what are the alternatives?</p>\n<h2 id=\"Alternative-Patterns\"><a href=\"#Alternative-Patterns\" class=\"headerlink\" title=\"Alternative Patterns\"></a>Alternative Patterns</h2><h3 id=\"When-Not-Using-a-Module-System\"><a href=\"#When-Not-Using-a-Module-System\" class=\"headerlink\" title=\"When Not Using a Module System\"></a>When Not Using a Module System</h3><p>In applications with <strong>no</strong> module system (e.g. via Webpack or Browserify), there’s a pattern that’s often used with <em>any</em> JavaScript-enhanced frontend: a global <code>App</code> object.</p>\n<p>If what you want to add has nothing to do with Vue specifically, this may be a good alternative to reach for. Here’s an example:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> App = <span class=\"built_in\">Object</span>.freeze(&#123;</span><br><span class=\"line\">  name: <span class=\"string\">'My App'</span>,</span><br><span class=\"line\">  version: <span class=\"string\">'2.1.4'</span>,</span><br><span class=\"line\">  helpers: &#123;</span><br><span class=\"line\">    <span class=\"comment\">// This is a purely functional version of</span></span><br><span class=\"line\">    <span class=\"comment\">// the $reverseText method we saw earlier</span></span><br><span class=\"line\">    reverseText: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">text</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> text</span><br><span class=\"line\">        .split(<span class=\"string\">''</span>)</span><br><span class=\"line\">        .reverse()</span><br><span class=\"line\">        .join(<span class=\"string\">''</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p class=\"tip\">If you raised an eyebrow at <code>Object.freeze</code>, what it does is prevent the object from being changed in the future. This essentially makes all its properties constants, protecting you from future state bugs.</p>\n\n<p>Now the source of these shared properties is more obvious: there’s an <code>App</code> object defined somewhere in the app. To find it, developers can run a project-wide search.</p>\n<p>Another advantage is that <code>App</code> can now be used <em>anywhere</em> in your code, whether it’s Vue-related or not. That includes attaching values directly to instance options, rather than having to enter a function to access properties on <code>this</code>:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    appVersion: App.version</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    reverseText: App.helpers.reverseText</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"When-Using-a-Module-System\"><a href=\"#When-Using-a-Module-System\" class=\"headerlink\" title=\"When Using a Module System\"></a>When Using a Module System</h3><p>When you have access to a module system, you can easily organize shared code into modules, then <code>require</code>/<code>import</code> those modules wherever they’re needed. This is the epitome of explicitness, because in each file you gain a list of dependencies. You know <em>exactly</em> where each one came from.</p>\n<p>While certainly more verbose, this approach is definitely the most maintainable, especially when working with other developers and/or building a large app.</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Base-Example\"><a href=\"#Base-Example\" class=\"headerlink\" title=\"Base Example\"></a>Base Example</h2><p>There may be data/utilities you’d like to use in many components, but you don’t want to <a href=\"https://github.com/getify/You-Dont-Know-JS/blob/master/scope%20%26%20closures/ch3.md\" target=\"_blank\" rel=\"noopener\">pollute the global scope</a>. In these cases, you can make them available to each Vue instance by defining them on the prototype:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">Vue.prototype.$appName = <span class=\"string\">'My App'</span></span><br></pre></td></tr></table></figure>\n<p>Now <code>$appName</code> is available on all Vue instances, even before creation. If we run:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  beforeCreate: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.$appName)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>Then <code>&quot;My App&quot;</code> will be logged to the console!</p>\n<h2 id=\"The-Importance-of-Scoping-Instance-Properties\"><a href=\"#The-Importance-of-Scoping-Instance-Properties\" class=\"headerlink\" title=\"The Importance of Scoping Instance Properties\"></a>The Importance of Scoping Instance Properties</h2><p>You may be wondering:</p>\n<blockquote>\n<p>“Why does <code>appName</code> start with <code>$</code>? Is that important? What does it do?</p>\n</blockquote>\n<p>No magic is happening here. <code>$</code> is a convention Vue uses for properties that are available to all instances. This avoids conflicts with any defined data, computed properties, or methods.</p>\n<blockquote>\n<p>“Conflicts? What do you mean?”</p>\n</blockquote>\n<p>Another great question! If you set:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">Vue.prototype.appName = <span class=\"string\">'My App'</span></span><br></pre></td></tr></table></figure>\n<p>Then what would you expect to be logged below?</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Uh oh - appName is *also* the name of the</span></span><br><span class=\"line\">    <span class=\"comment\">// instance property we defined!</span></span><br><span class=\"line\">    appName: <span class=\"string\">'The name of some other app'</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  beforeCreate: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.appName)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  created: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.appName)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>It would be <code>&quot;My App&quot;</code>, then <code>&quot;The name of some other app&quot;</code>, because <code>this.appName</code> is overwritten (<a href=\"https://github.com/getify/You-Dont-Know-JS/blob/master/this%20%26%20object%20prototypes/ch5.md\" target=\"_blank\" rel=\"noopener\">sort of</a>) by <code>data</code> when the instance is created. We scope instance properties with <code>$</code> to avoid this. You can even use your own convention if you’d like, such as <code>$_appName</code> or <code>ΩappName</code>, to prevent even conflicts with plugins or future features.</p>\n<h2 id=\"Real-World-Example-Replacing-Vue-Resource-with-Axios\"><a href=\"#Real-World-Example-Replacing-Vue-Resource-with-Axios\" class=\"headerlink\" title=\"Real-World Example: Replacing Vue Resource with Axios\"></a>Real-World Example: Replacing Vue Resource with Axios</h2><p>Let’s say you’re replacing the <a href=\"https://medium.com/the-vue-point/retiring-vue-resource-871a82880af4\" target=\"_blank\" rel=\"noopener\">now-retired Vue Resource</a>. You really enjoyed accessing request methods through <code>this.$http</code> and you want to do the same thing with Axios instead.</p>\n<p>All you have to do is include axios in your project:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://cdnjs.cloudflare.com/ajax/libs/axios/0.15.2/axios.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"user in users\"</span>&gt;</span>&#123;&#123; user.name &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>Alias <code>axios</code> to <code>Vue.prototype.$http</code>:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">Vue.prototype.$http = axios</span><br></pre></td></tr></table></figure>\n<p>Then you’ll be able to use methods like <code>this.$http.get</code> in any Vue instance:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  el: <span class=\"string\">'#app'</span>,</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    users: []</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  created() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> vm = <span class=\"keyword\">this</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.$http</span><br><span class=\"line\">      .get(<span class=\"string\">'https://jsonplaceholder.typicode.com/users'</span>)</span><br><span class=\"line\">      .then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">response</span>) </span>&#123;</span><br><span class=\"line\">        vm.users = response.data</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h2 id=\"The-Context-of-Prototype-Methods\"><a href=\"#The-Context-of-Prototype-Methods\" class=\"headerlink\" title=\"The Context of Prototype Methods\"></a>The Context of Prototype Methods</h2><p>In case you’re not aware, methods added to a prototype in JavaScript gain the context of the instance. That means they can use <code>this</code> to access data, computed properties, methods, or anything else defined on the instance.</p>\n<p>Let’s take advantage of this in a <code>$reverseText</code> method:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">Vue.prototype.$reverseText = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">propertyName</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>[propertyName] = <span class=\"keyword\">this</span>[propertyName]</span><br><span class=\"line\">    .split(<span class=\"string\">''</span>)</span><br><span class=\"line\">    .reverse()</span><br><span class=\"line\">    .join(<span class=\"string\">''</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    message: <span class=\"string\">'Hello'</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  created: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.message) <span class=\"comment\">// =&gt; \"Hello\"</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.$reverseText(<span class=\"string\">'message'</span>)</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.message) <span class=\"comment\">// =&gt; \"olleH\"</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>Note that the context binding will <strong>not</strong> work if you use an ES6/2015 arrow function, as they implicitly bind to their parent scope. That means the arrow function version:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">Vue.prototype.$reverseText = <span class=\"function\"><span class=\"params\">propertyName</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>[propertyName] = <span class=\"keyword\">this</span>[propertyName]</span><br><span class=\"line\">    .split(<span class=\"string\">''</span>)</span><br><span class=\"line\">    .reverse()</span><br><span class=\"line\">    .join(<span class=\"string\">''</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Would throw an error:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">Uncaught TypeError: Cannot read property &apos;split&apos; of undefined</span><br></pre></td></tr></table></figure>\n<h2 id=\"When-To-Avoid-This-Pattern\"><a href=\"#When-To-Avoid-This-Pattern\" class=\"headerlink\" title=\"When To Avoid This Pattern\"></a>When To Avoid This Pattern</h2><p>As long as you’re vigilant in scoping prototype properties, using this pattern is quite safe - as in, unlikely to produce bugs.</p>\n<p>However, it can sometimes cause confusion with other developers. They might see <code>this.$http</code>, for example, and think, “Oh, I didn’t know about this Vue feature!” Then they move to a different project and are confused when <code>this.$http</code> is undefined. Or, maybe they want to Google how to do something, but can’t find results because they don’t realize they’re actually using Axios under an alias.</p>\n<p><strong>The convenience comes at the cost of explicitness.</strong> When looking at a component, it’s impossible to tell where <code>$http</code> came from. Vue itself? A plugin? A coworker?</p>\n<p>So what are the alternatives?</p>\n<h2 id=\"Alternative-Patterns\"><a href=\"#Alternative-Patterns\" class=\"headerlink\" title=\"Alternative Patterns\"></a>Alternative Patterns</h2><h3 id=\"When-Not-Using-a-Module-System\"><a href=\"#When-Not-Using-a-Module-System\" class=\"headerlink\" title=\"When Not Using a Module System\"></a>When Not Using a Module System</h3><p>In applications with <strong>no</strong> module system (e.g. via Webpack or Browserify), there’s a pattern that’s often used with <em>any</em> JavaScript-enhanced frontend: a global <code>App</code> object.</p>\n<p>If what you want to add has nothing to do with Vue specifically, this may be a good alternative to reach for. Here’s an example:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> App = <span class=\"built_in\">Object</span>.freeze(&#123;</span><br><span class=\"line\">  name: <span class=\"string\">'My App'</span>,</span><br><span class=\"line\">  version: <span class=\"string\">'2.1.4'</span>,</span><br><span class=\"line\">  helpers: &#123;</span><br><span class=\"line\">    <span class=\"comment\">// This is a purely functional version of</span></span><br><span class=\"line\">    <span class=\"comment\">// the $reverseText method we saw earlier</span></span><br><span class=\"line\">    reverseText: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">text</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> text</span><br><span class=\"line\">        .split(<span class=\"string\">''</span>)</span><br><span class=\"line\">        .reverse()</span><br><span class=\"line\">        .join(<span class=\"string\">''</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p class=\"tip\">If you raised an eyebrow at <code>Object.freeze</code>, what it does is prevent the object from being changed in the future. This essentially makes all its properties constants, protecting you from future state bugs.</p>\n\n<p>Now the source of these shared properties is more obvious: there’s an <code>App</code> object defined somewhere in the app. To find it, developers can run a project-wide search.</p>\n<p>Another advantage is that <code>App</code> can now be used <em>anywhere</em> in your code, whether it’s Vue-related or not. That includes attaching values directly to instance options, rather than having to enter a function to access properties on <code>this</code>:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    appVersion: App.version</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    reverseText: App.helpers.reverseText</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"When-Using-a-Module-System\"><a href=\"#When-Using-a-Module-System\" class=\"headerlink\" title=\"When Using a Module System\"></a>When Using a Module System</h3><p>When you have access to a module system, you can easily organize shared code into modules, then <code>require</code>/<code>import</code> those modules wherever they’re needed. This is the epitome of explicitness, because in each file you gain a list of dependencies. You know <em>exactly</em> where each one came from.</p>\n<p>While certainly more verbose, this approach is definitely the most maintainable, especially when working with other developers and/or building a large app.</p>\n"},{"title":"Creating Custom Scroll Directives","type":"cookbook","order":7,"_content":"\n## Base Example\n\nThere are many times that we might want to add a bit of behavior, especially animation, to a scroll event on a site. There are many ways to do so, but the path with the least amount of code and dependencies is perhaps to use a [custom directive](https://vuejs.org/v2/guide/custom-directive.html) to create a hook for anything that fires off a particular scroll event.\n\n```js\nVue.directive('scroll', {\n  inserted: function (el, binding) {\n    let f = function (evt) {\n      if (binding.value(evt, el)) {\n        window.removeEventListener('scroll', f)\n      }\n    }\n    window.addEventListener('scroll', f)\n  }\n})\n\n// main app\nnew Vue({\n  el: '#app',\n  methods: {\n    handleScroll: function (evt, el) {\n      if (window.scrollY > 50) {\n        el.setAttribute(\n          'style',\n          'opacity: 1; transform: translate3d(0, -10px, 0)'\n        )\n      }\n      return window.scrollY > 100\n    }\n  }\n})\n```\n\n```html\n<div id=\"app\">\n  <h1 class=\"centered\">Scroll me</h1>\n  <div class=\"box\" v-scroll=\"handleScroll\">\n    <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit. A atque amet harum aut ab veritatis earum porro praesentium ut corporis. Quasi provident dolorem officia iure fugiat, eius mollitia sequi quisquam.</p>\n  </div>\n</div>\n```\n\n<p class=\"tip\">Remember! The directive must be registered before the Vue instance.</p>\n\nWe'd also need a style property that will transition the intermediary values here, in this case:\n\n```css\n.box {\n  transition: 1.5s all cubic-bezier(0.39, 0.575, 0.565, 1);\n}\n```\n\n<p data-height=\"450\" data-theme-id=\"5162\" data-slug-hash=\"983220ed949ac670dff96bdcaf9d3338\" data-default-tab=\"result\" data-user=\"sdras\" data-embed-version=\"2\" data-pen-title=\"Custom Scroll Directive- CSS Transition\" class=\"codepen\">See the Pen <a href=\"https://codepen.io/sdras/pen/983220ed949ac670dff96bdcaf9d3338/\">Custom Scroll Directive- CSS Transition</a> by Sarah Drasner (<a href=\"https://codepen.io/sdras\">@sdras</a>) on <a href=\"https://codepen.io\">CodePen</a>.</p>\n<script async src=\"https://static.codepen.io/assets/embed/ei.js\"></script>\n\nOr, with GreenSock(GSAP) or any other JavaScript animation library, the code becomes even more simple:\n\n```js\nVue.directive('scroll', {\n  inserted: function (el, binding) {\n    let f = function (evt) {\n      if (binding.value(evt, el)) {\n        window.removeEventListener('scroll', f)\n      }\n    }\n    window.addEventListener('scroll', f)\n  }\n})\n\n// main app\nnew Vue({\n  el: '#app',\n  methods: {\n    handleScroll: function (evt, el) {\n      if (window.scrollY > 50) {\n        TweenMax.to(el, 1.5, {\n          y: -10,\n          opacity: 1,\n          ease: Sine.easeOut\n        })\n      }\n      return window.scrollY > 100\n    }\n  }\n})\n```\n\nThough we would remove the previous CSS transition from this implementation because it's now handled with JavaScript.\n\n## The Benefit of Using Custom Directives\n\nVue is rich with options for directives, most of which cover very common use-cases, which can create a very productive developer experience. But even if you have an edge case not covered by the framework, it's got you covered in this case as well, because you can quite easily create a custom directive to fit your needs.\n\nAttaching and removing scroll events to elements is a really good use case for this technique because just like other directives we use, they are necessarily tied to the element and otherwise, we'd have to find the reference for it in the DOM. This pattern avoids the need for traversal, and keeps the event logic paired with the node that it's in reference to.\n\n## Real-World Example: Using a Custom Scroll Directive for Cascading Animations\n\nIn the course of creating a cohesive site, you may find that you're reusing the same type of animation logic in several areas. It seems simple, we would then create a very specific custom directive, right? Well, typically if you're reusing it, you will need to change it _just_ slightly for each use.\n\nTo help keep our code concise and legible, we would want to pass in some predefined arguments such as the beginning point and ending of the animation as we scroll down the page.\n\n**This example is better viewed in the [full screen version](https://s.codepen.io/sdras/debug/078c19f5b3ed7f7d28584da450296cd0).**\n\n<p data-height=\"500\" data-theme-id=\"5162\" data-slug-hash=\"c8c55e3e0bba997350551dd747119100\" data-default-tab=\"result\" data-user=\"sdras\" data-embed-version=\"2\" data-pen-title=\"Scrolling Example- Using Custom Directives in Vue\" class=\"codepen\">See the Pen <a href=\"https://codepen.io/sdras/pen/c8c55e3e0bba997350551dd747119100/\">Scrolling Example- Using Custom Directives in Vue</a> by Sarah Drasner (<a href=\"https://codepen.io/sdras\">@sdras</a>) on <a href=\"https://codepen.io\">CodePen</a>.</p>\n<script async src=\"https://static.codepen.io/assets/embed/ei.js\"></script>\n\nIn the demo above, each of the sections has two different types of animation triggered from the scroll: a morphing animation, and a drawing animation that animates the individual paths in the SVG. We reuse those two animations, so we can create a custom directive for each. The arguments we'll pass in will help keep everything simple and reusable.\n\nTo show how we do this, we'll take a look at the morphing shape example, where we'll need to state the start and finish, as well as pass in a path value that we'll create a morph to. These arguments are each defined as `binding.value.foo`:\n\n```js\nVue.directive('clipscroll', {\n  inserted: function (el, binding) {\n    let f = function (evt) {\n      var hasRun = false\n      if (!hasRun && window.scrollY > binding.value.start) {\n        hasRun = true\n        TweenMax.to(el, 2, {\n          morphSVG: binding.value.toPath,\n          ease: Sine.easeIn\n        })\n      }\n      if (window.scrollY > binding.value.end) {\n        window.removeEventListener('scroll', f)\n      }\n    }\n    window.addEventListener('scroll', f)\n  }\n})\n```\n\nWe can then use this animation in our template, in this case we're attaching the directive to the `clipPath` element, and pass all of our arguments to the directives in an object.\n\n```html\n<clipPath id=\"clip-path\">\n  <path\n    v-clipscroll=\"{ start: '50', end: '100', toPath: 'M0.39 0.34H15.99V22.44H0.39z' }\"\n    id=\"poly-shapemorph\"\n    d=\"M12.46 20.76L7.34 22.04 3.67 18.25 5.12 13.18 10.24 11.9 13.91 15.69 12.46 20.76z\"\n  />\n</clipPath>\n```\n\n## Alternative Patterns\n\nCustom directives are extremely useful, but you may find some situations where you need something very specific that already exists in scrolling libraries that you don't wish to rebuild from scratch yourself.\n\n[Scrollmagic](http://scrollmagic.io/) has a very rich ecosystem of offerings to work with, as well as good documentation and demos to explore. This includes, but is not limited to things like [parallax](http://scrollmagic.io/examples/advanced/parallax_scrolling.html), [cascading pinning](http://scrollmagic.io/examples/expert/cascading_pins.html), [section wipes](http://scrollmagic.io/examples/basic/section_wipes_natural.html), and [responsive duration](http://scrollmagic.io/examples/basic/responsive_duration.html).\n","source":"v2/cookbook/creating-custom-scroll-directives.md","raw":"---\ntitle: Creating Custom Scroll Directives\ntype: cookbook\norder: 7\n---\n\n## Base Example\n\nThere are many times that we might want to add a bit of behavior, especially animation, to a scroll event on a site. There are many ways to do so, but the path with the least amount of code and dependencies is perhaps to use a [custom directive](https://vuejs.org/v2/guide/custom-directive.html) to create a hook for anything that fires off a particular scroll event.\n\n```js\nVue.directive('scroll', {\n  inserted: function (el, binding) {\n    let f = function (evt) {\n      if (binding.value(evt, el)) {\n        window.removeEventListener('scroll', f)\n      }\n    }\n    window.addEventListener('scroll', f)\n  }\n})\n\n// main app\nnew Vue({\n  el: '#app',\n  methods: {\n    handleScroll: function (evt, el) {\n      if (window.scrollY > 50) {\n        el.setAttribute(\n          'style',\n          'opacity: 1; transform: translate3d(0, -10px, 0)'\n        )\n      }\n      return window.scrollY > 100\n    }\n  }\n})\n```\n\n```html\n<div id=\"app\">\n  <h1 class=\"centered\">Scroll me</h1>\n  <div class=\"box\" v-scroll=\"handleScroll\">\n    <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit. A atque amet harum aut ab veritatis earum porro praesentium ut corporis. Quasi provident dolorem officia iure fugiat, eius mollitia sequi quisquam.</p>\n  </div>\n</div>\n```\n\n<p class=\"tip\">Remember! The directive must be registered before the Vue instance.</p>\n\nWe'd also need a style property that will transition the intermediary values here, in this case:\n\n```css\n.box {\n  transition: 1.5s all cubic-bezier(0.39, 0.575, 0.565, 1);\n}\n```\n\n<p data-height=\"450\" data-theme-id=\"5162\" data-slug-hash=\"983220ed949ac670dff96bdcaf9d3338\" data-default-tab=\"result\" data-user=\"sdras\" data-embed-version=\"2\" data-pen-title=\"Custom Scroll Directive- CSS Transition\" class=\"codepen\">See the Pen <a href=\"https://codepen.io/sdras/pen/983220ed949ac670dff96bdcaf9d3338/\">Custom Scroll Directive- CSS Transition</a> by Sarah Drasner (<a href=\"https://codepen.io/sdras\">@sdras</a>) on <a href=\"https://codepen.io\">CodePen</a>.</p>\n<script async src=\"https://static.codepen.io/assets/embed/ei.js\"></script>\n\nOr, with GreenSock(GSAP) or any other JavaScript animation library, the code becomes even more simple:\n\n```js\nVue.directive('scroll', {\n  inserted: function (el, binding) {\n    let f = function (evt) {\n      if (binding.value(evt, el)) {\n        window.removeEventListener('scroll', f)\n      }\n    }\n    window.addEventListener('scroll', f)\n  }\n})\n\n// main app\nnew Vue({\n  el: '#app',\n  methods: {\n    handleScroll: function (evt, el) {\n      if (window.scrollY > 50) {\n        TweenMax.to(el, 1.5, {\n          y: -10,\n          opacity: 1,\n          ease: Sine.easeOut\n        })\n      }\n      return window.scrollY > 100\n    }\n  }\n})\n```\n\nThough we would remove the previous CSS transition from this implementation because it's now handled with JavaScript.\n\n## The Benefit of Using Custom Directives\n\nVue is rich with options for directives, most of which cover very common use-cases, which can create a very productive developer experience. But even if you have an edge case not covered by the framework, it's got you covered in this case as well, because you can quite easily create a custom directive to fit your needs.\n\nAttaching and removing scroll events to elements is a really good use case for this technique because just like other directives we use, they are necessarily tied to the element and otherwise, we'd have to find the reference for it in the DOM. This pattern avoids the need for traversal, and keeps the event logic paired with the node that it's in reference to.\n\n## Real-World Example: Using a Custom Scroll Directive for Cascading Animations\n\nIn the course of creating a cohesive site, you may find that you're reusing the same type of animation logic in several areas. It seems simple, we would then create a very specific custom directive, right? Well, typically if you're reusing it, you will need to change it _just_ slightly for each use.\n\nTo help keep our code concise and legible, we would want to pass in some predefined arguments such as the beginning point and ending of the animation as we scroll down the page.\n\n**This example is better viewed in the [full screen version](https://s.codepen.io/sdras/debug/078c19f5b3ed7f7d28584da450296cd0).**\n\n<p data-height=\"500\" data-theme-id=\"5162\" data-slug-hash=\"c8c55e3e0bba997350551dd747119100\" data-default-tab=\"result\" data-user=\"sdras\" data-embed-version=\"2\" data-pen-title=\"Scrolling Example- Using Custom Directives in Vue\" class=\"codepen\">See the Pen <a href=\"https://codepen.io/sdras/pen/c8c55e3e0bba997350551dd747119100/\">Scrolling Example- Using Custom Directives in Vue</a> by Sarah Drasner (<a href=\"https://codepen.io/sdras\">@sdras</a>) on <a href=\"https://codepen.io\">CodePen</a>.</p>\n<script async src=\"https://static.codepen.io/assets/embed/ei.js\"></script>\n\nIn the demo above, each of the sections has two different types of animation triggered from the scroll: a morphing animation, and a drawing animation that animates the individual paths in the SVG. We reuse those two animations, so we can create a custom directive for each. The arguments we'll pass in will help keep everything simple and reusable.\n\nTo show how we do this, we'll take a look at the morphing shape example, where we'll need to state the start and finish, as well as pass in a path value that we'll create a morph to. These arguments are each defined as `binding.value.foo`:\n\n```js\nVue.directive('clipscroll', {\n  inserted: function (el, binding) {\n    let f = function (evt) {\n      var hasRun = false\n      if (!hasRun && window.scrollY > binding.value.start) {\n        hasRun = true\n        TweenMax.to(el, 2, {\n          morphSVG: binding.value.toPath,\n          ease: Sine.easeIn\n        })\n      }\n      if (window.scrollY > binding.value.end) {\n        window.removeEventListener('scroll', f)\n      }\n    }\n    window.addEventListener('scroll', f)\n  }\n})\n```\n\nWe can then use this animation in our template, in this case we're attaching the directive to the `clipPath` element, and pass all of our arguments to the directives in an object.\n\n```html\n<clipPath id=\"clip-path\">\n  <path\n    v-clipscroll=\"{ start: '50', end: '100', toPath: 'M0.39 0.34H15.99V22.44H0.39z' }\"\n    id=\"poly-shapemorph\"\n    d=\"M12.46 20.76L7.34 22.04 3.67 18.25 5.12 13.18 10.24 11.9 13.91 15.69 12.46 20.76z\"\n  />\n</clipPath>\n```\n\n## Alternative Patterns\n\nCustom directives are extremely useful, but you may find some situations where you need something very specific that already exists in scrolling libraries that you don't wish to rebuild from scratch yourself.\n\n[Scrollmagic](http://scrollmagic.io/) has a very rich ecosystem of offerings to work with, as well as good documentation and demos to explore. This includes, but is not limited to things like [parallax](http://scrollmagic.io/examples/advanced/parallax_scrolling.html), [cascading pinning](http://scrollmagic.io/examples/expert/cascading_pins.html), [section wipes](http://scrollmagic.io/examples/basic/section_wipes_natural.html), and [responsive duration](http://scrollmagic.io/examples/basic/responsive_duration.html).\n","date":"2018-07-19T04:04:16.855Z","updated":"2018-07-19T04:04:16.855Z","path":"v2/cookbook/creating-custom-scroll-directives.html","comments":1,"layout":"page","_id":"cjk0zidog000gvkrtsyi7q047","content":"<h2 id=\"Base-Example\"><a href=\"#Base-Example\" class=\"headerlink\" title=\"Base Example\"></a>Base Example</h2><p>There are many times that we might want to add a bit of behavior, especially animation, to a scroll event on a site. There are many ways to do so, but the path with the least amount of code and dependencies is perhaps to use a <a href=\"https://vuejs.org/v2/guide/custom-directive.html\">custom directive</a> to create a hook for anything that fires off a particular scroll event.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">Vue.directive(<span class=\"string\">'scroll'</span>, &#123;</span><br><span class=\"line\">  inserted: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">el, binding</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> f = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">evt</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (binding.value(evt, el)) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">window</span>.removeEventListener(<span class=\"string\">'scroll'</span>, f)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">window</span>.addEventListener(<span class=\"string\">'scroll'</span>, f)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// main app</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  el: <span class=\"string\">'#app'</span>,</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    handleScroll: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">evt, el</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"built_in\">window</span>.scrollY &gt; <span class=\"number\">50</span>) &#123;</span><br><span class=\"line\">        el.setAttribute(</span><br><span class=\"line\">          <span class=\"string\">'style'</span>,</span><br><span class=\"line\">          <span class=\"string\">'opacity: 1; transform: translate3d(0, -10px, 0)'</span></span><br><span class=\"line\">        )</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"built_in\">window</span>.scrollY &gt; <span class=\"number\">100</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h1</span> <span class=\"attr\">class</span>=<span class=\"string\">\"centered\"</span>&gt;</span>Scroll me<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box\"</span> <span class=\"attr\">v-scroll</span>=<span class=\"string\">\"handleScroll\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Lorem ipsum dolor sit amet, consectetur adipisicing elit. A atque amet harum aut ab veritatis earum porro praesentium ut corporis. Quasi provident dolorem officia iure fugiat, eius mollitia sequi quisquam.<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p class=\"tip\">Remember! The directive must be registered before the Vue instance.</p>\n\n<p>We’d also need a style property that will transition the intermediary values here, in this case:</p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">transition</span>: <span class=\"number\">1.5s</span> all <span class=\"built_in\">cubic-bezier</span>(0.39, 0.575, 0.565, 1);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p></p><p data-height=\"450\" data-theme-id=\"5162\" data-slug-hash=\"983220ed949ac670dff96bdcaf9d3338\" data-default-tab=\"result\" data-user=\"sdras\" data-embed-version=\"2\" data-pen-title=\"Custom Scroll Directive- CSS Transition\" class=\"codepen\">See the Pen <a href=\"https://codepen.io/sdras/pen/983220ed949ac670dff96bdcaf9d3338/\" target=\"_blank\" rel=\"noopener\">Custom Scroll Directive- CSS Transition</a> by Sarah Drasner (<a href=\"https://codepen.io/sdras\" target=\"_blank\" rel=\"noopener\">@sdras</a>) on <a href=\"https://codepen.io\" target=\"_blank\" rel=\"noopener\">CodePen</a>.</p><p></p>\n<script async src=\"https://static.codepen.io/assets/embed/ei.js\"></script>\n\n<p>Or, with GreenSock(GSAP) or any other JavaScript animation library, the code becomes even more simple:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">Vue.directive(<span class=\"string\">'scroll'</span>, &#123;</span><br><span class=\"line\">  inserted: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">el, binding</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> f = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">evt</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (binding.value(evt, el)) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">window</span>.removeEventListener(<span class=\"string\">'scroll'</span>, f)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">window</span>.addEventListener(<span class=\"string\">'scroll'</span>, f)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// main app</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  el: <span class=\"string\">'#app'</span>,</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    handleScroll: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">evt, el</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"built_in\">window</span>.scrollY &gt; <span class=\"number\">50</span>) &#123;</span><br><span class=\"line\">        TweenMax.to(el, <span class=\"number\">1.5</span>, &#123;</span><br><span class=\"line\">          y: <span class=\"number\">-10</span>,</span><br><span class=\"line\">          opacity: <span class=\"number\">1</span>,</span><br><span class=\"line\">          ease: Sine.easeOut</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"built_in\">window</span>.scrollY &gt; <span class=\"number\">100</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>Though we would remove the previous CSS transition from this implementation because it’s now handled with JavaScript.</p>\n<h2 id=\"The-Benefit-of-Using-Custom-Directives\"><a href=\"#The-Benefit-of-Using-Custom-Directives\" class=\"headerlink\" title=\"The Benefit of Using Custom Directives\"></a>The Benefit of Using Custom Directives</h2><p>Vue is rich with options for directives, most of which cover very common use-cases, which can create a very productive developer experience. But even if you have an edge case not covered by the framework, it’s got you covered in this case as well, because you can quite easily create a custom directive to fit your needs.</p>\n<p>Attaching and removing scroll events to elements is a really good use case for this technique because just like other directives we use, they are necessarily tied to the element and otherwise, we’d have to find the reference for it in the DOM. This pattern avoids the need for traversal, and keeps the event logic paired with the node that it’s in reference to.</p>\n<h2 id=\"Real-World-Example-Using-a-Custom-Scroll-Directive-for-Cascading-Animations\"><a href=\"#Real-World-Example-Using-a-Custom-Scroll-Directive-for-Cascading-Animations\" class=\"headerlink\" title=\"Real-World Example: Using a Custom Scroll Directive for Cascading Animations\"></a>Real-World Example: Using a Custom Scroll Directive for Cascading Animations</h2><p>In the course of creating a cohesive site, you may find that you’re reusing the same type of animation logic in several areas. It seems simple, we would then create a very specific custom directive, right? Well, typically if you’re reusing it, you will need to change it <em>just</em> slightly for each use.</p>\n<p>To help keep our code concise and legible, we would want to pass in some predefined arguments such as the beginning point and ending of the animation as we scroll down the page.</p>\n<p><strong>This example is better viewed in the <a href=\"https://s.codepen.io/sdras/debug/078c19f5b3ed7f7d28584da450296cd0\" target=\"_blank\" rel=\"noopener\">full screen version</a>.</strong></p>\n<p></p><p data-height=\"500\" data-theme-id=\"5162\" data-slug-hash=\"c8c55e3e0bba997350551dd747119100\" data-default-tab=\"result\" data-user=\"sdras\" data-embed-version=\"2\" data-pen-title=\"Scrolling Example- Using Custom Directives in Vue\" class=\"codepen\">See the Pen <a href=\"https://codepen.io/sdras/pen/c8c55e3e0bba997350551dd747119100/\" target=\"_blank\" rel=\"noopener\">Scrolling Example- Using Custom Directives in Vue</a> by Sarah Drasner (<a href=\"https://codepen.io/sdras\" target=\"_blank\" rel=\"noopener\">@sdras</a>) on <a href=\"https://codepen.io\" target=\"_blank\" rel=\"noopener\">CodePen</a>.</p><p></p>\n<script async src=\"https://static.codepen.io/assets/embed/ei.js\"></script>\n\n<p>In the demo above, each of the sections has two different types of animation triggered from the scroll: a morphing animation, and a drawing animation that animates the individual paths in the SVG. We reuse those two animations, so we can create a custom directive for each. The arguments we’ll pass in will help keep everything simple and reusable.</p>\n<p>To show how we do this, we’ll take a look at the morphing shape example, where we’ll need to state the start and finish, as well as pass in a path value that we’ll create a morph to. These arguments are each defined as <code>binding.value.foo</code>:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">Vue.directive(<span class=\"string\">'clipscroll'</span>, &#123;</span><br><span class=\"line\">  inserted: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">el, binding</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> f = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">evt</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> hasRun = <span class=\"literal\">false</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!hasRun &amp;&amp; <span class=\"built_in\">window</span>.scrollY &gt; binding.value.start) &#123;</span><br><span class=\"line\">        hasRun = <span class=\"literal\">true</span></span><br><span class=\"line\">        TweenMax.to(el, <span class=\"number\">2</span>, &#123;</span><br><span class=\"line\">          morphSVG: binding.value.toPath,</span><br><span class=\"line\">          ease: Sine.easeIn</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"built_in\">window</span>.scrollY &gt; binding.value.end) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">window</span>.removeEventListener(<span class=\"string\">'scroll'</span>, f)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">window</span>.addEventListener(<span class=\"string\">'scroll'</span>, f)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>We can then use this animation in our template, in this case we’re attaching the directive to the <code>clipPath</code> element, and pass all of our arguments to the directives in an object.</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">clipPath</span> <span class=\"attr\">id</span>=<span class=\"string\">\"clip-path\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">path</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">v-clipscroll</span>=<span class=\"string\">\"&#123; start: '50', end: '100', toPath: 'M0.39 0.34H15.99V22.44H0.39z' &#125;\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">id</span>=<span class=\"string\">\"poly-shapemorph\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">d</span>=<span class=\"string\">\"M12.46 20.76L7.34 22.04 3.67 18.25 5.12 13.18 10.24 11.9 13.91 15.69 12.46 20.76z\"</span></span></span><br><span class=\"line\"><span class=\"tag\">  /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">clipPath</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"Alternative-Patterns\"><a href=\"#Alternative-Patterns\" class=\"headerlink\" title=\"Alternative Patterns\"></a>Alternative Patterns</h2><p>Custom directives are extremely useful, but you may find some situations where you need something very specific that already exists in scrolling libraries that you don’t wish to rebuild from scratch yourself.</p>\n<p><a href=\"http://scrollmagic.io/\" target=\"_blank\" rel=\"noopener\">Scrollmagic</a> has a very rich ecosystem of offerings to work with, as well as good documentation and demos to explore. This includes, but is not limited to things like <a href=\"http://scrollmagic.io/examples/advanced/parallax_scrolling.html\" target=\"_blank\" rel=\"noopener\">parallax</a>, <a href=\"http://scrollmagic.io/examples/expert/cascading_pins.html\" target=\"_blank\" rel=\"noopener\">cascading pinning</a>, <a href=\"http://scrollmagic.io/examples/basic/section_wipes_natural.html\" target=\"_blank\" rel=\"noopener\">section wipes</a>, and <a href=\"http://scrollmagic.io/examples/basic/responsive_duration.html\" target=\"_blank\" rel=\"noopener\">responsive duration</a>.</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Base-Example\"><a href=\"#Base-Example\" class=\"headerlink\" title=\"Base Example\"></a>Base Example</h2><p>There are many times that we might want to add a bit of behavior, especially animation, to a scroll event on a site. There are many ways to do so, but the path with the least amount of code and dependencies is perhaps to use a <a href=\"https://vuejs.org/v2/guide/custom-directive.html\">custom directive</a> to create a hook for anything that fires off a particular scroll event.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">Vue.directive(<span class=\"string\">'scroll'</span>, &#123;</span><br><span class=\"line\">  inserted: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">el, binding</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> f = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">evt</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (binding.value(evt, el)) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">window</span>.removeEventListener(<span class=\"string\">'scroll'</span>, f)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">window</span>.addEventListener(<span class=\"string\">'scroll'</span>, f)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// main app</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  el: <span class=\"string\">'#app'</span>,</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    handleScroll: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">evt, el</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"built_in\">window</span>.scrollY &gt; <span class=\"number\">50</span>) &#123;</span><br><span class=\"line\">        el.setAttribute(</span><br><span class=\"line\">          <span class=\"string\">'style'</span>,</span><br><span class=\"line\">          <span class=\"string\">'opacity: 1; transform: translate3d(0, -10px, 0)'</span></span><br><span class=\"line\">        )</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"built_in\">window</span>.scrollY &gt; <span class=\"number\">100</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h1</span> <span class=\"attr\">class</span>=<span class=\"string\">\"centered\"</span>&gt;</span>Scroll me<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box\"</span> <span class=\"attr\">v-scroll</span>=<span class=\"string\">\"handleScroll\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Lorem ipsum dolor sit amet, consectetur adipisicing elit. A atque amet harum aut ab veritatis earum porro praesentium ut corporis. Quasi provident dolorem officia iure fugiat, eius mollitia sequi quisquam.<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p class=\"tip\">Remember! The directive must be registered before the Vue instance.</p>\n\n<p>We’d also need a style property that will transition the intermediary values here, in this case:</p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">transition</span>: <span class=\"number\">1.5s</span> all <span class=\"built_in\">cubic-bezier</span>(0.39, 0.575, 0.565, 1);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p></p><p data-height=\"450\" data-theme-id=\"5162\" data-slug-hash=\"983220ed949ac670dff96bdcaf9d3338\" data-default-tab=\"result\" data-user=\"sdras\" data-embed-version=\"2\" data-pen-title=\"Custom Scroll Directive- CSS Transition\" class=\"codepen\">See the Pen <a href=\"https://codepen.io/sdras/pen/983220ed949ac670dff96bdcaf9d3338/\" target=\"_blank\" rel=\"noopener\">Custom Scroll Directive- CSS Transition</a> by Sarah Drasner (<a href=\"https://codepen.io/sdras\" target=\"_blank\" rel=\"noopener\">@sdras</a>) on <a href=\"https://codepen.io\" target=\"_blank\" rel=\"noopener\">CodePen</a>.</p><p></p>\n<script async src=\"https://static.codepen.io/assets/embed/ei.js\"></script>\n\n<p>Or, with GreenSock(GSAP) or any other JavaScript animation library, the code becomes even more simple:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">Vue.directive(<span class=\"string\">'scroll'</span>, &#123;</span><br><span class=\"line\">  inserted: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">el, binding</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> f = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">evt</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (binding.value(evt, el)) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">window</span>.removeEventListener(<span class=\"string\">'scroll'</span>, f)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">window</span>.addEventListener(<span class=\"string\">'scroll'</span>, f)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// main app</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  el: <span class=\"string\">'#app'</span>,</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    handleScroll: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">evt, el</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"built_in\">window</span>.scrollY &gt; <span class=\"number\">50</span>) &#123;</span><br><span class=\"line\">        TweenMax.to(el, <span class=\"number\">1.5</span>, &#123;</span><br><span class=\"line\">          y: <span class=\"number\">-10</span>,</span><br><span class=\"line\">          opacity: <span class=\"number\">1</span>,</span><br><span class=\"line\">          ease: Sine.easeOut</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"built_in\">window</span>.scrollY &gt; <span class=\"number\">100</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>Though we would remove the previous CSS transition from this implementation because it’s now handled with JavaScript.</p>\n<h2 id=\"The-Benefit-of-Using-Custom-Directives\"><a href=\"#The-Benefit-of-Using-Custom-Directives\" class=\"headerlink\" title=\"The Benefit of Using Custom Directives\"></a>The Benefit of Using Custom Directives</h2><p>Vue is rich with options for directives, most of which cover very common use-cases, which can create a very productive developer experience. But even if you have an edge case not covered by the framework, it’s got you covered in this case as well, because you can quite easily create a custom directive to fit your needs.</p>\n<p>Attaching and removing scroll events to elements is a really good use case for this technique because just like other directives we use, they are necessarily tied to the element and otherwise, we’d have to find the reference for it in the DOM. This pattern avoids the need for traversal, and keeps the event logic paired with the node that it’s in reference to.</p>\n<h2 id=\"Real-World-Example-Using-a-Custom-Scroll-Directive-for-Cascading-Animations\"><a href=\"#Real-World-Example-Using-a-Custom-Scroll-Directive-for-Cascading-Animations\" class=\"headerlink\" title=\"Real-World Example: Using a Custom Scroll Directive for Cascading Animations\"></a>Real-World Example: Using a Custom Scroll Directive for Cascading Animations</h2><p>In the course of creating a cohesive site, you may find that you’re reusing the same type of animation logic in several areas. It seems simple, we would then create a very specific custom directive, right? Well, typically if you’re reusing it, you will need to change it <em>just</em> slightly for each use.</p>\n<p>To help keep our code concise and legible, we would want to pass in some predefined arguments such as the beginning point and ending of the animation as we scroll down the page.</p>\n<p><strong>This example is better viewed in the <a href=\"https://s.codepen.io/sdras/debug/078c19f5b3ed7f7d28584da450296cd0\" target=\"_blank\" rel=\"noopener\">full screen version</a>.</strong></p>\n<p></p><p data-height=\"500\" data-theme-id=\"5162\" data-slug-hash=\"c8c55e3e0bba997350551dd747119100\" data-default-tab=\"result\" data-user=\"sdras\" data-embed-version=\"2\" data-pen-title=\"Scrolling Example- Using Custom Directives in Vue\" class=\"codepen\">See the Pen <a href=\"https://codepen.io/sdras/pen/c8c55e3e0bba997350551dd747119100/\" target=\"_blank\" rel=\"noopener\">Scrolling Example- Using Custom Directives in Vue</a> by Sarah Drasner (<a href=\"https://codepen.io/sdras\" target=\"_blank\" rel=\"noopener\">@sdras</a>) on <a href=\"https://codepen.io\" target=\"_blank\" rel=\"noopener\">CodePen</a>.</p><p></p>\n<script async src=\"https://static.codepen.io/assets/embed/ei.js\"></script>\n\n<p>In the demo above, each of the sections has two different types of animation triggered from the scroll: a morphing animation, and a drawing animation that animates the individual paths in the SVG. We reuse those two animations, so we can create a custom directive for each. The arguments we’ll pass in will help keep everything simple and reusable.</p>\n<p>To show how we do this, we’ll take a look at the morphing shape example, where we’ll need to state the start and finish, as well as pass in a path value that we’ll create a morph to. These arguments are each defined as <code>binding.value.foo</code>:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">Vue.directive(<span class=\"string\">'clipscroll'</span>, &#123;</span><br><span class=\"line\">  inserted: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">el, binding</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> f = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">evt</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> hasRun = <span class=\"literal\">false</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!hasRun &amp;&amp; <span class=\"built_in\">window</span>.scrollY &gt; binding.value.start) &#123;</span><br><span class=\"line\">        hasRun = <span class=\"literal\">true</span></span><br><span class=\"line\">        TweenMax.to(el, <span class=\"number\">2</span>, &#123;</span><br><span class=\"line\">          morphSVG: binding.value.toPath,</span><br><span class=\"line\">          ease: Sine.easeIn</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"built_in\">window</span>.scrollY &gt; binding.value.end) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">window</span>.removeEventListener(<span class=\"string\">'scroll'</span>, f)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">window</span>.addEventListener(<span class=\"string\">'scroll'</span>, f)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>We can then use this animation in our template, in this case we’re attaching the directive to the <code>clipPath</code> element, and pass all of our arguments to the directives in an object.</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">clipPath</span> <span class=\"attr\">id</span>=<span class=\"string\">\"clip-path\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">path</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">v-clipscroll</span>=<span class=\"string\">\"&#123; start: '50', end: '100', toPath: 'M0.39 0.34H15.99V22.44H0.39z' &#125;\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">id</span>=<span class=\"string\">\"poly-shapemorph\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">d</span>=<span class=\"string\">\"M12.46 20.76L7.34 22.04 3.67 18.25 5.12 13.18 10.24 11.9 13.91 15.69 12.46 20.76z\"</span></span></span><br><span class=\"line\"><span class=\"tag\">  /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">clipPath</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"Alternative-Patterns\"><a href=\"#Alternative-Patterns\" class=\"headerlink\" title=\"Alternative Patterns\"></a>Alternative Patterns</h2><p>Custom directives are extremely useful, but you may find some situations where you need something very specific that already exists in scrolling libraries that you don’t wish to rebuild from scratch yourself.</p>\n<p><a href=\"http://scrollmagic.io/\" target=\"_blank\" rel=\"noopener\">Scrollmagic</a> has a very rich ecosystem of offerings to work with, as well as good documentation and demos to explore. This includes, but is not limited to things like <a href=\"http://scrollmagic.io/examples/advanced/parallax_scrolling.html\" target=\"_blank\" rel=\"noopener\">parallax</a>, <a href=\"http://scrollmagic.io/examples/expert/cascading_pins.html\" target=\"_blank\" rel=\"noopener\">cascading pinning</a>, <a href=\"http://scrollmagic.io/examples/basic/section_wipes_natural.html\" target=\"_blank\" rel=\"noopener\">section wipes</a>, and <a href=\"http://scrollmagic.io/examples/basic/responsive_duration.html\" target=\"_blank\" rel=\"noopener\">responsive duration</a>.</p>\n"},{"title":"Avoiding Memory Leaks","type":"cookbook","order":10,"_content":"## Introduction\n\nIf you are developing applications with Vue, then you need to watch out for memory leaks. This issue is especially important in Single Page Applications (SPAs) because by design, users should not have to refresh their browser when using an SPA, so it is up to the JavaScript application to clean up components and make sure that garbage collection takes place as expected.\n\nMemory leaks in Vue applications do not typically come from Vue itself, rather they can happen when incorporating other libraries into an application.\n\n## Simple Example\n\nThe following example shows a memory leak caused by using the [Choices.js](https://github.com/jshjohnson/Choices) library in a Vue component and not properly cleaning it up. Later, we will show how to remove the Choices.js footprint and avoid the memory leak.\n\nIn the example below, we load up a select with a lot of options and then we use a show/hide button with a [v-if](/v2/guide/conditional.html) directive to add it and remove it from the virtual DOM. The problem with this example is that the `v-if` directive removes the parent element from the DOM, but we did not clean up the additional DOM pieces created by Choices.js, causing a memory leak. \n\n```html\n<link rel='stylesheet prefetch' href='https://joshuajohnson.co.uk/Choices/assets/styles/css/choices.min.css?version=3.0.3'>\n<script src='https://joshuajohnson.co.uk/Choices/assets/scripts/dist/choices.min.js?version=3.0.3'></script>\n\n<div id=\"app\">\n  <button v-if=\"showChoices\" @click=\"hide\">Hide</button>\n  <button v-if=\"!showChoices\" @click=\"show\">Show</button>\n  <div v-if=\"showChoices\">\n    <select id=\"choices-single-default\"></select>\n  </div>\n</div>\n```\n```js\nnew Vue({\n  el: \"#app\",\n  data: function () {\n    return {\n      showChoices: true\n    }\n  },\n  mounted: function () {\n    this.initializeChoices()\n  },\n  methods: {\n    initializeChoices: function () {\n      let list = []\n      // lets load up our select with many choices \n      // so it will use a lot of memory\n      for (let i = 0; i < 1000; i++) {\n        list.push({\n          label: \"Item \" + i,\n          value: i\n        })\n      }\n      new Choices(\"#choices-single-default\", {\n        searchEnabled: true,\n        removeItemButton: true,\n        choices: list\n      })\n    },\n    show: function () {\n      this.showChoices = true\n      this.$nextTick(() => {\n        this.initializeChoices()\n      })\n    },\n    hide: function () {\n      this.showChoices = false\n    }\n  }\n})\n```\nTo see this memory leak in action, open this [CodePen example](https://codepen.io/freeman-g/pen/qobpxo) using Chrome and then open the Chrome Task Manager. To open the Chrome Task Manager on Mac, choose Chrome Top Navigation > Window > Task Manager or on Windows, use the Shift+Esc shortcut. Now, click the show/hide button 50 or so times. You should see the memory usage in the Chrome Task Manager increase and never be reclaimed.\n\n![Memory Leak Example](/images/memory-leak-example.png)\n\n## Resolving the Memory Leak\n\nIn the above example, we can use our `hide()` method to do some clean up and solve the memory leak prior to removing the select from the DOM. To accomplish this, we will keep a property in our Vue instance’s data object and we will use the [Choices API’s](https://github.com/jshjohnson/Choices) `destroy()` method to perform the clean up.\n\nCheck the memory usage again with this [updated CodePen example](https://codepen.io/freeman-g/pen/mxWMor).\n\n```js\nnew Vue({\n  el: \"#app\",\n  data: function () {\n    return {\n      showChoices: true,\n      choicesSelect: null\n    }\n  },\n  mounted: function () {\n    this.initializeChoices()\n  },\n  methods: {\n    initializeChoices: function () {\n      let list = []\n      for (let i = 0; i < 1000; i++) {\n        list.push({\n          label: \"Item \" + i,\n          value: i\n        })\n      }\n      // Set a reference to our choicesSelect in our Vue instance's data object\n      this.choicesSelect = new Choices(\"#choices-single-default\", {\n        searchEnabled: true,\n        removeItemButton: true,\n        choices: list\n      })\n    },\n    show: function () {\n      this.showChoices = true\n      this.$nextTick(() => {\n        this.initializeChoices()\n      })\n    },\n    hide: function () {\n      // now we can use the reference to Choices to perform clean up here \n      // prior to removing the elements from the DOM\n      this.choicesSelect.destroy()\n      this.showChoices = false\n    }\n  }\n})\n```\n\n## Details about the Value\n\nMemory management and performance testing can easily be neglected in the excitement of shipping quickly, however, keeping a small memory footprint is still important to your overall user experience. \n\nConsider the types of devices your users may be using and what their normal flow will be. Could they use memory constrained laptops or mobile devices? Do your users typically do lots of in-application navigation? If either of these are true, then good memory management practices can help you avoid the worst case scenario of crashing a user’s browser. Even if neither of these are true, you can still potentially have degradation of performance over extended usage of your app if you are not careful.\n\n## Real-World Example\n\nIn the above example, we used a `v-if` directive to illustrate the memory leak, but a more common real-world scenario happens when using [vue-router](https://router.vuejs.org/en/) to route to components in a Single Page Application.\n\nJust like the `v-if` directive, `vue-router` removes elements from the virtual DOM and replaces those with new elements when a user navigates around your application. The Vue `beforeDestroy()` [lifecycle hook](/v2/guide/instance.html#Lifecycle-Diagram) is a good place to solve the same sort of issue in a `vue-router` based application.\n\nWe could move our clean up into the `beforeDestroy()` hook like this:\n\n```js\nbeforeDestroy: function () {\n    this.choicesSelect.destroy()\n}\n```\n\n## Alternative Patterns\n\nWe have discussed managing memory when removing elements, but what if you intentionally want to preserve state and keep elements in memory? In this case, you can use the built-in component [keep-alive](/v2/api/#keep-alive).\n\nWhen you wrap a component with `keep-alive`, its state will be preserved and therefore kept in memory.\n\n```html\n<button @click=\"show = false\">Hide</button>\n<keep-alive>\n  <!-- my-component will be intentionally kept in memory even when removed -->\n  <my-component v-if=\"show\"></my-component>\n</keep-alive>\n```\nThis technique can be useful to improve user experience. For example, imagine a user starts entering comments into a text input and then decides to navigate away. If the user then navigated back, their comments would still be preserved.\n\nOnce you use keep-alive, then you have access to two more lifecycle hooks: `activated` and `deactivated`. If you do want to clean up or change data when a keep-alive component is removed, you can do so in the `deactivated` hook.\n\n```js\ndeactivated: function () {\n  // remove any data you do not want to keep alive\n}\n```\n\n## Wrapping Up\n\nVue makes it very easy to develop amazing, reactive JavaScript applications, but you still need to be careful about memory leaks. These leaks will often occur when using additional 3rd Party libraries that manipulate the DOM outside of Vue. Make sure to test your application for memory leaks and take appropriate steps to clean up components where necessary.","source":"v2/cookbook/avoiding-memory-leaks.md","raw":"---\ntitle: Avoiding Memory Leaks\ntype: cookbook\norder: 10\n---\n## Introduction\n\nIf you are developing applications with Vue, then you need to watch out for memory leaks. This issue is especially important in Single Page Applications (SPAs) because by design, users should not have to refresh their browser when using an SPA, so it is up to the JavaScript application to clean up components and make sure that garbage collection takes place as expected.\n\nMemory leaks in Vue applications do not typically come from Vue itself, rather they can happen when incorporating other libraries into an application.\n\n## Simple Example\n\nThe following example shows a memory leak caused by using the [Choices.js](https://github.com/jshjohnson/Choices) library in a Vue component and not properly cleaning it up. Later, we will show how to remove the Choices.js footprint and avoid the memory leak.\n\nIn the example below, we load up a select with a lot of options and then we use a show/hide button with a [v-if](/v2/guide/conditional.html) directive to add it and remove it from the virtual DOM. The problem with this example is that the `v-if` directive removes the parent element from the DOM, but we did not clean up the additional DOM pieces created by Choices.js, causing a memory leak. \n\n```html\n<link rel='stylesheet prefetch' href='https://joshuajohnson.co.uk/Choices/assets/styles/css/choices.min.css?version=3.0.3'>\n<script src='https://joshuajohnson.co.uk/Choices/assets/scripts/dist/choices.min.js?version=3.0.3'></script>\n\n<div id=\"app\">\n  <button v-if=\"showChoices\" @click=\"hide\">Hide</button>\n  <button v-if=\"!showChoices\" @click=\"show\">Show</button>\n  <div v-if=\"showChoices\">\n    <select id=\"choices-single-default\"></select>\n  </div>\n</div>\n```\n```js\nnew Vue({\n  el: \"#app\",\n  data: function () {\n    return {\n      showChoices: true\n    }\n  },\n  mounted: function () {\n    this.initializeChoices()\n  },\n  methods: {\n    initializeChoices: function () {\n      let list = []\n      // lets load up our select with many choices \n      // so it will use a lot of memory\n      for (let i = 0; i < 1000; i++) {\n        list.push({\n          label: \"Item \" + i,\n          value: i\n        })\n      }\n      new Choices(\"#choices-single-default\", {\n        searchEnabled: true,\n        removeItemButton: true,\n        choices: list\n      })\n    },\n    show: function () {\n      this.showChoices = true\n      this.$nextTick(() => {\n        this.initializeChoices()\n      })\n    },\n    hide: function () {\n      this.showChoices = false\n    }\n  }\n})\n```\nTo see this memory leak in action, open this [CodePen example](https://codepen.io/freeman-g/pen/qobpxo) using Chrome and then open the Chrome Task Manager. To open the Chrome Task Manager on Mac, choose Chrome Top Navigation > Window > Task Manager or on Windows, use the Shift+Esc shortcut. Now, click the show/hide button 50 or so times. You should see the memory usage in the Chrome Task Manager increase and never be reclaimed.\n\n![Memory Leak Example](/images/memory-leak-example.png)\n\n## Resolving the Memory Leak\n\nIn the above example, we can use our `hide()` method to do some clean up and solve the memory leak prior to removing the select from the DOM. To accomplish this, we will keep a property in our Vue instance’s data object and we will use the [Choices API’s](https://github.com/jshjohnson/Choices) `destroy()` method to perform the clean up.\n\nCheck the memory usage again with this [updated CodePen example](https://codepen.io/freeman-g/pen/mxWMor).\n\n```js\nnew Vue({\n  el: \"#app\",\n  data: function () {\n    return {\n      showChoices: true,\n      choicesSelect: null\n    }\n  },\n  mounted: function () {\n    this.initializeChoices()\n  },\n  methods: {\n    initializeChoices: function () {\n      let list = []\n      for (let i = 0; i < 1000; i++) {\n        list.push({\n          label: \"Item \" + i,\n          value: i\n        })\n      }\n      // Set a reference to our choicesSelect in our Vue instance's data object\n      this.choicesSelect = new Choices(\"#choices-single-default\", {\n        searchEnabled: true,\n        removeItemButton: true,\n        choices: list\n      })\n    },\n    show: function () {\n      this.showChoices = true\n      this.$nextTick(() => {\n        this.initializeChoices()\n      })\n    },\n    hide: function () {\n      // now we can use the reference to Choices to perform clean up here \n      // prior to removing the elements from the DOM\n      this.choicesSelect.destroy()\n      this.showChoices = false\n    }\n  }\n})\n```\n\n## Details about the Value\n\nMemory management and performance testing can easily be neglected in the excitement of shipping quickly, however, keeping a small memory footprint is still important to your overall user experience. \n\nConsider the types of devices your users may be using and what their normal flow will be. Could they use memory constrained laptops or mobile devices? Do your users typically do lots of in-application navigation? If either of these are true, then good memory management practices can help you avoid the worst case scenario of crashing a user’s browser. Even if neither of these are true, you can still potentially have degradation of performance over extended usage of your app if you are not careful.\n\n## Real-World Example\n\nIn the above example, we used a `v-if` directive to illustrate the memory leak, but a more common real-world scenario happens when using [vue-router](https://router.vuejs.org/en/) to route to components in a Single Page Application.\n\nJust like the `v-if` directive, `vue-router` removes elements from the virtual DOM and replaces those with new elements when a user navigates around your application. The Vue `beforeDestroy()` [lifecycle hook](/v2/guide/instance.html#Lifecycle-Diagram) is a good place to solve the same sort of issue in a `vue-router` based application.\n\nWe could move our clean up into the `beforeDestroy()` hook like this:\n\n```js\nbeforeDestroy: function () {\n    this.choicesSelect.destroy()\n}\n```\n\n## Alternative Patterns\n\nWe have discussed managing memory when removing elements, but what if you intentionally want to preserve state and keep elements in memory? In this case, you can use the built-in component [keep-alive](/v2/api/#keep-alive).\n\nWhen you wrap a component with `keep-alive`, its state will be preserved and therefore kept in memory.\n\n```html\n<button @click=\"show = false\">Hide</button>\n<keep-alive>\n  <!-- my-component will be intentionally kept in memory even when removed -->\n  <my-component v-if=\"show\"></my-component>\n</keep-alive>\n```\nThis technique can be useful to improve user experience. For example, imagine a user starts entering comments into a text input and then decides to navigate away. If the user then navigated back, their comments would still be preserved.\n\nOnce you use keep-alive, then you have access to two more lifecycle hooks: `activated` and `deactivated`. If you do want to clean up or change data when a keep-alive component is removed, you can do so in the `deactivated` hook.\n\n```js\ndeactivated: function () {\n  // remove any data you do not want to keep alive\n}\n```\n\n## Wrapping Up\n\nVue makes it very easy to develop amazing, reactive JavaScript applications, but you still need to be careful about memory leaks. These leaks will often occur when using additional 3rd Party libraries that manipulate the DOM outside of Vue. Make sure to test your application for memory leaks and take appropriate steps to clean up components where necessary.","date":"2018-07-19T04:04:16.855Z","updated":"2018-07-19T04:04:16.855Z","path":"v2/cookbook/avoiding-memory-leaks.html","comments":1,"layout":"page","_id":"cjk0zidoh000hvkrtutg2p05i","content":"<h2 id=\"Introduction\"><a href=\"#Introduction\" class=\"headerlink\" title=\"Introduction\"></a>Introduction</h2><p>If you are developing applications with Vue, then you need to watch out for memory leaks. This issue is especially important in Single Page Applications (SPAs) because by design, users should not have to refresh their browser when using an SPA, so it is up to the JavaScript application to clean up components and make sure that garbage collection takes place as expected.</p>\n<p>Memory leaks in Vue applications do not typically come from Vue itself, rather they can happen when incorporating other libraries into an application.</p>\n<h2 id=\"Simple-Example\"><a href=\"#Simple-Example\" class=\"headerlink\" title=\"Simple Example\"></a>Simple Example</h2><p>The following example shows a memory leak caused by using the <a href=\"https://github.com/jshjohnson/Choices\" target=\"_blank\" rel=\"noopener\">Choices.js</a> library in a Vue component and not properly cleaning it up. Later, we will show how to remove the Choices.js footprint and avoid the memory leak.</p>\n<p>In the example below, we load up a select with a lot of options and then we use a show/hide button with a <a href=\"/v2/guide/conditional.html\">v-if</a> directive to add it and remove it from the virtual DOM. The problem with this example is that the <code>v-if</code> directive removes the parent element from the DOM, but we did not clean up the additional DOM pieces created by Choices.js, causing a memory leak. </p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">'stylesheet prefetch'</span> <span class=\"attr\">href</span>=<span class=\"string\">'https://joshuajohnson.co.uk/Choices/assets/styles/css/choices.min.css?version=3.0.3'</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">'https://joshuajohnson.co.uk/Choices/assets/scripts/dist/choices.min.js?version=3.0.3'</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">v-if</span>=<span class=\"string\">\"showChoices\"</span> @<span class=\"attr\">click</span>=<span class=\"string\">\"hide\"</span>&gt;</span>Hide<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">v-if</span>=<span class=\"string\">\"!showChoices\"</span> @<span class=\"attr\">click</span>=<span class=\"string\">\"show\"</span>&gt;</span>Show<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-if</span>=<span class=\"string\">\"showChoices\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">id</span>=<span class=\"string\">\"choices-single-default\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  el: <span class=\"string\">\"#app\"</span>,</span><br><span class=\"line\">  data: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      showChoices: <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  mounted: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.initializeChoices()</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    initializeChoices: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> list = []</span><br><span class=\"line\">      <span class=\"comment\">// lets load up our select with many choices </span></span><br><span class=\"line\">      <span class=\"comment\">// so it will use a lot of memory</span></span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">1000</span>; i++) &#123;</span><br><span class=\"line\">        list.push(&#123;</span><br><span class=\"line\">          label: <span class=\"string\">\"Item \"</span> + i,</span><br><span class=\"line\">          value: i</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">new</span> Choices(<span class=\"string\">\"#choices-single-default\"</span>, &#123;</span><br><span class=\"line\">        searchEnabled: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        removeItemButton: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        choices: list</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    show: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.showChoices = <span class=\"literal\">true</span></span><br><span class=\"line\">      <span class=\"keyword\">this</span>.$nextTick(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.initializeChoices()</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    hide: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.showChoices = <span class=\"literal\">false</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>To see this memory leak in action, open this <a href=\"https://codepen.io/freeman-g/pen/qobpxo\" target=\"_blank\" rel=\"noopener\">CodePen example</a> using Chrome and then open the Chrome Task Manager. To open the Chrome Task Manager on Mac, choose Chrome Top Navigation &gt; Window &gt; Task Manager or on Windows, use the Shift+Esc shortcut. Now, click the show/hide button 50 or so times. You should see the memory usage in the Chrome Task Manager increase and never be reclaimed.</p>\n<p><img src=\"/images/memory-leak-example.png\" alt=\"Memory Leak Example\"></p>\n<h2 id=\"Resolving-the-Memory-Leak\"><a href=\"#Resolving-the-Memory-Leak\" class=\"headerlink\" title=\"Resolving the Memory Leak\"></a>Resolving the Memory Leak</h2><p>In the above example, we can use our <code>hide()</code> method to do some clean up and solve the memory leak prior to removing the select from the DOM. To accomplish this, we will keep a property in our Vue instance’s data object and we will use the <a href=\"https://github.com/jshjohnson/Choices\" target=\"_blank\" rel=\"noopener\">Choices API’s</a> <code>destroy()</code> method to perform the clean up.</p>\n<p>Check the memory usage again with this <a href=\"https://codepen.io/freeman-g/pen/mxWMor\" target=\"_blank\" rel=\"noopener\">updated CodePen example</a>.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  el: <span class=\"string\">\"#app\"</span>,</span><br><span class=\"line\">  data: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      showChoices: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      choicesSelect: <span class=\"literal\">null</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  mounted: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.initializeChoices()</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    initializeChoices: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> list = []</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">1000</span>; i++) &#123;</span><br><span class=\"line\">        list.push(&#123;</span><br><span class=\"line\">          label: <span class=\"string\">\"Item \"</span> + i,</span><br><span class=\"line\">          value: i</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"comment\">// Set a reference to our choicesSelect in our Vue instance's data object</span></span><br><span class=\"line\">      <span class=\"keyword\">this</span>.choicesSelect = <span class=\"keyword\">new</span> Choices(<span class=\"string\">\"#choices-single-default\"</span>, &#123;</span><br><span class=\"line\">        searchEnabled: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        removeItemButton: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        choices: list</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    show: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.showChoices = <span class=\"literal\">true</span></span><br><span class=\"line\">      <span class=\"keyword\">this</span>.$nextTick(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.initializeChoices()</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    hide: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">// now we can use the reference to Choices to perform clean up here </span></span><br><span class=\"line\">      <span class=\"comment\">// prior to removing the elements from the DOM</span></span><br><span class=\"line\">      <span class=\"keyword\">this</span>.choicesSelect.destroy()</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.showChoices = <span class=\"literal\">false</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h2 id=\"Details-about-the-Value\"><a href=\"#Details-about-the-Value\" class=\"headerlink\" title=\"Details about the Value\"></a>Details about the Value</h2><p>Memory management and performance testing can easily be neglected in the excitement of shipping quickly, however, keeping a small memory footprint is still important to your overall user experience. </p>\n<p>Consider the types of devices your users may be using and what their normal flow will be. Could they use memory constrained laptops or mobile devices? Do your users typically do lots of in-application navigation? If either of these are true, then good memory management practices can help you avoid the worst case scenario of crashing a user’s browser. Even if neither of these are true, you can still potentially have degradation of performance over extended usage of your app if you are not careful.</p>\n<h2 id=\"Real-World-Example\"><a href=\"#Real-World-Example\" class=\"headerlink\" title=\"Real-World Example\"></a>Real-World Example</h2><p>In the above example, we used a <code>v-if</code> directive to illustrate the memory leak, but a more common real-world scenario happens when using <a href=\"https://router.vuejs.org/en/\" target=\"_blank\" rel=\"noopener\">vue-router</a> to route to components in a Single Page Application.</p>\n<p>Just like the <code>v-if</code> directive, <code>vue-router</code> removes elements from the virtual DOM and replaces those with new elements when a user navigates around your application. The Vue <code>beforeDestroy()</code> <a href=\"/v2/guide/instance.html#Lifecycle-Diagram\">lifecycle hook</a> is a good place to solve the same sort of issue in a <code>vue-router</code> based application.</p>\n<p>We could move our clean up into the <code>beforeDestroy()</code> hook like this:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">beforeDestroy: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.choicesSelect.destroy()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Alternative-Patterns\"><a href=\"#Alternative-Patterns\" class=\"headerlink\" title=\"Alternative Patterns\"></a>Alternative Patterns</h2><p>We have discussed managing memory when removing elements, but what if you intentionally want to preserve state and keep elements in memory? In this case, you can use the built-in component <a href=\"/v2/api/#keep-alive\">keep-alive</a>.</p>\n<p>When you wrap a component with <code>keep-alive</code>, its state will be preserved and therefore kept in memory.</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">\"show = false\"</span>&gt;</span>Hide<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">keep-alive</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- my-component will be intentionally kept in memory even when removed --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">my-component</span> <span class=\"attr\">v-if</span>=<span class=\"string\">\"show\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">my-component</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">keep-alive</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>This technique can be useful to improve user experience. For example, imagine a user starts entering comments into a text input and then decides to navigate away. If the user then navigated back, their comments would still be preserved.</p>\n<p>Once you use keep-alive, then you have access to two more lifecycle hooks: <code>activated</code> and <code>deactivated</code>. If you do want to clean up or change data when a keep-alive component is removed, you can do so in the <code>deactivated</code> hook.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">deactivated: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// remove any data you do not want to keep alive</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Wrapping-Up\"><a href=\"#Wrapping-Up\" class=\"headerlink\" title=\"Wrapping Up\"></a>Wrapping Up</h2><p>Vue makes it very easy to develop amazing, reactive JavaScript applications, but you still need to be careful about memory leaks. These leaks will often occur when using additional 3rd Party libraries that manipulate the DOM outside of Vue. Make sure to test your application for memory leaks and take appropriate steps to clean up components where necessary.</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Introduction\"><a href=\"#Introduction\" class=\"headerlink\" title=\"Introduction\"></a>Introduction</h2><p>If you are developing applications with Vue, then you need to watch out for memory leaks. This issue is especially important in Single Page Applications (SPAs) because by design, users should not have to refresh their browser when using an SPA, so it is up to the JavaScript application to clean up components and make sure that garbage collection takes place as expected.</p>\n<p>Memory leaks in Vue applications do not typically come from Vue itself, rather they can happen when incorporating other libraries into an application.</p>\n<h2 id=\"Simple-Example\"><a href=\"#Simple-Example\" class=\"headerlink\" title=\"Simple Example\"></a>Simple Example</h2><p>The following example shows a memory leak caused by using the <a href=\"https://github.com/jshjohnson/Choices\" target=\"_blank\" rel=\"noopener\">Choices.js</a> library in a Vue component and not properly cleaning it up. Later, we will show how to remove the Choices.js footprint and avoid the memory leak.</p>\n<p>In the example below, we load up a select with a lot of options and then we use a show/hide button with a <a href=\"/v2/guide/conditional.html\">v-if</a> directive to add it and remove it from the virtual DOM. The problem with this example is that the <code>v-if</code> directive removes the parent element from the DOM, but we did not clean up the additional DOM pieces created by Choices.js, causing a memory leak. </p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">'stylesheet prefetch'</span> <span class=\"attr\">href</span>=<span class=\"string\">'https://joshuajohnson.co.uk/Choices/assets/styles/css/choices.min.css?version=3.0.3'</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">'https://joshuajohnson.co.uk/Choices/assets/scripts/dist/choices.min.js?version=3.0.3'</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">v-if</span>=<span class=\"string\">\"showChoices\"</span> @<span class=\"attr\">click</span>=<span class=\"string\">\"hide\"</span>&gt;</span>Hide<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">v-if</span>=<span class=\"string\">\"!showChoices\"</span> @<span class=\"attr\">click</span>=<span class=\"string\">\"show\"</span>&gt;</span>Show<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-if</span>=<span class=\"string\">\"showChoices\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">id</span>=<span class=\"string\">\"choices-single-default\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  el: <span class=\"string\">\"#app\"</span>,</span><br><span class=\"line\">  data: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      showChoices: <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  mounted: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.initializeChoices()</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    initializeChoices: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> list = []</span><br><span class=\"line\">      <span class=\"comment\">// lets load up our select with many choices </span></span><br><span class=\"line\">      <span class=\"comment\">// so it will use a lot of memory</span></span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">1000</span>; i++) &#123;</span><br><span class=\"line\">        list.push(&#123;</span><br><span class=\"line\">          label: <span class=\"string\">\"Item \"</span> + i,</span><br><span class=\"line\">          value: i</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">new</span> Choices(<span class=\"string\">\"#choices-single-default\"</span>, &#123;</span><br><span class=\"line\">        searchEnabled: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        removeItemButton: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        choices: list</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    show: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.showChoices = <span class=\"literal\">true</span></span><br><span class=\"line\">      <span class=\"keyword\">this</span>.$nextTick(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.initializeChoices()</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    hide: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.showChoices = <span class=\"literal\">false</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>To see this memory leak in action, open this <a href=\"https://codepen.io/freeman-g/pen/qobpxo\" target=\"_blank\" rel=\"noopener\">CodePen example</a> using Chrome and then open the Chrome Task Manager. To open the Chrome Task Manager on Mac, choose Chrome Top Navigation &gt; Window &gt; Task Manager or on Windows, use the Shift+Esc shortcut. Now, click the show/hide button 50 or so times. You should see the memory usage in the Chrome Task Manager increase and never be reclaimed.</p>\n<p><img src=\"/images/memory-leak-example.png\" alt=\"Memory Leak Example\"></p>\n<h2 id=\"Resolving-the-Memory-Leak\"><a href=\"#Resolving-the-Memory-Leak\" class=\"headerlink\" title=\"Resolving the Memory Leak\"></a>Resolving the Memory Leak</h2><p>In the above example, we can use our <code>hide()</code> method to do some clean up and solve the memory leak prior to removing the select from the DOM. To accomplish this, we will keep a property in our Vue instance’s data object and we will use the <a href=\"https://github.com/jshjohnson/Choices\" target=\"_blank\" rel=\"noopener\">Choices API’s</a> <code>destroy()</code> method to perform the clean up.</p>\n<p>Check the memory usage again with this <a href=\"https://codepen.io/freeman-g/pen/mxWMor\" target=\"_blank\" rel=\"noopener\">updated CodePen example</a>.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  el: <span class=\"string\">\"#app\"</span>,</span><br><span class=\"line\">  data: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      showChoices: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      choicesSelect: <span class=\"literal\">null</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  mounted: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.initializeChoices()</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    initializeChoices: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> list = []</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">1000</span>; i++) &#123;</span><br><span class=\"line\">        list.push(&#123;</span><br><span class=\"line\">          label: <span class=\"string\">\"Item \"</span> + i,</span><br><span class=\"line\">          value: i</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"comment\">// Set a reference to our choicesSelect in our Vue instance's data object</span></span><br><span class=\"line\">      <span class=\"keyword\">this</span>.choicesSelect = <span class=\"keyword\">new</span> Choices(<span class=\"string\">\"#choices-single-default\"</span>, &#123;</span><br><span class=\"line\">        searchEnabled: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        removeItemButton: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        choices: list</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    show: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.showChoices = <span class=\"literal\">true</span></span><br><span class=\"line\">      <span class=\"keyword\">this</span>.$nextTick(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.initializeChoices()</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    hide: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">// now we can use the reference to Choices to perform clean up here </span></span><br><span class=\"line\">      <span class=\"comment\">// prior to removing the elements from the DOM</span></span><br><span class=\"line\">      <span class=\"keyword\">this</span>.choicesSelect.destroy()</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.showChoices = <span class=\"literal\">false</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h2 id=\"Details-about-the-Value\"><a href=\"#Details-about-the-Value\" class=\"headerlink\" title=\"Details about the Value\"></a>Details about the Value</h2><p>Memory management and performance testing can easily be neglected in the excitement of shipping quickly, however, keeping a small memory footprint is still important to your overall user experience. </p>\n<p>Consider the types of devices your users may be using and what their normal flow will be. Could they use memory constrained laptops or mobile devices? Do your users typically do lots of in-application navigation? If either of these are true, then good memory management practices can help you avoid the worst case scenario of crashing a user’s browser. Even if neither of these are true, you can still potentially have degradation of performance over extended usage of your app if you are not careful.</p>\n<h2 id=\"Real-World-Example\"><a href=\"#Real-World-Example\" class=\"headerlink\" title=\"Real-World Example\"></a>Real-World Example</h2><p>In the above example, we used a <code>v-if</code> directive to illustrate the memory leak, but a more common real-world scenario happens when using <a href=\"https://router.vuejs.org/en/\" target=\"_blank\" rel=\"noopener\">vue-router</a> to route to components in a Single Page Application.</p>\n<p>Just like the <code>v-if</code> directive, <code>vue-router</code> removes elements from the virtual DOM and replaces those with new elements when a user navigates around your application. The Vue <code>beforeDestroy()</code> <a href=\"/v2/guide/instance.html#Lifecycle-Diagram\">lifecycle hook</a> is a good place to solve the same sort of issue in a <code>vue-router</code> based application.</p>\n<p>We could move our clean up into the <code>beforeDestroy()</code> hook like this:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">beforeDestroy: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.choicesSelect.destroy()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Alternative-Patterns\"><a href=\"#Alternative-Patterns\" class=\"headerlink\" title=\"Alternative Patterns\"></a>Alternative Patterns</h2><p>We have discussed managing memory when removing elements, but what if you intentionally want to preserve state and keep elements in memory? In this case, you can use the built-in component <a href=\"/v2/api/#keep-alive\">keep-alive</a>.</p>\n<p>When you wrap a component with <code>keep-alive</code>, its state will be preserved and therefore kept in memory.</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">\"show = false\"</span>&gt;</span>Hide<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">keep-alive</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- my-component will be intentionally kept in memory even when removed --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">my-component</span> <span class=\"attr\">v-if</span>=<span class=\"string\">\"show\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">my-component</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">keep-alive</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>This technique can be useful to improve user experience. For example, imagine a user starts entering comments into a text input and then decides to navigate away. If the user then navigated back, their comments would still be preserved.</p>\n<p>Once you use keep-alive, then you have access to two more lifecycle hooks: <code>activated</code> and <code>deactivated</code>. If you do want to clean up or change data when a keep-alive component is removed, you can do so in the <code>deactivated</code> hook.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">deactivated: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// remove any data you do not want to keep alive</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Wrapping-Up\"><a href=\"#Wrapping-Up\" class=\"headerlink\" title=\"Wrapping Up\"></a>Wrapping Up</h2><p>Vue makes it very easy to develop amazing, reactive JavaScript applications, but you still need to be careful about memory leaks. These leaks will often occur when using additional 3rd Party libraries that manipulate the DOM outside of Vue. Make sure to test your application for memory leaks and take appropriate steps to clean up components where necessary.</p>\n"},{"title":"Debugging in VS Code and Chrome","type":"cookbook","order":8,"_content":"\nEvery application reaches a point where it's necessary to understand failures, small to large. In this recipe, we explore a few workflows for VS Code users, who are using Chrome to test.\n\nThis recipe shows how to use the [Debugger for Chrome](https://github.com/Microsoft/VSCode-chrome-debug) extension with VS Code to debug Vue.js applications generated by the [Vue CLI](https://github.com/vuejs/vue-cli).\n\n## Prerequisites\n\nYou must have Chrome and VS Code installed. Make sure to get the latest version of [Debugger for Chrome](https://marketplace.visualstudio.com/items?itemName=msjsdiag.debugger-for-chrome) extension installed in VS Code.\n\nInstall and create a project with the [vue-cli](https://github.com/vuejs/vue-cli), with the instructions for installation documented in the readme of the project. Change into the newly created application directory and open VS Code.\n\n### Showing Source Code in the Chrome Devtools\n\nBefore you can debug your Vue components from VS Code you need to update the generated Webpack config to build sourcemaps. We do this so that our debugger has a way to map the code within a compressed file back to its position in the original file. This ensures that you can debug an application even after your assets have been optimized by Webpack.\n\nGo to `config/index.js` and find the `devtool` property. Update it to:\n\n```json\ndevtool: 'source-map',\n```\n\nWith Vue CLI 3 you need set `devtool` property inside `vue.config.js`:\n\n```js\nmodule.exports = {\n  configureWebpack: {\n    devtool: 'source-map'\n  }\n}\n```\n\n### Launching the Application from VS Code\n\nClick on the Debugging icon in the Activity Bar to bring up the Debug view, then click on the gear icon to configure a launch.json file, selecting **Chrome** for the environment. Replace content of the generated launch.json with the following two configurations:\n\n![Add Chrome Configuration](/images/config_add.png)\n\n```json\n{\n  \"version\": \"0.2.0\",\n  \"configurations\": [\n    {\n      \"type\": \"chrome\",\n      \"request\": \"launch\",\n      \"name\": \"vuejs: chrome\",\n      \"url\": \"http://localhost:8080\",\n      \"webRoot\": \"${workspaceFolder}/src\",\n      \"breakOnLoad\": true,\n      \"sourceMapPathOverrides\": {\n        \"webpack:///src/*\": \"${webRoot}/*\"\n      }\n    }\n  ]\n}\n```\n\n## Setting a Breakpoint\n\n1.  Set a breakpoint in **src/components/HelloWorld.vue** on `line 90` where the `data` function returns a string.\n\n  ![Breakpoint Renderer](/images/breakpoint_set.png)\n\n2.  Open your favorite terminal at the root folder and serve the app using Vue CLI:\n\n  ```\n  npm start\n  ```\n\n3.  Go to the Debug view, select the **'vuejs: chrome'** configuration, then press F5 or click the green play button.\n\n4.  Your breakpoint should now be hit as the new instance of Chrome opens `http://localhost:8080`.\n\n  ![Breakpoint Hit](/images/breakpoint_hit.png)\n\n## Alternative Patterns\n\n### Vue Devtools\n\nThere are other methods of debugging, varying in complexity. The most popular and simple of which is to use the excellent [vue-devtools](https://chrome.google.com/webstore/detail/vuejs-devtools/nhdogjmejiglipccpnnnanhbledajbpd). Some of the benefits of working with the devtools are that they enable you to live-edit data properties and see the changes reflected immediately. The other major benefit is the ability to do time travel debugging for Vuex.\n\n![Devtools Timetravel Debugger](/images/devtools-timetravel.gif)\n\n<p class=\"tip\">Please note that if the page uses a production/minified build of Vue.js (such as the standard link from a CDN), devtools inspection is disabled by default so the Vue pane won't show up. If you switch to an unminified version, you may have to give the page a hard refresh to see them.</p>\n\n### Vuetron\n\n[Vuetron](http://vuetron.io/) is a really nice project that extends some of the work that vue-devtools has done. In addition to the normal devtools workflow, you are able to:\n\n* Quickly view API Request/Response: if you're using the fetch API for requests, this event is displayed for any request sent. The expanded card displays the request data as well as the response data.\n* Subscribe to specific parts of your application’s state for faster debugging\n* Visualize component hierarchy, and an animation allows you to collapse or expand the tree for specific hierarchy views.\n\n![Vuetron Heirarchy](/images/vuetron-heirarchy.gif)\n\n### Simple Debugger Statement\n\nThe example above has a great workflow. However, there is an alternative option where you can use the [native debugger statement](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/debugger) directly in your code. If you choose to work this way, it's important that you remember to remove the statements when you're done.\n\n```js\n<script>\nexport default {\n  data() {\n    return {\n      message: ''\n    }\n  },\n  mounted() {\n    const hello = 'Hello World!'\n    debugger\n    this.message = hello\n  }\n};\n</script>\n```\n\n## Acknowledgements\n\nThis recipe was based on a contribution from [Kenneth Auchenberg](https://twitter.com/auchenberg), [available here](https://github.com/Microsoft/VSCode-recipes/tree/master/vuejs-cli).\n","source":"v2/cookbook/debugging-in-vscode.md","raw":"---\ntitle: Debugging in VS Code and Chrome\ntype: cookbook\norder: 8\n---\n\nEvery application reaches a point where it's necessary to understand failures, small to large. In this recipe, we explore a few workflows for VS Code users, who are using Chrome to test.\n\nThis recipe shows how to use the [Debugger for Chrome](https://github.com/Microsoft/VSCode-chrome-debug) extension with VS Code to debug Vue.js applications generated by the [Vue CLI](https://github.com/vuejs/vue-cli).\n\n## Prerequisites\n\nYou must have Chrome and VS Code installed. Make sure to get the latest version of [Debugger for Chrome](https://marketplace.visualstudio.com/items?itemName=msjsdiag.debugger-for-chrome) extension installed in VS Code.\n\nInstall and create a project with the [vue-cli](https://github.com/vuejs/vue-cli), with the instructions for installation documented in the readme of the project. Change into the newly created application directory and open VS Code.\n\n### Showing Source Code in the Chrome Devtools\n\nBefore you can debug your Vue components from VS Code you need to update the generated Webpack config to build sourcemaps. We do this so that our debugger has a way to map the code within a compressed file back to its position in the original file. This ensures that you can debug an application even after your assets have been optimized by Webpack.\n\nGo to `config/index.js` and find the `devtool` property. Update it to:\n\n```json\ndevtool: 'source-map',\n```\n\nWith Vue CLI 3 you need set `devtool` property inside `vue.config.js`:\n\n```js\nmodule.exports = {\n  configureWebpack: {\n    devtool: 'source-map'\n  }\n}\n```\n\n### Launching the Application from VS Code\n\nClick on the Debugging icon in the Activity Bar to bring up the Debug view, then click on the gear icon to configure a launch.json file, selecting **Chrome** for the environment. Replace content of the generated launch.json with the following two configurations:\n\n![Add Chrome Configuration](/images/config_add.png)\n\n```json\n{\n  \"version\": \"0.2.0\",\n  \"configurations\": [\n    {\n      \"type\": \"chrome\",\n      \"request\": \"launch\",\n      \"name\": \"vuejs: chrome\",\n      \"url\": \"http://localhost:8080\",\n      \"webRoot\": \"${workspaceFolder}/src\",\n      \"breakOnLoad\": true,\n      \"sourceMapPathOverrides\": {\n        \"webpack:///src/*\": \"${webRoot}/*\"\n      }\n    }\n  ]\n}\n```\n\n## Setting a Breakpoint\n\n1.  Set a breakpoint in **src/components/HelloWorld.vue** on `line 90` where the `data` function returns a string.\n\n  ![Breakpoint Renderer](/images/breakpoint_set.png)\n\n2.  Open your favorite terminal at the root folder and serve the app using Vue CLI:\n\n  ```\n  npm start\n  ```\n\n3.  Go to the Debug view, select the **'vuejs: chrome'** configuration, then press F5 or click the green play button.\n\n4.  Your breakpoint should now be hit as the new instance of Chrome opens `http://localhost:8080`.\n\n  ![Breakpoint Hit](/images/breakpoint_hit.png)\n\n## Alternative Patterns\n\n### Vue Devtools\n\nThere are other methods of debugging, varying in complexity. The most popular and simple of which is to use the excellent [vue-devtools](https://chrome.google.com/webstore/detail/vuejs-devtools/nhdogjmejiglipccpnnnanhbledajbpd). Some of the benefits of working with the devtools are that they enable you to live-edit data properties and see the changes reflected immediately. The other major benefit is the ability to do time travel debugging for Vuex.\n\n![Devtools Timetravel Debugger](/images/devtools-timetravel.gif)\n\n<p class=\"tip\">Please note that if the page uses a production/minified build of Vue.js (such as the standard link from a CDN), devtools inspection is disabled by default so the Vue pane won't show up. If you switch to an unminified version, you may have to give the page a hard refresh to see them.</p>\n\n### Vuetron\n\n[Vuetron](http://vuetron.io/) is a really nice project that extends some of the work that vue-devtools has done. In addition to the normal devtools workflow, you are able to:\n\n* Quickly view API Request/Response: if you're using the fetch API for requests, this event is displayed for any request sent. The expanded card displays the request data as well as the response data.\n* Subscribe to specific parts of your application’s state for faster debugging\n* Visualize component hierarchy, and an animation allows you to collapse or expand the tree for specific hierarchy views.\n\n![Vuetron Heirarchy](/images/vuetron-heirarchy.gif)\n\n### Simple Debugger Statement\n\nThe example above has a great workflow. However, there is an alternative option where you can use the [native debugger statement](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/debugger) directly in your code. If you choose to work this way, it's important that you remember to remove the statements when you're done.\n\n```js\n<script>\nexport default {\n  data() {\n    return {\n      message: ''\n    }\n  },\n  mounted() {\n    const hello = 'Hello World!'\n    debugger\n    this.message = hello\n  }\n};\n</script>\n```\n\n## Acknowledgements\n\nThis recipe was based on a contribution from [Kenneth Auchenberg](https://twitter.com/auchenberg), [available here](https://github.com/Microsoft/VSCode-recipes/tree/master/vuejs-cli).\n","date":"2018-07-19T04:04:16.856Z","updated":"2018-07-19T04:04:16.856Z","path":"v2/cookbook/debugging-in-vscode.html","comments":1,"layout":"page","_id":"cjk0zidoh000ivkrtow48m09l","content":"<p>Every application reaches a point where it’s necessary to understand failures, small to large. In this recipe, we explore a few workflows for VS Code users, who are using Chrome to test.</p>\n<p>This recipe shows how to use the <a href=\"https://github.com/Microsoft/VSCode-chrome-debug\" target=\"_blank\" rel=\"noopener\">Debugger for Chrome</a> extension with VS Code to debug Vue.js applications generated by the <a href=\"https://github.com/vuejs/vue-cli\" target=\"_blank\" rel=\"noopener\">Vue CLI</a>.</p>\n<h2 id=\"Prerequisites\"><a href=\"#Prerequisites\" class=\"headerlink\" title=\"Prerequisites\"></a>Prerequisites</h2><p>You must have Chrome and VS Code installed. Make sure to get the latest version of <a href=\"https://marketplace.visualstudio.com/items?itemName=msjsdiag.debugger-for-chrome\" target=\"_blank\" rel=\"noopener\">Debugger for Chrome</a> extension installed in VS Code.</p>\n<p>Install and create a project with the <a href=\"https://github.com/vuejs/vue-cli\" target=\"_blank\" rel=\"noopener\">vue-cli</a>, with the instructions for installation documented in the readme of the project. Change into the newly created application directory and open VS Code.</p>\n<h3 id=\"Showing-Source-Code-in-the-Chrome-Devtools\"><a href=\"#Showing-Source-Code-in-the-Chrome-Devtools\" class=\"headerlink\" title=\"Showing Source Code in the Chrome Devtools\"></a>Showing Source Code in the Chrome Devtools</h3><p>Before you can debug your Vue components from VS Code you need to update the generated Webpack config to build sourcemaps. We do this so that our debugger has a way to map the code within a compressed file back to its position in the original file. This ensures that you can debug an application even after your assets have been optimized by Webpack.</p>\n<p>Go to <code>config/index.js</code> and find the <code>devtool</code> property. Update it to:</p>\n<figure class=\"highlight\"><table><tr><td class=\"code\"><pre><span class=\"line\">devtool: 'source-map',</span><br></pre></td></tr></table></figure>\n<p>With Vue CLI 3 you need set <code>devtool</code> property inside <code>vue.config.js</code>:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  configureWebpack: &#123;</span><br><span class=\"line\">    devtool: <span class=\"string\">'source-map'</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Launching-the-Application-from-VS-Code\"><a href=\"#Launching-the-Application-from-VS-Code\" class=\"headerlink\" title=\"Launching the Application from VS Code\"></a>Launching the Application from VS Code</h3><p>Click on the Debugging icon in the Activity Bar to bring up the Debug view, then click on the gear icon to configure a launch.json file, selecting <strong>Chrome</strong> for the environment. Replace content of the generated launch.json with the following two configurations:</p>\n<p><img src=\"/images/config_add.png\" alt=\"Add Chrome Configuration\"></p>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"version\"</span>: <span class=\"string\">\"0.2.0\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"configurations\"</span>: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"type\"</span>: <span class=\"string\">\"chrome\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"request\"</span>: <span class=\"string\">\"launch\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"vuejs: chrome\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"url\"</span>: <span class=\"string\">\"http://localhost:8080\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"webRoot\"</span>: <span class=\"string\">\"$&#123;workspaceFolder&#125;/src\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"breakOnLoad\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"sourceMapPathOverrides\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"webpack:///src/*\"</span>: <span class=\"string\">\"$&#123;webRoot&#125;/*\"</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Setting-a-Breakpoint\"><a href=\"#Setting-a-Breakpoint\" class=\"headerlink\" title=\"Setting a Breakpoint\"></a>Setting a Breakpoint</h2><ol>\n<li><p>Set a breakpoint in <strong>src/components/HelloWorld.vue</strong> on <code>line 90</code> where the <code>data</code> function returns a string.</p>\n<p><img src=\"/images/breakpoint_set.png\" alt=\"Breakpoint Renderer\"></p>\n</li>\n<li><p>Open your favorite terminal at the root folder and serve the app using Vue CLI:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm start</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Go to the Debug view, select the <strong>‘vuejs: chrome’</strong> configuration, then press F5 or click the green play button.</p>\n</li>\n<li><p>Your breakpoint should now be hit as the new instance of Chrome opens <code>http://localhost:8080</code>.</p>\n<p><img src=\"/images/breakpoint_hit.png\" alt=\"Breakpoint Hit\"></p>\n</li>\n</ol>\n<h2 id=\"Alternative-Patterns\"><a href=\"#Alternative-Patterns\" class=\"headerlink\" title=\"Alternative Patterns\"></a>Alternative Patterns</h2><h3 id=\"Vue-Devtools\"><a href=\"#Vue-Devtools\" class=\"headerlink\" title=\"Vue Devtools\"></a>Vue Devtools</h3><p>There are other methods of debugging, varying in complexity. The most popular and simple of which is to use the excellent <a href=\"https://chrome.google.com/webstore/detail/vuejs-devtools/nhdogjmejiglipccpnnnanhbledajbpd\" target=\"_blank\" rel=\"noopener\">vue-devtools</a>. Some of the benefits of working with the devtools are that they enable you to live-edit data properties and see the changes reflected immediately. The other major benefit is the ability to do time travel debugging for Vuex.</p>\n<p><img src=\"/images/devtools-timetravel.gif\" alt=\"Devtools Timetravel Debugger\"></p>\n<p class=\"tip\">Please note that if the page uses a production/minified build of Vue.js (such as the standard link from a CDN), devtools inspection is disabled by default so the Vue pane won’t show up. If you switch to an unminified version, you may have to give the page a hard refresh to see them.</p>\n\n<h3 id=\"Vuetron\"><a href=\"#Vuetron\" class=\"headerlink\" title=\"Vuetron\"></a>Vuetron</h3><p><a href=\"http://vuetron.io/\" target=\"_blank\" rel=\"noopener\">Vuetron</a> is a really nice project that extends some of the work that vue-devtools has done. In addition to the normal devtools workflow, you are able to:</p>\n<ul>\n<li>Quickly view API Request/Response: if you’re using the fetch API for requests, this event is displayed for any request sent. The expanded card displays the request data as well as the response data.</li>\n<li>Subscribe to specific parts of your application’s state for faster debugging</li>\n<li>Visualize component hierarchy, and an animation allows you to collapse or expand the tree for specific hierarchy views.</li>\n</ul>\n<p><img src=\"/images/vuetron-heirarchy.gif\" alt=\"Vuetron Heirarchy\"></p>\n<h3 id=\"Simple-Debugger-Statement\"><a href=\"#Simple-Debugger-Statement\" class=\"headerlink\" title=\"Simple Debugger Statement\"></a>Simple Debugger Statement</h3><p>The example above has a great workflow. However, there is an alternative option where you can use the <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/debugger\" target=\"_blank\" rel=\"noopener\">native debugger statement</a> directly in your code. If you choose to work this way, it’s important that you remember to remove the statements when you’re done.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  data() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      message: <span class=\"string\">''</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  mounted() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> hello = <span class=\"string\">'Hello World!'</span></span><br><span class=\"line\">    <span class=\"keyword\">debugger</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.message = hello</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/script&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"Acknowledgements\"><a href=\"#Acknowledgements\" class=\"headerlink\" title=\"Acknowledgements\"></a>Acknowledgements</h2><p>This recipe was based on a contribution from <a href=\"https://twitter.com/auchenberg\" target=\"_blank\" rel=\"noopener\">Kenneth Auchenberg</a>, <a href=\"https://github.com/Microsoft/VSCode-recipes/tree/master/vuejs-cli\" target=\"_blank\" rel=\"noopener\">available here</a>.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Every application reaches a point where it’s necessary to understand failures, small to large. In this recipe, we explore a few workflows for VS Code users, who are using Chrome to test.</p>\n<p>This recipe shows how to use the <a href=\"https://github.com/Microsoft/VSCode-chrome-debug\" target=\"_blank\" rel=\"noopener\">Debugger for Chrome</a> extension with VS Code to debug Vue.js applications generated by the <a href=\"https://github.com/vuejs/vue-cli\" target=\"_blank\" rel=\"noopener\">Vue CLI</a>.</p>\n<h2 id=\"Prerequisites\"><a href=\"#Prerequisites\" class=\"headerlink\" title=\"Prerequisites\"></a>Prerequisites</h2><p>You must have Chrome and VS Code installed. Make sure to get the latest version of <a href=\"https://marketplace.visualstudio.com/items?itemName=msjsdiag.debugger-for-chrome\" target=\"_blank\" rel=\"noopener\">Debugger for Chrome</a> extension installed in VS Code.</p>\n<p>Install and create a project with the <a href=\"https://github.com/vuejs/vue-cli\" target=\"_blank\" rel=\"noopener\">vue-cli</a>, with the instructions for installation documented in the readme of the project. Change into the newly created application directory and open VS Code.</p>\n<h3 id=\"Showing-Source-Code-in-the-Chrome-Devtools\"><a href=\"#Showing-Source-Code-in-the-Chrome-Devtools\" class=\"headerlink\" title=\"Showing Source Code in the Chrome Devtools\"></a>Showing Source Code in the Chrome Devtools</h3><p>Before you can debug your Vue components from VS Code you need to update the generated Webpack config to build sourcemaps. We do this so that our debugger has a way to map the code within a compressed file back to its position in the original file. This ensures that you can debug an application even after your assets have been optimized by Webpack.</p>\n<p>Go to <code>config/index.js</code> and find the <code>devtool</code> property. Update it to:</p>\n<figure class=\"highlight\"><table><tr><td class=\"code\"><pre><span class=\"line\">devtool: 'source-map',</span><br></pre></td></tr></table></figure>\n<p>With Vue CLI 3 you need set <code>devtool</code> property inside <code>vue.config.js</code>:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  configureWebpack: &#123;</span><br><span class=\"line\">    devtool: <span class=\"string\">'source-map'</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Launching-the-Application-from-VS-Code\"><a href=\"#Launching-the-Application-from-VS-Code\" class=\"headerlink\" title=\"Launching the Application from VS Code\"></a>Launching the Application from VS Code</h3><p>Click on the Debugging icon in the Activity Bar to bring up the Debug view, then click on the gear icon to configure a launch.json file, selecting <strong>Chrome</strong> for the environment. Replace content of the generated launch.json with the following two configurations:</p>\n<p><img src=\"/images/config_add.png\" alt=\"Add Chrome Configuration\"></p>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"version\"</span>: <span class=\"string\">\"0.2.0\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"configurations\"</span>: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"type\"</span>: <span class=\"string\">\"chrome\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"request\"</span>: <span class=\"string\">\"launch\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"vuejs: chrome\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"url\"</span>: <span class=\"string\">\"http://localhost:8080\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"webRoot\"</span>: <span class=\"string\">\"$&#123;workspaceFolder&#125;/src\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"breakOnLoad\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"sourceMapPathOverrides\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"webpack:///src/*\"</span>: <span class=\"string\">\"$&#123;webRoot&#125;/*\"</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Setting-a-Breakpoint\"><a href=\"#Setting-a-Breakpoint\" class=\"headerlink\" title=\"Setting a Breakpoint\"></a>Setting a Breakpoint</h2><ol>\n<li><p>Set a breakpoint in <strong>src/components/HelloWorld.vue</strong> on <code>line 90</code> where the <code>data</code> function returns a string.</p>\n<p><img src=\"/images/breakpoint_set.png\" alt=\"Breakpoint Renderer\"></p>\n</li>\n<li><p>Open your favorite terminal at the root folder and serve the app using Vue CLI:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm start</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Go to the Debug view, select the <strong>‘vuejs: chrome’</strong> configuration, then press F5 or click the green play button.</p>\n</li>\n<li><p>Your breakpoint should now be hit as the new instance of Chrome opens <code>http://localhost:8080</code>.</p>\n<p><img src=\"/images/breakpoint_hit.png\" alt=\"Breakpoint Hit\"></p>\n</li>\n</ol>\n<h2 id=\"Alternative-Patterns\"><a href=\"#Alternative-Patterns\" class=\"headerlink\" title=\"Alternative Patterns\"></a>Alternative Patterns</h2><h3 id=\"Vue-Devtools\"><a href=\"#Vue-Devtools\" class=\"headerlink\" title=\"Vue Devtools\"></a>Vue Devtools</h3><p>There are other methods of debugging, varying in complexity. The most popular and simple of which is to use the excellent <a href=\"https://chrome.google.com/webstore/detail/vuejs-devtools/nhdogjmejiglipccpnnnanhbledajbpd\" target=\"_blank\" rel=\"noopener\">vue-devtools</a>. Some of the benefits of working with the devtools are that they enable you to live-edit data properties and see the changes reflected immediately. The other major benefit is the ability to do time travel debugging for Vuex.</p>\n<p><img src=\"/images/devtools-timetravel.gif\" alt=\"Devtools Timetravel Debugger\"></p>\n<p class=\"tip\">Please note that if the page uses a production/minified build of Vue.js (such as the standard link from a CDN), devtools inspection is disabled by default so the Vue pane won’t show up. If you switch to an unminified version, you may have to give the page a hard refresh to see them.</p>\n\n<h3 id=\"Vuetron\"><a href=\"#Vuetron\" class=\"headerlink\" title=\"Vuetron\"></a>Vuetron</h3><p><a href=\"http://vuetron.io/\" target=\"_blank\" rel=\"noopener\">Vuetron</a> is a really nice project that extends some of the work that vue-devtools has done. In addition to the normal devtools workflow, you are able to:</p>\n<ul>\n<li>Quickly view API Request/Response: if you’re using the fetch API for requests, this event is displayed for any request sent. The expanded card displays the request data as well as the response data.</li>\n<li>Subscribe to specific parts of your application’s state for faster debugging</li>\n<li>Visualize component hierarchy, and an animation allows you to collapse or expand the tree for specific hierarchy views.</li>\n</ul>\n<p><img src=\"/images/vuetron-heirarchy.gif\" alt=\"Vuetron Heirarchy\"></p>\n<h3 id=\"Simple-Debugger-Statement\"><a href=\"#Simple-Debugger-Statement\" class=\"headerlink\" title=\"Simple Debugger Statement\"></a>Simple Debugger Statement</h3><p>The example above has a great workflow. However, there is an alternative option where you can use the <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/debugger\" target=\"_blank\" rel=\"noopener\">native debugger statement</a> directly in your code. If you choose to work this way, it’s important that you remember to remove the statements when you’re done.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  data() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      message: <span class=\"string\">''</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  mounted() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> hello = <span class=\"string\">'Hello World!'</span></span><br><span class=\"line\">    <span class=\"keyword\">debugger</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.message = hello</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/script&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"Acknowledgements\"><a href=\"#Acknowledgements\" class=\"headerlink\" title=\"Acknowledgements\"></a>Acknowledgements</h2><p>This recipe was based on a contribution from <a href=\"https://twitter.com/auchenberg\" target=\"_blank\" rel=\"noopener\">Kenneth Auchenberg</a>, <a href=\"https://github.com/Microsoft/VSCode-recipes/tree/master/vuejs-cli\" target=\"_blank\" rel=\"noopener\">available here</a>.</p>\n"},{"title":"Dockerize Vue.js App","type":"cookbook","order":13,"_content":"\n## Simple Example\n\nSo you built your first Vue.js app using the amazing [Vue.js webpack template](https://github.com/vuejs-templates/webpack) and now you really want to show off with your colleagues by demonstrating that you can also run it in a Docker container.\n\nLet's start by creating a `Dockerfile` in the root folder of our project:\n\n```docker\nFROM node:9.11.1-alpine\n\n# install simple http server for serving static content\nRUN npm install -g http-server\n\n# make the 'app' folder the current working directory\nWORKDIR /app\n\n# copy both 'package.json' and 'package-lock.json' (if available)\nCOPY package*.json ./\n\n# install project dependencies\nRUN npm install\n\n# copy project files and folders to the current working directory (i.e. 'app' folder)\nCOPY . .\n\n# build app for production with minification\nRUN npm run build\n\nEXPOSE 8080\nCMD [ \"http-server\", \"dist\" ]\n```\n\nIt may seem reduntant to first copy `package.json` and `package-lock.json` and then all project files and folders in two separate steps but there is actually [a very good reason for that](http://bitjudo.com/blog/2014/03/13/building-efficient-dockerfiles-node-dot-js/) (spoiler: it allows us to take advantage of cached Docker layers).\n\nNow let's build the Docker image of our Vue.js app:\n\n```bash\ndocker build -t vuejs-cookbook/dockerize-vuejs-app .\n```\n\nFinally, let's run our Vue.js app in a Docker container:\n\n```bash\ndocker run -it -p 8080:8080 --rm --name dockerize-vuejs-app-1 vuejs-cookbook/dockerize-vuejs-app\n```\n\nWe should be able to access our Vue.js app on `localhost:8080`.\n\n## Real-World Example\n\nIn the previous example, we used a simple, zero-configuration command-line [http server](https://github.com/indexzero/http-server) to serve our Vue.js app which is perfectly ok for quick prototyping and _may_ even be ok for simple production scenarios. After all, the documentation says:\n\n> It is powerful enough for production usage, but it's simple and hackable enough to be used for testing, local development, and learning.\n\nNevertheless, for realistically complex production use cases, it may be wiser to stand on the shoulders of some giant like [NGINX](https://www.nginx.com/) or [Apache](https://httpd.apache.org/) and that is exactly what we are going to do next: we are about to leverage NGINX to serve our vue.js app because it is considered to be one of the most performant and battle-tested solutions out there.\n\nLet's refactor our `Dockerfile` to use NGINX:\n\n ```docker\n# build stage\nFROM node:9.11.1-alpine as build-stage\nWORKDIR /app\nCOPY package*.json ./\nRUN npm install\nCOPY . .\nRUN npm run build\n\n# production stage\nFROM nginx:1.13.12-alpine as production-stage\nCOPY --from=build-stage /app/dist /usr/share/nginx/html\nEXPOSE 80\nCMD [\"nginx\", \"-g\", \"daemon off;\"]\n```\n\nOk, let's see what's going on here:\n* we have split our original `Dockerfile` in multiple stages by leveraging the Docker [multi-stage builds](https://docs.docker.com/develop/develop-images/multistage-build/) feature;\n* the first stage is responsible for building a production-ready artifact of our Vue.js app;\n* the second stage is responsible for serving such artifact using NGINX.\n\nNow let's build the Docker image of our Vue.js app:\n\n```bash\ndocker build -t vuejs-cookbook/dockerize-vuejs-app .\n```\n\nFinally, let's run our Vue.js app in a Docker container:\n\n```bash\ndocker run -it -p 8080:80 --rm --name dockerize-vuejs-app-1 vuejs-cookbook/dockerize-vuejs-app\n```\n\nWe should be able to access our Vue.js app on `localhost:8080`.\n\n## Additional Context\n\nIf you are reading this cookbook, chances are you already know why you decided to dockerize your Vue.js app. But if you simply landed on this page after hitting the Google's `I'm feeling lucky` button, let me share with you a couple of good reasons for doing that.\n\nToday's modern trend is to build applications using the [Cloud-Native](https://pivotal.io/cloud-native) approach which revolves mainly around the following buzzwords:\n* Microservices\n* DevOps\n* Continuous Delivery\n\nLet's see how these concepts actually affect our decision of dockerizing our Vue.js app.\n\n### Effects of Microservices\n\nBy adopting the [microservices architectural style](https://martinfowler.com/microservices/), we end up building a single application as a suite of small services, each running in its own process and communicating with lightweight mechanisms. These services are built around business capabilities and independently deployable by fully automated deployment machinery. \n\nSo, committing to this architectural approach most of the time implies developing and delivering our front-end as an independent service.\n\n### Effects of DevOps\n\nThe adoption of [DevOps](https://martinfowler.com/bliki/DevOpsCulture.html) culture, tools and agile engineering practices has, among other things, the nice effect of increasing the collaboration between the roles of development and operations. One of the main problem of the past (but also today in some realities) is that the dev team tended to be uninterested in the operation and maintenance of a system once it was handed over to the ops team, while the latter tended to be not really aware of the system's business goals and, therefore, reluctant in satisfying the operational needs of the system (also referred to as \"whims of developers\").\n\nSo, delivering our Vue.js app as a Docker image helps reducing, if not removing entirely, the difference between running the service on a deveveloper's laptop, the production environment or any environment we may think of.\n\n### Effects of Continuous Delivery\n\nBy leveraging the [Continuous Delivery](https://martinfowler.com/bliki/ContinuousDelivery.html) discipline we build our software in a way that it can potentially be released to production at any time. Such engineering practice is enabled by means of what is normally called [continuous delivery pipeline](https://martinfowler.com/bliki/DeploymentPipeline.html). The purpose of a continuous delivery pipeline is to split our build into stages (e.g. compilation, unit tests, integration tests, performance tests, etc.) and let each stage verify our build artifact whenever our software changes. Ultimately, each stage increases our confidence in the production readiness of our build artifact and, therefore, reduces the risk of breaking things in production (or any other environment for that matters).\n\nSo, creating a Docker image for our Vue.js app is a good choice here because that would represent our final build artifact, the same artifact that would be verified against our continuous delivery pipeline and that could potentially be released to production with confidence.\n\n## Alternative Patterns\n\nIf your company is not into Docker and Kubernetes just yet or you simply want to get your MVP out the door, maybe dockerizing your Vue.js app is not what you need.\n\nCommon alternatives are:\n* leveraging an all-in-one platform like [netlify](https://www.netlify.com/);\n* hosting your SPA on [Amazon S3](https://aws.amazon.com/s3/) and serving it with [Amazon CloudFront](https://aws.amazon.com/cloudfront/) (see [this](https://serverless-stack.com/chapters/deploy-the-frontend.html) link for a detailed guide).","source":"v2/cookbook/dockerize-vuejs-app.md","raw":"---\ntitle: Dockerize Vue.js App\ntype: cookbook\norder: 13\n---\n\n## Simple Example\n\nSo you built your first Vue.js app using the amazing [Vue.js webpack template](https://github.com/vuejs-templates/webpack) and now you really want to show off with your colleagues by demonstrating that you can also run it in a Docker container.\n\nLet's start by creating a `Dockerfile` in the root folder of our project:\n\n```docker\nFROM node:9.11.1-alpine\n\n# install simple http server for serving static content\nRUN npm install -g http-server\n\n# make the 'app' folder the current working directory\nWORKDIR /app\n\n# copy both 'package.json' and 'package-lock.json' (if available)\nCOPY package*.json ./\n\n# install project dependencies\nRUN npm install\n\n# copy project files and folders to the current working directory (i.e. 'app' folder)\nCOPY . .\n\n# build app for production with minification\nRUN npm run build\n\nEXPOSE 8080\nCMD [ \"http-server\", \"dist\" ]\n```\n\nIt may seem reduntant to first copy `package.json` and `package-lock.json` and then all project files and folders in two separate steps but there is actually [a very good reason for that](http://bitjudo.com/blog/2014/03/13/building-efficient-dockerfiles-node-dot-js/) (spoiler: it allows us to take advantage of cached Docker layers).\n\nNow let's build the Docker image of our Vue.js app:\n\n```bash\ndocker build -t vuejs-cookbook/dockerize-vuejs-app .\n```\n\nFinally, let's run our Vue.js app in a Docker container:\n\n```bash\ndocker run -it -p 8080:8080 --rm --name dockerize-vuejs-app-1 vuejs-cookbook/dockerize-vuejs-app\n```\n\nWe should be able to access our Vue.js app on `localhost:8080`.\n\n## Real-World Example\n\nIn the previous example, we used a simple, zero-configuration command-line [http server](https://github.com/indexzero/http-server) to serve our Vue.js app which is perfectly ok for quick prototyping and _may_ even be ok for simple production scenarios. After all, the documentation says:\n\n> It is powerful enough for production usage, but it's simple and hackable enough to be used for testing, local development, and learning.\n\nNevertheless, for realistically complex production use cases, it may be wiser to stand on the shoulders of some giant like [NGINX](https://www.nginx.com/) or [Apache](https://httpd.apache.org/) and that is exactly what we are going to do next: we are about to leverage NGINX to serve our vue.js app because it is considered to be one of the most performant and battle-tested solutions out there.\n\nLet's refactor our `Dockerfile` to use NGINX:\n\n ```docker\n# build stage\nFROM node:9.11.1-alpine as build-stage\nWORKDIR /app\nCOPY package*.json ./\nRUN npm install\nCOPY . .\nRUN npm run build\n\n# production stage\nFROM nginx:1.13.12-alpine as production-stage\nCOPY --from=build-stage /app/dist /usr/share/nginx/html\nEXPOSE 80\nCMD [\"nginx\", \"-g\", \"daemon off;\"]\n```\n\nOk, let's see what's going on here:\n* we have split our original `Dockerfile` in multiple stages by leveraging the Docker [multi-stage builds](https://docs.docker.com/develop/develop-images/multistage-build/) feature;\n* the first stage is responsible for building a production-ready artifact of our Vue.js app;\n* the second stage is responsible for serving such artifact using NGINX.\n\nNow let's build the Docker image of our Vue.js app:\n\n```bash\ndocker build -t vuejs-cookbook/dockerize-vuejs-app .\n```\n\nFinally, let's run our Vue.js app in a Docker container:\n\n```bash\ndocker run -it -p 8080:80 --rm --name dockerize-vuejs-app-1 vuejs-cookbook/dockerize-vuejs-app\n```\n\nWe should be able to access our Vue.js app on `localhost:8080`.\n\n## Additional Context\n\nIf you are reading this cookbook, chances are you already know why you decided to dockerize your Vue.js app. But if you simply landed on this page after hitting the Google's `I'm feeling lucky` button, let me share with you a couple of good reasons for doing that.\n\nToday's modern trend is to build applications using the [Cloud-Native](https://pivotal.io/cloud-native) approach which revolves mainly around the following buzzwords:\n* Microservices\n* DevOps\n* Continuous Delivery\n\nLet's see how these concepts actually affect our decision of dockerizing our Vue.js app.\n\n### Effects of Microservices\n\nBy adopting the [microservices architectural style](https://martinfowler.com/microservices/), we end up building a single application as a suite of small services, each running in its own process and communicating with lightweight mechanisms. These services are built around business capabilities and independently deployable by fully automated deployment machinery. \n\nSo, committing to this architectural approach most of the time implies developing and delivering our front-end as an independent service.\n\n### Effects of DevOps\n\nThe adoption of [DevOps](https://martinfowler.com/bliki/DevOpsCulture.html) culture, tools and agile engineering practices has, among other things, the nice effect of increasing the collaboration between the roles of development and operations. One of the main problem of the past (but also today in some realities) is that the dev team tended to be uninterested in the operation and maintenance of a system once it was handed over to the ops team, while the latter tended to be not really aware of the system's business goals and, therefore, reluctant in satisfying the operational needs of the system (also referred to as \"whims of developers\").\n\nSo, delivering our Vue.js app as a Docker image helps reducing, if not removing entirely, the difference between running the service on a deveveloper's laptop, the production environment or any environment we may think of.\n\n### Effects of Continuous Delivery\n\nBy leveraging the [Continuous Delivery](https://martinfowler.com/bliki/ContinuousDelivery.html) discipline we build our software in a way that it can potentially be released to production at any time. Such engineering practice is enabled by means of what is normally called [continuous delivery pipeline](https://martinfowler.com/bliki/DeploymentPipeline.html). The purpose of a continuous delivery pipeline is to split our build into stages (e.g. compilation, unit tests, integration tests, performance tests, etc.) and let each stage verify our build artifact whenever our software changes. Ultimately, each stage increases our confidence in the production readiness of our build artifact and, therefore, reduces the risk of breaking things in production (or any other environment for that matters).\n\nSo, creating a Docker image for our Vue.js app is a good choice here because that would represent our final build artifact, the same artifact that would be verified against our continuous delivery pipeline and that could potentially be released to production with confidence.\n\n## Alternative Patterns\n\nIf your company is not into Docker and Kubernetes just yet or you simply want to get your MVP out the door, maybe dockerizing your Vue.js app is not what you need.\n\nCommon alternatives are:\n* leveraging an all-in-one platform like [netlify](https://www.netlify.com/);\n* hosting your SPA on [Amazon S3](https://aws.amazon.com/s3/) and serving it with [Amazon CloudFront](https://aws.amazon.com/cloudfront/) (see [this](https://serverless-stack.com/chapters/deploy-the-frontend.html) link for a detailed guide).","date":"2018-07-19T04:04:16.856Z","updated":"2018-07-19T04:04:16.856Z","path":"v2/cookbook/dockerize-vuejs-app.html","comments":1,"layout":"page","_id":"cjk0zidoh000jvkrtqnhlkqgj","content":"<h2 id=\"Simple-Example\"><a href=\"#Simple-Example\" class=\"headerlink\" title=\"Simple Example\"></a>Simple Example</h2><p>So you built your first Vue.js app using the amazing <a href=\"https://github.com/vuejs-templates/webpack\" target=\"_blank\" rel=\"noopener\">Vue.js webpack template</a> and now you really want to show off with your colleagues by demonstrating that you can also run it in a Docker container.</p>\n<p>Let’s start by creating a <code>Dockerfile</code> in the root folder of our project:</p>\n<figure class=\"highlight docker\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">FROM</span> node:<span class=\"number\">9.11</span>.<span class=\"number\">1</span>-alpine</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># install simple http server for serving static content</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"bash\"> npm install -g http-server</span></span><br><span class=\"line\"><span class=\"bash\"></span></span><br><span class=\"line\"><span class=\"bash\"><span class=\"comment\"># make the 'app' folder the current working directory</span></span></span><br><span class=\"line\"><span class=\"bash\">WORKDIR /app</span></span><br><span class=\"line\"><span class=\"bash\"></span></span><br><span class=\"line\"><span class=\"bash\"><span class=\"comment\"># copy both 'package.json' and 'package-lock.json' (if available)</span></span></span><br><span class=\"line\"><span class=\"bash\">COPY package*.json ./</span></span><br><span class=\"line\"><span class=\"bash\"></span></span><br><span class=\"line\"><span class=\"bash\"><span class=\"comment\"># install project dependencies</span></span></span><br><span class=\"line\"><span class=\"bash\">RUN npm install</span></span><br><span class=\"line\"><span class=\"bash\"></span></span><br><span class=\"line\"><span class=\"bash\"><span class=\"comment\"># copy project files and folders to the current working directory (i.e. 'app' folder)</span></span></span><br><span class=\"line\"><span class=\"bash\">COPY . .</span></span><br><span class=\"line\"><span class=\"bash\"></span></span><br><span class=\"line\"><span class=\"bash\"><span class=\"comment\"># build app for production with minification</span></span></span><br><span class=\"line\"><span class=\"bash\">RUN npm run build</span></span><br><span class=\"line\"><span class=\"bash\"></span></span><br><span class=\"line\"><span class=\"bash\">EXPOSE 8080</span></span><br><span class=\"line\"><span class=\"bash\">CMD [ <span class=\"string\">\"http-server\"</span>, <span class=\"string\">\"dist\"</span> ]</span></span><br></pre></td></tr></table></figure>\n<p>It may seem reduntant to first copy <code>package.json</code> and <code>package-lock.json</code> and then all project files and folders in two separate steps but there is actually <a href=\"http://bitjudo.com/blog/2014/03/13/building-efficient-dockerfiles-node-dot-js/\" target=\"_blank\" rel=\"noopener\">a very good reason for that</a> (spoiler: it allows us to take advantage of cached Docker layers).</p>\n<p>Now let’s build the Docker image of our Vue.js app:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker build -t vuejs-cookbook/dockerize-vuejs-app .</span><br></pre></td></tr></table></figure>\n<p>Finally, let’s run our Vue.js app in a Docker container:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker run -it -p 8080:8080 --rm --name dockerize-vuejs-app-1 vuejs-cookbook/dockerize-vuejs-app</span><br></pre></td></tr></table></figure>\n<p>We should be able to access our Vue.js app on <code>localhost:8080</code>.</p>\n<h2 id=\"Real-World-Example\"><a href=\"#Real-World-Example\" class=\"headerlink\" title=\"Real-World Example\"></a>Real-World Example</h2><p>In the previous example, we used a simple, zero-configuration command-line <a href=\"https://github.com/indexzero/http-server\" target=\"_blank\" rel=\"noopener\">http server</a> to serve our Vue.js app which is perfectly ok for quick prototyping and <em>may</em> even be ok for simple production scenarios. After all, the documentation says:</p>\n<blockquote>\n<p>It is powerful enough for production usage, but it’s simple and hackable enough to be used for testing, local development, and learning.</p>\n</blockquote>\n<p>Nevertheless, for realistically complex production use cases, it may be wiser to stand on the shoulders of some giant like <a href=\"https://www.nginx.com/\" target=\"_blank\" rel=\"noopener\">NGINX</a> or <a href=\"https://httpd.apache.org/\" target=\"_blank\" rel=\"noopener\">Apache</a> and that is exactly what we are going to do next: we are about to leverage NGINX to serve our vue.js app because it is considered to be one of the most performant and battle-tested solutions out there.</p>\n<p>Let’s refactor our <code>Dockerfile</code> to use NGINX:</p>\n <figure class=\"highlight docker\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># build stage</span></span><br><span class=\"line\"><span class=\"keyword\">FROM</span> node:<span class=\"number\">9.11</span>.<span class=\"number\">1</span>-alpine as build-stage</span><br><span class=\"line\"><span class=\"keyword\">WORKDIR</span><span class=\"bash\"> /app</span></span><br><span class=\"line\"><span class=\"bash\">COPY package*.json ./</span></span><br><span class=\"line\"><span class=\"bash\">RUN npm install</span></span><br><span class=\"line\"><span class=\"bash\">COPY . .</span></span><br><span class=\"line\"><span class=\"bash\">RUN npm run build</span></span><br><span class=\"line\"><span class=\"bash\"></span></span><br><span class=\"line\"><span class=\"bash\"><span class=\"comment\"># production stage</span></span></span><br><span class=\"line\"><span class=\"bash\">FROM nginx:1.13.12-alpine as production-stage</span></span><br><span class=\"line\"><span class=\"bash\">COPY --from=build-stage /app/dist /usr/share/nginx/html</span></span><br><span class=\"line\"><span class=\"bash\">EXPOSE 80</span></span><br><span class=\"line\"><span class=\"bash\">CMD [<span class=\"string\">\"nginx\"</span>, <span class=\"string\">\"-g\"</span>, <span class=\"string\">\"daemon off;\"</span>]</span></span><br></pre></td></tr></table></figure>\n<p>Ok, let’s see what’s going on here:</p>\n<ul>\n<li>we have split our original <code>Dockerfile</code> in multiple stages by leveraging the Docker <a href=\"https://docs.docker.com/develop/develop-images/multistage-build/\" target=\"_blank\" rel=\"noopener\">multi-stage builds</a> feature;</li>\n<li>the first stage is responsible for building a production-ready artifact of our Vue.js app;</li>\n<li>the second stage is responsible for serving such artifact using NGINX.</li>\n</ul>\n<p>Now let’s build the Docker image of our Vue.js app:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker build -t vuejs-cookbook/dockerize-vuejs-app .</span><br></pre></td></tr></table></figure>\n<p>Finally, let’s run our Vue.js app in a Docker container:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker run -it -p 8080:80 --rm --name dockerize-vuejs-app-1 vuejs-cookbook/dockerize-vuejs-app</span><br></pre></td></tr></table></figure>\n<p>We should be able to access our Vue.js app on <code>localhost:8080</code>.</p>\n<h2 id=\"Additional-Context\"><a href=\"#Additional-Context\" class=\"headerlink\" title=\"Additional Context\"></a>Additional Context</h2><p>If you are reading this cookbook, chances are you already know why you decided to dockerize your Vue.js app. But if you simply landed on this page after hitting the Google’s <code>I&#39;m feeling lucky</code> button, let me share with you a couple of good reasons for doing that.</p>\n<p>Today’s modern trend is to build applications using the <a href=\"https://pivotal.io/cloud-native\" target=\"_blank\" rel=\"noopener\">Cloud-Native</a> approach which revolves mainly around the following buzzwords:</p>\n<ul>\n<li>Microservices</li>\n<li>DevOps</li>\n<li>Continuous Delivery</li>\n</ul>\n<p>Let’s see how these concepts actually affect our decision of dockerizing our Vue.js app.</p>\n<h3 id=\"Effects-of-Microservices\"><a href=\"#Effects-of-Microservices\" class=\"headerlink\" title=\"Effects of Microservices\"></a>Effects of Microservices</h3><p>By adopting the <a href=\"https://martinfowler.com/microservices/\" target=\"_blank\" rel=\"noopener\">microservices architectural style</a>, we end up building a single application as a suite of small services, each running in its own process and communicating with lightweight mechanisms. These services are built around business capabilities and independently deployable by fully automated deployment machinery. </p>\n<p>So, committing to this architectural approach most of the time implies developing and delivering our front-end as an independent service.</p>\n<h3 id=\"Effects-of-DevOps\"><a href=\"#Effects-of-DevOps\" class=\"headerlink\" title=\"Effects of DevOps\"></a>Effects of DevOps</h3><p>The adoption of <a href=\"https://martinfowler.com/bliki/DevOpsCulture.html\" target=\"_blank\" rel=\"noopener\">DevOps</a> culture, tools and agile engineering practices has, among other things, the nice effect of increasing the collaboration between the roles of development and operations. One of the main problem of the past (but also today in some realities) is that the dev team tended to be uninterested in the operation and maintenance of a system once it was handed over to the ops team, while the latter tended to be not really aware of the system’s business goals and, therefore, reluctant in satisfying the operational needs of the system (also referred to as “whims of developers”).</p>\n<p>So, delivering our Vue.js app as a Docker image helps reducing, if not removing entirely, the difference between running the service on a deveveloper’s laptop, the production environment or any environment we may think of.</p>\n<h3 id=\"Effects-of-Continuous-Delivery\"><a href=\"#Effects-of-Continuous-Delivery\" class=\"headerlink\" title=\"Effects of Continuous Delivery\"></a>Effects of Continuous Delivery</h3><p>By leveraging the <a href=\"https://martinfowler.com/bliki/ContinuousDelivery.html\" target=\"_blank\" rel=\"noopener\">Continuous Delivery</a> discipline we build our software in a way that it can potentially be released to production at any time. Such engineering practice is enabled by means of what is normally called <a href=\"https://martinfowler.com/bliki/DeploymentPipeline.html\" target=\"_blank\" rel=\"noopener\">continuous delivery pipeline</a>. The purpose of a continuous delivery pipeline is to split our build into stages (e.g. compilation, unit tests, integration tests, performance tests, etc.) and let each stage verify our build artifact whenever our software changes. Ultimately, each stage increases our confidence in the production readiness of our build artifact and, therefore, reduces the risk of breaking things in production (or any other environment for that matters).</p>\n<p>So, creating a Docker image for our Vue.js app is a good choice here because that would represent our final build artifact, the same artifact that would be verified against our continuous delivery pipeline and that could potentially be released to production with confidence.</p>\n<h2 id=\"Alternative-Patterns\"><a href=\"#Alternative-Patterns\" class=\"headerlink\" title=\"Alternative Patterns\"></a>Alternative Patterns</h2><p>If your company is not into Docker and Kubernetes just yet or you simply want to get your MVP out the door, maybe dockerizing your Vue.js app is not what you need.</p>\n<p>Common alternatives are:</p>\n<ul>\n<li>leveraging an all-in-one platform like <a href=\"https://www.netlify.com/\" target=\"_blank\" rel=\"noopener\">netlify</a>;</li>\n<li>hosting your SPA on <a href=\"https://aws.amazon.com/s3/\" target=\"_blank\" rel=\"noopener\">Amazon S3</a> and serving it with <a href=\"https://aws.amazon.com/cloudfront/\" target=\"_blank\" rel=\"noopener\">Amazon CloudFront</a> (see <a href=\"https://serverless-stack.com/chapters/deploy-the-frontend.html\" target=\"_blank\" rel=\"noopener\">this</a> link for a detailed guide).</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Simple-Example\"><a href=\"#Simple-Example\" class=\"headerlink\" title=\"Simple Example\"></a>Simple Example</h2><p>So you built your first Vue.js app using the amazing <a href=\"https://github.com/vuejs-templates/webpack\" target=\"_blank\" rel=\"noopener\">Vue.js webpack template</a> and now you really want to show off with your colleagues by demonstrating that you can also run it in a Docker container.</p>\n<p>Let’s start by creating a <code>Dockerfile</code> in the root folder of our project:</p>\n<figure class=\"highlight docker\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">FROM</span> node:<span class=\"number\">9.11</span>.<span class=\"number\">1</span>-alpine</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># install simple http server for serving static content</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"bash\"> npm install -g http-server</span></span><br><span class=\"line\"><span class=\"bash\"></span></span><br><span class=\"line\"><span class=\"bash\"><span class=\"comment\"># make the 'app' folder the current working directory</span></span></span><br><span class=\"line\"><span class=\"bash\">WORKDIR /app</span></span><br><span class=\"line\"><span class=\"bash\"></span></span><br><span class=\"line\"><span class=\"bash\"><span class=\"comment\"># copy both 'package.json' and 'package-lock.json' (if available)</span></span></span><br><span class=\"line\"><span class=\"bash\">COPY package*.json ./</span></span><br><span class=\"line\"><span class=\"bash\"></span></span><br><span class=\"line\"><span class=\"bash\"><span class=\"comment\"># install project dependencies</span></span></span><br><span class=\"line\"><span class=\"bash\">RUN npm install</span></span><br><span class=\"line\"><span class=\"bash\"></span></span><br><span class=\"line\"><span class=\"bash\"><span class=\"comment\"># copy project files and folders to the current working directory (i.e. 'app' folder)</span></span></span><br><span class=\"line\"><span class=\"bash\">COPY . .</span></span><br><span class=\"line\"><span class=\"bash\"></span></span><br><span class=\"line\"><span class=\"bash\"><span class=\"comment\"># build app for production with minification</span></span></span><br><span class=\"line\"><span class=\"bash\">RUN npm run build</span></span><br><span class=\"line\"><span class=\"bash\"></span></span><br><span class=\"line\"><span class=\"bash\">EXPOSE 8080</span></span><br><span class=\"line\"><span class=\"bash\">CMD [ <span class=\"string\">\"http-server\"</span>, <span class=\"string\">\"dist\"</span> ]</span></span><br></pre></td></tr></table></figure>\n<p>It may seem reduntant to first copy <code>package.json</code> and <code>package-lock.json</code> and then all project files and folders in two separate steps but there is actually <a href=\"http://bitjudo.com/blog/2014/03/13/building-efficient-dockerfiles-node-dot-js/\" target=\"_blank\" rel=\"noopener\">a very good reason for that</a> (spoiler: it allows us to take advantage of cached Docker layers).</p>\n<p>Now let’s build the Docker image of our Vue.js app:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker build -t vuejs-cookbook/dockerize-vuejs-app .</span><br></pre></td></tr></table></figure>\n<p>Finally, let’s run our Vue.js app in a Docker container:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker run -it -p 8080:8080 --rm --name dockerize-vuejs-app-1 vuejs-cookbook/dockerize-vuejs-app</span><br></pre></td></tr></table></figure>\n<p>We should be able to access our Vue.js app on <code>localhost:8080</code>.</p>\n<h2 id=\"Real-World-Example\"><a href=\"#Real-World-Example\" class=\"headerlink\" title=\"Real-World Example\"></a>Real-World Example</h2><p>In the previous example, we used a simple, zero-configuration command-line <a href=\"https://github.com/indexzero/http-server\" target=\"_blank\" rel=\"noopener\">http server</a> to serve our Vue.js app which is perfectly ok for quick prototyping and <em>may</em> even be ok for simple production scenarios. After all, the documentation says:</p>\n<blockquote>\n<p>It is powerful enough for production usage, but it’s simple and hackable enough to be used for testing, local development, and learning.</p>\n</blockquote>\n<p>Nevertheless, for realistically complex production use cases, it may be wiser to stand on the shoulders of some giant like <a href=\"https://www.nginx.com/\" target=\"_blank\" rel=\"noopener\">NGINX</a> or <a href=\"https://httpd.apache.org/\" target=\"_blank\" rel=\"noopener\">Apache</a> and that is exactly what we are going to do next: we are about to leverage NGINX to serve our vue.js app because it is considered to be one of the most performant and battle-tested solutions out there.</p>\n<p>Let’s refactor our <code>Dockerfile</code> to use NGINX:</p>\n <figure class=\"highlight docker\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># build stage</span></span><br><span class=\"line\"><span class=\"keyword\">FROM</span> node:<span class=\"number\">9.11</span>.<span class=\"number\">1</span>-alpine as build-stage</span><br><span class=\"line\"><span class=\"keyword\">WORKDIR</span><span class=\"bash\"> /app</span></span><br><span class=\"line\"><span class=\"bash\">COPY package*.json ./</span></span><br><span class=\"line\"><span class=\"bash\">RUN npm install</span></span><br><span class=\"line\"><span class=\"bash\">COPY . .</span></span><br><span class=\"line\"><span class=\"bash\">RUN npm run build</span></span><br><span class=\"line\"><span class=\"bash\"></span></span><br><span class=\"line\"><span class=\"bash\"><span class=\"comment\"># production stage</span></span></span><br><span class=\"line\"><span class=\"bash\">FROM nginx:1.13.12-alpine as production-stage</span></span><br><span class=\"line\"><span class=\"bash\">COPY --from=build-stage /app/dist /usr/share/nginx/html</span></span><br><span class=\"line\"><span class=\"bash\">EXPOSE 80</span></span><br><span class=\"line\"><span class=\"bash\">CMD [<span class=\"string\">\"nginx\"</span>, <span class=\"string\">\"-g\"</span>, <span class=\"string\">\"daemon off;\"</span>]</span></span><br></pre></td></tr></table></figure>\n<p>Ok, let’s see what’s going on here:</p>\n<ul>\n<li>we have split our original <code>Dockerfile</code> in multiple stages by leveraging the Docker <a href=\"https://docs.docker.com/develop/develop-images/multistage-build/\" target=\"_blank\" rel=\"noopener\">multi-stage builds</a> feature;</li>\n<li>the first stage is responsible for building a production-ready artifact of our Vue.js app;</li>\n<li>the second stage is responsible for serving such artifact using NGINX.</li>\n</ul>\n<p>Now let’s build the Docker image of our Vue.js app:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker build -t vuejs-cookbook/dockerize-vuejs-app .</span><br></pre></td></tr></table></figure>\n<p>Finally, let’s run our Vue.js app in a Docker container:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker run -it -p 8080:80 --rm --name dockerize-vuejs-app-1 vuejs-cookbook/dockerize-vuejs-app</span><br></pre></td></tr></table></figure>\n<p>We should be able to access our Vue.js app on <code>localhost:8080</code>.</p>\n<h2 id=\"Additional-Context\"><a href=\"#Additional-Context\" class=\"headerlink\" title=\"Additional Context\"></a>Additional Context</h2><p>If you are reading this cookbook, chances are you already know why you decided to dockerize your Vue.js app. But if you simply landed on this page after hitting the Google’s <code>I&#39;m feeling lucky</code> button, let me share with you a couple of good reasons for doing that.</p>\n<p>Today’s modern trend is to build applications using the <a href=\"https://pivotal.io/cloud-native\" target=\"_blank\" rel=\"noopener\">Cloud-Native</a> approach which revolves mainly around the following buzzwords:</p>\n<ul>\n<li>Microservices</li>\n<li>DevOps</li>\n<li>Continuous Delivery</li>\n</ul>\n<p>Let’s see how these concepts actually affect our decision of dockerizing our Vue.js app.</p>\n<h3 id=\"Effects-of-Microservices\"><a href=\"#Effects-of-Microservices\" class=\"headerlink\" title=\"Effects of Microservices\"></a>Effects of Microservices</h3><p>By adopting the <a href=\"https://martinfowler.com/microservices/\" target=\"_blank\" rel=\"noopener\">microservices architectural style</a>, we end up building a single application as a suite of small services, each running in its own process and communicating with lightweight mechanisms. These services are built around business capabilities and independently deployable by fully automated deployment machinery. </p>\n<p>So, committing to this architectural approach most of the time implies developing and delivering our front-end as an independent service.</p>\n<h3 id=\"Effects-of-DevOps\"><a href=\"#Effects-of-DevOps\" class=\"headerlink\" title=\"Effects of DevOps\"></a>Effects of DevOps</h3><p>The adoption of <a href=\"https://martinfowler.com/bliki/DevOpsCulture.html\" target=\"_blank\" rel=\"noopener\">DevOps</a> culture, tools and agile engineering practices has, among other things, the nice effect of increasing the collaboration between the roles of development and operations. One of the main problem of the past (but also today in some realities) is that the dev team tended to be uninterested in the operation and maintenance of a system once it was handed over to the ops team, while the latter tended to be not really aware of the system’s business goals and, therefore, reluctant in satisfying the operational needs of the system (also referred to as “whims of developers”).</p>\n<p>So, delivering our Vue.js app as a Docker image helps reducing, if not removing entirely, the difference between running the service on a deveveloper’s laptop, the production environment or any environment we may think of.</p>\n<h3 id=\"Effects-of-Continuous-Delivery\"><a href=\"#Effects-of-Continuous-Delivery\" class=\"headerlink\" title=\"Effects of Continuous Delivery\"></a>Effects of Continuous Delivery</h3><p>By leveraging the <a href=\"https://martinfowler.com/bliki/ContinuousDelivery.html\" target=\"_blank\" rel=\"noopener\">Continuous Delivery</a> discipline we build our software in a way that it can potentially be released to production at any time. Such engineering practice is enabled by means of what is normally called <a href=\"https://martinfowler.com/bliki/DeploymentPipeline.html\" target=\"_blank\" rel=\"noopener\">continuous delivery pipeline</a>. The purpose of a continuous delivery pipeline is to split our build into stages (e.g. compilation, unit tests, integration tests, performance tests, etc.) and let each stage verify our build artifact whenever our software changes. Ultimately, each stage increases our confidence in the production readiness of our build artifact and, therefore, reduces the risk of breaking things in production (or any other environment for that matters).</p>\n<p>So, creating a Docker image for our Vue.js app is a good choice here because that would represent our final build artifact, the same artifact that would be verified against our continuous delivery pipeline and that could potentially be released to production with confidence.</p>\n<h2 id=\"Alternative-Patterns\"><a href=\"#Alternative-Patterns\" class=\"headerlink\" title=\"Alternative Patterns\"></a>Alternative Patterns</h2><p>If your company is not into Docker and Kubernetes just yet or you simply want to get your MVP out the door, maybe dockerizing your Vue.js app is not what you need.</p>\n<p>Common alternatives are:</p>\n<ul>\n<li>leveraging an all-in-one platform like <a href=\"https://www.netlify.com/\" target=\"_blank\" rel=\"noopener\">netlify</a>;</li>\n<li>hosting your SPA on <a href=\"https://aws.amazon.com/s3/\" target=\"_blank\" rel=\"noopener\">Amazon S3</a> and serving it with <a href=\"https://aws.amazon.com/cloudfront/\" target=\"_blank\" rel=\"noopener\">Amazon CloudFront</a> (see <a href=\"https://serverless-stack.com/chapters/deploy-the-frontend.html\" target=\"_blank\" rel=\"noopener\">this</a> link for a detailed guide).</li>\n</ul>\n"},{"title":"Editable SVG Icon Systems","type":"cookbook","order":4,"_content":"\n## Base Example\n\nThere are many ways to create an SVG Icon System, but one method that takes advantage of Vue's capabilities is to create editable inline icons as components. Some of the advantages of this way of working is:\n\n* They are easy to edit on the fly\n* They are animatable\n* You can use standard props and defaults to keep them to a typical size or alter them if you need to\n* They are inline, so no HTTP requests are necessary\n* They can be made accessible dynamically\n\nFirst, we'll create a folder for all of the icons, and name them in a standardized fashion for easy retrieval:\n\n> components/icons/IconBox.vue\n> components/icons/IconCalendar.vue\n> components/icons/IconEnvelope.vue\n\nHere's an example repo to get you going, where you can see the entire setup: [https://github.com/sdras/vue-sample-svg-icons/](https://github.com/sdras/vue-sample-svg-icons/)\n\n![Documentation site](https://s3-us-west-2.amazonaws.com/s.cdpn.io/28963/screendocs.jpg 'Docs demo')\n\nWe'll create a base icon (`IconBase.vue`) component that uses a slot.\n\n```html\n<template>\n  <svg xmlns=\"http://www.w3.org/2000/svg\"\n    :width=\"width\"\n    :height=\"height\"\n    viewBox=\"0 0 18 18\"\n    :aria-labelledby=\"iconName\"\n    role=\"presentation\"\n  >\n    <title :id=\"iconName\" lang=\"en\">{{iconName}} icon</title>\n    <g :fill=\"iconColor\">\n      <slot />\n    </g>\n  </svg>\n</template>\n```\n\nYou can use this base icon as is- the only thing you might need to update is the `viewBox` depending on the `viewBox` of your icons. In the base, we're making the `width`, `height`, `iconColor`, and name of the icon props so that it can be dynamically updated with props. The name will be used for both the `<title>` content and its `id` for accessibility.\n\nOur script will look like this, we'll have some defaults so that our icon will be rendered consistently unless we state otherwise:\n\n```js\nexport default {\n  props: {\n    iconName: {\n      type: String,\n      default: 'box'\n    },\n    width: {\n      type: [Number, String],\n      default: 18\n    },\n    height: {\n      type: [Number, String],\n      default: 18\n    },\n    iconColor: {\n      type: String,\n      default: 'currentColor'\n    }\n  }\n}\n```\n\nThe `currentColor` property that's the default on the fill will make the icon inherit the color of whatever text surrounds it. We could also pass in a different color as a prop if we wish.\n\nWe can use it like so, with the only contents of `IconWrite.vue` containing the paths inside the icon:\n\n```html\n<icon-base icon-name=\"write\"><icon-write /></icon-base>\n```\n\nNow, if we'd like to make many sizes for the icon, we can do so very easily:\n\n```html\n<p>\n  <!-- you can pass in a smaller `width` and `height` as props -->\n  <icon-base width=\"12\" height=\"12\" icon-name=\"write\"><icon-write /></icon-base>\n  <!-- or you can use the default, which is 18 -->\n  <icon-base icon-name=\"write\"><icon-write /></icon-base>\n  <!-- or make it a little bigger too :) -->\n  <icon-base width=\"30\" height=\"30\" icon-name=\"write\"><icon-write /></icon-base>\n</p>\n```\n\n<img src=\"https://s3-us-west-2.amazonaws.com/s.cdpn.io/28963/Screen%20Shot%202018-01-01%20at%204.51.40%20PM.png\" width=\"450\" />\n\n## Animatable Icons\n\nKeeping icons in components comes in very handy when you'd like to animate them, especially on an interaction. Inline SVGs have the highest support for interaction of any method. Here's a very basic example of an icon that's animated on click:\n\n```html\n<template>\n  <svg @click=\"startScissors\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n    viewBox=\"0 0 100 100\"\n    width=\"100\"\n    height=\"100\"\n    aria-labelledby=\"scissors\"\n    role=\"presentation\"\n    >\n    <title id=\"scissors\" lang=\"en\">Scissors Animated Icon</title>\n    <path id=\"bk\" fill=\"#fff\" d=\"M0 0h100v100H0z\"/>\n    <g ref=\"leftscissor\">\n      <path d=\"M...\"/>\n      ...\n    </g>\n    <g ref=\"rightscissor\">\n      <path d=\"M...\"/>\n      ...\n    </g>\n  </svg>\n</template>\n```\n\n```js\nimport { TweenMax, Sine } from 'gsap'\n\nexport default {\n  methods: {\n    startScissors() {\n      this.scissorAnim(this.$refs.rightscissor, 30)\n      this.scissorAnim(this.$refs.leftscissor, -30)\n    },\n    scissorAnim(el, rot) {\n      TweenMax.to(el, 0.25, {\n        rotation: rot,\n        repeat: 3,\n        yoyo: true,\n        svgOrigin: '50 45',\n        ease: Sine.easeInOut\n      })\n    }\n  }\n}\n```\n\nWe're applying `refs` to the groups of paths we need to move, and as both sides of the scissors have to move in tandem, we'll create a function we can reuse where we'll pass in the `refs`. The use of GreenSock helps resolve animation support and `transform-origin` issues across browser.\n\n<p data-height=\"300\" data-theme-id=\"0\" data-slug-hash=\"dJRpgY\" data-default-tab=\"result\" data-user=\"Vue\" data-embed-version=\"2\" data-pen-title=\"Editable SVG Icon System: Animated icon\" class=\"codepen\">See the Pen <a href=\"https://codepen.io/team/Vue/pen/dJRpgY/\">Editable SVG Icon System: Animated icon</a> by Vue (<a href=\"https://codepen.io/Vue\">@Vue</a>) on <a href=\"https://codepen.io\">CodePen</a>.</p><script async src=\"https://production-assets.codepen.io/assets/embed/ei.js\"></script>\n\n<p style=\"margin-top:-30px\">Pretty easily accomplished! And easy to update on the fly.</p>\n\nYou can see more animated examples in the repo [here](https://github.com/sdras/vue-sample-svg-icons/)\n\n## Additional Notes\n\nDesigners may change their minds. Product requirements change. Keeping the logic for the entire icon system in one base component means you can quickly update all of your icons and have it propagate through the whole system. Even with the use of an icon loader, some situations require you to recreate or edit every SVG to make global changes. This method can save you that time and pain.\n\n## When To Avoid This Pattern\n\nThis type of SVG icon system is really useful when you have a number of icons that are used in different ways throughout your site. If you're repeating the same icon many times on one page (e.g. a giant table a delete icon in each row), it might make more sense to have all of the sprites compiled into a sprite sheet and use `<use>` tags to load them.\n\n## Alternative Patterns\n\nOther tooling to help manage SVG icons includes:\n\n* [svg-sprite-loader](https://github.com/kisenka/svg-sprite-loader)\n* [svgo-loader](https://github.com/rpominov/svgo-loader)\n\nThese tools bundle SVGs at compile time, but make them a little harder to edit during runtime, because `<use>` tags can have strange cross-browser issues when doing anything more complex. They also leave you with two nested `viewBox` properties and thus two coordinate systems. This makes the implementation a little more complex.\n","source":"v2/cookbook/editable-svg-icons.md","raw":"---\ntitle: Editable SVG Icon Systems\ntype: cookbook\norder: 4\n---\n\n## Base Example\n\nThere are many ways to create an SVG Icon System, but one method that takes advantage of Vue's capabilities is to create editable inline icons as components. Some of the advantages of this way of working is:\n\n* They are easy to edit on the fly\n* They are animatable\n* You can use standard props and defaults to keep them to a typical size or alter them if you need to\n* They are inline, so no HTTP requests are necessary\n* They can be made accessible dynamically\n\nFirst, we'll create a folder for all of the icons, and name them in a standardized fashion for easy retrieval:\n\n> components/icons/IconBox.vue\n> components/icons/IconCalendar.vue\n> components/icons/IconEnvelope.vue\n\nHere's an example repo to get you going, where you can see the entire setup: [https://github.com/sdras/vue-sample-svg-icons/](https://github.com/sdras/vue-sample-svg-icons/)\n\n![Documentation site](https://s3-us-west-2.amazonaws.com/s.cdpn.io/28963/screendocs.jpg 'Docs demo')\n\nWe'll create a base icon (`IconBase.vue`) component that uses a slot.\n\n```html\n<template>\n  <svg xmlns=\"http://www.w3.org/2000/svg\"\n    :width=\"width\"\n    :height=\"height\"\n    viewBox=\"0 0 18 18\"\n    :aria-labelledby=\"iconName\"\n    role=\"presentation\"\n  >\n    <title :id=\"iconName\" lang=\"en\">{{iconName}} icon</title>\n    <g :fill=\"iconColor\">\n      <slot />\n    </g>\n  </svg>\n</template>\n```\n\nYou can use this base icon as is- the only thing you might need to update is the `viewBox` depending on the `viewBox` of your icons. In the base, we're making the `width`, `height`, `iconColor`, and name of the icon props so that it can be dynamically updated with props. The name will be used for both the `<title>` content and its `id` for accessibility.\n\nOur script will look like this, we'll have some defaults so that our icon will be rendered consistently unless we state otherwise:\n\n```js\nexport default {\n  props: {\n    iconName: {\n      type: String,\n      default: 'box'\n    },\n    width: {\n      type: [Number, String],\n      default: 18\n    },\n    height: {\n      type: [Number, String],\n      default: 18\n    },\n    iconColor: {\n      type: String,\n      default: 'currentColor'\n    }\n  }\n}\n```\n\nThe `currentColor` property that's the default on the fill will make the icon inherit the color of whatever text surrounds it. We could also pass in a different color as a prop if we wish.\n\nWe can use it like so, with the only contents of `IconWrite.vue` containing the paths inside the icon:\n\n```html\n<icon-base icon-name=\"write\"><icon-write /></icon-base>\n```\n\nNow, if we'd like to make many sizes for the icon, we can do so very easily:\n\n```html\n<p>\n  <!-- you can pass in a smaller `width` and `height` as props -->\n  <icon-base width=\"12\" height=\"12\" icon-name=\"write\"><icon-write /></icon-base>\n  <!-- or you can use the default, which is 18 -->\n  <icon-base icon-name=\"write\"><icon-write /></icon-base>\n  <!-- or make it a little bigger too :) -->\n  <icon-base width=\"30\" height=\"30\" icon-name=\"write\"><icon-write /></icon-base>\n</p>\n```\n\n<img src=\"https://s3-us-west-2.amazonaws.com/s.cdpn.io/28963/Screen%20Shot%202018-01-01%20at%204.51.40%20PM.png\" width=\"450\" />\n\n## Animatable Icons\n\nKeeping icons in components comes in very handy when you'd like to animate them, especially on an interaction. Inline SVGs have the highest support for interaction of any method. Here's a very basic example of an icon that's animated on click:\n\n```html\n<template>\n  <svg @click=\"startScissors\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n    viewBox=\"0 0 100 100\"\n    width=\"100\"\n    height=\"100\"\n    aria-labelledby=\"scissors\"\n    role=\"presentation\"\n    >\n    <title id=\"scissors\" lang=\"en\">Scissors Animated Icon</title>\n    <path id=\"bk\" fill=\"#fff\" d=\"M0 0h100v100H0z\"/>\n    <g ref=\"leftscissor\">\n      <path d=\"M...\"/>\n      ...\n    </g>\n    <g ref=\"rightscissor\">\n      <path d=\"M...\"/>\n      ...\n    </g>\n  </svg>\n</template>\n```\n\n```js\nimport { TweenMax, Sine } from 'gsap'\n\nexport default {\n  methods: {\n    startScissors() {\n      this.scissorAnim(this.$refs.rightscissor, 30)\n      this.scissorAnim(this.$refs.leftscissor, -30)\n    },\n    scissorAnim(el, rot) {\n      TweenMax.to(el, 0.25, {\n        rotation: rot,\n        repeat: 3,\n        yoyo: true,\n        svgOrigin: '50 45',\n        ease: Sine.easeInOut\n      })\n    }\n  }\n}\n```\n\nWe're applying `refs` to the groups of paths we need to move, and as both sides of the scissors have to move in tandem, we'll create a function we can reuse where we'll pass in the `refs`. The use of GreenSock helps resolve animation support and `transform-origin` issues across browser.\n\n<p data-height=\"300\" data-theme-id=\"0\" data-slug-hash=\"dJRpgY\" data-default-tab=\"result\" data-user=\"Vue\" data-embed-version=\"2\" data-pen-title=\"Editable SVG Icon System: Animated icon\" class=\"codepen\">See the Pen <a href=\"https://codepen.io/team/Vue/pen/dJRpgY/\">Editable SVG Icon System: Animated icon</a> by Vue (<a href=\"https://codepen.io/Vue\">@Vue</a>) on <a href=\"https://codepen.io\">CodePen</a>.</p><script async src=\"https://production-assets.codepen.io/assets/embed/ei.js\"></script>\n\n<p style=\"margin-top:-30px\">Pretty easily accomplished! And easy to update on the fly.</p>\n\nYou can see more animated examples in the repo [here](https://github.com/sdras/vue-sample-svg-icons/)\n\n## Additional Notes\n\nDesigners may change their minds. Product requirements change. Keeping the logic for the entire icon system in one base component means you can quickly update all of your icons and have it propagate through the whole system. Even with the use of an icon loader, some situations require you to recreate or edit every SVG to make global changes. This method can save you that time and pain.\n\n## When To Avoid This Pattern\n\nThis type of SVG icon system is really useful when you have a number of icons that are used in different ways throughout your site. If you're repeating the same icon many times on one page (e.g. a giant table a delete icon in each row), it might make more sense to have all of the sprites compiled into a sprite sheet and use `<use>` tags to load them.\n\n## Alternative Patterns\n\nOther tooling to help manage SVG icons includes:\n\n* [svg-sprite-loader](https://github.com/kisenka/svg-sprite-loader)\n* [svgo-loader](https://github.com/rpominov/svgo-loader)\n\nThese tools bundle SVGs at compile time, but make them a little harder to edit during runtime, because `<use>` tags can have strange cross-browser issues when doing anything more complex. They also leave you with two nested `viewBox` properties and thus two coordinate systems. This makes the implementation a little more complex.\n","date":"2018-07-19T04:04:16.856Z","updated":"2018-07-19T04:04:16.856Z","path":"v2/cookbook/editable-svg-icons.html","comments":1,"layout":"page","_id":"cjk0zidoi000kvkrts3rzfsfa","content":"<h2 id=\"Base-Example\"><a href=\"#Base-Example\" class=\"headerlink\" title=\"Base Example\"></a>Base Example</h2><p>There are many ways to create an SVG Icon System, but one method that takes advantage of Vue’s capabilities is to create editable inline icons as components. Some of the advantages of this way of working is:</p>\n<ul>\n<li>They are easy to edit on the fly</li>\n<li>They are animatable</li>\n<li>You can use standard props and defaults to keep them to a typical size or alter them if you need to</li>\n<li>They are inline, so no HTTP requests are necessary</li>\n<li>They can be made accessible dynamically</li>\n</ul>\n<p>First, we’ll create a folder for all of the icons, and name them in a standardized fashion for easy retrieval:</p>\n<blockquote>\n<p>components/icons/IconBox.vue<br>components/icons/IconCalendar.vue<br>components/icons/IconEnvelope.vue</p>\n</blockquote>\n<p>Here’s an example repo to get you going, where you can see the entire setup: <a href=\"https://github.com/sdras/vue-sample-svg-icons/\" target=\"_blank\" rel=\"noopener\">https://github.com/sdras/vue-sample-svg-icons/</a></p>\n<p><img src=\"https://s3-us-west-2.amazonaws.com/s.cdpn.io/28963/screendocs.jpg\" alt=\"Documentation site\" title=\"Docs demo\"></p>\n<p>We’ll create a base icon (<code>IconBase.vue</code>) component that uses a slot.</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">svg</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://www.w3.org/2000/svg\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">:width</span>=<span class=\"string\">\"width\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">:height</span>=<span class=\"string\">\"height\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">viewBox</span>=<span class=\"string\">\"0 0 18 18\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">:aria-labelledby</span>=<span class=\"string\">\"iconName\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">role</span>=<span class=\"string\">\"presentation\"</span></span></span><br><span class=\"line\"><span class=\"tag\">  &gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span> <span class=\"attr\">:id</span>=<span class=\"string\">\"iconName\"</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span>&#123;&#123;iconName&#125;&#125; icon<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">g</span> <span class=\"attr\">:fill</span>=<span class=\"string\">\"iconColor\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">slot</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">g</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">svg</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>You can use this base icon as is- the only thing you might need to update is the <code>viewBox</code> depending on the <code>viewBox</code> of your icons. In the base, we’re making the <code>width</code>, <code>height</code>, <code>iconColor</code>, and name of the icon props so that it can be dynamically updated with props. The name will be used for both the <code>&lt;title&gt;</code> content and its <code>id</code> for accessibility.</p>\n<p>Our script will look like this, we’ll have some defaults so that our icon will be rendered consistently unless we state otherwise:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  props: &#123;</span><br><span class=\"line\">    iconName: &#123;</span><br><span class=\"line\">      type: <span class=\"built_in\">String</span>,</span><br><span class=\"line\">      <span class=\"keyword\">default</span>: <span class=\"string\">'box'</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    width: &#123;</span><br><span class=\"line\">      type: [<span class=\"built_in\">Number</span>, <span class=\"built_in\">String</span>],</span><br><span class=\"line\">      <span class=\"keyword\">default</span>: <span class=\"number\">18</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    height: &#123;</span><br><span class=\"line\">      type: [<span class=\"built_in\">Number</span>, <span class=\"built_in\">String</span>],</span><br><span class=\"line\">      <span class=\"keyword\">default</span>: <span class=\"number\">18</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    iconColor: &#123;</span><br><span class=\"line\">      type: <span class=\"built_in\">String</span>,</span><br><span class=\"line\">      <span class=\"keyword\">default</span>: <span class=\"string\">'currentColor'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>The <code>currentColor</code> property that’s the default on the fill will make the icon inherit the color of whatever text surrounds it. We could also pass in a different color as a prop if we wish.</p>\n<p>We can use it like so, with the only contents of <code>IconWrite.vue</code> containing the paths inside the icon:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">icon-base</span> <span class=\"attr\">icon-name</span>=<span class=\"string\">\"write\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">icon-write</span> /&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">icon-base</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>Now, if we’d like to make many sizes for the icon, we can do so very easily:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- you can pass in a smaller `width` and `height` as props --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">icon-base</span> <span class=\"attr\">width</span>=<span class=\"string\">\"12\"</span> <span class=\"attr\">height</span>=<span class=\"string\">\"12\"</span> <span class=\"attr\">icon-name</span>=<span class=\"string\">\"write\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">icon-write</span> /&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">icon-base</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- or you can use the default, which is 18 --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">icon-base</span> <span class=\"attr\">icon-name</span>=<span class=\"string\">\"write\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">icon-write</span> /&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">icon-base</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- or make it a little bigger too :) --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">icon-base</span> <span class=\"attr\">width</span>=<span class=\"string\">\"30\"</span> <span class=\"attr\">height</span>=<span class=\"string\">\"30\"</span> <span class=\"attr\">icon-name</span>=<span class=\"string\">\"write\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">icon-write</span> /&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">icon-base</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"https://s3-us-west-2.amazonaws.com/s.cdpn.io/28963/Screen%20Shot%202018-01-01%20at%204.51.40%20PM.png\" width=\"450\"></p>\n<h2 id=\"Animatable-Icons\"><a href=\"#Animatable-Icons\" class=\"headerlink\" title=\"Animatable Icons\"></a>Animatable Icons</h2><p>Keeping icons in components comes in very handy when you’d like to animate them, especially on an interaction. Inline SVGs have the highest support for interaction of any method. Here’s a very basic example of an icon that’s animated on click:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">svg</span> @<span class=\"attr\">click</span>=<span class=\"string\">\"startScissors\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://www.w3.org/2000/svg\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">viewBox</span>=<span class=\"string\">\"0 0 100 100\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">width</span>=<span class=\"string\">\"100\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">height</span>=<span class=\"string\">\"100\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">aria-labelledby</span>=<span class=\"string\">\"scissors\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">role</span>=<span class=\"string\">\"presentation\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    &gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span> <span class=\"attr\">id</span>=<span class=\"string\">\"scissors\"</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span>Scissors Animated Icon<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">path</span> <span class=\"attr\">id</span>=<span class=\"string\">\"bk\"</span> <span class=\"attr\">fill</span>=<span class=\"string\">\"#fff\"</span> <span class=\"attr\">d</span>=<span class=\"string\">\"M0 0h100v100H0z\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">g</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"leftscissor\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">path</span> <span class=\"attr\">d</span>=<span class=\"string\">\"M...\"</span>/&gt;</span></span><br><span class=\"line\">      ...</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">g</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">g</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"rightscissor\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">path</span> <span class=\"attr\">d</span>=<span class=\"string\">\"M...\"</span>/&gt;</span></span><br><span class=\"line\">      ...</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">g</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">svg</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; TweenMax, Sine &#125; <span class=\"keyword\">from</span> <span class=\"string\">'gsap'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    startScissors() &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.scissorAnim(<span class=\"keyword\">this</span>.$refs.rightscissor, <span class=\"number\">30</span>)</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.scissorAnim(<span class=\"keyword\">this</span>.$refs.leftscissor, <span class=\"number\">-30</span>)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    scissorAnim(el, rot) &#123;</span><br><span class=\"line\">      TweenMax.to(el, <span class=\"number\">0.25</span>, &#123;</span><br><span class=\"line\">        rotation: rot,</span><br><span class=\"line\">        repeat: <span class=\"number\">3</span>,</span><br><span class=\"line\">        yoyo: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        svgOrigin: <span class=\"string\">'50 45'</span>,</span><br><span class=\"line\">        ease: Sine.easeInOut</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>We’re applying <code>refs</code> to the groups of paths we need to move, and as both sides of the scissors have to move in tandem, we’ll create a function we can reuse where we’ll pass in the <code>refs</code>. The use of GreenSock helps resolve animation support and <code>transform-origin</code> issues across browser.</p>\n<p data-height=\"300\" data-theme-id=\"0\" data-slug-hash=\"dJRpgY\" data-default-tab=\"result\" data-user=\"Vue\" data-embed-version=\"2\" data-pen-title=\"Editable SVG Icon System: Animated icon\" class=\"codepen\">See the Pen <a href=\"https://codepen.io/team/Vue/pen/dJRpgY/\" target=\"_blank\" rel=\"noopener\">Editable SVG Icon System: Animated icon</a> by Vue (<a href=\"https://codepen.io/Vue\" target=\"_blank\" rel=\"noopener\">@Vue</a>) on <a href=\"https://codepen.io\" target=\"_blank\" rel=\"noopener\">CodePen</a>.</p><script async src=\"https://production-assets.codepen.io/assets/embed/ei.js\"></script><br><br><p style=\"margin-top:-30px\">Pretty easily accomplished! And easy to update on the fly.</p>\n\n<p>You can see more animated examples in the repo <a href=\"https://github.com/sdras/vue-sample-svg-icons/\" target=\"_blank\" rel=\"noopener\">here</a></p>\n<h2 id=\"Additional-Notes\"><a href=\"#Additional-Notes\" class=\"headerlink\" title=\"Additional Notes\"></a>Additional Notes</h2><p>Designers may change their minds. Product requirements change. Keeping the logic for the entire icon system in one base component means you can quickly update all of your icons and have it propagate through the whole system. Even with the use of an icon loader, some situations require you to recreate or edit every SVG to make global changes. This method can save you that time and pain.</p>\n<h2 id=\"When-To-Avoid-This-Pattern\"><a href=\"#When-To-Avoid-This-Pattern\" class=\"headerlink\" title=\"When To Avoid This Pattern\"></a>When To Avoid This Pattern</h2><p>This type of SVG icon system is really useful when you have a number of icons that are used in different ways throughout your site. If you’re repeating the same icon many times on one page (e.g. a giant table a delete icon in each row), it might make more sense to have all of the sprites compiled into a sprite sheet and use <code>&lt;use&gt;</code> tags to load them.</p>\n<h2 id=\"Alternative-Patterns\"><a href=\"#Alternative-Patterns\" class=\"headerlink\" title=\"Alternative Patterns\"></a>Alternative Patterns</h2><p>Other tooling to help manage SVG icons includes:</p>\n<ul>\n<li><a href=\"https://github.com/kisenka/svg-sprite-loader\" target=\"_blank\" rel=\"noopener\">svg-sprite-loader</a></li>\n<li><a href=\"https://github.com/rpominov/svgo-loader\" target=\"_blank\" rel=\"noopener\">svgo-loader</a></li>\n</ul>\n<p>These tools bundle SVGs at compile time, but make them a little harder to edit during runtime, because <code>&lt;use&gt;</code> tags can have strange cross-browser issues when doing anything more complex. They also leave you with two nested <code>viewBox</code> properties and thus two coordinate systems. This makes the implementation a little more complex.</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Base-Example\"><a href=\"#Base-Example\" class=\"headerlink\" title=\"Base Example\"></a>Base Example</h2><p>There are many ways to create an SVG Icon System, but one method that takes advantage of Vue’s capabilities is to create editable inline icons as components. Some of the advantages of this way of working is:</p>\n<ul>\n<li>They are easy to edit on the fly</li>\n<li>They are animatable</li>\n<li>You can use standard props and defaults to keep them to a typical size or alter them if you need to</li>\n<li>They are inline, so no HTTP requests are necessary</li>\n<li>They can be made accessible dynamically</li>\n</ul>\n<p>First, we’ll create a folder for all of the icons, and name them in a standardized fashion for easy retrieval:</p>\n<blockquote>\n<p>components/icons/IconBox.vue<br>components/icons/IconCalendar.vue<br>components/icons/IconEnvelope.vue</p>\n</blockquote>\n<p>Here’s an example repo to get you going, where you can see the entire setup: <a href=\"https://github.com/sdras/vue-sample-svg-icons/\" target=\"_blank\" rel=\"noopener\">https://github.com/sdras/vue-sample-svg-icons/</a></p>\n<p><img src=\"https://s3-us-west-2.amazonaws.com/s.cdpn.io/28963/screendocs.jpg\" alt=\"Documentation site\" title=\"Docs demo\"></p>\n<p>We’ll create a base icon (<code>IconBase.vue</code>) component that uses a slot.</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">svg</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://www.w3.org/2000/svg\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">:width</span>=<span class=\"string\">\"width\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">:height</span>=<span class=\"string\">\"height\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">viewBox</span>=<span class=\"string\">\"0 0 18 18\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">:aria-labelledby</span>=<span class=\"string\">\"iconName\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">role</span>=<span class=\"string\">\"presentation\"</span></span></span><br><span class=\"line\"><span class=\"tag\">  &gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span> <span class=\"attr\">:id</span>=<span class=\"string\">\"iconName\"</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span>&#123;&#123;iconName&#125;&#125; icon<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">g</span> <span class=\"attr\">:fill</span>=<span class=\"string\">\"iconColor\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">slot</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">g</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">svg</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>You can use this base icon as is- the only thing you might need to update is the <code>viewBox</code> depending on the <code>viewBox</code> of your icons. In the base, we’re making the <code>width</code>, <code>height</code>, <code>iconColor</code>, and name of the icon props so that it can be dynamically updated with props. The name will be used for both the <code>&lt;title&gt;</code> content and its <code>id</code> for accessibility.</p>\n<p>Our script will look like this, we’ll have some defaults so that our icon will be rendered consistently unless we state otherwise:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  props: &#123;</span><br><span class=\"line\">    iconName: &#123;</span><br><span class=\"line\">      type: <span class=\"built_in\">String</span>,</span><br><span class=\"line\">      <span class=\"keyword\">default</span>: <span class=\"string\">'box'</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    width: &#123;</span><br><span class=\"line\">      type: [<span class=\"built_in\">Number</span>, <span class=\"built_in\">String</span>],</span><br><span class=\"line\">      <span class=\"keyword\">default</span>: <span class=\"number\">18</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    height: &#123;</span><br><span class=\"line\">      type: [<span class=\"built_in\">Number</span>, <span class=\"built_in\">String</span>],</span><br><span class=\"line\">      <span class=\"keyword\">default</span>: <span class=\"number\">18</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    iconColor: &#123;</span><br><span class=\"line\">      type: <span class=\"built_in\">String</span>,</span><br><span class=\"line\">      <span class=\"keyword\">default</span>: <span class=\"string\">'currentColor'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>The <code>currentColor</code> property that’s the default on the fill will make the icon inherit the color of whatever text surrounds it. We could also pass in a different color as a prop if we wish.</p>\n<p>We can use it like so, with the only contents of <code>IconWrite.vue</code> containing the paths inside the icon:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">icon-base</span> <span class=\"attr\">icon-name</span>=<span class=\"string\">\"write\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">icon-write</span> /&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">icon-base</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>Now, if we’d like to make many sizes for the icon, we can do so very easily:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- you can pass in a smaller `width` and `height` as props --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">icon-base</span> <span class=\"attr\">width</span>=<span class=\"string\">\"12\"</span> <span class=\"attr\">height</span>=<span class=\"string\">\"12\"</span> <span class=\"attr\">icon-name</span>=<span class=\"string\">\"write\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">icon-write</span> /&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">icon-base</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- or you can use the default, which is 18 --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">icon-base</span> <span class=\"attr\">icon-name</span>=<span class=\"string\">\"write\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">icon-write</span> /&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">icon-base</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- or make it a little bigger too :) --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">icon-base</span> <span class=\"attr\">width</span>=<span class=\"string\">\"30\"</span> <span class=\"attr\">height</span>=<span class=\"string\">\"30\"</span> <span class=\"attr\">icon-name</span>=<span class=\"string\">\"write\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">icon-write</span> /&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">icon-base</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"https://s3-us-west-2.amazonaws.com/s.cdpn.io/28963/Screen%20Shot%202018-01-01%20at%204.51.40%20PM.png\" width=\"450\"></p>\n<h2 id=\"Animatable-Icons\"><a href=\"#Animatable-Icons\" class=\"headerlink\" title=\"Animatable Icons\"></a>Animatable Icons</h2><p>Keeping icons in components comes in very handy when you’d like to animate them, especially on an interaction. Inline SVGs have the highest support for interaction of any method. Here’s a very basic example of an icon that’s animated on click:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">svg</span> @<span class=\"attr\">click</span>=<span class=\"string\">\"startScissors\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://www.w3.org/2000/svg\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">viewBox</span>=<span class=\"string\">\"0 0 100 100\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">width</span>=<span class=\"string\">\"100\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">height</span>=<span class=\"string\">\"100\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">aria-labelledby</span>=<span class=\"string\">\"scissors\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">role</span>=<span class=\"string\">\"presentation\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    &gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span> <span class=\"attr\">id</span>=<span class=\"string\">\"scissors\"</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span>Scissors Animated Icon<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">path</span> <span class=\"attr\">id</span>=<span class=\"string\">\"bk\"</span> <span class=\"attr\">fill</span>=<span class=\"string\">\"#fff\"</span> <span class=\"attr\">d</span>=<span class=\"string\">\"M0 0h100v100H0z\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">g</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"leftscissor\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">path</span> <span class=\"attr\">d</span>=<span class=\"string\">\"M...\"</span>/&gt;</span></span><br><span class=\"line\">      ...</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">g</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">g</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"rightscissor\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">path</span> <span class=\"attr\">d</span>=<span class=\"string\">\"M...\"</span>/&gt;</span></span><br><span class=\"line\">      ...</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">g</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">svg</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; TweenMax, Sine &#125; <span class=\"keyword\">from</span> <span class=\"string\">'gsap'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    startScissors() &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.scissorAnim(<span class=\"keyword\">this</span>.$refs.rightscissor, <span class=\"number\">30</span>)</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.scissorAnim(<span class=\"keyword\">this</span>.$refs.leftscissor, <span class=\"number\">-30</span>)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    scissorAnim(el, rot) &#123;</span><br><span class=\"line\">      TweenMax.to(el, <span class=\"number\">0.25</span>, &#123;</span><br><span class=\"line\">        rotation: rot,</span><br><span class=\"line\">        repeat: <span class=\"number\">3</span>,</span><br><span class=\"line\">        yoyo: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        svgOrigin: <span class=\"string\">'50 45'</span>,</span><br><span class=\"line\">        ease: Sine.easeInOut</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>We’re applying <code>refs</code> to the groups of paths we need to move, and as both sides of the scissors have to move in tandem, we’ll create a function we can reuse where we’ll pass in the <code>refs</code>. The use of GreenSock helps resolve animation support and <code>transform-origin</code> issues across browser.</p>\n<p data-height=\"300\" data-theme-id=\"0\" data-slug-hash=\"dJRpgY\" data-default-tab=\"result\" data-user=\"Vue\" data-embed-version=\"2\" data-pen-title=\"Editable SVG Icon System: Animated icon\" class=\"codepen\">See the Pen <a href=\"https://codepen.io/team/Vue/pen/dJRpgY/\" target=\"_blank\" rel=\"noopener\">Editable SVG Icon System: Animated icon</a> by Vue (<a href=\"https://codepen.io/Vue\" target=\"_blank\" rel=\"noopener\">@Vue</a>) on <a href=\"https://codepen.io\" target=\"_blank\" rel=\"noopener\">CodePen</a>.</p><script async src=\"https://production-assets.codepen.io/assets/embed/ei.js\"></script><br><br><p style=\"margin-top:-30px\">Pretty easily accomplished! And easy to update on the fly.</p>\n\n<p>You can see more animated examples in the repo <a href=\"https://github.com/sdras/vue-sample-svg-icons/\" target=\"_blank\" rel=\"noopener\">here</a></p>\n<h2 id=\"Additional-Notes\"><a href=\"#Additional-Notes\" class=\"headerlink\" title=\"Additional Notes\"></a>Additional Notes</h2><p>Designers may change their minds. Product requirements change. Keeping the logic for the entire icon system in one base component means you can quickly update all of your icons and have it propagate through the whole system. Even with the use of an icon loader, some situations require you to recreate or edit every SVG to make global changes. This method can save you that time and pain.</p>\n<h2 id=\"When-To-Avoid-This-Pattern\"><a href=\"#When-To-Avoid-This-Pattern\" class=\"headerlink\" title=\"When To Avoid This Pattern\"></a>When To Avoid This Pattern</h2><p>This type of SVG icon system is really useful when you have a number of icons that are used in different ways throughout your site. If you’re repeating the same icon many times on one page (e.g. a giant table a delete icon in each row), it might make more sense to have all of the sprites compiled into a sprite sheet and use <code>&lt;use&gt;</code> tags to load them.</p>\n<h2 id=\"Alternative-Patterns\"><a href=\"#Alternative-Patterns\" class=\"headerlink\" title=\"Alternative Patterns\"></a>Alternative Patterns</h2><p>Other tooling to help manage SVG icons includes:</p>\n<ul>\n<li><a href=\"https://github.com/kisenka/svg-sprite-loader\" target=\"_blank\" rel=\"noopener\">svg-sprite-loader</a></li>\n<li><a href=\"https://github.com/rpominov/svgo-loader\" target=\"_blank\" rel=\"noopener\">svgo-loader</a></li>\n</ul>\n<p>These tools bundle SVGs at compile time, but make them a little harder to edit during runtime, because <code>&lt;use&gt;</code> tags can have strange cross-browser issues when doing anything more complex. They also leave you with two nested <code>viewBox</code> properties and thus two coordinate systems. This makes the implementation a little more complex.</p>\n"},{"title":"Introduction","type":"cookbook","order":0,"_content":"\n## The Cookbook vs the Guide\n\nHow is the cookbook different from the guide? Why is this necessary?\n\n* **Greater Focus**: In the guide, we're essentially telling a story. Each section builds on and assumes knowledge from each previous section. In the cookbook, each recipe can and should stand on its own. This means recipes can focus on one specific aspect of Vue, rather than having to give a general overview.\n\n* **Greater Depth**: To avoid making the guide too long, we try to include only the simplest possible examples to help you understand each feature. Then we move on. In the cookbook, we can include more complex examples, combining features in interesting ways. Each recipe can also be as long and detailed as it needs to be, in order to fully explore its niche.\n\n* **Teaching JavaScript**: In the guide, we assume at least intermediate familiarity with ES5 JavaScript. For example, we won't explain how `Array.prototype.filter` works in a computed property that filters a list. In the cookbook however, essential JavaScript features (including ES6/2015+) can be explored and explained in the context of how they help us build better Vue applications.\n\n* **Exploring the Ecosystem**: For advanced features, we assume some ecosystem knowledge. For example, if you want to use single-file components in Webpack, we don't explain how to configure the non-Vue parts of the Webpack config. In the cookbook, we have the space to explore these ecosystem libraries in more depth - at least to the extent that is universally useful for Vue developers.\n\n## Cookbook Contributions\n\n### What we're looking for\n\nThe Cookbook gives developers examples to work off of that both cover common or interesting use cases, and also progressively explain more complex detail. Our goal is to move beyond a simple introductory example, and demonstrate concepts that are more widely applicable, as well as some caveats to the approach.\n\nIf you're interested in contributing, please initiate collaboration by filing an issue under the tag **cookbook idea** with your concept so that we can help guide you to a successful pull request. After your idea has been approved, please follow the template below as much as possible. Some sections are required, and some are optional. Following the numerical order is strongly suggested, but not required.\n\nRecipes should generally:\n\n> * Solve a specific, common problem\n> * Start with the simplest possible example\n> * Introduce complexities one at a time\n> * Link to other docs, rather than re-explaining concepts\n> * Describe the problem, rather than assuming familiarity\n> * Explain the process, rather than just the end result\n> * Explain the pros and cons of your strategy, including when it is and isn't appropriate\n> * Mention alternative solutions, if relevant, but leave in-depth explorations to a separate recipe\n\nWe request that you follow the template below. We understand, however, that there are times when you may necessarily need to deviate for clarity or flow. Either way, all recipes should at some point discuss the nuance of the choice made using this pattern, preferably in the form of the alternative patterns section.\n\n### Base Example\n\n_required_\n\n1.  Articulate the problem in a sentence or two.\n2.  Explain the simplest possible solution in a sentence or two.\n3.  Show a small code sample.\n4.  Explain what this accomplishes in a sentence.\n\n### Details about the Value\n\n_required_\n\n1.  Address common questions that one might have while looking at the example. (Blockquotes are great for this)\n2.  Show examples of common missteps and how they can be avoided.\n3.  Show very simple code samples of good and bad patterns.\n4.  Discuss why this may be a compelling pattern. Links for reference are not required but encouraged.\n\n### Real-World Example\n\n_required_\n\nDemonstrate the code that would power a common or interesting use case, either by:\n\n1.  Walking through a few terse examples of setup, or\n2.  Embedding a codepen/jsfiddle example\n\nIf you choose to do the latter, you should still talk through what it is and does.\n\n### Additional Context\n\n_optional_\n\nIt's extremely helpful to write a bit about this pattern, where else it would apply, why it works well, and run through a bit of code as you do so or give people further reading materials here.\n\n### When To Avoid This Pattern\n\n_optional_\n\nThis section is not required, but heavily recommended. It won't make sense to write it for something very simple such as toggling classes based on state change, but for more advanced patterns like mixins it's vital. The answer to most questions about development is [\"It depends!\"](https://codepen.io/rachsmith/pen/YweZbG), this section embraces that. Here, we'll take an honest look at when the pattern is useful and when it should be avoided, or when something else makes more sense.\n\n### Alternative Patterns\n\n_required_\n\nThis section is required when you've provided the section above about avoidance. It's important to explore other methods so that people told that something is an antipattern in certain situations are not left wondering. In doing so, consider that the web is a big tent and that many people have different codebase structures and are solving different goals. Is the app large or small? Are they integrating Vue into an existing project, or are they building from scratch? Are their users only trying to achieve one goal or many? Is there a lot of asynchronous data? All of these concerns will impact alternative implementations. A good cookbook recipe gives developers this context.\n\n## Thank you\n\nIt takes time to contribute to documentation, and if you spend the time to submit a PR to this section of our docs, you do so with our gratitude.\n","source":"v2/cookbook/index.md","raw":"---\ntitle: Introduction\ntype: cookbook\norder: 0\n---\n\n## The Cookbook vs the Guide\n\nHow is the cookbook different from the guide? Why is this necessary?\n\n* **Greater Focus**: In the guide, we're essentially telling a story. Each section builds on and assumes knowledge from each previous section. In the cookbook, each recipe can and should stand on its own. This means recipes can focus on one specific aspect of Vue, rather than having to give a general overview.\n\n* **Greater Depth**: To avoid making the guide too long, we try to include only the simplest possible examples to help you understand each feature. Then we move on. In the cookbook, we can include more complex examples, combining features in interesting ways. Each recipe can also be as long and detailed as it needs to be, in order to fully explore its niche.\n\n* **Teaching JavaScript**: In the guide, we assume at least intermediate familiarity with ES5 JavaScript. For example, we won't explain how `Array.prototype.filter` works in a computed property that filters a list. In the cookbook however, essential JavaScript features (including ES6/2015+) can be explored and explained in the context of how they help us build better Vue applications.\n\n* **Exploring the Ecosystem**: For advanced features, we assume some ecosystem knowledge. For example, if you want to use single-file components in Webpack, we don't explain how to configure the non-Vue parts of the Webpack config. In the cookbook, we have the space to explore these ecosystem libraries in more depth - at least to the extent that is universally useful for Vue developers.\n\n## Cookbook Contributions\n\n### What we're looking for\n\nThe Cookbook gives developers examples to work off of that both cover common or interesting use cases, and also progressively explain more complex detail. Our goal is to move beyond a simple introductory example, and demonstrate concepts that are more widely applicable, as well as some caveats to the approach.\n\nIf you're interested in contributing, please initiate collaboration by filing an issue under the tag **cookbook idea** with your concept so that we can help guide you to a successful pull request. After your idea has been approved, please follow the template below as much as possible. Some sections are required, and some are optional. Following the numerical order is strongly suggested, but not required.\n\nRecipes should generally:\n\n> * Solve a specific, common problem\n> * Start with the simplest possible example\n> * Introduce complexities one at a time\n> * Link to other docs, rather than re-explaining concepts\n> * Describe the problem, rather than assuming familiarity\n> * Explain the process, rather than just the end result\n> * Explain the pros and cons of your strategy, including when it is and isn't appropriate\n> * Mention alternative solutions, if relevant, but leave in-depth explorations to a separate recipe\n\nWe request that you follow the template below. We understand, however, that there are times when you may necessarily need to deviate for clarity or flow. Either way, all recipes should at some point discuss the nuance of the choice made using this pattern, preferably in the form of the alternative patterns section.\n\n### Base Example\n\n_required_\n\n1.  Articulate the problem in a sentence or two.\n2.  Explain the simplest possible solution in a sentence or two.\n3.  Show a small code sample.\n4.  Explain what this accomplishes in a sentence.\n\n### Details about the Value\n\n_required_\n\n1.  Address common questions that one might have while looking at the example. (Blockquotes are great for this)\n2.  Show examples of common missteps and how they can be avoided.\n3.  Show very simple code samples of good and bad patterns.\n4.  Discuss why this may be a compelling pattern. Links for reference are not required but encouraged.\n\n### Real-World Example\n\n_required_\n\nDemonstrate the code that would power a common or interesting use case, either by:\n\n1.  Walking through a few terse examples of setup, or\n2.  Embedding a codepen/jsfiddle example\n\nIf you choose to do the latter, you should still talk through what it is and does.\n\n### Additional Context\n\n_optional_\n\nIt's extremely helpful to write a bit about this pattern, where else it would apply, why it works well, and run through a bit of code as you do so or give people further reading materials here.\n\n### When To Avoid This Pattern\n\n_optional_\n\nThis section is not required, but heavily recommended. It won't make sense to write it for something very simple such as toggling classes based on state change, but for more advanced patterns like mixins it's vital. The answer to most questions about development is [\"It depends!\"](https://codepen.io/rachsmith/pen/YweZbG), this section embraces that. Here, we'll take an honest look at when the pattern is useful and when it should be avoided, or when something else makes more sense.\n\n### Alternative Patterns\n\n_required_\n\nThis section is required when you've provided the section above about avoidance. It's important to explore other methods so that people told that something is an antipattern in certain situations are not left wondering. In doing so, consider that the web is a big tent and that many people have different codebase structures and are solving different goals. Is the app large or small? Are they integrating Vue into an existing project, or are they building from scratch? Are their users only trying to achieve one goal or many? Is there a lot of asynchronous data? All of these concerns will impact alternative implementations. A good cookbook recipe gives developers this context.\n\n## Thank you\n\nIt takes time to contribute to documentation, and if you spend the time to submit a PR to this section of our docs, you do so with our gratitude.\n","date":"2018-07-19T04:04:16.857Z","updated":"2018-07-19T04:04:16.857Z","path":"v2/cookbook/index.html","comments":1,"layout":"page","_id":"cjk0zidoi000lvkrtg56ntd11","content":"<h2 id=\"The-Cookbook-vs-the-Guide\"><a href=\"#The-Cookbook-vs-the-Guide\" class=\"headerlink\" title=\"The Cookbook vs the Guide\"></a>The Cookbook vs the Guide</h2><p>How is the cookbook different from the guide? Why is this necessary?</p>\n<ul>\n<li><p><strong>Greater Focus</strong>: In the guide, we’re essentially telling a story. Each section builds on and assumes knowledge from each previous section. In the cookbook, each recipe can and should stand on its own. This means recipes can focus on one specific aspect of Vue, rather than having to give a general overview.</p>\n</li>\n<li><p><strong>Greater Depth</strong>: To avoid making the guide too long, we try to include only the simplest possible examples to help you understand each feature. Then we move on. In the cookbook, we can include more complex examples, combining features in interesting ways. Each recipe can also be as long and detailed as it needs to be, in order to fully explore its niche.</p>\n</li>\n<li><p><strong>Teaching JavaScript</strong>: In the guide, we assume at least intermediate familiarity with ES5 JavaScript. For example, we won’t explain how <code>Array.prototype.filter</code> works in a computed property that filters a list. In the cookbook however, essential JavaScript features (including ES6/2015+) can be explored and explained in the context of how they help us build better Vue applications.</p>\n</li>\n<li><p><strong>Exploring the Ecosystem</strong>: For advanced features, we assume some ecosystem knowledge. For example, if you want to use single-file components in Webpack, we don’t explain how to configure the non-Vue parts of the Webpack config. In the cookbook, we have the space to explore these ecosystem libraries in more depth - at least to the extent that is universally useful for Vue developers.</p>\n</li>\n</ul>\n<h2 id=\"Cookbook-Contributions\"><a href=\"#Cookbook-Contributions\" class=\"headerlink\" title=\"Cookbook Contributions\"></a>Cookbook Contributions</h2><h3 id=\"What-we’re-looking-for\"><a href=\"#What-we’re-looking-for\" class=\"headerlink\" title=\"What we’re looking for\"></a>What we’re looking for</h3><p>The Cookbook gives developers examples to work off of that both cover common or interesting use cases, and also progressively explain more complex detail. Our goal is to move beyond a simple introductory example, and demonstrate concepts that are more widely applicable, as well as some caveats to the approach.</p>\n<p>If you’re interested in contributing, please initiate collaboration by filing an issue under the tag <strong>cookbook idea</strong> with your concept so that we can help guide you to a successful pull request. After your idea has been approved, please follow the template below as much as possible. Some sections are required, and some are optional. Following the numerical order is strongly suggested, but not required.</p>\n<p>Recipes should generally:</p>\n<blockquote>\n<ul>\n<li>Solve a specific, common problem</li>\n<li>Start with the simplest possible example</li>\n<li>Introduce complexities one at a time</li>\n<li>Link to other docs, rather than re-explaining concepts</li>\n<li>Describe the problem, rather than assuming familiarity</li>\n<li>Explain the process, rather than just the end result</li>\n<li>Explain the pros and cons of your strategy, including when it is and isn’t appropriate</li>\n<li>Mention alternative solutions, if relevant, but leave in-depth explorations to a separate recipe</li>\n</ul>\n</blockquote>\n<p>We request that you follow the template below. We understand, however, that there are times when you may necessarily need to deviate for clarity or flow. Either way, all recipes should at some point discuss the nuance of the choice made using this pattern, preferably in the form of the alternative patterns section.</p>\n<h3 id=\"Base-Example\"><a href=\"#Base-Example\" class=\"headerlink\" title=\"Base Example\"></a>Base Example</h3><p><em>required</em></p>\n<ol>\n<li>Articulate the problem in a sentence or two.</li>\n<li>Explain the simplest possible solution in a sentence or two.</li>\n<li>Show a small code sample.</li>\n<li>Explain what this accomplishes in a sentence.</li>\n</ol>\n<h3 id=\"Details-about-the-Value\"><a href=\"#Details-about-the-Value\" class=\"headerlink\" title=\"Details about the Value\"></a>Details about the Value</h3><p><em>required</em></p>\n<ol>\n<li>Address common questions that one might have while looking at the example. (Blockquotes are great for this)</li>\n<li>Show examples of common missteps and how they can be avoided.</li>\n<li>Show very simple code samples of good and bad patterns.</li>\n<li>Discuss why this may be a compelling pattern. Links for reference are not required but encouraged.</li>\n</ol>\n<h3 id=\"Real-World-Example\"><a href=\"#Real-World-Example\" class=\"headerlink\" title=\"Real-World Example\"></a>Real-World Example</h3><p><em>required</em></p>\n<p>Demonstrate the code that would power a common or interesting use case, either by:</p>\n<ol>\n<li>Walking through a few terse examples of setup, or</li>\n<li>Embedding a codepen/jsfiddle example</li>\n</ol>\n<p>If you choose to do the latter, you should still talk through what it is and does.</p>\n<h3 id=\"Additional-Context\"><a href=\"#Additional-Context\" class=\"headerlink\" title=\"Additional Context\"></a>Additional Context</h3><p><em>optional</em></p>\n<p>It’s extremely helpful to write a bit about this pattern, where else it would apply, why it works well, and run through a bit of code as you do so or give people further reading materials here.</p>\n<h3 id=\"When-To-Avoid-This-Pattern\"><a href=\"#When-To-Avoid-This-Pattern\" class=\"headerlink\" title=\"When To Avoid This Pattern\"></a>When To Avoid This Pattern</h3><p><em>optional</em></p>\n<p>This section is not required, but heavily recommended. It won’t make sense to write it for something very simple such as toggling classes based on state change, but for more advanced patterns like mixins it’s vital. The answer to most questions about development is <a href=\"https://codepen.io/rachsmith/pen/YweZbG\" target=\"_blank\" rel=\"noopener\">“It depends!”</a>, this section embraces that. Here, we’ll take an honest look at when the pattern is useful and when it should be avoided, or when something else makes more sense.</p>\n<h3 id=\"Alternative-Patterns\"><a href=\"#Alternative-Patterns\" class=\"headerlink\" title=\"Alternative Patterns\"></a>Alternative Patterns</h3><p><em>required</em></p>\n<p>This section is required when you’ve provided the section above about avoidance. It’s important to explore other methods so that people told that something is an antipattern in certain situations are not left wondering. In doing so, consider that the web is a big tent and that many people have different codebase structures and are solving different goals. Is the app large or small? Are they integrating Vue into an existing project, or are they building from scratch? Are their users only trying to achieve one goal or many? Is there a lot of asynchronous data? All of these concerns will impact alternative implementations. A good cookbook recipe gives developers this context.</p>\n<h2 id=\"Thank-you\"><a href=\"#Thank-you\" class=\"headerlink\" title=\"Thank you\"></a>Thank you</h2><p>It takes time to contribute to documentation, and if you spend the time to submit a PR to this section of our docs, you do so with our gratitude.</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"The-Cookbook-vs-the-Guide\"><a href=\"#The-Cookbook-vs-the-Guide\" class=\"headerlink\" title=\"The Cookbook vs the Guide\"></a>The Cookbook vs the Guide</h2><p>How is the cookbook different from the guide? Why is this necessary?</p>\n<ul>\n<li><p><strong>Greater Focus</strong>: In the guide, we’re essentially telling a story. Each section builds on and assumes knowledge from each previous section. In the cookbook, each recipe can and should stand on its own. This means recipes can focus on one specific aspect of Vue, rather than having to give a general overview.</p>\n</li>\n<li><p><strong>Greater Depth</strong>: To avoid making the guide too long, we try to include only the simplest possible examples to help you understand each feature. Then we move on. In the cookbook, we can include more complex examples, combining features in interesting ways. Each recipe can also be as long and detailed as it needs to be, in order to fully explore its niche.</p>\n</li>\n<li><p><strong>Teaching JavaScript</strong>: In the guide, we assume at least intermediate familiarity with ES5 JavaScript. For example, we won’t explain how <code>Array.prototype.filter</code> works in a computed property that filters a list. In the cookbook however, essential JavaScript features (including ES6/2015+) can be explored and explained in the context of how they help us build better Vue applications.</p>\n</li>\n<li><p><strong>Exploring the Ecosystem</strong>: For advanced features, we assume some ecosystem knowledge. For example, if you want to use single-file components in Webpack, we don’t explain how to configure the non-Vue parts of the Webpack config. In the cookbook, we have the space to explore these ecosystem libraries in more depth - at least to the extent that is universally useful for Vue developers.</p>\n</li>\n</ul>\n<h2 id=\"Cookbook-Contributions\"><a href=\"#Cookbook-Contributions\" class=\"headerlink\" title=\"Cookbook Contributions\"></a>Cookbook Contributions</h2><h3 id=\"What-we’re-looking-for\"><a href=\"#What-we’re-looking-for\" class=\"headerlink\" title=\"What we’re looking for\"></a>What we’re looking for</h3><p>The Cookbook gives developers examples to work off of that both cover common or interesting use cases, and also progressively explain more complex detail. Our goal is to move beyond a simple introductory example, and demonstrate concepts that are more widely applicable, as well as some caveats to the approach.</p>\n<p>If you’re interested in contributing, please initiate collaboration by filing an issue under the tag <strong>cookbook idea</strong> with your concept so that we can help guide you to a successful pull request. After your idea has been approved, please follow the template below as much as possible. Some sections are required, and some are optional. Following the numerical order is strongly suggested, but not required.</p>\n<p>Recipes should generally:</p>\n<blockquote>\n<ul>\n<li>Solve a specific, common problem</li>\n<li>Start with the simplest possible example</li>\n<li>Introduce complexities one at a time</li>\n<li>Link to other docs, rather than re-explaining concepts</li>\n<li>Describe the problem, rather than assuming familiarity</li>\n<li>Explain the process, rather than just the end result</li>\n<li>Explain the pros and cons of your strategy, including when it is and isn’t appropriate</li>\n<li>Mention alternative solutions, if relevant, but leave in-depth explorations to a separate recipe</li>\n</ul>\n</blockquote>\n<p>We request that you follow the template below. We understand, however, that there are times when you may necessarily need to deviate for clarity or flow. Either way, all recipes should at some point discuss the nuance of the choice made using this pattern, preferably in the form of the alternative patterns section.</p>\n<h3 id=\"Base-Example\"><a href=\"#Base-Example\" class=\"headerlink\" title=\"Base Example\"></a>Base Example</h3><p><em>required</em></p>\n<ol>\n<li>Articulate the problem in a sentence or two.</li>\n<li>Explain the simplest possible solution in a sentence or two.</li>\n<li>Show a small code sample.</li>\n<li>Explain what this accomplishes in a sentence.</li>\n</ol>\n<h3 id=\"Details-about-the-Value\"><a href=\"#Details-about-the-Value\" class=\"headerlink\" title=\"Details about the Value\"></a>Details about the Value</h3><p><em>required</em></p>\n<ol>\n<li>Address common questions that one might have while looking at the example. (Blockquotes are great for this)</li>\n<li>Show examples of common missteps and how they can be avoided.</li>\n<li>Show very simple code samples of good and bad patterns.</li>\n<li>Discuss why this may be a compelling pattern. Links for reference are not required but encouraged.</li>\n</ol>\n<h3 id=\"Real-World-Example\"><a href=\"#Real-World-Example\" class=\"headerlink\" title=\"Real-World Example\"></a>Real-World Example</h3><p><em>required</em></p>\n<p>Demonstrate the code that would power a common or interesting use case, either by:</p>\n<ol>\n<li>Walking through a few terse examples of setup, or</li>\n<li>Embedding a codepen/jsfiddle example</li>\n</ol>\n<p>If you choose to do the latter, you should still talk through what it is and does.</p>\n<h3 id=\"Additional-Context\"><a href=\"#Additional-Context\" class=\"headerlink\" title=\"Additional Context\"></a>Additional Context</h3><p><em>optional</em></p>\n<p>It’s extremely helpful to write a bit about this pattern, where else it would apply, why it works well, and run through a bit of code as you do so or give people further reading materials here.</p>\n<h3 id=\"When-To-Avoid-This-Pattern\"><a href=\"#When-To-Avoid-This-Pattern\" class=\"headerlink\" title=\"When To Avoid This Pattern\"></a>When To Avoid This Pattern</h3><p><em>optional</em></p>\n<p>This section is not required, but heavily recommended. It won’t make sense to write it for something very simple such as toggling classes based on state change, but for more advanced patterns like mixins it’s vital. The answer to most questions about development is <a href=\"https://codepen.io/rachsmith/pen/YweZbG\" target=\"_blank\" rel=\"noopener\">“It depends!”</a>, this section embraces that. Here, we’ll take an honest look at when the pattern is useful and when it should be avoided, or when something else makes more sense.</p>\n<h3 id=\"Alternative-Patterns\"><a href=\"#Alternative-Patterns\" class=\"headerlink\" title=\"Alternative Patterns\"></a>Alternative Patterns</h3><p><em>required</em></p>\n<p>This section is required when you’ve provided the section above about avoidance. It’s important to explore other methods so that people told that something is an antipattern in certain situations are not left wondering. In doing so, consider that the web is a big tent and that many people have different codebase structures and are solving different goals. Is the app large or small? Are they integrating Vue into an existing project, or are they building from scratch? Are their users only trying to achieve one goal or many? Is there a lot of asynchronous data? All of these concerns will impact alternative implementations. A good cookbook recipe gives developers this context.</p>\n<h2 id=\"Thank-you\"><a href=\"#Thank-you\" class=\"headerlink\" title=\"Thank you\"></a>Thank you</h2><p>It takes time to contribute to documentation, and if you spend the time to submit a PR to this section of our docs, you do so with our gratitude.</p>\n"},{"title":"GitHub Commits","type":"examples","order":1,"_content":"\n> This example fetches latest Vue.js commits data from GitHub's API and displays them as a list. You can switch between the master and dev branches.\n\n<iframe width=\"100%\" height=\"500\" src=\"https://jsfiddle.net/yyx990803/c5g8xnar/embedded/result,html,js,css\" allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>\n","source":"v2/examples/commits.md","raw":"---\ntitle: GitHub Commits\ntype: examples\norder: 1\n---\n\n> This example fetches latest Vue.js commits data from GitHub's API and displays them as a list. You can switch between the master and dev branches.\n\n<iframe width=\"100%\" height=\"500\" src=\"https://jsfiddle.net/yyx990803/c5g8xnar/embedded/result,html,js,css\" allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>\n","date":"2018-07-19T04:04:16.860Z","updated":"2018-07-19T04:04:16.860Z","path":"v2/examples/commits.html","comments":1,"layout":"page","_id":"cjk0zidoi000mvkrtoi5sft40","content":"<blockquote>\n<p>This example fetches latest Vue.js commits data from GitHub’s API and displays them as a list. You can switch between the master and dev branches.</p>\n</blockquote>\n<iframe width=\"100%\" height=\"500\" src=\"https://jsfiddle.net/yyx990803/c5g8xnar/embedded/result,html,js,css\" allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>This example fetches latest Vue.js commits data from GitHub’s API and displays them as a list. You can switch between the master and dev branches.</p>\n</blockquote>\n<iframe width=\"100%\" height=\"500\" src=\"https://jsfiddle.net/yyx990803/c5g8xnar/embedded/result,html,js,css\" allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>\n"},{"title":"Realtime with deepstreamHub","type":"examples","order":9,"_content":"\n> This example uses [deepstreamHub](https://deepstreamhub.com/) to synchronize realtime data, send events and make remote procedure calls between clients (you can try opening it in multiple browser windows).\n\n<iframe width=\"100%\" height=\"500\" src=\"https://jsfiddle.net/yyx990803/ff0sp9hw/embedded/result,html,js,css\" allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>\n","source":"v2/examples/deepstream.md","raw":"---\ntitle: Realtime with deepstreamHub\ntype: examples\norder: 9\n---\n\n> This example uses [deepstreamHub](https://deepstreamhub.com/) to synchronize realtime data, send events and make remote procedure calls between clients (you can try opening it in multiple browser windows).\n\n<iframe width=\"100%\" height=\"500\" src=\"https://jsfiddle.net/yyx990803/ff0sp9hw/embedded/result,html,js,css\" allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>\n","date":"2018-07-19T04:04:16.861Z","updated":"2018-07-19T04:04:16.861Z","path":"v2/examples/deepstream.html","comments":1,"layout":"page","_id":"cjk0zidoj000nvkrt02mnqsps","content":"<blockquote>\n<p>This example uses <a href=\"https://deepstreamhub.com/\" target=\"_blank\" rel=\"noopener\">deepstreamHub</a> to synchronize realtime data, send events and make remote procedure calls between clients (you can try opening it in multiple browser windows).</p>\n</blockquote>\n<iframe width=\"100%\" height=\"500\" src=\"https://jsfiddle.net/yyx990803/ff0sp9hw/embedded/result,html,js,css\" allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>This example uses <a href=\"https://deepstreamhub.com/\" target=\"_blank\" rel=\"noopener\">deepstreamHub</a> to synchronize realtime data, send events and make remote procedure calls between clients (you can try opening it in multiple browser windows).</p>\n</blockquote>\n<iframe width=\"100%\" height=\"500\" src=\"https://jsfiddle.net/yyx990803/ff0sp9hw/embedded/result,html,js,css\" allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>\n"},{"title":"Elastic Header","type":"examples","order":7,"_content":"\n<iframe width=\"100%\" height=\"500\" src=\"https://jsfiddle.net/yyx990803/y91wy85p/embedded/result,html,js,css\" allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>\n","source":"v2/examples/elastic-header.md","raw":"---\ntitle: Elastic Header\ntype: examples\norder: 7\n---\n\n<iframe width=\"100%\" height=\"500\" src=\"https://jsfiddle.net/yyx990803/y91wy85p/embedded/result,html,js,css\" allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>\n","date":"2018-07-19T04:04:16.861Z","updated":"2018-07-19T04:04:16.861Z","path":"v2/examples/elastic-header.html","comments":1,"layout":"page","_id":"cjk0zidoj000ovkrth1qqjhp9","content":"<iframe width=\"100%\" height=\"500\" src=\"https://jsfiddle.net/yyx990803/y91wy85p/embedded/result,html,js,css\" allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>\n","site":{"data":{}},"excerpt":"","more":"<iframe width=\"100%\" height=\"500\" src=\"https://jsfiddle.net/yyx990803/y91wy85p/embedded/result,html,js,css\" allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>\n"},{"title":"Firebase + Validation","type":"examples","order":10,"_content":"\n> This example uses [Firebase](https://firebase.google.com/) as the data persistence backend and syncs between clients in real time (you can try opening it in multiple browser tabs). In addition, it performs instant validation using computed properties and triggers CSS transitions when adding/removing items.\n\n<iframe width=\"100%\" height=\"500\" src=\"https://jsfiddle.net/chrisvfritz/pyLbpzzx/embedded/result,html,js,css\" allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>\n","source":"v2/examples/firebase.md","raw":"---\ntitle: Firebase + Validation\ntype: examples\norder: 10\n---\n\n> This example uses [Firebase](https://firebase.google.com/) as the data persistence backend and syncs between clients in real time (you can try opening it in multiple browser tabs). In addition, it performs instant validation using computed properties and triggers CSS transitions when adding/removing items.\n\n<iframe width=\"100%\" height=\"500\" src=\"https://jsfiddle.net/chrisvfritz/pyLbpzzx/embedded/result,html,js,css\" allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>\n","date":"2018-07-19T04:04:16.861Z","updated":"2018-07-19T04:04:16.861Z","path":"v2/examples/firebase.html","comments":1,"layout":"page","_id":"cjk0zidoj000pvkrt2ql1jljv","content":"<blockquote>\n<p>This example uses <a href=\"https://firebase.google.com/\" target=\"_blank\" rel=\"noopener\">Firebase</a> as the data persistence backend and syncs between clients in real time (you can try opening it in multiple browser tabs). In addition, it performs instant validation using computed properties and triggers CSS transitions when adding/removing items.</p>\n</blockquote>\n<iframe width=\"100%\" height=\"500\" src=\"https://jsfiddle.net/chrisvfritz/pyLbpzzx/embedded/result,html,js,css\" allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>This example uses <a href=\"https://firebase.google.com/\" target=\"_blank\" rel=\"noopener\">Firebase</a> as the data persistence backend and syncs between clients in real time (you can try opening it in multiple browser tabs). In addition, it performs instant validation using computed properties and triggers CSS transitions when adding/removing items.</p>\n</blockquote>\n<iframe width=\"100%\" height=\"500\" src=\"https://jsfiddle.net/chrisvfritz/pyLbpzzx/embedded/result,html,js,css\" allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>\n"},{"title":"Grid Component","type":"examples","order":3,"_content":"\n> This is an example of creating a reusable grid component and using it with external data.\n\n<iframe width=\"100%\" height=\"500\" src=\"https://jsfiddle.net/yyx990803/xkkbfL3L/embedded/result,html,js,css\" allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>\n","source":"v2/examples/grid-component.md","raw":"---\ntitle: Grid Component\ntype: examples\norder: 3\n---\n\n> This is an example of creating a reusable grid component and using it with external data.\n\n<iframe width=\"100%\" height=\"500\" src=\"https://jsfiddle.net/yyx990803/xkkbfL3L/embedded/result,html,js,css\" allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>\n","date":"2018-07-19T04:04:16.861Z","updated":"2018-07-19T04:04:16.861Z","path":"v2/examples/grid-component.html","comments":1,"layout":"page","_id":"cjk0zidok000qvkrt10la3nqr","content":"<blockquote>\n<p>This is an example of creating a reusable grid component and using it with external data.</p>\n</blockquote>\n<iframe width=\"100%\" height=\"500\" src=\"https://jsfiddle.net/yyx990803/xkkbfL3L/embedded/result,html,js,css\" allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>This is an example of creating a reusable grid component and using it with external data.</p>\n</blockquote>\n<iframe width=\"100%\" height=\"500\" src=\"https://jsfiddle.net/yyx990803/xkkbfL3L/embedded/result,html,js,css\" allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>\n"},{"title":"HackerNews Clone","type":"examples","order":12,"_content":"\n> This is a HackerNews clone built upon HN's official Firebase API, Vue 2.0 + Vue Router + Vuex, with server-side rendering.\n\n{% raw %}\n<div style=\"max-width: 600px;\">\n  <a href=\"https://github.com/vuejs/vue-hackernews-2.0\" target=\"_blank\">\n    <img style=\"width: 100%;\" src=\"../../images/hn.png\">\n  </a>\n</div>\n{% endraw %}\n\n> [Live Demo](https://vue-hn.now.sh/)\n> Note: the demo may need some spin up time if nobody has accessed it for a certain period.\n>\n> [[Source](https://github.com/vuejs/vue-hackernews-2.0)]\n\n## Features\n\n- Server Side Rendering\n  - Vue + Vue Router + Vuex working together\n  - Server-side data pre-fetching\n  - Client-side state & DOM hydration\n- Single-file Vue Components\n  - Hot-reload in development\n  - CSS extraction for production\n- Real-time List Updates with FLIP Animation\n\n## Architecture Overview\n\n<img width=\"973\" alt=\"Hackernew clone architecture overview\" src=\"../../images/hn-architecture.png\">\n","source":"v2/examples/hackernews.md","raw":"---\ntitle: HackerNews Clone\ntype: examples\norder: 12\n---\n\n> This is a HackerNews clone built upon HN's official Firebase API, Vue 2.0 + Vue Router + Vuex, with server-side rendering.\n\n{% raw %}\n<div style=\"max-width: 600px;\">\n  <a href=\"https://github.com/vuejs/vue-hackernews-2.0\" target=\"_blank\">\n    <img style=\"width: 100%;\" src=\"../../images/hn.png\">\n  </a>\n</div>\n{% endraw %}\n\n> [Live Demo](https://vue-hn.now.sh/)\n> Note: the demo may need some spin up time if nobody has accessed it for a certain period.\n>\n> [[Source](https://github.com/vuejs/vue-hackernews-2.0)]\n\n## Features\n\n- Server Side Rendering\n  - Vue + Vue Router + Vuex working together\n  - Server-side data pre-fetching\n  - Client-side state & DOM hydration\n- Single-file Vue Components\n  - Hot-reload in development\n  - CSS extraction for production\n- Real-time List Updates with FLIP Animation\n\n## Architecture Overview\n\n<img width=\"973\" alt=\"Hackernew clone architecture overview\" src=\"../../images/hn-architecture.png\">\n","date":"2018-07-19T04:04:16.861Z","updated":"2018-07-19T04:04:16.861Z","path":"v2/examples/hackernews.html","comments":1,"layout":"page","_id":"cjk0zidok000rvkrt731i8s27","content":"<blockquote>\n<p>This is a HackerNews clone built upon HN’s official Firebase API, Vue 2.0 + Vue Router + Vuex, with server-side rendering.</p>\n</blockquote>\n\n<div style=\"max-width: 600px;\">\n  <a href=\"https://github.com/vuejs/vue-hackernews-2.0\" target=\"_blank\">\n    <img style=\"width: 100%;\" src=\"../../images/hn.png\">\n  </a>\n</div>\n\n<blockquote>\n<p><a href=\"https://vue-hn.now.sh/\" target=\"_blank\" rel=\"noopener\">Live Demo</a><br>Note: the demo may need some spin up time if nobody has accessed it for a certain period.</p>\n<p>[<a href=\"https://github.com/vuejs/vue-hackernews-2.0\" target=\"_blank\" rel=\"noopener\">Source</a>]</p>\n</blockquote>\n<h2 id=\"Features\"><a href=\"#Features\" class=\"headerlink\" title=\"Features\"></a>Features</h2><ul>\n<li>Server Side Rendering<ul>\n<li>Vue + Vue Router + Vuex working together</li>\n<li>Server-side data pre-fetching</li>\n<li>Client-side state &amp; DOM hydration</li>\n</ul>\n</li>\n<li>Single-file Vue Components<ul>\n<li>Hot-reload in development</li>\n<li>CSS extraction for production</li>\n</ul>\n</li>\n<li>Real-time List Updates with FLIP Animation</li>\n</ul>\n<h2 id=\"Architecture-Overview\"><a href=\"#Architecture-Overview\" class=\"headerlink\" title=\"Architecture Overview\"></a>Architecture Overview</h2><p><img width=\"973\" alt=\"Hackernew clone architecture overview\" src=\"../../images/hn-architecture.png\"></p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>This is a HackerNews clone built upon HN’s official Firebase API, Vue 2.0 + Vue Router + Vuex, with server-side rendering.</p>\n</blockquote>\n\n<div style=\"max-width: 600px;\">\n  <a href=\"https://github.com/vuejs/vue-hackernews-2.0\" target=\"_blank\">\n    <img style=\"width: 100%;\" src=\"../../images/hn.png\">\n  </a>\n</div>\n\n<blockquote>\n<p><a href=\"https://vue-hn.now.sh/\" target=\"_blank\" rel=\"noopener\">Live Demo</a><br>Note: the demo may need some spin up time if nobody has accessed it for a certain period.</p>\n<p>[<a href=\"https://github.com/vuejs/vue-hackernews-2.0\" target=\"_blank\" rel=\"noopener\">Source</a>]</p>\n</blockquote>\n<h2 id=\"Features\"><a href=\"#Features\" class=\"headerlink\" title=\"Features\"></a>Features</h2><ul>\n<li>Server Side Rendering<ul>\n<li>Vue + Vue Router + Vuex working together</li>\n<li>Server-side data pre-fetching</li>\n<li>Client-side state &amp; DOM hydration</li>\n</ul>\n</li>\n<li>Single-file Vue Components<ul>\n<li>Hot-reload in development</li>\n<li>CSS extraction for production</li>\n</ul>\n</li>\n<li>Real-time List Updates with FLIP Animation</li>\n</ul>\n<h2 id=\"Architecture-Overview\"><a href=\"#Architecture-Overview\" class=\"headerlink\" title=\"Architecture Overview\"></a>Architecture Overview</h2><p><img width=\"973\" alt=\"Hackernew clone architecture overview\" src=\"../../images/hn-architecture.png\"></p>\n"},{"title":"Markdown Editor","type":"examples","order":0,"_content":"\n> Dead simple Markdown editor.\n\n<iframe width=\"100%\" height=\"500\" src=\"https://jsfiddle.net/chrisvfritz/0dzvcf4d/embedded/result,html,js,css\" allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>\n","source":"v2/examples/index.md","raw":"---\ntitle: Markdown Editor\ntype: examples\norder: 0\n---\n\n> Dead simple Markdown editor.\n\n<iframe width=\"100%\" height=\"500\" src=\"https://jsfiddle.net/chrisvfritz/0dzvcf4d/embedded/result,html,js,css\" allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>\n","date":"2018-07-19T04:04:16.861Z","updated":"2018-07-19T04:04:16.861Z","path":"v2/examples/index.html","comments":1,"layout":"page","_id":"cjk0zidok000svkrth319c8k7","content":"<blockquote>\n<p>Dead simple Markdown editor.</p>\n</blockquote>\n<iframe width=\"100%\" height=\"500\" src=\"https://jsfiddle.net/chrisvfritz/0dzvcf4d/embedded/result,html,js,css\" allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>Dead simple Markdown editor.</p>\n</blockquote>\n<iframe width=\"100%\" height=\"500\" src=\"https://jsfiddle.net/chrisvfritz/0dzvcf4d/embedded/result,html,js,css\" allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>\n"},{"title":"Modal Component","type":"examples","order":6,"_content":"\n> Features used: component, prop passing, content insertion, transitions.\n\n<iframe width=\"100%\" height=\"500\" src=\"https://jsfiddle.net/yyx990803/mwLbw11k/embedded/result,html,js,css\" allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>\n","source":"v2/examples/modal.md","raw":"---\ntitle: Modal Component\ntype: examples\norder: 6\n---\n\n> Features used: component, prop passing, content insertion, transitions.\n\n<iframe width=\"100%\" height=\"500\" src=\"https://jsfiddle.net/yyx990803/mwLbw11k/embedded/result,html,js,css\" allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>\n","date":"2018-07-19T04:04:16.862Z","updated":"2018-07-19T04:04:16.862Z","path":"v2/examples/modal.html","comments":1,"layout":"page","_id":"cjk0zidol000tvkrtpbpp4tcu","content":"<blockquote>\n<p>Features used: component, prop passing, content insertion, transitions.</p>\n</blockquote>\n<iframe width=\"100%\" height=\"500\" src=\"https://jsfiddle.net/yyx990803/mwLbw11k/embedded/result,html,js,css\" allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>Features used: component, prop passing, content insertion, transitions.</p>\n</blockquote>\n<iframe width=\"100%\" height=\"500\" src=\"https://jsfiddle.net/yyx990803/mwLbw11k/embedded/result,html,js,css\" allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>\n"},{"title":"Wrapper Component","type":"examples","order":8,"_content":"\n> In this example we are integrating a 3rd party jQuery plugin (select2) by wrapping it inside a custom component.\n\n<iframe width=\"100%\" height=\"500\" src=\"https://jsfiddle.net/chrisvfritz/d131Lebj/embedded/result,html,js,css\" allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>\n","source":"v2/examples/select2.md","raw":"---\ntitle: Wrapper Component\ntype: examples\norder: 8\n---\n\n> In this example we are integrating a 3rd party jQuery plugin (select2) by wrapping it inside a custom component.\n\n<iframe width=\"100%\" height=\"500\" src=\"https://jsfiddle.net/chrisvfritz/d131Lebj/embedded/result,html,js,css\" allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>\n","date":"2018-07-19T04:04:16.862Z","updated":"2018-07-19T04:04:16.862Z","path":"v2/examples/select2.html","comments":1,"layout":"page","_id":"cjk0zidol000uvkrto1q0sbma","content":"<blockquote>\n<p>In this example we are integrating a 3rd party jQuery plugin (select2) by wrapping it inside a custom component.</p>\n</blockquote>\n<iframe width=\"100%\" height=\"500\" src=\"https://jsfiddle.net/chrisvfritz/d131Lebj/embedded/result,html,js,css\" allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>In this example we are integrating a 3rd party jQuery plugin (select2) by wrapping it inside a custom component.</p>\n</blockquote>\n<iframe width=\"100%\" height=\"500\" src=\"https://jsfiddle.net/chrisvfritz/d131Lebj/embedded/result,html,js,css\" allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>\n"},{"title":"SVG Graph","type":"examples","order":5,"_content":"\n> This example showcases a combination of custom component, computed property, two-way binding and SVG support.\n\n<iframe width=\"100%\" height=\"500\" src=\"https://jsfiddle.net/yyx990803/mhrckqgq/embedded/result,html,js,css\" allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>\n","source":"v2/examples/svg.md","raw":"---\ntitle: SVG Graph\ntype: examples\norder: 5\n---\n\n> This example showcases a combination of custom component, computed property, two-way binding and SVG support.\n\n<iframe width=\"100%\" height=\"500\" src=\"https://jsfiddle.net/yyx990803/mhrckqgq/embedded/result,html,js,css\" allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>\n","date":"2018-07-19T04:04:16.862Z","updated":"2018-07-19T04:04:16.862Z","path":"v2/examples/svg.html","comments":1,"layout":"page","_id":"cjk0zidol000vvkrtr2v5pkhn","content":"<blockquote>\n<p>This example showcases a combination of custom component, computed property, two-way binding and SVG support.</p>\n</blockquote>\n<iframe width=\"100%\" height=\"500\" src=\"https://jsfiddle.net/yyx990803/mhrckqgq/embedded/result,html,js,css\" allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>This example showcases a combination of custom component, computed property, two-way binding and SVG support.</p>\n</blockquote>\n<iframe width=\"100%\" height=\"500\" src=\"https://jsfiddle.net/yyx990803/mhrckqgq/embedded/result,html,js,css\" allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>\n"},{"title":"TodoMVC","type":"examples","order":11,"_content":"\n> This is a fully spec-compliant TodoMVC implementation in under 120 effective lines of JavaScript (excluding comments and blank lines).\n\n<p class=\"tip\">Note that if your web browser is configured to block 3rd-party data/cookies, the example below will not work, as the `localStorage` data will fail to be saved from JSFiddle. You'll have to click on `Edit in JSFiddle` to see the live result.</p>\n\n<iframe width=\"100%\" height=\"500\" src=\"https://jsfiddle.net/yyx990803/4dr2fLb7/embedded/result,html,js,css\" allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>\n","source":"v2/examples/todomvc.md","raw":"---\ntitle: TodoMVC\ntype: examples\norder: 11\n---\n\n> This is a fully spec-compliant TodoMVC implementation in under 120 effective lines of JavaScript (excluding comments and blank lines).\n\n<p class=\"tip\">Note that if your web browser is configured to block 3rd-party data/cookies, the example below will not work, as the `localStorage` data will fail to be saved from JSFiddle. You'll have to click on `Edit in JSFiddle` to see the live result.</p>\n\n<iframe width=\"100%\" height=\"500\" src=\"https://jsfiddle.net/yyx990803/4dr2fLb7/embedded/result,html,js,css\" allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>\n","date":"2018-07-19T04:04:16.863Z","updated":"2018-07-19T04:04:16.863Z","path":"v2/examples/todomvc.html","comments":1,"layout":"page","_id":"cjk0zidom000wvkrt5c8q9uwi","content":"<blockquote>\n<p>This is a fully spec-compliant TodoMVC implementation in under 120 effective lines of JavaScript (excluding comments and blank lines).</p>\n</blockquote>\n<p class=\"tip\">Note that if your web browser is configured to block 3rd-party data/cookies, the example below will not work, as the <code>localStorage</code> data will fail to be saved from JSFiddle. You’ll have to click on <code>Edit in JSFiddle</code> to see the live result.</p>\n\n<iframe width=\"100%\" height=\"500\" src=\"https://jsfiddle.net/yyx990803/4dr2fLb7/embedded/result,html,js,css\" allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>This is a fully spec-compliant TodoMVC implementation in under 120 effective lines of JavaScript (excluding comments and blank lines).</p>\n</blockquote>\n<p class=\"tip\">Note that if your web browser is configured to block 3rd-party data/cookies, the example below will not work, as the <code>localStorage</code> data will fail to be saved from JSFiddle. You’ll have to click on <code>Edit in JSFiddle</code> to see the live result.</p>\n\n<iframe width=\"100%\" height=\"500\" src=\"https://jsfiddle.net/yyx990803/4dr2fLb7/embedded/result,html,js,css\" allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>\n"},{"title":"Tree View","type":"examples","order":4,"_content":"\n> Example of a simple tree view implementation showcasing recursive usage of components.\n\n<iframe width=\"100%\" height=\"500\" src=\"https://jsfiddle.net/chrisvfritz/pnqzspoe/embedded/result,html,js,css\" allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>\n","source":"v2/examples/tree-view.md","raw":"---\ntitle: Tree View\ntype: examples\norder: 4\n---\n\n> Example of a simple tree view implementation showcasing recursive usage of components.\n\n<iframe width=\"100%\" height=\"500\" src=\"https://jsfiddle.net/chrisvfritz/pnqzspoe/embedded/result,html,js,css\" allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>\n","date":"2018-07-19T04:04:16.863Z","updated":"2018-07-19T04:04:16.863Z","path":"v2/examples/tree-view.html","comments":1,"layout":"page","_id":"cjk0zidom000xvkrtheguztxl","content":"<blockquote>\n<p>Example of a simple tree view implementation showcasing recursive usage of components.</p>\n</blockquote>\n<iframe width=\"100%\" height=\"500\" src=\"https://jsfiddle.net/chrisvfritz/pnqzspoe/embedded/result,html,js,css\" allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>Example of a simple tree view implementation showcasing recursive usage of components.</p>\n</blockquote>\n<iframe width=\"100%\" height=\"500\" src=\"https://jsfiddle.net/chrisvfritz/pnqzspoe/embedded/result,html,js,css\" allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>\n"},{"title":"Get Started","type":"guide","order":2,"_content":"\n## Introduction\n\n- Instantly add authentication to a VueJS or Nuxt project.\n- Login with username, email address, or Social Media credentials\n- User registration, with confirmation email verification\n- Forgotten password handling via email\n- JWT (JSON Web Token) for downstream verifications.\n- User administration\n- Integration with MailChimp, import and export\n- Blacklisted users\n\n\n\n## Quick Start\n\n```bash\nnpm install vue-loginservice debounce vue-awesome --save\n\n    or\n\nyarn add vue-loginservice debounce vue-awesome\n```\n\n\n### Add to a VueJS Project\n\nWhen used with a module system, you must explicitly install Vuex via `Vue.use()`:\n\n```vue\nimport Vue from 'vue'\nimport Loginservice from 'vue-loginservice'\n\nVue.use(Loginservice, options)\n```\n\n\n### Add to a Nuxt project\nLoginservice is added to a Nuxt project by creating a Nuxt plugin.\n\n`~/plugins/vue-loginservice`:\n```vue\nimport Vue from 'vue'\nimport Loginservice from 'vue-loginservice'\n\nVue.use(Loginservice, options)\n```\n\n`nuxt.config.js`:\n```JS\nmodule.exports = {\n  ...\n  plugins: [\n    ...\n    { src: '~plugins/vue-loginservice.js', ssr: false },\n  ],\n}\n```\n\n> Note: this is plugins under module.exports, not to be confused with any of the Webpack plugins defined inside build.\n\n\n### Create the Login Page\n```html\n<template lang=\"pug\">\n  .my-login-page\n    my-header\n    section\n      loginservice-login\n    my-footer\n</template>\n```\n\n### Access User Details\n\nFrom your template:\n```html\n<template lang=\"pug\">\n  div\n    // Display the user's name, or a link to the Login page\n    h1(v-if=\"$loginservice.user\") Hello {{$loginservice.user.firstname}}\n    router-link(v-else to=\"login\") Sign In\n</template>\n```\nFrom your code:\n```JS\nmethods: {\n  doSomething: function () {\n    let jwt = this.$loginservice.jwt // Can be passed to a backend server\n    let user = this.$loginservice.user // null if not logged in\n  }\n}\n```\n\n\n\n## Your Account Dashboard\n\nCreate a free ToolTwist account at http://tooltwist.com, and press `Add Application` to get an APIKey for your application. This dashboard provides user administration, metrics, and other functionality.\n\n\n\n## Options\n\nvue-loginservice requires that an `options` object is passed to Vue.use().\n\nThese options relate to how your client application connects to the remote Loginservice.io server.\n\nSome of these values may change during the different stages of your development, so the endpoint details are best saved in a configuration file, that can be overwritten during deployment. The convention we use is to place such a file in a directory named `protected-config/loginservice-config.js`.\n\n`protected-config/websiteConfig.js`:\n```JS\n/*\n *  This file gets overwritten during production deployments.\n */\nmodule.exports = {\n  loginservice: {\n    host: 'loginservice.io',\n    version: 'v2',\n    apikey: 'API10O0X1XXXXXXXXXXXKN15ZXXX9'\n  }\n}\n```\n\nWe then reference this file when setting our endpoints. Note that not all the values need to be defined.\n```JS\n// Load the configuration. This directory should be included in .gitignore.\nimport Config from '../protected-config/websiteConfig'\n\nconst options = {\n  protocol: Config.loginservice.protocol,\n  host: Config.loginservice.host,\n  port: Config.loginservice.port,\n  version: Config.loginservice.version,\n  apikey: Config.loginservice.apikey,\n  hints: {\n    sitename: 'ToolTwist',\n  }\n  ...\n}\n```\n\nMost of these endpoint values are provided when you get the APIKEY from the ToolTwist website.\n\nOption | Default | Notes\n--- | --- | ---\nprotocol | https | http or https\nhost | api.loginservice.io | Enterprise customers have dedicated servers\nport | 80 |\nversion | v2 |\napikey | mandatory | Allocate APIKEYs with your tooltwist.com account\nsitename | 'this site' | Name of your website / company, used in prompts\n\n\n### Registration\n\nAllowing users to sign up using their email address is optional. To disable email registration, set register to false.\n```JS\n    const options = {\n\n      hints: {\n        register: false,\n\n      }\n    }\n```\n\nIf you do want to allow user self-registration, provide the options like this:\n```JS\n    const options = {\n\n      hints: {\n        register: {\n          password: true,\n          firstname: false,\n          middlename: false,\n          lastname: false,\n          resumeURL: 'http://mydomain.com/welcome',\n          termsMessage: 'Agree to our terms?',\n          termsRoute: '/terms-and-conditions'\n        },\n        login : {\n          registerMessage: 'Don\\'t have an account yet?'\n        },\n\n      }\n    }\n```\nFor most applications it is desirable to keep the registration process as simple as possible\n\nOption | Default | Notes\n--- | --- | ---\npassword | true | If false the user will not be prompted for a password.\nfirstname | false | Prompt the user for their first name\nmiddlename | false | Prompt the user for their middle name\nlastname | false | Prompt the user for their last name\nresumeURL | mandatory | Where the useer is sent after clicking the link in the email they are sent\ntermsMessage | By signing up to you agree to our EULA | Message on the bottom of the sign up page\ntermsRoute | /terms-and-conditions | URL of your EULA page\nregisterMessage | 'New to ?' | Sign in message shown on the login page\n\n\n### Forgotten password\n\nThe optional `forgotten password` option allows an email to be sent to the user, containing a link to a `reset password` page on your site. You will need to provide this page, and provide it's URL as resumeURL.\n```JS\n    const options = {\n\n      hints: {\n        forgot: {\n          resumeURL: 'http://mydomain.com/password-reset'\n        }\n      }\n    }\n```\n\nTo disable forgotten password functionality, set forgot to false.\n```JS\n    const options = {\n\n      hints: {\n        register: false,\n\n      }\n    }\n```\nIf you do want to allow user self-registration, provide the options like this:\n```JS\n    const options = {\n\n      hints: {\n        register: {\n          password: true,\n          firstname: false,\n          middlename: false,\n          lastname: false,\n          resumeURL: 'http://mydomain.com/welcome',\n          termsMessage: 'Agree to our terms?',\n          termsRoute: '/terms-and-conditions'\n        },\n        login : {\n          registerMessage: 'Don\\'t have an account yet?'\n        },\n\n      }\n    }\n```\n\n### Overriding default Login options\n\nThe options for a user logging in are downloaded from the Loginservice server, and are controlled by the Dashboard for your account at tooltwist.com.\n\nThe options below can be used to disable this login options.\n\nFor example, you may have Facebook login configured on the Admin dashboard, but do not want to allow it from this application.\n\nHowever, if you do not have Facebook login configured in the Admin dashboard, an error will occur if you try to enable it here.\n```JS\n    const options = {\n      //...\n      hints: {\n        usernames: true,\n        login: {\n          email: false,\n          facebook: true,\n          github: true,\n          google: true,\n          linkedin: true,\n          twitter: true,\n        }\n      }\n    }\n```\n\nOption | Default | Notes\n--- | --- | ---\nusernames | false | Are users required to have a unique username\nemail | true | If disabled, the user will be forced to use a social media login\nfacebook | false | Allow Facebook login\ngithub | false | Allow Github login\ngoogle | false | Allow Google login\nlinkedin | false | Allow Linkedin login\ntwitter | false | Allow Twitter login\n","source":"v2/guide/index.md","raw":"---\ntitle: Get Started\ntype: guide\norder: 2\n---\n\n## Introduction\n\n- Instantly add authentication to a VueJS or Nuxt project.\n- Login with username, email address, or Social Media credentials\n- User registration, with confirmation email verification\n- Forgotten password handling via email\n- JWT (JSON Web Token) for downstream verifications.\n- User administration\n- Integration with MailChimp, import and export\n- Blacklisted users\n\n\n\n## Quick Start\n\n```bash\nnpm install vue-loginservice debounce vue-awesome --save\n\n    or\n\nyarn add vue-loginservice debounce vue-awesome\n```\n\n\n### Add to a VueJS Project\n\nWhen used with a module system, you must explicitly install Vuex via `Vue.use()`:\n\n```vue\nimport Vue from 'vue'\nimport Loginservice from 'vue-loginservice'\n\nVue.use(Loginservice, options)\n```\n\n\n### Add to a Nuxt project\nLoginservice is added to a Nuxt project by creating a Nuxt plugin.\n\n`~/plugins/vue-loginservice`:\n```vue\nimport Vue from 'vue'\nimport Loginservice from 'vue-loginservice'\n\nVue.use(Loginservice, options)\n```\n\n`nuxt.config.js`:\n```JS\nmodule.exports = {\n  ...\n  plugins: [\n    ...\n    { src: '~plugins/vue-loginservice.js', ssr: false },\n  ],\n}\n```\n\n> Note: this is plugins under module.exports, not to be confused with any of the Webpack plugins defined inside build.\n\n\n### Create the Login Page\n```html\n<template lang=\"pug\">\n  .my-login-page\n    my-header\n    section\n      loginservice-login\n    my-footer\n</template>\n```\n\n### Access User Details\n\nFrom your template:\n```html\n<template lang=\"pug\">\n  div\n    // Display the user's name, or a link to the Login page\n    h1(v-if=\"$loginservice.user\") Hello {{$loginservice.user.firstname}}\n    router-link(v-else to=\"login\") Sign In\n</template>\n```\nFrom your code:\n```JS\nmethods: {\n  doSomething: function () {\n    let jwt = this.$loginservice.jwt // Can be passed to a backend server\n    let user = this.$loginservice.user // null if not logged in\n  }\n}\n```\n\n\n\n## Your Account Dashboard\n\nCreate a free ToolTwist account at http://tooltwist.com, and press `Add Application` to get an APIKey for your application. This dashboard provides user administration, metrics, and other functionality.\n\n\n\n## Options\n\nvue-loginservice requires that an `options` object is passed to Vue.use().\n\nThese options relate to how your client application connects to the remote Loginservice.io server.\n\nSome of these values may change during the different stages of your development, so the endpoint details are best saved in a configuration file, that can be overwritten during deployment. The convention we use is to place such a file in a directory named `protected-config/loginservice-config.js`.\n\n`protected-config/websiteConfig.js`:\n```JS\n/*\n *  This file gets overwritten during production deployments.\n */\nmodule.exports = {\n  loginservice: {\n    host: 'loginservice.io',\n    version: 'v2',\n    apikey: 'API10O0X1XXXXXXXXXXXKN15ZXXX9'\n  }\n}\n```\n\nWe then reference this file when setting our endpoints. Note that not all the values need to be defined.\n```JS\n// Load the configuration. This directory should be included in .gitignore.\nimport Config from '../protected-config/websiteConfig'\n\nconst options = {\n  protocol: Config.loginservice.protocol,\n  host: Config.loginservice.host,\n  port: Config.loginservice.port,\n  version: Config.loginservice.version,\n  apikey: Config.loginservice.apikey,\n  hints: {\n    sitename: 'ToolTwist',\n  }\n  ...\n}\n```\n\nMost of these endpoint values are provided when you get the APIKEY from the ToolTwist website.\n\nOption | Default | Notes\n--- | --- | ---\nprotocol | https | http or https\nhost | api.loginservice.io | Enterprise customers have dedicated servers\nport | 80 |\nversion | v2 |\napikey | mandatory | Allocate APIKEYs with your tooltwist.com account\nsitename | 'this site' | Name of your website / company, used in prompts\n\n\n### Registration\n\nAllowing users to sign up using their email address is optional. To disable email registration, set register to false.\n```JS\n    const options = {\n\n      hints: {\n        register: false,\n\n      }\n    }\n```\n\nIf you do want to allow user self-registration, provide the options like this:\n```JS\n    const options = {\n\n      hints: {\n        register: {\n          password: true,\n          firstname: false,\n          middlename: false,\n          lastname: false,\n          resumeURL: 'http://mydomain.com/welcome',\n          termsMessage: 'Agree to our terms?',\n          termsRoute: '/terms-and-conditions'\n        },\n        login : {\n          registerMessage: 'Don\\'t have an account yet?'\n        },\n\n      }\n    }\n```\nFor most applications it is desirable to keep the registration process as simple as possible\n\nOption | Default | Notes\n--- | --- | ---\npassword | true | If false the user will not be prompted for a password.\nfirstname | false | Prompt the user for their first name\nmiddlename | false | Prompt the user for their middle name\nlastname | false | Prompt the user for their last name\nresumeURL | mandatory | Where the useer is sent after clicking the link in the email they are sent\ntermsMessage | By signing up to you agree to our EULA | Message on the bottom of the sign up page\ntermsRoute | /terms-and-conditions | URL of your EULA page\nregisterMessage | 'New to ?' | Sign in message shown on the login page\n\n\n### Forgotten password\n\nThe optional `forgotten password` option allows an email to be sent to the user, containing a link to a `reset password` page on your site. You will need to provide this page, and provide it's URL as resumeURL.\n```JS\n    const options = {\n\n      hints: {\n        forgot: {\n          resumeURL: 'http://mydomain.com/password-reset'\n        }\n      }\n    }\n```\n\nTo disable forgotten password functionality, set forgot to false.\n```JS\n    const options = {\n\n      hints: {\n        register: false,\n\n      }\n    }\n```\nIf you do want to allow user self-registration, provide the options like this:\n```JS\n    const options = {\n\n      hints: {\n        register: {\n          password: true,\n          firstname: false,\n          middlename: false,\n          lastname: false,\n          resumeURL: 'http://mydomain.com/welcome',\n          termsMessage: 'Agree to our terms?',\n          termsRoute: '/terms-and-conditions'\n        },\n        login : {\n          registerMessage: 'Don\\'t have an account yet?'\n        },\n\n      }\n    }\n```\n\n### Overriding default Login options\n\nThe options for a user logging in are downloaded from the Loginservice server, and are controlled by the Dashboard for your account at tooltwist.com.\n\nThe options below can be used to disable this login options.\n\nFor example, you may have Facebook login configured on the Admin dashboard, but do not want to allow it from this application.\n\nHowever, if you do not have Facebook login configured in the Admin dashboard, an error will occur if you try to enable it here.\n```JS\n    const options = {\n      //...\n      hints: {\n        usernames: true,\n        login: {\n          email: false,\n          facebook: true,\n          github: true,\n          google: true,\n          linkedin: true,\n          twitter: true,\n        }\n      }\n    }\n```\n\nOption | Default | Notes\n--- | --- | ---\nusernames | false | Are users required to have a unique username\nemail | true | If disabled, the user will be forced to use a social media login\nfacebook | false | Allow Facebook login\ngithub | false | Allow Github login\ngoogle | false | Allow Google login\nlinkedin | false | Allow Linkedin login\ntwitter | false | Allow Twitter login\n","date":"2018-07-19T04:04:16.864Z","updated":"2018-07-19T04:04:16.864Z","path":"v2/guide/index.html","comments":1,"layout":"page","_id":"cjk0zidom000yvkrt2i5uzeac","content":"<h2 id=\"Introduction\"><a href=\"#Introduction\" class=\"headerlink\" title=\"Introduction\"></a>Introduction</h2><ul>\n<li>Instantly add authentication to a VueJS or Nuxt project.</li>\n<li>Login with username, email address, or Social Media credentials</li>\n<li>User registration, with confirmation email verification</li>\n<li>Forgotten password handling via email</li>\n<li>JWT (JSON Web Token) for downstream verifications.</li>\n<li>User administration</li>\n<li>Integration with MailChimp, import and export</li>\n<li>Blacklisted users</li>\n</ul>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install vue-loginservice debounce vue-awesome --save</span><br><span class=\"line\"></span><br><span class=\"line\">    or</span><br><span class=\"line\"></span><br><span class=\"line\">yarn add vue-loginservice debounce vue-awesome</span><br></pre></td></tr></table></figure>\n<h3 id=\"Add-to-a-VueJS-Project\"><a href=\"#Add-to-a-VueJS-Project\" class=\"headerlink\" title=\"Add to a VueJS Project\"></a>Add to a VueJS Project</h3><p>When used with a module system, you must explicitly install Vuex via <code>Vue.use()</code>:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">import Vue from &apos;vue&apos;</span><br><span class=\"line\">import Loginservice from &apos;vue-loginservice&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">Vue.use(Loginservice, options)</span><br></pre></td></tr></table></figure>\n<h3 id=\"Add-to-a-Nuxt-project\"><a href=\"#Add-to-a-Nuxt-project\" class=\"headerlink\" title=\"Add to a Nuxt project\"></a>Add to a Nuxt project</h3><p>Loginservice is added to a Nuxt project by creating a Nuxt plugin.</p>\n<p><code>~/plugins/vue-loginservice</code>:<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">import Vue from &apos;vue&apos;</span><br><span class=\"line\">import Loginservice from &apos;vue-loginservice&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">Vue.use(Loginservice, options)</span><br></pre></td></tr></table></figure></p>\n<p><code>nuxt.config.js</code>:<br><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  plugins: [</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    &#123; <span class=\"attr\">src</span>: <span class=\"string\">'~plugins/vue-loginservice.js'</span>, <span class=\"attr\">ssr</span>: <span class=\"literal\">false</span> &#125;,</span><br><span class=\"line\">  ],</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>Note: this is plugins under module.exports, not to be confused with any of the Webpack plugins defined inside build.</p>\n</blockquote>\n<h3 id=\"Create-the-Login-Page\"><a href=\"#Create-the-Login-Page\" class=\"headerlink\" title=\"Create the Login Page\"></a>Create the Login Page</h3><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"pug\"</span>&gt;</span></span><br><span class=\"line\">  .my-login-page</span><br><span class=\"line\">    my-header</span><br><span class=\"line\">    section</span><br><span class=\"line\">      loginservice-login</span><br><span class=\"line\">    my-footer</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"Access-User-Details\"><a href=\"#Access-User-Details\" class=\"headerlink\" title=\"Access User Details\"></a>Access User Details</h3><p>From your template:<br><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"pug\"</span>&gt;</span></span><br><span class=\"line\">  div</span><br><span class=\"line\">    // Display the user's name, or a link to the Login page</span><br><span class=\"line\">    h1(v-if=\"$loginservice.user\") Hello &#123;&#123;$loginservice.user.firstname&#125;&#125;</span><br><span class=\"line\">    router-link(v-else to=\"login\") Sign In</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>From your code:<br><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">methods: &#123;</span><br><span class=\"line\">  doSomething: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> jwt = <span class=\"keyword\">this</span>.$loginservice.jwt <span class=\"comment\">// Can be passed to a backend server</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> user = <span class=\"keyword\">this</span>.$loginservice.user <span class=\"comment\">// null if not logged in</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Your-Account-Dashboard\"><a href=\"#Your-Account-Dashboard\" class=\"headerlink\" title=\"Your Account Dashboard\"></a>Your Account Dashboard</h2><p>Create a free ToolTwist account at <a href=\"http://tooltwist.com\" target=\"_blank\" rel=\"noopener\">http://tooltwist.com</a>, and press <code>Add Application</code> to get an APIKey for your application. This dashboard provides user administration, metrics, and other functionality.</p>\n<h2 id=\"Options\"><a href=\"#Options\" class=\"headerlink\" title=\"Options\"></a>Options</h2><p>vue-loginservice requires that an <code>options</code> object is passed to Vue.use().</p>\n<p>These options relate to how your client application connects to the remote Loginservice.io server.</p>\n<p>Some of these values may change during the different stages of your development, so the endpoint details are best saved in a configuration file, that can be overwritten during deployment. The convention we use is to place such a file in a directory named <code>protected-config/loginservice-config.js</code>.</p>\n<p><code>protected-config/websiteConfig.js</code>:<br><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> *  This file gets overwritten during production deployments.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  loginservice: &#123;</span><br><span class=\"line\">    host: <span class=\"string\">'loginservice.io'</span>,</span><br><span class=\"line\">    version: <span class=\"string\">'v2'</span>,</span><br><span class=\"line\">    apikey: <span class=\"string\">'API10O0X1XXXXXXXXXXXKN15ZXXX9'</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>We then reference this file when setting our endpoints. Note that not all the values need to be defined.<br><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Load the configuration. This directory should be included in .gitignore.</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> Config <span class=\"keyword\">from</span> <span class=\"string\">'../protected-config/websiteConfig'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> options = &#123;</span><br><span class=\"line\">  protocol: Config.loginservice.protocol,</span><br><span class=\"line\">  host: Config.loginservice.host,</span><br><span class=\"line\">  port: Config.loginservice.port,</span><br><span class=\"line\">  version: Config.loginservice.version,</span><br><span class=\"line\">  apikey: Config.loginservice.apikey,</span><br><span class=\"line\">  hints: &#123;</span><br><span class=\"line\">    sitename: <span class=\"string\">'ToolTwist'</span>,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>Most of these endpoint values are provided when you get the APIKEY from the ToolTwist website.</p>\n<table>\n<thead>\n<tr>\n<th>Option</th>\n<th>Default</th>\n<th>Notes</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>protocol</td>\n<td>https</td>\n<td>http or https</td>\n</tr>\n<tr>\n<td>host</td>\n<td>api.loginservice.io</td>\n<td>Enterprise customers have dedicated servers</td>\n</tr>\n<tr>\n<td>port</td>\n<td>80</td>\n<td></td>\n</tr>\n<tr>\n<td>version</td>\n<td>v2</td>\n<td></td>\n</tr>\n<tr>\n<td>apikey</td>\n<td>mandatory</td>\n<td>Allocate APIKEYs with your tooltwist.com account</td>\n</tr>\n<tr>\n<td>sitename</td>\n<td>‘this site’</td>\n<td>Name of your website / company, used in prompts</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"Registration\"><a href=\"#Registration\" class=\"headerlink\" title=\"Registration\"></a>Registration</h3><p>Allowing users to sign up using their email address is optional. To disable email registration, set register to false.<br><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> options = &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  hints: &#123;</span><br><span class=\"line\">    register: <span class=\"literal\">false</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>If you do want to allow user self-registration, provide the options like this:<br><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> options = &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  hints: &#123;</span><br><span class=\"line\">    register: &#123;</span><br><span class=\"line\">      password: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      firstname: <span class=\"literal\">false</span>,</span><br><span class=\"line\">      middlename: <span class=\"literal\">false</span>,</span><br><span class=\"line\">      lastname: <span class=\"literal\">false</span>,</span><br><span class=\"line\">      resumeURL: <span class=\"string\">'http://mydomain.com/welcome'</span>,</span><br><span class=\"line\">      termsMessage: <span class=\"string\">'Agree to our terms?'</span>,</span><br><span class=\"line\">      termsRoute: <span class=\"string\">'/terms-and-conditions'</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    login : &#123;</span><br><span class=\"line\">      registerMessage: <span class=\"string\">'Don\\'t have an account yet?'</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>For most applications it is desirable to keep the registration process as simple as possible</p>\n<table>\n<thead>\n<tr>\n<th>Option</th>\n<th>Default</th>\n<th>Notes</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>password</td>\n<td>true</td>\n<td>If false the user will not be prompted for a password.</td>\n</tr>\n<tr>\n<td>firstname</td>\n<td>false</td>\n<td>Prompt the user for their first name</td>\n</tr>\n<tr>\n<td>middlename</td>\n<td>false</td>\n<td>Prompt the user for their middle name</td>\n</tr>\n<tr>\n<td>lastname</td>\n<td>false</td>\n<td>Prompt the user for their last name</td>\n</tr>\n<tr>\n<td>resumeURL</td>\n<td>mandatory</td>\n<td>Where the useer is sent after clicking the link in the email they are sent</td>\n</tr>\n<tr>\n<td>termsMessage</td>\n<td>By signing up to you agree to our EULA</td>\n<td>Message on the bottom of the sign up page</td>\n</tr>\n<tr>\n<td>termsRoute</td>\n<td>/terms-and-conditions</td>\n<td>URL of your EULA page</td>\n</tr>\n<tr>\n<td>registerMessage</td>\n<td>‘New to ?’</td>\n<td>Sign in message shown on the login page</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"Forgotten-password\"><a href=\"#Forgotten-password\" class=\"headerlink\" title=\"Forgotten password\"></a>Forgotten password</h3><p>The optional <code>forgotten password</code> option allows an email to be sent to the user, containing a link to a <code>reset password</code> page on your site. You will need to provide this page, and provide it’s URL as resumeURL.<br><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> options = &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  hints: &#123;</span><br><span class=\"line\">    forgot: &#123;</span><br><span class=\"line\">      resumeURL: <span class=\"string\">'http://mydomain.com/password-reset'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>To disable forgotten password functionality, set forgot to false.<br><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> options = &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  hints: &#123;</span><br><span class=\"line\">    register: <span class=\"literal\">false</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>If you do want to allow user self-registration, provide the options like this:<br><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> options = &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  hints: &#123;</span><br><span class=\"line\">    register: &#123;</span><br><span class=\"line\">      password: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      firstname: <span class=\"literal\">false</span>,</span><br><span class=\"line\">      middlename: <span class=\"literal\">false</span>,</span><br><span class=\"line\">      lastname: <span class=\"literal\">false</span>,</span><br><span class=\"line\">      resumeURL: <span class=\"string\">'http://mydomain.com/welcome'</span>,</span><br><span class=\"line\">      termsMessage: <span class=\"string\">'Agree to our terms?'</span>,</span><br><span class=\"line\">      termsRoute: <span class=\"string\">'/terms-and-conditions'</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    login : &#123;</span><br><span class=\"line\">      registerMessage: <span class=\"string\">'Don\\'t have an account yet?'</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"Overriding-default-Login-options\"><a href=\"#Overriding-default-Login-options\" class=\"headerlink\" title=\"Overriding default Login options\"></a>Overriding default Login options</h3><p>The options for a user logging in are downloaded from the Loginservice server, and are controlled by the Dashboard for your account at tooltwist.com.</p>\n<p>The options below can be used to disable this login options.</p>\n<p>For example, you may have Facebook login configured on the Admin dashboard, but do not want to allow it from this application.</p>\n<p>However, if you do not have Facebook login configured in the Admin dashboard, an error will occur if you try to enable it here.<br><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> options = &#123;</span><br><span class=\"line\">  <span class=\"comment\">//...</span></span><br><span class=\"line\">  hints: &#123;</span><br><span class=\"line\">    usernames: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    login: &#123;</span><br><span class=\"line\">      email: <span class=\"literal\">false</span>,</span><br><span class=\"line\">      facebook: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      github: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      google: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      linkedin: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      twitter: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<table>\n<thead>\n<tr>\n<th>Option</th>\n<th>Default</th>\n<th>Notes</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>usernames</td>\n<td>false</td>\n<td>Are users required to have a unique username</td>\n</tr>\n<tr>\n<td>email</td>\n<td>true</td>\n<td>If disabled, the user will be forced to use a social media login</td>\n</tr>\n<tr>\n<td>facebook</td>\n<td>false</td>\n<td>Allow Facebook login</td>\n</tr>\n<tr>\n<td>github</td>\n<td>false</td>\n<td>Allow Github login</td>\n</tr>\n<tr>\n<td>google</td>\n<td>false</td>\n<td>Allow Google login</td>\n</tr>\n<tr>\n<td>linkedin</td>\n<td>false</td>\n<td>Allow Linkedin login</td>\n</tr>\n<tr>\n<td>twitter</td>\n<td>false</td>\n<td>Allow Twitter login</td>\n</tr>\n</tbody>\n</table>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Introduction\"><a href=\"#Introduction\" class=\"headerlink\" title=\"Introduction\"></a>Introduction</h2><ul>\n<li>Instantly add authentication to a VueJS or Nuxt project.</li>\n<li>Login with username, email address, or Social Media credentials</li>\n<li>User registration, with confirmation email verification</li>\n<li>Forgotten password handling via email</li>\n<li>JWT (JSON Web Token) for downstream verifications.</li>\n<li>User administration</li>\n<li>Integration with MailChimp, import and export</li>\n<li>Blacklisted users</li>\n</ul>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install vue-loginservice debounce vue-awesome --save</span><br><span class=\"line\"></span><br><span class=\"line\">    or</span><br><span class=\"line\"></span><br><span class=\"line\">yarn add vue-loginservice debounce vue-awesome</span><br></pre></td></tr></table></figure>\n<h3 id=\"Add-to-a-VueJS-Project\"><a href=\"#Add-to-a-VueJS-Project\" class=\"headerlink\" title=\"Add to a VueJS Project\"></a>Add to a VueJS Project</h3><p>When used with a module system, you must explicitly install Vuex via <code>Vue.use()</code>:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">import Vue from &apos;vue&apos;</span><br><span class=\"line\">import Loginservice from &apos;vue-loginservice&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">Vue.use(Loginservice, options)</span><br></pre></td></tr></table></figure>\n<h3 id=\"Add-to-a-Nuxt-project\"><a href=\"#Add-to-a-Nuxt-project\" class=\"headerlink\" title=\"Add to a Nuxt project\"></a>Add to a Nuxt project</h3><p>Loginservice is added to a Nuxt project by creating a Nuxt plugin.</p>\n<p><code>~/plugins/vue-loginservice</code>:<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">import Vue from &apos;vue&apos;</span><br><span class=\"line\">import Loginservice from &apos;vue-loginservice&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">Vue.use(Loginservice, options)</span><br></pre></td></tr></table></figure></p>\n<p><code>nuxt.config.js</code>:<br><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  plugins: [</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    &#123; <span class=\"attr\">src</span>: <span class=\"string\">'~plugins/vue-loginservice.js'</span>, <span class=\"attr\">ssr</span>: <span class=\"literal\">false</span> &#125;,</span><br><span class=\"line\">  ],</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>Note: this is plugins under module.exports, not to be confused with any of the Webpack plugins defined inside build.</p>\n</blockquote>\n<h3 id=\"Create-the-Login-Page\"><a href=\"#Create-the-Login-Page\" class=\"headerlink\" title=\"Create the Login Page\"></a>Create the Login Page</h3><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"pug\"</span>&gt;</span></span><br><span class=\"line\">  .my-login-page</span><br><span class=\"line\">    my-header</span><br><span class=\"line\">    section</span><br><span class=\"line\">      loginservice-login</span><br><span class=\"line\">    my-footer</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"Access-User-Details\"><a href=\"#Access-User-Details\" class=\"headerlink\" title=\"Access User Details\"></a>Access User Details</h3><p>From your template:<br><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"pug\"</span>&gt;</span></span><br><span class=\"line\">  div</span><br><span class=\"line\">    // Display the user's name, or a link to the Login page</span><br><span class=\"line\">    h1(v-if=\"$loginservice.user\") Hello &#123;&#123;$loginservice.user.firstname&#125;&#125;</span><br><span class=\"line\">    router-link(v-else to=\"login\") Sign In</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>From your code:<br><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">methods: &#123;</span><br><span class=\"line\">  doSomething: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> jwt = <span class=\"keyword\">this</span>.$loginservice.jwt <span class=\"comment\">// Can be passed to a backend server</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> user = <span class=\"keyword\">this</span>.$loginservice.user <span class=\"comment\">// null if not logged in</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Your-Account-Dashboard\"><a href=\"#Your-Account-Dashboard\" class=\"headerlink\" title=\"Your Account Dashboard\"></a>Your Account Dashboard</h2><p>Create a free ToolTwist account at <a href=\"http://tooltwist.com\" target=\"_blank\" rel=\"noopener\">http://tooltwist.com</a>, and press <code>Add Application</code> to get an APIKey for your application. This dashboard provides user administration, metrics, and other functionality.</p>\n<h2 id=\"Options\"><a href=\"#Options\" class=\"headerlink\" title=\"Options\"></a>Options</h2><p>vue-loginservice requires that an <code>options</code> object is passed to Vue.use().</p>\n<p>These options relate to how your client application connects to the remote Loginservice.io server.</p>\n<p>Some of these values may change during the different stages of your development, so the endpoint details are best saved in a configuration file, that can be overwritten during deployment. The convention we use is to place such a file in a directory named <code>protected-config/loginservice-config.js</code>.</p>\n<p><code>protected-config/websiteConfig.js</code>:<br><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> *  This file gets overwritten during production deployments.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  loginservice: &#123;</span><br><span class=\"line\">    host: <span class=\"string\">'loginservice.io'</span>,</span><br><span class=\"line\">    version: <span class=\"string\">'v2'</span>,</span><br><span class=\"line\">    apikey: <span class=\"string\">'API10O0X1XXXXXXXXXXXKN15ZXXX9'</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>We then reference this file when setting our endpoints. Note that not all the values need to be defined.<br><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Load the configuration. This directory should be included in .gitignore.</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> Config <span class=\"keyword\">from</span> <span class=\"string\">'../protected-config/websiteConfig'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> options = &#123;</span><br><span class=\"line\">  protocol: Config.loginservice.protocol,</span><br><span class=\"line\">  host: Config.loginservice.host,</span><br><span class=\"line\">  port: Config.loginservice.port,</span><br><span class=\"line\">  version: Config.loginservice.version,</span><br><span class=\"line\">  apikey: Config.loginservice.apikey,</span><br><span class=\"line\">  hints: &#123;</span><br><span class=\"line\">    sitename: <span class=\"string\">'ToolTwist'</span>,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>Most of these endpoint values are provided when you get the APIKEY from the ToolTwist website.</p>\n<table>\n<thead>\n<tr>\n<th>Option</th>\n<th>Default</th>\n<th>Notes</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>protocol</td>\n<td>https</td>\n<td>http or https</td>\n</tr>\n<tr>\n<td>host</td>\n<td>api.loginservice.io</td>\n<td>Enterprise customers have dedicated servers</td>\n</tr>\n<tr>\n<td>port</td>\n<td>80</td>\n<td></td>\n</tr>\n<tr>\n<td>version</td>\n<td>v2</td>\n<td></td>\n</tr>\n<tr>\n<td>apikey</td>\n<td>mandatory</td>\n<td>Allocate APIKEYs with your tooltwist.com account</td>\n</tr>\n<tr>\n<td>sitename</td>\n<td>‘this site’</td>\n<td>Name of your website / company, used in prompts</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"Registration\"><a href=\"#Registration\" class=\"headerlink\" title=\"Registration\"></a>Registration</h3><p>Allowing users to sign up using their email address is optional. To disable email registration, set register to false.<br><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> options = &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  hints: &#123;</span><br><span class=\"line\">    register: <span class=\"literal\">false</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>If you do want to allow user self-registration, provide the options like this:<br><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> options = &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  hints: &#123;</span><br><span class=\"line\">    register: &#123;</span><br><span class=\"line\">      password: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      firstname: <span class=\"literal\">false</span>,</span><br><span class=\"line\">      middlename: <span class=\"literal\">false</span>,</span><br><span class=\"line\">      lastname: <span class=\"literal\">false</span>,</span><br><span class=\"line\">      resumeURL: <span class=\"string\">'http://mydomain.com/welcome'</span>,</span><br><span class=\"line\">      termsMessage: <span class=\"string\">'Agree to our terms?'</span>,</span><br><span class=\"line\">      termsRoute: <span class=\"string\">'/terms-and-conditions'</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    login : &#123;</span><br><span class=\"line\">      registerMessage: <span class=\"string\">'Don\\'t have an account yet?'</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>For most applications it is desirable to keep the registration process as simple as possible</p>\n<table>\n<thead>\n<tr>\n<th>Option</th>\n<th>Default</th>\n<th>Notes</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>password</td>\n<td>true</td>\n<td>If false the user will not be prompted for a password.</td>\n</tr>\n<tr>\n<td>firstname</td>\n<td>false</td>\n<td>Prompt the user for their first name</td>\n</tr>\n<tr>\n<td>middlename</td>\n<td>false</td>\n<td>Prompt the user for their middle name</td>\n</tr>\n<tr>\n<td>lastname</td>\n<td>false</td>\n<td>Prompt the user for their last name</td>\n</tr>\n<tr>\n<td>resumeURL</td>\n<td>mandatory</td>\n<td>Where the useer is sent after clicking the link in the email they are sent</td>\n</tr>\n<tr>\n<td>termsMessage</td>\n<td>By signing up to you agree to our EULA</td>\n<td>Message on the bottom of the sign up page</td>\n</tr>\n<tr>\n<td>termsRoute</td>\n<td>/terms-and-conditions</td>\n<td>URL of your EULA page</td>\n</tr>\n<tr>\n<td>registerMessage</td>\n<td>‘New to ?’</td>\n<td>Sign in message shown on the login page</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"Forgotten-password\"><a href=\"#Forgotten-password\" class=\"headerlink\" title=\"Forgotten password\"></a>Forgotten password</h3><p>The optional <code>forgotten password</code> option allows an email to be sent to the user, containing a link to a <code>reset password</code> page on your site. You will need to provide this page, and provide it’s URL as resumeURL.<br><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> options = &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  hints: &#123;</span><br><span class=\"line\">    forgot: &#123;</span><br><span class=\"line\">      resumeURL: <span class=\"string\">'http://mydomain.com/password-reset'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>To disable forgotten password functionality, set forgot to false.<br><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> options = &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  hints: &#123;</span><br><span class=\"line\">    register: <span class=\"literal\">false</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>If you do want to allow user self-registration, provide the options like this:<br><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> options = &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  hints: &#123;</span><br><span class=\"line\">    register: &#123;</span><br><span class=\"line\">      password: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      firstname: <span class=\"literal\">false</span>,</span><br><span class=\"line\">      middlename: <span class=\"literal\">false</span>,</span><br><span class=\"line\">      lastname: <span class=\"literal\">false</span>,</span><br><span class=\"line\">      resumeURL: <span class=\"string\">'http://mydomain.com/welcome'</span>,</span><br><span class=\"line\">      termsMessage: <span class=\"string\">'Agree to our terms?'</span>,</span><br><span class=\"line\">      termsRoute: <span class=\"string\">'/terms-and-conditions'</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    login : &#123;</span><br><span class=\"line\">      registerMessage: <span class=\"string\">'Don\\'t have an account yet?'</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"Overriding-default-Login-options\"><a href=\"#Overriding-default-Login-options\" class=\"headerlink\" title=\"Overriding default Login options\"></a>Overriding default Login options</h3><p>The options for a user logging in are downloaded from the Loginservice server, and are controlled by the Dashboard for your account at tooltwist.com.</p>\n<p>The options below can be used to disable this login options.</p>\n<p>For example, you may have Facebook login configured on the Admin dashboard, but do not want to allow it from this application.</p>\n<p>However, if you do not have Facebook login configured in the Admin dashboard, an error will occur if you try to enable it here.<br><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> options = &#123;</span><br><span class=\"line\">  <span class=\"comment\">//...</span></span><br><span class=\"line\">  hints: &#123;</span><br><span class=\"line\">    usernames: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    login: &#123;</span><br><span class=\"line\">      email: <span class=\"literal\">false</span>,</span><br><span class=\"line\">      facebook: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      github: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      google: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      linkedin: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      twitter: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<table>\n<thead>\n<tr>\n<th>Option</th>\n<th>Default</th>\n<th>Notes</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>usernames</td>\n<td>false</td>\n<td>Are users required to have a unique username</td>\n</tr>\n<tr>\n<td>email</td>\n<td>true</td>\n<td>If disabled, the user will be forced to use a social media login</td>\n</tr>\n<tr>\n<td>facebook</td>\n<td>false</td>\n<td>Allow Facebook login</td>\n</tr>\n<tr>\n<td>github</td>\n<td>false</td>\n<td>Allow Github login</td>\n</tr>\n<tr>\n<td>google</td>\n<td>false</td>\n<td>Allow Google login</td>\n</tr>\n<tr>\n<td>linkedin</td>\n<td>false</td>\n<td>Allow Linkedin login</td>\n</tr>\n<tr>\n<td>twitter</td>\n<td>false</td>\n<td>Allow Twitter login</td>\n</tr>\n</tbody>\n</table>\n"},{"title":"Search Vue.js","type":"search","search":true,"_content":"","source":"v2/search/index.md","raw":"---\ntitle: Search Vue.js\ntype: search\nsearch: true\n---","date":"2018-07-19T04:04:16.865Z","updated":"2018-07-19T04:04:16.865Z","path":"v2/search/index.html","comments":1,"layout":"page","_id":"cjk0zidom000zvkrtjye2p8ax","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"Client-Side Storage","type":"cookbook","order":11,"_content":"\n## Base Example\n\nClient-side storage is an excellent way to quickly add performance gains to an application. By storing data on the browser itself, you can skip fetching information from the server every time the user needs it. While especially useful when offline, even online users will benefit from using data locally versus a remote server. Client-side storage can be done with [cookies](https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies), [Local Storage](https://developer.mozilla.org/en-US/docs/Web/API/Web_Storage_API) (technically \"Web Storage\"), [IndexedDB](https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API), and [WebSQL](https://www.w3.org/TR/webdatabase/) (a deprecated method that should not be used in new projects). \n\nIn this cookbook entry we'll focus on Local Storage, the simplest of the storage mechanisms. Local Storage uses a key/value system for storing data. It is limited to storing only simple values but complex data can be stored if you are willing to encode and decode the values with JSON. In general, Local Storage is appropriate for smaller sets of data you would want to persist, things like user preferences or form data. Larger data with more complex storage needs would be better stored typically in IndexedDB. \n\nLet's begin with a simple form based example:\n\n``` html\n<div id=\"app\">\n  My name is <input v-model=\"name\">\n</div>\n```\n\nThis example has one form field bound to a Vue value called `name`. Here's the JavaScript:\n\n``` js\nconst app = new Vue({\n  el: '#app',\n  data: {\n    name: ''\n  },\n  mounted() {\n    if (localStorage.name) {\n      this.name = localStorage.name;\n    }\n  },\n  watch: {\n    name(newName) {\n      localStorage.name = newName;\n    }\n  }\n});\n```\n\nFocus on the `mounted` and `watch` parts. We use `mounted` to handle loading the value from localStorage. To handle writing the data base, we watch the `name` value and on change, immediately write it. \n\nYou can run this yourself here:\n\n<p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"KodaKb\" data-default-tab=\"js,result\" data-user=\"cfjedimaster\" data-embed-version=\"2\" data-pen-title=\"testing localstorage\" class=\"codepen\">See the Pen <a href=\"https://codepen.io/cfjedimaster/pen/KodaKb/\">testing localstorage</a> by Raymond Camden (<a href=\"https://codepen.io/cfjedimaster\">@cfjedimaster</a>) on <a href=\"https://codepen.io\">CodePen</a>.</p>\n<script async src=\"https://static.codepen.io/assets/embed/ei.js\"></script>\n\nType something in the form and then reload this page. You'll note that the value you typed previously will show up automatically. Don't forget that your browser provides excellent developer tools for inspecting client-side storage. Here's an example in Firefox:\n\n![Storage devtools in Firefox](/images/devtools-storage.png)\n\nAnd here it is in Chrome:\n\n![Storage devtools in Chrome](/images/devtools-storage-chrome.png)\n\nAnd then finally, an example in Microsoft Edge. Note that you can find application storage values under the Debugger tab.\n\n![Storage devtools in Edge](/images/devtools-storage-edge.png)\n\n<p class=\"tip\">As a quick aside, these dev tools also offer you a way to remove storage values. This can be very useful when testing.</p>\n\nImmediately writing the value may not advisable. Let's consider a slightly more advanced example. First, the updated form.\n\n``` html\n<div id=\"app\">\n  My name is <input v-model=\"name\">\n  and I am <input v-model=\"age\"> years old.\n  <p/>\n  <button @click=\"persist\">Save</button>\n</div>\n```\n\nNow we've got two fields (again, bound to a Vue instance) but now there is the addition of a button that runs a `persist` method. Let's look at the JavaScript.\n\n``` js \nconst app = new Vue({\n  el:'#app',\n  data: {\n    name: '',\n    age: 0\n  },\n  mounted() {\n    if (localStorage.name) {\n      this.name = localStorage.name;\n    }\n    if (localStorage.age) {\n      this.age = localStorage.age;\n    }\n  },\n  methods: {\n    persist() {\n      localStorage.name = this.name;\n      localStorage.age = this.age;\n      console.log('now pretend I did more stuff...');\n    }\n  }\n})\n```\n\nAs before, `mounted` is used to load persisted data, if it exists. This time, though, data is only persisted when the button is clicked. We could also do any validations or transformations here before storing the value. You could also store a date representing when the values were stored. With that metadata, the `mounted` method could make a logical call on whether or not to store the values again, such as in this version below. You can try this version below.\n\n<p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"rdOjLN\" data-default-tab=\"js,result\" data-user=\"cfjedimaster\" data-embed-version=\"2\" data-pen-title=\"testing localstorage 2\" class=\"codepen\">See the Pen <a href=\"https://codepen.io/cfjedimaster/pen/rdOjLN/\">testing localstorage 2</a> by Raymond Camden (<a href=\"https://codepen.io/cfjedimaster\">@cfjedimaster</a>) on <a href=\"https://codepen.io\">CodePen</a>.</p>\n<script async src=\"https://static.codepen.io/assets/embed/ei.js\"></script>\n\n## Working with Complex Values\n\nAs mentioned above, Local Storage only works with simple values. To store more complex values, like objects or arrays, you must serialize and deserialize the values with JSON. Here is a more advanced example that persists an array of cats (the best kind of array possible). \n\n``` html\n<div id=\"app\">\n  <h2>Cats</h2>\n  <div v-for=\"(cat,n) in cats\">\n    <p>\n    <span class=\"cat\">{{ cat }}</span> <button @click=\"removeCat(n)\">Remove</button>\n    </p>\n  </div>\n  \n  <p>\n    <input v-model=\"newCat\"> \n    <button @click=\"addCat\">Add Cat</button>\n  </p>\n  \n</div>\n```\n\nThis \"app\" consists of a simple list on top (with a button to remove a cat) and a small form at the bottom to add a new cat. Now let's look at the JavaScript.\n\n``` js\nconst app = new Vue({\n  el: '#app',\n  data: {\n    cats: [],\n    newCat: null\n  },\n  mounted() {\n    \n    if (localStorage.getItem('cats')) {\n      try {\n        this.cats = JSON.parse(localStorage.getItem('cats'));\n      } catch(e) {\n        localStorage.removeItem('cats');\n      }\n    }\n  },\n  methods: {\n    addCat() {\n      // ensure they actually typed something\n      if (!this.newCat) {\n        return;\n      }\n      \n      this.cats.push(this.newCat);\n      this.newCat = '';\n      this.saveCats();\n    },\n    removeCat(x) {\n      this.cats.splice(x, 1);\n      this.saveCats();\n    },\n    saveCats() {\n      let parsed = JSON.stringify(this.cats);\n      localStorage.setItem('cats', parsed);\n    }\n  }\n})\n```\n\nIn this application, we've switched to use the Local Storage APIs versus \"direct\" access. Both work but the API method is generally preferred. `mounted` now has to grab the value and parse the JSON value. If anything goes wrong here we assume the data is corrupt and delete it. (Remember, any time your web application uses client-side storage, the user has access to it and can modify it at will.)\n\nWe have three methods now to handle working with cat. Both `addCat` and `removeCat` handle updating the \"live\" Vue data stored in `this.cats`. They then run `saveCats` which handles serializing and persisting the data. You can play with this version below:\n\n<p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"qoYbyW\" data-default-tab=\"js,result\" data-user=\"cfjedimaster\" data-embed-version=\"2\" data-pen-title=\"localstorage, complex\" class=\"codepen\">See the Pen <a href=\"https://codepen.io/cfjedimaster/pen/qoYbyW/\">localstorage, complex</a> by Raymond Camden (<a href=\"https://codepen.io/cfjedimaster\">@cfjedimaster</a>) on <a href=\"https://codepen.io\">CodePen</a>.</p>\n<script async src=\"https://static.codepen.io/assets/embed/ei.js\"></script>\n\n## Alternative Patterns\n\nWhile the Local Storage API is relatively simple, it is missing some basic features that would be useful in many applications. The following plugins wrap Local Storage access and make it easier to use, while also adding functionality like default values.\n\n* [vue-local-storage](https://github.com/pinguinjkeke/vue-local-storage)\n* [vue-reactive-storage](https://github.com/ropbla9/vue-reactive-storage)\n\n## Wrapping Up\n\nWhile the browser will never replace a server persistence system, having multiple ways to cache data locally can be a huge performance boost for your application, and working with it in Vue.js makes it even more powerful.\n","source":"v2/cookbook/client-side-storage.md","raw":"---\ntitle: Client-Side Storage\ntype: cookbook\norder: 11\n---\n\n## Base Example\n\nClient-side storage is an excellent way to quickly add performance gains to an application. By storing data on the browser itself, you can skip fetching information from the server every time the user needs it. While especially useful when offline, even online users will benefit from using data locally versus a remote server. Client-side storage can be done with [cookies](https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies), [Local Storage](https://developer.mozilla.org/en-US/docs/Web/API/Web_Storage_API) (technically \"Web Storage\"), [IndexedDB](https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API), and [WebSQL](https://www.w3.org/TR/webdatabase/) (a deprecated method that should not be used in new projects). \n\nIn this cookbook entry we'll focus on Local Storage, the simplest of the storage mechanisms. Local Storage uses a key/value system for storing data. It is limited to storing only simple values but complex data can be stored if you are willing to encode and decode the values with JSON. In general, Local Storage is appropriate for smaller sets of data you would want to persist, things like user preferences or form data. Larger data with more complex storage needs would be better stored typically in IndexedDB. \n\nLet's begin with a simple form based example:\n\n``` html\n<div id=\"app\">\n  My name is <input v-model=\"name\">\n</div>\n```\n\nThis example has one form field bound to a Vue value called `name`. Here's the JavaScript:\n\n``` js\nconst app = new Vue({\n  el: '#app',\n  data: {\n    name: ''\n  },\n  mounted() {\n    if (localStorage.name) {\n      this.name = localStorage.name;\n    }\n  },\n  watch: {\n    name(newName) {\n      localStorage.name = newName;\n    }\n  }\n});\n```\n\nFocus on the `mounted` and `watch` parts. We use `mounted` to handle loading the value from localStorage. To handle writing the data base, we watch the `name` value and on change, immediately write it. \n\nYou can run this yourself here:\n\n<p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"KodaKb\" data-default-tab=\"js,result\" data-user=\"cfjedimaster\" data-embed-version=\"2\" data-pen-title=\"testing localstorage\" class=\"codepen\">See the Pen <a href=\"https://codepen.io/cfjedimaster/pen/KodaKb/\">testing localstorage</a> by Raymond Camden (<a href=\"https://codepen.io/cfjedimaster\">@cfjedimaster</a>) on <a href=\"https://codepen.io\">CodePen</a>.</p>\n<script async src=\"https://static.codepen.io/assets/embed/ei.js\"></script>\n\nType something in the form and then reload this page. You'll note that the value you typed previously will show up automatically. Don't forget that your browser provides excellent developer tools for inspecting client-side storage. Here's an example in Firefox:\n\n![Storage devtools in Firefox](/images/devtools-storage.png)\n\nAnd here it is in Chrome:\n\n![Storage devtools in Chrome](/images/devtools-storage-chrome.png)\n\nAnd then finally, an example in Microsoft Edge. Note that you can find application storage values under the Debugger tab.\n\n![Storage devtools in Edge](/images/devtools-storage-edge.png)\n\n<p class=\"tip\">As a quick aside, these dev tools also offer you a way to remove storage values. This can be very useful when testing.</p>\n\nImmediately writing the value may not advisable. Let's consider a slightly more advanced example. First, the updated form.\n\n``` html\n<div id=\"app\">\n  My name is <input v-model=\"name\">\n  and I am <input v-model=\"age\"> years old.\n  <p/>\n  <button @click=\"persist\">Save</button>\n</div>\n```\n\nNow we've got two fields (again, bound to a Vue instance) but now there is the addition of a button that runs a `persist` method. Let's look at the JavaScript.\n\n``` js \nconst app = new Vue({\n  el:'#app',\n  data: {\n    name: '',\n    age: 0\n  },\n  mounted() {\n    if (localStorage.name) {\n      this.name = localStorage.name;\n    }\n    if (localStorage.age) {\n      this.age = localStorage.age;\n    }\n  },\n  methods: {\n    persist() {\n      localStorage.name = this.name;\n      localStorage.age = this.age;\n      console.log('now pretend I did more stuff...');\n    }\n  }\n})\n```\n\nAs before, `mounted` is used to load persisted data, if it exists. This time, though, data is only persisted when the button is clicked. We could also do any validations or transformations here before storing the value. You could also store a date representing when the values were stored. With that metadata, the `mounted` method could make a logical call on whether or not to store the values again, such as in this version below. You can try this version below.\n\n<p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"rdOjLN\" data-default-tab=\"js,result\" data-user=\"cfjedimaster\" data-embed-version=\"2\" data-pen-title=\"testing localstorage 2\" class=\"codepen\">See the Pen <a href=\"https://codepen.io/cfjedimaster/pen/rdOjLN/\">testing localstorage 2</a> by Raymond Camden (<a href=\"https://codepen.io/cfjedimaster\">@cfjedimaster</a>) on <a href=\"https://codepen.io\">CodePen</a>.</p>\n<script async src=\"https://static.codepen.io/assets/embed/ei.js\"></script>\n\n## Working with Complex Values\n\nAs mentioned above, Local Storage only works with simple values. To store more complex values, like objects or arrays, you must serialize and deserialize the values with JSON. Here is a more advanced example that persists an array of cats (the best kind of array possible). \n\n``` html\n<div id=\"app\">\n  <h2>Cats</h2>\n  <div v-for=\"(cat,n) in cats\">\n    <p>\n    <span class=\"cat\">{{ cat }}</span> <button @click=\"removeCat(n)\">Remove</button>\n    </p>\n  </div>\n  \n  <p>\n    <input v-model=\"newCat\"> \n    <button @click=\"addCat\">Add Cat</button>\n  </p>\n  \n</div>\n```\n\nThis \"app\" consists of a simple list on top (with a button to remove a cat) and a small form at the bottom to add a new cat. Now let's look at the JavaScript.\n\n``` js\nconst app = new Vue({\n  el: '#app',\n  data: {\n    cats: [],\n    newCat: null\n  },\n  mounted() {\n    \n    if (localStorage.getItem('cats')) {\n      try {\n        this.cats = JSON.parse(localStorage.getItem('cats'));\n      } catch(e) {\n        localStorage.removeItem('cats');\n      }\n    }\n  },\n  methods: {\n    addCat() {\n      // ensure they actually typed something\n      if (!this.newCat) {\n        return;\n      }\n      \n      this.cats.push(this.newCat);\n      this.newCat = '';\n      this.saveCats();\n    },\n    removeCat(x) {\n      this.cats.splice(x, 1);\n      this.saveCats();\n    },\n    saveCats() {\n      let parsed = JSON.stringify(this.cats);\n      localStorage.setItem('cats', parsed);\n    }\n  }\n})\n```\n\nIn this application, we've switched to use the Local Storage APIs versus \"direct\" access. Both work but the API method is generally preferred. `mounted` now has to grab the value and parse the JSON value. If anything goes wrong here we assume the data is corrupt and delete it. (Remember, any time your web application uses client-side storage, the user has access to it and can modify it at will.)\n\nWe have three methods now to handle working with cat. Both `addCat` and `removeCat` handle updating the \"live\" Vue data stored in `this.cats`. They then run `saveCats` which handles serializing and persisting the data. You can play with this version below:\n\n<p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"qoYbyW\" data-default-tab=\"js,result\" data-user=\"cfjedimaster\" data-embed-version=\"2\" data-pen-title=\"localstorage, complex\" class=\"codepen\">See the Pen <a href=\"https://codepen.io/cfjedimaster/pen/qoYbyW/\">localstorage, complex</a> by Raymond Camden (<a href=\"https://codepen.io/cfjedimaster\">@cfjedimaster</a>) on <a href=\"https://codepen.io\">CodePen</a>.</p>\n<script async src=\"https://static.codepen.io/assets/embed/ei.js\"></script>\n\n## Alternative Patterns\n\nWhile the Local Storage API is relatively simple, it is missing some basic features that would be useful in many applications. The following plugins wrap Local Storage access and make it easier to use, while also adding functionality like default values.\n\n* [vue-local-storage](https://github.com/pinguinjkeke/vue-local-storage)\n* [vue-reactive-storage](https://github.com/ropbla9/vue-reactive-storage)\n\n## Wrapping Up\n\nWhile the browser will never replace a server persistence system, having multiple ways to cache data locally can be a huge performance boost for your application, and working with it in Vue.js makes it even more powerful.\n","date":"2018-07-19T04:04:16.855Z","updated":"2018-07-19T04:04:16.855Z","path":"v2/cookbook/client-side-storage.html","comments":1,"layout":"page","_id":"cjk0zidox0010vkrtt9k001o8","content":"<h2 id=\"Base-Example\"><a href=\"#Base-Example\" class=\"headerlink\" title=\"Base Example\"></a>Base Example</h2><p>Client-side storage is an excellent way to quickly add performance gains to an application. By storing data on the browser itself, you can skip fetching information from the server every time the user needs it. While especially useful when offline, even online users will benefit from using data locally versus a remote server. Client-side storage can be done with <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies\" target=\"_blank\" rel=\"noopener\">cookies</a>, <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Web_Storage_API\" target=\"_blank\" rel=\"noopener\">Local Storage</a> (technically “Web Storage”), <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API\" target=\"_blank\" rel=\"noopener\">IndexedDB</a>, and <a href=\"https://www.w3.org/TR/webdatabase/\" target=\"_blank\" rel=\"noopener\">WebSQL</a> (a deprecated method that should not be used in new projects). </p>\n<p>In this cookbook entry we’ll focus on Local Storage, the simplest of the storage mechanisms. Local Storage uses a key/value system for storing data. It is limited to storing only simple values but complex data can be stored if you are willing to encode and decode the values with JSON. In general, Local Storage is appropriate for smaller sets of data you would want to persist, things like user preferences or form data. Larger data with more complex storage needs would be better stored typically in IndexedDB. </p>\n<p>Let’s begin with a simple form based example:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span>&gt;</span></span><br><span class=\"line\">  My name is <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"name\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>This example has one form field bound to a Vue value called <code>name</code>. Here’s the JavaScript:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> app = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  el: <span class=\"string\">'#app'</span>,</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    name: <span class=\"string\">''</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  mounted() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (localStorage.name) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.name = localStorage.name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  watch: &#123;</span><br><span class=\"line\">    name(newName) &#123;</span><br><span class=\"line\">      localStorage.name = newName;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>Focus on the <code>mounted</code> and <code>watch</code> parts. We use <code>mounted</code> to handle loading the value from localStorage. To handle writing the data base, we watch the <code>name</code> value and on change, immediately write it. </p>\n<p>You can run this yourself here:</p>\n<p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"KodaKb\" data-default-tab=\"js,result\" data-user=\"cfjedimaster\" data-embed-version=\"2\" data-pen-title=\"testing localstorage\" class=\"codepen\">See the Pen <a href=\"https://codepen.io/cfjedimaster/pen/KodaKb/\" target=\"_blank\" rel=\"noopener\">testing localstorage</a> by Raymond Camden (<a href=\"https://codepen.io/cfjedimaster\" target=\"_blank\" rel=\"noopener\">@cfjedimaster</a>) on <a href=\"https://codepen.io\" target=\"_blank\" rel=\"noopener\">CodePen</a>.</p><br><script async src=\"https://static.codepen.io/assets/embed/ei.js\"></script><br><br>Type something in the form and then reload this page. You’ll note that the value you typed previously will show up automatically. Don’t forget that your browser provides excellent developer tools for inspecting client-side storage. Here’s an example in Firefox:<br><br><img src=\"/images/devtools-storage.png\" alt=\"Storage devtools in Firefox\"><br><br>And here it is in Chrome:<br><br><img src=\"/images/devtools-storage-chrome.png\" alt=\"Storage devtools in Chrome\"><br><br>And then finally, an example in Microsoft Edge. Note that you can find application storage values under the Debugger tab.<br><br><img src=\"/images/devtools-storage-edge.png\" alt=\"Storage devtools in Edge\"><br><br><p class=\"tip\">As a quick aside, these dev tools also offer you a way to remove storage values. This can be very useful when testing.</p>\n\n<p>Immediately writing the value may not advisable. Let’s consider a slightly more advanced example. First, the updated form.</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span>&gt;</span></span><br><span class=\"line\">  My name is <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"name\"</span>&gt;</span></span><br><span class=\"line\">  and I am <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"age\"</span>&gt;</span> years old.</span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>/&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">\"persist\"</span>&gt;</span>Save<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>Now we’ve got two fields (again, bound to a Vue instance) but now there is the addition of a button that runs a <code>persist</code> method. Let’s look at the JavaScript.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> app = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  el:<span class=\"string\">'#app'</span>,</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    name: <span class=\"string\">''</span>,</span><br><span class=\"line\">    age: <span class=\"number\">0</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  mounted() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (localStorage.name) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.name = localStorage.name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (localStorage.age) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.age = localStorage.age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    persist() &#123;</span><br><span class=\"line\">      localStorage.name = <span class=\"keyword\">this</span>.name;</span><br><span class=\"line\">      localStorage.age = <span class=\"keyword\">this</span>.age;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">'now pretend I did more stuff...'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>As before, <code>mounted</code> is used to load persisted data, if it exists. This time, though, data is only persisted when the button is clicked. We could also do any validations or transformations here before storing the value. You could also store a date representing when the values were stored. With that metadata, the <code>mounted</code> method could make a logical call on whether or not to store the values again, such as in this version below. You can try this version below.</p>\n<p></p><p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"rdOjLN\" data-default-tab=\"js,result\" data-user=\"cfjedimaster\" data-embed-version=\"2\" data-pen-title=\"testing localstorage 2\" class=\"codepen\">See the Pen <a href=\"https://codepen.io/cfjedimaster/pen/rdOjLN/\" target=\"_blank\" rel=\"noopener\">testing localstorage 2</a> by Raymond Camden (<a href=\"https://codepen.io/cfjedimaster\" target=\"_blank\" rel=\"noopener\">@cfjedimaster</a>) on <a href=\"https://codepen.io\" target=\"_blank\" rel=\"noopener\">CodePen</a>.</p><p></p>\n<script async src=\"https://static.codepen.io/assets/embed/ei.js\"></script>\n\n<h2 id=\"Working-with-Complex-Values\"><a href=\"#Working-with-Complex-Values\" class=\"headerlink\" title=\"Working with Complex Values\"></a>Working with Complex Values</h2><p>As mentioned above, Local Storage only works with simple values. To store more complex values, like objects or arrays, you must serialize and deserialize the values with JSON. Here is a more advanced example that persists an array of cats (the best kind of array possible). </p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>Cats<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"(cat,n) in cats\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"cat\"</span>&gt;</span>&#123;&#123; cat &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span> <span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">\"removeCat(n)\"</span>&gt;</span>Remove<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"newCat\"</span>&gt;</span> </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">\"addCat\"</span>&gt;</span>Add Cat<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>This “app” consists of a simple list on top (with a button to remove a cat) and a small form at the bottom to add a new cat. Now let’s look at the JavaScript.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> app = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  el: <span class=\"string\">'#app'</span>,</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    cats: [],</span><br><span class=\"line\">    newCat: <span class=\"literal\">null</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  mounted() &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (localStorage.getItem(<span class=\"string\">'cats'</span>)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.cats = <span class=\"built_in\">JSON</span>.parse(localStorage.getItem(<span class=\"string\">'cats'</span>));</span><br><span class=\"line\">      &#125; <span class=\"keyword\">catch</span>(e) &#123;</span><br><span class=\"line\">        localStorage.removeItem(<span class=\"string\">'cats'</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    addCat() &#123;</span><br><span class=\"line\">      <span class=\"comment\">// ensure they actually typed something</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>.newCat) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      </span><br><span class=\"line\">      <span class=\"keyword\">this</span>.cats.push(<span class=\"keyword\">this</span>.newCat);</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.newCat = <span class=\"string\">''</span>;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.saveCats();</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    removeCat(x) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.cats.splice(x, <span class=\"number\">1</span>);</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.saveCats();</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    saveCats() &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> parsed = <span class=\"built_in\">JSON</span>.stringify(<span class=\"keyword\">this</span>.cats);</span><br><span class=\"line\">      localStorage.setItem(<span class=\"string\">'cats'</span>, parsed);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>In this application, we’ve switched to use the Local Storage APIs versus “direct” access. Both work but the API method is generally preferred. <code>mounted</code> now has to grab the value and parse the JSON value. If anything goes wrong here we assume the data is corrupt and delete it. (Remember, any time your web application uses client-side storage, the user has access to it and can modify it at will.)</p>\n<p>We have three methods now to handle working with cat. Both <code>addCat</code> and <code>removeCat</code> handle updating the “live” Vue data stored in <code>this.cats</code>. They then run <code>saveCats</code> which handles serializing and persisting the data. You can play with this version below:</p>\n<p></p><p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"qoYbyW\" data-default-tab=\"js,result\" data-user=\"cfjedimaster\" data-embed-version=\"2\" data-pen-title=\"localstorage, complex\" class=\"codepen\">See the Pen <a href=\"https://codepen.io/cfjedimaster/pen/qoYbyW/\" target=\"_blank\" rel=\"noopener\">localstorage, complex</a> by Raymond Camden (<a href=\"https://codepen.io/cfjedimaster\" target=\"_blank\" rel=\"noopener\">@cfjedimaster</a>) on <a href=\"https://codepen.io\" target=\"_blank\" rel=\"noopener\">CodePen</a>.</p><p></p>\n<script async src=\"https://static.codepen.io/assets/embed/ei.js\"></script>\n\n<h2 id=\"Alternative-Patterns\"><a href=\"#Alternative-Patterns\" class=\"headerlink\" title=\"Alternative Patterns\"></a>Alternative Patterns</h2><p>While the Local Storage API is relatively simple, it is missing some basic features that would be useful in many applications. The following plugins wrap Local Storage access and make it easier to use, while also adding functionality like default values.</p>\n<ul>\n<li><a href=\"https://github.com/pinguinjkeke/vue-local-storage\" target=\"_blank\" rel=\"noopener\">vue-local-storage</a></li>\n<li><a href=\"https://github.com/ropbla9/vue-reactive-storage\" target=\"_blank\" rel=\"noopener\">vue-reactive-storage</a></li>\n</ul>\n<h2 id=\"Wrapping-Up\"><a href=\"#Wrapping-Up\" class=\"headerlink\" title=\"Wrapping Up\"></a>Wrapping Up</h2><p>While the browser will never replace a server persistence system, having multiple ways to cache data locally can be a huge performance boost for your application, and working with it in Vue.js makes it even more powerful.</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Base-Example\"><a href=\"#Base-Example\" class=\"headerlink\" title=\"Base Example\"></a>Base Example</h2><p>Client-side storage is an excellent way to quickly add performance gains to an application. By storing data on the browser itself, you can skip fetching information from the server every time the user needs it. While especially useful when offline, even online users will benefit from using data locally versus a remote server. Client-side storage can be done with <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies\" target=\"_blank\" rel=\"noopener\">cookies</a>, <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Web_Storage_API\" target=\"_blank\" rel=\"noopener\">Local Storage</a> (technically “Web Storage”), <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API\" target=\"_blank\" rel=\"noopener\">IndexedDB</a>, and <a href=\"https://www.w3.org/TR/webdatabase/\" target=\"_blank\" rel=\"noopener\">WebSQL</a> (a deprecated method that should not be used in new projects). </p>\n<p>In this cookbook entry we’ll focus on Local Storage, the simplest of the storage mechanisms. Local Storage uses a key/value system for storing data. It is limited to storing only simple values but complex data can be stored if you are willing to encode and decode the values with JSON. In general, Local Storage is appropriate for smaller sets of data you would want to persist, things like user preferences or form data. Larger data with more complex storage needs would be better stored typically in IndexedDB. </p>\n<p>Let’s begin with a simple form based example:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span>&gt;</span></span><br><span class=\"line\">  My name is <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"name\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>This example has one form field bound to a Vue value called <code>name</code>. Here’s the JavaScript:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> app = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  el: <span class=\"string\">'#app'</span>,</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    name: <span class=\"string\">''</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  mounted() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (localStorage.name) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.name = localStorage.name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  watch: &#123;</span><br><span class=\"line\">    name(newName) &#123;</span><br><span class=\"line\">      localStorage.name = newName;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>Focus on the <code>mounted</code> and <code>watch</code> parts. We use <code>mounted</code> to handle loading the value from localStorage. To handle writing the data base, we watch the <code>name</code> value and on change, immediately write it. </p>\n<p>You can run this yourself here:</p>\n<p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"KodaKb\" data-default-tab=\"js,result\" data-user=\"cfjedimaster\" data-embed-version=\"2\" data-pen-title=\"testing localstorage\" class=\"codepen\">See the Pen <a href=\"https://codepen.io/cfjedimaster/pen/KodaKb/\" target=\"_blank\" rel=\"noopener\">testing localstorage</a> by Raymond Camden (<a href=\"https://codepen.io/cfjedimaster\" target=\"_blank\" rel=\"noopener\">@cfjedimaster</a>) on <a href=\"https://codepen.io\" target=\"_blank\" rel=\"noopener\">CodePen</a>.</p><br><script async src=\"https://static.codepen.io/assets/embed/ei.js\"></script><br><br>Type something in the form and then reload this page. You’ll note that the value you typed previously will show up automatically. Don’t forget that your browser provides excellent developer tools for inspecting client-side storage. Here’s an example in Firefox:<br><br><img src=\"/images/devtools-storage.png\" alt=\"Storage devtools in Firefox\"><br><br>And here it is in Chrome:<br><br><img src=\"/images/devtools-storage-chrome.png\" alt=\"Storage devtools in Chrome\"><br><br>And then finally, an example in Microsoft Edge. Note that you can find application storage values under the Debugger tab.<br><br><img src=\"/images/devtools-storage-edge.png\" alt=\"Storage devtools in Edge\"><br><br><p class=\"tip\">As a quick aside, these dev tools also offer you a way to remove storage values. This can be very useful when testing.</p>\n\n<p>Immediately writing the value may not advisable. Let’s consider a slightly more advanced example. First, the updated form.</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span>&gt;</span></span><br><span class=\"line\">  My name is <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"name\"</span>&gt;</span></span><br><span class=\"line\">  and I am <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"age\"</span>&gt;</span> years old.</span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>/&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">\"persist\"</span>&gt;</span>Save<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>Now we’ve got two fields (again, bound to a Vue instance) but now there is the addition of a button that runs a <code>persist</code> method. Let’s look at the JavaScript.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> app = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  el:<span class=\"string\">'#app'</span>,</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    name: <span class=\"string\">''</span>,</span><br><span class=\"line\">    age: <span class=\"number\">0</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  mounted() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (localStorage.name) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.name = localStorage.name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (localStorage.age) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.age = localStorage.age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    persist() &#123;</span><br><span class=\"line\">      localStorage.name = <span class=\"keyword\">this</span>.name;</span><br><span class=\"line\">      localStorage.age = <span class=\"keyword\">this</span>.age;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">'now pretend I did more stuff...'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>As before, <code>mounted</code> is used to load persisted data, if it exists. This time, though, data is only persisted when the button is clicked. We could also do any validations or transformations here before storing the value. You could also store a date representing when the values were stored. With that metadata, the <code>mounted</code> method could make a logical call on whether or not to store the values again, such as in this version below. You can try this version below.</p>\n<p></p><p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"rdOjLN\" data-default-tab=\"js,result\" data-user=\"cfjedimaster\" data-embed-version=\"2\" data-pen-title=\"testing localstorage 2\" class=\"codepen\">See the Pen <a href=\"https://codepen.io/cfjedimaster/pen/rdOjLN/\" target=\"_blank\" rel=\"noopener\">testing localstorage 2</a> by Raymond Camden (<a href=\"https://codepen.io/cfjedimaster\" target=\"_blank\" rel=\"noopener\">@cfjedimaster</a>) on <a href=\"https://codepen.io\" target=\"_blank\" rel=\"noopener\">CodePen</a>.</p><p></p>\n<script async src=\"https://static.codepen.io/assets/embed/ei.js\"></script>\n\n<h2 id=\"Working-with-Complex-Values\"><a href=\"#Working-with-Complex-Values\" class=\"headerlink\" title=\"Working with Complex Values\"></a>Working with Complex Values</h2><p>As mentioned above, Local Storage only works with simple values. To store more complex values, like objects or arrays, you must serialize and deserialize the values with JSON. Here is a more advanced example that persists an array of cats (the best kind of array possible). </p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>Cats<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"(cat,n) in cats\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"cat\"</span>&gt;</span>&#123;&#123; cat &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span> <span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">\"removeCat(n)\"</span>&gt;</span>Remove<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"newCat\"</span>&gt;</span> </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">\"addCat\"</span>&gt;</span>Add Cat<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>This “app” consists of a simple list on top (with a button to remove a cat) and a small form at the bottom to add a new cat. Now let’s look at the JavaScript.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> app = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  el: <span class=\"string\">'#app'</span>,</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    cats: [],</span><br><span class=\"line\">    newCat: <span class=\"literal\">null</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  mounted() &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (localStorage.getItem(<span class=\"string\">'cats'</span>)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.cats = <span class=\"built_in\">JSON</span>.parse(localStorage.getItem(<span class=\"string\">'cats'</span>));</span><br><span class=\"line\">      &#125; <span class=\"keyword\">catch</span>(e) &#123;</span><br><span class=\"line\">        localStorage.removeItem(<span class=\"string\">'cats'</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    addCat() &#123;</span><br><span class=\"line\">      <span class=\"comment\">// ensure they actually typed something</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>.newCat) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      </span><br><span class=\"line\">      <span class=\"keyword\">this</span>.cats.push(<span class=\"keyword\">this</span>.newCat);</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.newCat = <span class=\"string\">''</span>;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.saveCats();</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    removeCat(x) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.cats.splice(x, <span class=\"number\">1</span>);</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.saveCats();</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    saveCats() &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> parsed = <span class=\"built_in\">JSON</span>.stringify(<span class=\"keyword\">this</span>.cats);</span><br><span class=\"line\">      localStorage.setItem(<span class=\"string\">'cats'</span>, parsed);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>In this application, we’ve switched to use the Local Storage APIs versus “direct” access. Both work but the API method is generally preferred. <code>mounted</code> now has to grab the value and parse the JSON value. If anything goes wrong here we assume the data is corrupt and delete it. (Remember, any time your web application uses client-side storage, the user has access to it and can modify it at will.)</p>\n<p>We have three methods now to handle working with cat. Both <code>addCat</code> and <code>removeCat</code> handle updating the “live” Vue data stored in <code>this.cats</code>. They then run <code>saveCats</code> which handles serializing and persisting the data. You can play with this version below:</p>\n<p></p><p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"qoYbyW\" data-default-tab=\"js,result\" data-user=\"cfjedimaster\" data-embed-version=\"2\" data-pen-title=\"localstorage, complex\" class=\"codepen\">See the Pen <a href=\"https://codepen.io/cfjedimaster/pen/qoYbyW/\" target=\"_blank\" rel=\"noopener\">localstorage, complex</a> by Raymond Camden (<a href=\"https://codepen.io/cfjedimaster\" target=\"_blank\" rel=\"noopener\">@cfjedimaster</a>) on <a href=\"https://codepen.io\" target=\"_blank\" rel=\"noopener\">CodePen</a>.</p><p></p>\n<script async src=\"https://static.codepen.io/assets/embed/ei.js\"></script>\n\n<h2 id=\"Alternative-Patterns\"><a href=\"#Alternative-Patterns\" class=\"headerlink\" title=\"Alternative Patterns\"></a>Alternative Patterns</h2><p>While the Local Storage API is relatively simple, it is missing some basic features that would be useful in many applications. The following plugins wrap Local Storage access and make it easier to use, while also adding functionality like default values.</p>\n<ul>\n<li><a href=\"https://github.com/pinguinjkeke/vue-local-storage\" target=\"_blank\" rel=\"noopener\">vue-local-storage</a></li>\n<li><a href=\"https://github.com/ropbla9/vue-reactive-storage\" target=\"_blank\" rel=\"noopener\">vue-reactive-storage</a></li>\n</ul>\n<h2 id=\"Wrapping-Up\"><a href=\"#Wrapping-Up\" class=\"headerlink\" title=\"Wrapping Up\"></a>Wrapping Up</h2><p>While the browser will never replace a server persistence system, having multiple ways to cache data locally can be a huge performance boost for your application, and working with it in Vue.js makes it even more powerful.</p>\n"},{"title":"Form Validation","type":"cookbook","order":3,"_content":"\n## Base Example\n\nForm validation is natively supported by the browser, but sometimes different browsers will handle things in a manner which makes relying on it a bit tricky. Even when validation is supported perfectly, there may be times when custom validations are needed and a more manual, Vue-based solution may be more appropriate. Let's begin with a simple example.\n\nGiven a form of three fields, make two required. Let's look at the HTML first:\n\n``` html\n<form id=\"app\" @submit=\"checkForm\" action=\"https://vuejs.org/\" method=\"post\">\n  \n  <p v-if=\"errors.length\">\n    <b>Please correct the following error(s):</b>\n    <ul>\n      <li v-for=\"error in errors\">{{ error }}</li>\n    </ul>\n  </p>\n  \n  <p>\n    <label for=\"name\">Name</label>\n    <input type=\"text\" name=\"name\" id=\"name\" v-model=\"name\">\n  </p>\n\n  <p>\n    <label for=\"age\">Age</label>\n    <input type=\"number\" name=\"age\" id=\"age\" v-model=\"age\" min=\"0\">\n  </p>\n\n  <p>\n    <label for=\"movie\">Favorite Movie</label>\n    <select name=\"movie\" id=\"movie\" v-model=\"movie\">\n      <option>Star Wars</option>\n      <option>Vanilla Sky</option>\n      <option>Atomic Blonde</option>\n    </select>\n  </p>\n\n  <p>\n    <input type=\"submit\" value=\"Submit\">  \n  </p>\n\n</form>\n```\n\nLet's cover it from the top. The `<form>` tag has an ID that we'll be using for the Vue component. There's a submit handler that you'll see in a bit, and the `action` is a temporary URL that would point to something real on a server someplace (where you have backup server-side validation of course).\n\nBeneath that there is a paragraph that shows or hides itself based on an error state. This will render a simple list of errors on top of the form. Also note we fire the validation on submit rather than as every field is modified. \n\nThe final thing to note is that each of the three fields has a corresponding `v-model` to connect them to values we will work with in the JavaScript. Now let's look at that.\n\n``` js\nconst app = new Vue({\n  el: '#app',\n  data: {\n    errors: [],\n    name: null,\n    age: null,\n    movie: null\n  },\n  methods:{\n    checkForm: function (e) {\n      if (this.name && this.age) {\n        return true;\n      }\n      \n      this.errors = [];\n      \n      if (!this.name) {\n        this.errors.push('Name required.');\n      }\n      if (!this.age) {\n        this.errors.push('Age required.');\n      }\n      \n      e.preventDefault();\n    }\n  }\n})\n```\n\nFairly short and simple. We define an array to hold errors and set `null` values for the three form fields. The `checkForm` logic (which is run on submit remember) checks for name and age only as movie is optional. If they are empty we check each and set a specific error for each. And that's really it. You can run the demo below. Don't forget that on a successful submission it's going to POST to a temporary URL.\n\n<p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"GObpZM\" data-default-tab=\"html,result\" data-user=\"cfjedimaster\" data-embed-version=\"2\" data-pen-title=\"form validation 1\" class=\"codepen\">See the Pen <a href=\"https://codepen.io/cfjedimaster/pen/GObpZM/\">form validation 1</a> by Raymond Camden (<a href=\"https://codepen.io/cfjedimaster\">@cfjedimaster</a>) on <a href=\"https://codepen.io\">CodePen</a>.</p>\n<script async src=\"https://production-assets.codepen.io/assets/embed/ei.js\"></script>\n\n## Using Custom Validation\n\nFor the second example, the second text field (age) was switched to email which will be validated with a bit of custom logic. The code is taken from the StackOverflow question, [How to validate email address in JavaScript?](https://stackoverflow.com/questions/46155/how-to-validate-email-address-in-javascript). This is an awesome question because it makes your most intense Facebook political/religious argument look like a slight disagreement over who makes the best beer. Seriously - it's insane. Here is the HTML, even though it's really close to the first example.\n\n``` html\n<form id=\"app\" @submit=\"checkForm\" action=\"https://vuejs.org/\" method=\"post\" novalidate=\"true\">\n  \n  <p v-if=\"errors.length\">\n    <b>Please correct the following error(s):</b>\n    <ul>\n      <li v-for=\"error in errors\">{{ error }}</li>\n    </ul>\n  </p>\n  \n  <p>\n    <label for=\"name\">Name</label>\n    <input type=\"text\" name=\"name\" id=\"name\" v-model=\"name\">\n  </p>\n\n  <p>\n    <label for=\"email\">Email</label>\n    <input type=\"email\" name=\"email\" id=\"email\" v-model=\"email\">\n  </p>\n\n  <p>\n    <label for=\"movie\">Favorite Movie</label>\n    <select name=\"movie\" id=\"movie\" v-model=\"movie\">\n      <option>Star Wars</option>\n      <option>Vanilla Sky</option>\n      <option>Atomic Blonde</option>\n    </select>\n  </p>\n\n  <p>\n    <input type=\"submit\" value=\"Submit\">  \n  </p>\n\n</form>\n```\n\nWhile the change here is small, note the `novalidate=\"true\"` on top. This is important because the browser will attempt to validate the email address in the field when `type=\"email\"`. Frankly it may make more sense to trust the browser in this case, but as we wanted an example with custom validation, we're disabling it. Here's the updated JavaScript.\n\n``` js\nconst app = new Vue({\n  el: '#app',\n  data: {\n    errors: [],\n    name: null,\n    email: null,\n    movie: null\n  },\n  methods: {\n    checkForm: function (e) {\n      this.errors = [];\n      \n      if (!this.name) {\n        this.errors.push(\"Name required.\");\n      }\n      if (!this.email) {\n        this.errors.push('Email required.');\n      } else if (!this.validEmail(this.email)) {\n        this.errors.push('Valid email required.');        \n      }\n      \n      if (!this.errors.length) {\n        return true;\n      }\n      \n      e.preventDefault();\n    },\n    validEmail: function (email) {\n      var re = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n      return re.test(email);\n    }\n  }\n})\n```\n\nAs you can see, we've added `validEmail` as a new method and it is simply called from `checkForm`. You can play with this example here:\n\n<p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"vWqNXZ\" data-default-tab=\"html,result\" data-user=\"cfjedimaster\" data-embed-version=\"2\" data-pen-title=\"form validation 2\" class=\"codepen\">See the Pen <a href=\"https://codepen.io/cfjedimaster/pen/vWqNXZ/\">form validation 2</a> by Raymond Camden (<a href=\"https://codepen.io/cfjedimaster\">@cfjedimaster</a>) on <a href=\"https://codepen.io\">CodePen</a>.</p>\n<script async src=\"https://production-assets.codepen.io/assets/embed/ei.js\"></script>\n\n## Another Example of Custom Validation\n\nFor the third example, we've built something you've probably seen in survey apps. The user is asked to spend a \"budget\" for a set of features for a new Star Destroyer model. The total must equal 100. First, the HTML.\n\n``` html\n<form id=\"app\" @submit=\"checkForm\" action=\"https://vuejs.org/\" method=\"post\" novalidate=\"true\">\n  \n  <p v-if=\"errors.length\">\n    <b>Please correct the following error(s):</b>\n    <ul>\n      <li v-for=\"error in errors\">{{ error }}</li>\n    </ul>\n  </p>\n\n  <p>\n    Given a budget of 100 dollars, indicate how much\n    you would spend on the following features for the\n    next generation Star Destroyer. Your total must sum up to 100.\n  </p>\n\n  <p>\n    <input type=\"number\" name=\"weapons\" v-model.number=\"weapons\"> Weapons <br/>\n    <input type=\"number\" name=\"shields\" v-model.number=\"shields\"> Shields <br/>\n    <input type=\"number\" name=\"coffee\" v-model.number=\"coffee\"> Coffee <br/>\n    <input type=\"number\" name=\"ac\" v-model.number=\"ac\"> Air Conditioning <br/>\n    <input type=\"number\" name=\"mousedroids\" v-model.number=\"mousedroids\"> Mouse Droids <br/>\n  </p>\n\n  <p>\n    Current Total: {{total}}\n  </p>\n\n  <p>\n    <input type=\"submit\" value=\"Submit\">  \n  </p>\n\n</form>\n```\n\nNote the set of inputs covering the five different features. Note the addition of `.number` to the `v-model` attribute. This tells Vue to cast the value to a number when you use it. However, there is a bug with this feature such that when the value is blank, it turns back into a string. You'll see the workaround below. To make it a bit easier for the user, we also added a current total right below so they can see, in real time, what their total is. Now let's look at the JavaScript.\n\n``` js\nconst app = new Vue({\n  el: '#app',\n  data:{\n    errors: [],\n    weapons: 0,\n    shields: 0,\n    coffee: 0,\n    ac: 0,\n    mousedroids: 0\n  },\n  computed: {\n     total: function () {\n       // must parse because Vue turns empty value to string\n       return Number(this.weapons) +\n         Number(this.shields) +\n         Number(this.coffee) +\n         Number(this.ac+this.mousedroids);\n     }\n  },\n  methods:{\n    checkForm: function (e) {\n      this.errors = [];\n      \n      if (this.total != 100) {\n        this.errors.push('Total must be 100!');\n      }\n      \n      if (!this.errors.length) {\n        return true;\n      }\n      \n      e.preventDefault();\n    }\n  }\n})\n```\n\nWe set up the total value as a computed value, and outside of that bug I ran into, it was simple enough to setup. My checkForm method now just needs to see if the total is 100 and that's it. You can play with this here:\n\n<p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"vWqGoy\" data-default-tab=\"html,result\" data-user=\"cfjedimaster\" data-embed-version=\"2\" data-pen-title=\"form validation 3\" class=\"codepen\">See the Pen <a href=\"https://codepen.io/cfjedimaster/pen/vWqGoy/\">form validation 3</a> by Raymond Camden (<a href=\"https://codepen.io/cfjedimaster\">@cfjedimaster</a>) on <a href=\"https://codepen.io\">CodePen</a>.</p>\n<script async src=\"https://production-assets.codepen.io/assets/embed/ei.js\"></script>\n\n## Server-side Validation\n\nIn my final example, we built something that makes use of Ajax to validate at the server. The form will ask you to name a new product and will then check to ensure that the name is unique. We wrote a quick [OpenWhisk](http://openwhisk.apache.org/) serverless action to do the validation. While it isn't terribly important, here is the logic:\n\n``` js\nfunction main(args) {\n    return new Promise((resolve, reject) => {\n        // bad product names: vista, empire, mbp\n        const badNames = ['vista', 'empire', 'mbp'];\n        \n        if (badNames.includes(args.name)) {\n          reject({error: 'Existing product'});\n        }\n        \n        resolve({status: 'ok'});\n    });\n}\n```\n\nBasically any name but \"vista\", \"empire\", and \"mbp\" are acceptable. Ok, so let's look at the form.\n\n``` html\n<form id=\"app\" @submit=\"checkForm\" method=\"post\">\n  \n  <p v-if=\"errors.length\">\n    <b>Please correct the following error(s):</b>\n    <ul>\n      <li v-for=\"error in errors\">{{ error }}</li>\n    </ul>\n  </p>\n\n  <p>\n    <label for=\"name\">New Product Name: </label>\n    <input type=\"text\" name=\"name\" id=\"name\" v-model=\"name\">\n  </p>\n\n  <p>\n    <input type=\"submit\" value=\"Submit\">  \n  </p>\n\n</form>\n```\n\nThere isn't anything special here. So let's go on to the JavaScript.\n\n``` js\nconst apiUrl = 'https://openwhisk.ng.bluemix.net/api/v1/web/rcamden%40us.ibm.com_My%20Space/safeToDelete/productName.json?name=';\n\nconst app = new Vue({\n  el: '#app',\n  data: {\n    errors: [],\n    name: ''\n  },\n  methods:{\n    checkForm: function (e) {\n      e.preventDefault();\n      \n      this.errors = [];\n      \n      if (this.name === '') {\n        this.errors.push('Product name is required.');\n      } else {\n        fetch(apiUrl + encodeURIComponent(this.name))\n        .then(res => res.json())\n        .then(res => {\n          if (res.error) {\n            this.errors.push(res.error);\n          } else {\n            // redirect to a new URL, or do something on success\n            alert('ok!');\n          }\n        });\n      }\n    }\n  }\n})\n```\n\nWe start off with a variable representing the URL of the API that is running on OpenWhisk. Now look at `checkForm`. In this version, we always prevent the form from submitting (which, by the way, could be done in the HTML with Vue as well). You can see a basic check on `this.name` being empty, and then we hit the API. If it's bad, we add an error as before. If it's good, right now we do nothing (just an alert), but you could navigate the user to a new page with the product name in the URL, or do other actions as well. You can run this demo below:\n\n<p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"BmgzeM\" data-default-tab=\"js,result\" data-user=\"cfjedimaster\" data-embed-version=\"2\" data-pen-title=\"form validation 4\" class=\"codepen\">See the Pen <a href=\"https://codepen.io/cfjedimaster/pen/BmgzeM/\">form validation 4</a> by Raymond Camden (<a href=\"https://codepen.io/cfjedimaster\">@cfjedimaster</a>) on <a href=\"https://codepen.io\">CodePen</a>.</p>\n<script async src=\"https://production-assets.codepen.io/assets/embed/ei.js\"></script>\n\n## Alternative Patterns\n\nWhile this cookbook entry focused on doing form validation \"by hand\", there are, of course, some great Vue libraries that will handle a lot of this for you. Switching to a prepackage library may impact the final size of your application, but the benefits could be tremendous. You have code that is (most likely) heavily tested and also updated on a regular basis. Some examples of form validation libraries for Vue include:\n\n* [vuelidate](https://github.com/monterail/vuelidate)\n* [VeeValidate](http://vee-validate.logaretm.com/)\n\n","source":"v2/cookbook/form-validation.md","raw":"---\ntitle: Form Validation\ntype: cookbook\norder: 3\n---\n\n## Base Example\n\nForm validation is natively supported by the browser, but sometimes different browsers will handle things in a manner which makes relying on it a bit tricky. Even when validation is supported perfectly, there may be times when custom validations are needed and a more manual, Vue-based solution may be more appropriate. Let's begin with a simple example.\n\nGiven a form of three fields, make two required. Let's look at the HTML first:\n\n``` html\n<form id=\"app\" @submit=\"checkForm\" action=\"https://vuejs.org/\" method=\"post\">\n  \n  <p v-if=\"errors.length\">\n    <b>Please correct the following error(s):</b>\n    <ul>\n      <li v-for=\"error in errors\">{{ error }}</li>\n    </ul>\n  </p>\n  \n  <p>\n    <label for=\"name\">Name</label>\n    <input type=\"text\" name=\"name\" id=\"name\" v-model=\"name\">\n  </p>\n\n  <p>\n    <label for=\"age\">Age</label>\n    <input type=\"number\" name=\"age\" id=\"age\" v-model=\"age\" min=\"0\">\n  </p>\n\n  <p>\n    <label for=\"movie\">Favorite Movie</label>\n    <select name=\"movie\" id=\"movie\" v-model=\"movie\">\n      <option>Star Wars</option>\n      <option>Vanilla Sky</option>\n      <option>Atomic Blonde</option>\n    </select>\n  </p>\n\n  <p>\n    <input type=\"submit\" value=\"Submit\">  \n  </p>\n\n</form>\n```\n\nLet's cover it from the top. The `<form>` tag has an ID that we'll be using for the Vue component. There's a submit handler that you'll see in a bit, and the `action` is a temporary URL that would point to something real on a server someplace (where you have backup server-side validation of course).\n\nBeneath that there is a paragraph that shows or hides itself based on an error state. This will render a simple list of errors on top of the form. Also note we fire the validation on submit rather than as every field is modified. \n\nThe final thing to note is that each of the three fields has a corresponding `v-model` to connect them to values we will work with in the JavaScript. Now let's look at that.\n\n``` js\nconst app = new Vue({\n  el: '#app',\n  data: {\n    errors: [],\n    name: null,\n    age: null,\n    movie: null\n  },\n  methods:{\n    checkForm: function (e) {\n      if (this.name && this.age) {\n        return true;\n      }\n      \n      this.errors = [];\n      \n      if (!this.name) {\n        this.errors.push('Name required.');\n      }\n      if (!this.age) {\n        this.errors.push('Age required.');\n      }\n      \n      e.preventDefault();\n    }\n  }\n})\n```\n\nFairly short and simple. We define an array to hold errors and set `null` values for the three form fields. The `checkForm` logic (which is run on submit remember) checks for name and age only as movie is optional. If they are empty we check each and set a specific error for each. And that's really it. You can run the demo below. Don't forget that on a successful submission it's going to POST to a temporary URL.\n\n<p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"GObpZM\" data-default-tab=\"html,result\" data-user=\"cfjedimaster\" data-embed-version=\"2\" data-pen-title=\"form validation 1\" class=\"codepen\">See the Pen <a href=\"https://codepen.io/cfjedimaster/pen/GObpZM/\">form validation 1</a> by Raymond Camden (<a href=\"https://codepen.io/cfjedimaster\">@cfjedimaster</a>) on <a href=\"https://codepen.io\">CodePen</a>.</p>\n<script async src=\"https://production-assets.codepen.io/assets/embed/ei.js\"></script>\n\n## Using Custom Validation\n\nFor the second example, the second text field (age) was switched to email which will be validated with a bit of custom logic. The code is taken from the StackOverflow question, [How to validate email address in JavaScript?](https://stackoverflow.com/questions/46155/how-to-validate-email-address-in-javascript). This is an awesome question because it makes your most intense Facebook political/religious argument look like a slight disagreement over who makes the best beer. Seriously - it's insane. Here is the HTML, even though it's really close to the first example.\n\n``` html\n<form id=\"app\" @submit=\"checkForm\" action=\"https://vuejs.org/\" method=\"post\" novalidate=\"true\">\n  \n  <p v-if=\"errors.length\">\n    <b>Please correct the following error(s):</b>\n    <ul>\n      <li v-for=\"error in errors\">{{ error }}</li>\n    </ul>\n  </p>\n  \n  <p>\n    <label for=\"name\">Name</label>\n    <input type=\"text\" name=\"name\" id=\"name\" v-model=\"name\">\n  </p>\n\n  <p>\n    <label for=\"email\">Email</label>\n    <input type=\"email\" name=\"email\" id=\"email\" v-model=\"email\">\n  </p>\n\n  <p>\n    <label for=\"movie\">Favorite Movie</label>\n    <select name=\"movie\" id=\"movie\" v-model=\"movie\">\n      <option>Star Wars</option>\n      <option>Vanilla Sky</option>\n      <option>Atomic Blonde</option>\n    </select>\n  </p>\n\n  <p>\n    <input type=\"submit\" value=\"Submit\">  \n  </p>\n\n</form>\n```\n\nWhile the change here is small, note the `novalidate=\"true\"` on top. This is important because the browser will attempt to validate the email address in the field when `type=\"email\"`. Frankly it may make more sense to trust the browser in this case, but as we wanted an example with custom validation, we're disabling it. Here's the updated JavaScript.\n\n``` js\nconst app = new Vue({\n  el: '#app',\n  data: {\n    errors: [],\n    name: null,\n    email: null,\n    movie: null\n  },\n  methods: {\n    checkForm: function (e) {\n      this.errors = [];\n      \n      if (!this.name) {\n        this.errors.push(\"Name required.\");\n      }\n      if (!this.email) {\n        this.errors.push('Email required.');\n      } else if (!this.validEmail(this.email)) {\n        this.errors.push('Valid email required.');        \n      }\n      \n      if (!this.errors.length) {\n        return true;\n      }\n      \n      e.preventDefault();\n    },\n    validEmail: function (email) {\n      var re = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n      return re.test(email);\n    }\n  }\n})\n```\n\nAs you can see, we've added `validEmail` as a new method and it is simply called from `checkForm`. You can play with this example here:\n\n<p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"vWqNXZ\" data-default-tab=\"html,result\" data-user=\"cfjedimaster\" data-embed-version=\"2\" data-pen-title=\"form validation 2\" class=\"codepen\">See the Pen <a href=\"https://codepen.io/cfjedimaster/pen/vWqNXZ/\">form validation 2</a> by Raymond Camden (<a href=\"https://codepen.io/cfjedimaster\">@cfjedimaster</a>) on <a href=\"https://codepen.io\">CodePen</a>.</p>\n<script async src=\"https://production-assets.codepen.io/assets/embed/ei.js\"></script>\n\n## Another Example of Custom Validation\n\nFor the third example, we've built something you've probably seen in survey apps. The user is asked to spend a \"budget\" for a set of features for a new Star Destroyer model. The total must equal 100. First, the HTML.\n\n``` html\n<form id=\"app\" @submit=\"checkForm\" action=\"https://vuejs.org/\" method=\"post\" novalidate=\"true\">\n  \n  <p v-if=\"errors.length\">\n    <b>Please correct the following error(s):</b>\n    <ul>\n      <li v-for=\"error in errors\">{{ error }}</li>\n    </ul>\n  </p>\n\n  <p>\n    Given a budget of 100 dollars, indicate how much\n    you would spend on the following features for the\n    next generation Star Destroyer. Your total must sum up to 100.\n  </p>\n\n  <p>\n    <input type=\"number\" name=\"weapons\" v-model.number=\"weapons\"> Weapons <br/>\n    <input type=\"number\" name=\"shields\" v-model.number=\"shields\"> Shields <br/>\n    <input type=\"number\" name=\"coffee\" v-model.number=\"coffee\"> Coffee <br/>\n    <input type=\"number\" name=\"ac\" v-model.number=\"ac\"> Air Conditioning <br/>\n    <input type=\"number\" name=\"mousedroids\" v-model.number=\"mousedroids\"> Mouse Droids <br/>\n  </p>\n\n  <p>\n    Current Total: {{total}}\n  </p>\n\n  <p>\n    <input type=\"submit\" value=\"Submit\">  \n  </p>\n\n</form>\n```\n\nNote the set of inputs covering the five different features. Note the addition of `.number` to the `v-model` attribute. This tells Vue to cast the value to a number when you use it. However, there is a bug with this feature such that when the value is blank, it turns back into a string. You'll see the workaround below. To make it a bit easier for the user, we also added a current total right below so they can see, in real time, what their total is. Now let's look at the JavaScript.\n\n``` js\nconst app = new Vue({\n  el: '#app',\n  data:{\n    errors: [],\n    weapons: 0,\n    shields: 0,\n    coffee: 0,\n    ac: 0,\n    mousedroids: 0\n  },\n  computed: {\n     total: function () {\n       // must parse because Vue turns empty value to string\n       return Number(this.weapons) +\n         Number(this.shields) +\n         Number(this.coffee) +\n         Number(this.ac+this.mousedroids);\n     }\n  },\n  methods:{\n    checkForm: function (e) {\n      this.errors = [];\n      \n      if (this.total != 100) {\n        this.errors.push('Total must be 100!');\n      }\n      \n      if (!this.errors.length) {\n        return true;\n      }\n      \n      e.preventDefault();\n    }\n  }\n})\n```\n\nWe set up the total value as a computed value, and outside of that bug I ran into, it was simple enough to setup. My checkForm method now just needs to see if the total is 100 and that's it. You can play with this here:\n\n<p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"vWqGoy\" data-default-tab=\"html,result\" data-user=\"cfjedimaster\" data-embed-version=\"2\" data-pen-title=\"form validation 3\" class=\"codepen\">See the Pen <a href=\"https://codepen.io/cfjedimaster/pen/vWqGoy/\">form validation 3</a> by Raymond Camden (<a href=\"https://codepen.io/cfjedimaster\">@cfjedimaster</a>) on <a href=\"https://codepen.io\">CodePen</a>.</p>\n<script async src=\"https://production-assets.codepen.io/assets/embed/ei.js\"></script>\n\n## Server-side Validation\n\nIn my final example, we built something that makes use of Ajax to validate at the server. The form will ask you to name a new product and will then check to ensure that the name is unique. We wrote a quick [OpenWhisk](http://openwhisk.apache.org/) serverless action to do the validation. While it isn't terribly important, here is the logic:\n\n``` js\nfunction main(args) {\n    return new Promise((resolve, reject) => {\n        // bad product names: vista, empire, mbp\n        const badNames = ['vista', 'empire', 'mbp'];\n        \n        if (badNames.includes(args.name)) {\n          reject({error: 'Existing product'});\n        }\n        \n        resolve({status: 'ok'});\n    });\n}\n```\n\nBasically any name but \"vista\", \"empire\", and \"mbp\" are acceptable. Ok, so let's look at the form.\n\n``` html\n<form id=\"app\" @submit=\"checkForm\" method=\"post\">\n  \n  <p v-if=\"errors.length\">\n    <b>Please correct the following error(s):</b>\n    <ul>\n      <li v-for=\"error in errors\">{{ error }}</li>\n    </ul>\n  </p>\n\n  <p>\n    <label for=\"name\">New Product Name: </label>\n    <input type=\"text\" name=\"name\" id=\"name\" v-model=\"name\">\n  </p>\n\n  <p>\n    <input type=\"submit\" value=\"Submit\">  \n  </p>\n\n</form>\n```\n\nThere isn't anything special here. So let's go on to the JavaScript.\n\n``` js\nconst apiUrl = 'https://openwhisk.ng.bluemix.net/api/v1/web/rcamden%40us.ibm.com_My%20Space/safeToDelete/productName.json?name=';\n\nconst app = new Vue({\n  el: '#app',\n  data: {\n    errors: [],\n    name: ''\n  },\n  methods:{\n    checkForm: function (e) {\n      e.preventDefault();\n      \n      this.errors = [];\n      \n      if (this.name === '') {\n        this.errors.push('Product name is required.');\n      } else {\n        fetch(apiUrl + encodeURIComponent(this.name))\n        .then(res => res.json())\n        .then(res => {\n          if (res.error) {\n            this.errors.push(res.error);\n          } else {\n            // redirect to a new URL, or do something on success\n            alert('ok!');\n          }\n        });\n      }\n    }\n  }\n})\n```\n\nWe start off with a variable representing the URL of the API that is running on OpenWhisk. Now look at `checkForm`. In this version, we always prevent the form from submitting (which, by the way, could be done in the HTML with Vue as well). You can see a basic check on `this.name` being empty, and then we hit the API. If it's bad, we add an error as before. If it's good, right now we do nothing (just an alert), but you could navigate the user to a new page with the product name in the URL, or do other actions as well. You can run this demo below:\n\n<p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"BmgzeM\" data-default-tab=\"js,result\" data-user=\"cfjedimaster\" data-embed-version=\"2\" data-pen-title=\"form validation 4\" class=\"codepen\">See the Pen <a href=\"https://codepen.io/cfjedimaster/pen/BmgzeM/\">form validation 4</a> by Raymond Camden (<a href=\"https://codepen.io/cfjedimaster\">@cfjedimaster</a>) on <a href=\"https://codepen.io\">CodePen</a>.</p>\n<script async src=\"https://production-assets.codepen.io/assets/embed/ei.js\"></script>\n\n## Alternative Patterns\n\nWhile this cookbook entry focused on doing form validation \"by hand\", there are, of course, some great Vue libraries that will handle a lot of this for you. Switching to a prepackage library may impact the final size of your application, but the benefits could be tremendous. You have code that is (most likely) heavily tested and also updated on a regular basis. Some examples of form validation libraries for Vue include:\n\n* [vuelidate](https://github.com/monterail/vuelidate)\n* [VeeValidate](http://vee-validate.logaretm.com/)\n\n","date":"2018-07-19T04:04:16.856Z","updated":"2018-07-19T04:04:16.856Z","path":"v2/cookbook/form-validation.html","comments":1,"layout":"page","_id":"cjk0zidox0011vkrtiy18hzzt","content":"<h2 id=\"Base-Example\"><a href=\"#Base-Example\" class=\"headerlink\" title=\"Base Example\"></a>Base Example</h2><p>Form validation is natively supported by the browser, but sometimes different browsers will handle things in a manner which makes relying on it a bit tricky. Even when validation is supported perfectly, there may be times when custom validations are needed and a more manual, Vue-based solution may be more appropriate. Let’s begin with a simple example.</p>\n<p>Given a form of three fields, make two required. Let’s look at the HTML first:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span> @<span class=\"attr\">submit</span>=<span class=\"string\">\"checkForm\"</span> <span class=\"attr\">action</span>=<span class=\"string\">\"https://vuejs.org/\"</span> <span class=\"attr\">method</span>=<span class=\"string\">\"post\"</span>&gt;</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">v-if</span>=<span class=\"string\">\"errors.length\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">b</span>&gt;</span>Please correct the following error(s):<span class=\"tag\">&lt;/<span class=\"name\">b</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"error in errors\"</span>&gt;</span>&#123;&#123; error &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"name\"</span>&gt;</span>Name<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"name\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"name\"</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"name\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"age\"</span>&gt;</span>Age<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"number\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"age\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"age\"</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"age\"</span> <span class=\"attr\">min</span>=<span class=\"string\">\"0\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"movie\"</span>&gt;</span>Favorite Movie<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">name</span>=<span class=\"string\">\"movie\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"movie\"</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"movie\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">option</span>&gt;</span>Star Wars<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">option</span>&gt;</span>Vanilla Sky<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">option</span>&gt;</span>Atomic Blonde<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"submit\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"Submit\"</span>&gt;</span>  </span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>Let’s cover it from the top. The <code>&lt;form&gt;</code> tag has an ID that we’ll be using for the Vue component. There’s a submit handler that you’ll see in a bit, and the <code>action</code> is a temporary URL that would point to something real on a server someplace (where you have backup server-side validation of course).</p>\n<p>Beneath that there is a paragraph that shows or hides itself based on an error state. This will render a simple list of errors on top of the form. Also note we fire the validation on submit rather than as every field is modified. </p>\n<p>The final thing to note is that each of the three fields has a corresponding <code>v-model</code> to connect them to values we will work with in the JavaScript. Now let’s look at that.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> app = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  el: <span class=\"string\">'#app'</span>,</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    errors: [],</span><br><span class=\"line\">    name: <span class=\"literal\">null</span>,</span><br><span class=\"line\">    age: <span class=\"literal\">null</span>,</span><br><span class=\"line\">    movie: <span class=\"literal\">null</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  methods:&#123;</span><br><span class=\"line\">    checkForm: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.name &amp;&amp; <span class=\"keyword\">this</span>.age) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      </span><br><span class=\"line\">      <span class=\"keyword\">this</span>.errors = [];</span><br><span class=\"line\">      </span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>.name) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.errors.push(<span class=\"string\">'Name required.'</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>.age) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.errors.push(<span class=\"string\">'Age required.'</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      </span><br><span class=\"line\">      e.preventDefault();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>Fairly short and simple. We define an array to hold errors and set <code>null</code> values for the three form fields. The <code>checkForm</code> logic (which is run on submit remember) checks for name and age only as movie is optional. If they are empty we check each and set a specific error for each. And that’s really it. You can run the demo below. Don’t forget that on a successful submission it’s going to POST to a temporary URL.</p>\n<p></p><p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"GObpZM\" data-default-tab=\"html,result\" data-user=\"cfjedimaster\" data-embed-version=\"2\" data-pen-title=\"form validation 1\" class=\"codepen\">See the Pen <a href=\"https://codepen.io/cfjedimaster/pen/GObpZM/\" target=\"_blank\" rel=\"noopener\">form validation 1</a> by Raymond Camden (<a href=\"https://codepen.io/cfjedimaster\" target=\"_blank\" rel=\"noopener\">@cfjedimaster</a>) on <a href=\"https://codepen.io\" target=\"_blank\" rel=\"noopener\">CodePen</a>.</p><p></p>\n<script async src=\"https://production-assets.codepen.io/assets/embed/ei.js\"></script>\n\n<h2 id=\"Using-Custom-Validation\"><a href=\"#Using-Custom-Validation\" class=\"headerlink\" title=\"Using Custom Validation\"></a>Using Custom Validation</h2><p>For the second example, the second text field (age) was switched to email which will be validated with a bit of custom logic. The code is taken from the StackOverflow question, <a href=\"https://stackoverflow.com/questions/46155/how-to-validate-email-address-in-javascript\" target=\"_blank\" rel=\"noopener\">How to validate email address in JavaScript?</a>. This is an awesome question because it makes your most intense Facebook political/religious argument look like a slight disagreement over who makes the best beer. Seriously - it’s insane. Here is the HTML, even though it’s really close to the first example.</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span> @<span class=\"attr\">submit</span>=<span class=\"string\">\"checkForm\"</span> <span class=\"attr\">action</span>=<span class=\"string\">\"https://vuejs.org/\"</span> <span class=\"attr\">method</span>=<span class=\"string\">\"post\"</span> <span class=\"attr\">novalidate</span>=<span class=\"string\">\"true\"</span>&gt;</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">v-if</span>=<span class=\"string\">\"errors.length\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">b</span>&gt;</span>Please correct the following error(s):<span class=\"tag\">&lt;/<span class=\"name\">b</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"error in errors\"</span>&gt;</span>&#123;&#123; error &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"name\"</span>&gt;</span>Name<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"name\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"name\"</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"name\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"email\"</span>&gt;</span>Email<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"email\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"email\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"email\"</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"email\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"movie\"</span>&gt;</span>Favorite Movie<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">name</span>=<span class=\"string\">\"movie\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"movie\"</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"movie\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">option</span>&gt;</span>Star Wars<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">option</span>&gt;</span>Vanilla Sky<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">option</span>&gt;</span>Atomic Blonde<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"submit\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"Submit\"</span>&gt;</span>  </span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>While the change here is small, note the <code>novalidate=&quot;true&quot;</code> on top. This is important because the browser will attempt to validate the email address in the field when <code>type=&quot;email&quot;</code>. Frankly it may make more sense to trust the browser in this case, but as we wanted an example with custom validation, we’re disabling it. Here’s the updated JavaScript.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> app = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  el: <span class=\"string\">'#app'</span>,</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    errors: [],</span><br><span class=\"line\">    name: <span class=\"literal\">null</span>,</span><br><span class=\"line\">    email: <span class=\"literal\">null</span>,</span><br><span class=\"line\">    movie: <span class=\"literal\">null</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    checkForm: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.errors = [];</span><br><span class=\"line\">      </span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>.name) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.errors.push(<span class=\"string\">\"Name required.\"</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>.email) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.errors.push(<span class=\"string\">'Email required.'</span>);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>.validEmail(<span class=\"keyword\">this</span>.email)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.errors.push(<span class=\"string\">'Valid email required.'</span>);        </span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      </span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>.errors.length) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      </span><br><span class=\"line\">      e.preventDefault();</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    validEmail: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">email</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> re = <span class=\"regexp\">/^(([^&lt;&gt;()\\[\\]\\\\.,;:\\s@\"]+(\\.[^&lt;&gt;()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]&#123;1,3&#125;\\.[0-9]&#123;1,3&#125;\\.[0-9]&#123;1,3&#125;\\.[0-9]&#123;1,3&#125;\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]&#123;2,&#125;))$/</span>;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> re.test(email);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>As you can see, we’ve added <code>validEmail</code> as a new method and it is simply called from <code>checkForm</code>. You can play with this example here:</p>\n<p></p><p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"vWqNXZ\" data-default-tab=\"html,result\" data-user=\"cfjedimaster\" data-embed-version=\"2\" data-pen-title=\"form validation 2\" class=\"codepen\">See the Pen <a href=\"https://codepen.io/cfjedimaster/pen/vWqNXZ/\" target=\"_blank\" rel=\"noopener\">form validation 2</a> by Raymond Camden (<a href=\"https://codepen.io/cfjedimaster\" target=\"_blank\" rel=\"noopener\">@cfjedimaster</a>) on <a href=\"https://codepen.io\" target=\"_blank\" rel=\"noopener\">CodePen</a>.</p><p></p>\n<script async src=\"https://production-assets.codepen.io/assets/embed/ei.js\"></script>\n\n<h2 id=\"Another-Example-of-Custom-Validation\"><a href=\"#Another-Example-of-Custom-Validation\" class=\"headerlink\" title=\"Another Example of Custom Validation\"></a>Another Example of Custom Validation</h2><p>For the third example, we’ve built something you’ve probably seen in survey apps. The user is asked to spend a “budget” for a set of features for a new Star Destroyer model. The total must equal 100. First, the HTML.</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span> @<span class=\"attr\">submit</span>=<span class=\"string\">\"checkForm\"</span> <span class=\"attr\">action</span>=<span class=\"string\">\"https://vuejs.org/\"</span> <span class=\"attr\">method</span>=<span class=\"string\">\"post\"</span> <span class=\"attr\">novalidate</span>=<span class=\"string\">\"true\"</span>&gt;</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">v-if</span>=<span class=\"string\">\"errors.length\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">b</span>&gt;</span>Please correct the following error(s):<span class=\"tag\">&lt;/<span class=\"name\">b</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"error in errors\"</span>&gt;</span>&#123;&#123; error &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    Given a budget of 100 dollars, indicate how much</span><br><span class=\"line\">    you would spend on the following features for the</span><br><span class=\"line\">    next generation Star Destroyer. Your total must sum up to 100.</span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"number\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"weapons\"</span> <span class=\"attr\">v-model.number</span>=<span class=\"string\">\"weapons\"</span>&gt;</span> Weapons <span class=\"tag\">&lt;<span class=\"name\">br</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"number\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"shields\"</span> <span class=\"attr\">v-model.number</span>=<span class=\"string\">\"shields\"</span>&gt;</span> Shields <span class=\"tag\">&lt;<span class=\"name\">br</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"number\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"coffee\"</span> <span class=\"attr\">v-model.number</span>=<span class=\"string\">\"coffee\"</span>&gt;</span> Coffee <span class=\"tag\">&lt;<span class=\"name\">br</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"number\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"ac\"</span> <span class=\"attr\">v-model.number</span>=<span class=\"string\">\"ac\"</span>&gt;</span> Air Conditioning <span class=\"tag\">&lt;<span class=\"name\">br</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"number\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"mousedroids\"</span> <span class=\"attr\">v-model.number</span>=<span class=\"string\">\"mousedroids\"</span>&gt;</span> Mouse Droids <span class=\"tag\">&lt;<span class=\"name\">br</span>/&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    Current Total: &#123;&#123;total&#125;&#125;</span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"submit\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"Submit\"</span>&gt;</span>  </span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>Note the set of inputs covering the five different features. Note the addition of <code>.number</code> to the <code>v-model</code> attribute. This tells Vue to cast the value to a number when you use it. However, there is a bug with this feature such that when the value is blank, it turns back into a string. You’ll see the workaround below. To make it a bit easier for the user, we also added a current total right below so they can see, in real time, what their total is. Now let’s look at the JavaScript.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> app = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  el: <span class=\"string\">'#app'</span>,</span><br><span class=\"line\">  data:&#123;</span><br><span class=\"line\">    errors: [],</span><br><span class=\"line\">    weapons: <span class=\"number\">0</span>,</span><br><span class=\"line\">    shields: <span class=\"number\">0</span>,</span><br><span class=\"line\">    coffee: <span class=\"number\">0</span>,</span><br><span class=\"line\">    ac: <span class=\"number\">0</span>,</span><br><span class=\"line\">    mousedroids: <span class=\"number\">0</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  computed: &#123;</span><br><span class=\"line\">     total: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">       <span class=\"comment\">// must parse because Vue turns empty value to string</span></span><br><span class=\"line\">       <span class=\"keyword\">return</span> <span class=\"built_in\">Number</span>(<span class=\"keyword\">this</span>.weapons) +</span><br><span class=\"line\">         <span class=\"built_in\">Number</span>(<span class=\"keyword\">this</span>.shields) +</span><br><span class=\"line\">         <span class=\"built_in\">Number</span>(<span class=\"keyword\">this</span>.coffee) +</span><br><span class=\"line\">         <span class=\"built_in\">Number</span>(<span class=\"keyword\">this</span>.ac+<span class=\"keyword\">this</span>.mousedroids);</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  methods:&#123;</span><br><span class=\"line\">    checkForm: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.errors = [];</span><br><span class=\"line\">      </span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.total != <span class=\"number\">100</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.errors.push(<span class=\"string\">'Total must be 100!'</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      </span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>.errors.length) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      </span><br><span class=\"line\">      e.preventDefault();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>We set up the total value as a computed value, and outside of that bug I ran into, it was simple enough to setup. My checkForm method now just needs to see if the total is 100 and that’s it. You can play with this here:</p>\n<p></p><p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"vWqGoy\" data-default-tab=\"html,result\" data-user=\"cfjedimaster\" data-embed-version=\"2\" data-pen-title=\"form validation 3\" class=\"codepen\">See the Pen <a href=\"https://codepen.io/cfjedimaster/pen/vWqGoy/\" target=\"_blank\" rel=\"noopener\">form validation 3</a> by Raymond Camden (<a href=\"https://codepen.io/cfjedimaster\" target=\"_blank\" rel=\"noopener\">@cfjedimaster</a>) on <a href=\"https://codepen.io\" target=\"_blank\" rel=\"noopener\">CodePen</a>.</p><p></p>\n<script async src=\"https://production-assets.codepen.io/assets/embed/ei.js\"></script>\n\n<h2 id=\"Server-side-Validation\"><a href=\"#Server-side-Validation\" class=\"headerlink\" title=\"Server-side Validation\"></a>Server-side Validation</h2><p>In my final example, we built something that makes use of Ajax to validate at the server. The form will ask you to name a new product and will then check to ensure that the name is unique. We wrote a quick <a href=\"http://openwhisk.apache.org/\" target=\"_blank\" rel=\"noopener\">OpenWhisk</a> serverless action to do the validation. While it isn’t terribly important, here is the logic:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">main</span>(<span class=\"params\">args</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// bad product names: vista, empire, mbp</span></span><br><span class=\"line\">        <span class=\"keyword\">const</span> badNames = [<span class=\"string\">'vista'</span>, <span class=\"string\">'empire'</span>, <span class=\"string\">'mbp'</span>];</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (badNames.includes(args.name)) &#123;</span><br><span class=\"line\">          reject(&#123;<span class=\"attr\">error</span>: <span class=\"string\">'Existing product'</span>&#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        resolve(&#123;<span class=\"attr\">status</span>: <span class=\"string\">'ok'</span>&#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Basically any name but “vista”, “empire”, and “mbp” are acceptable. Ok, so let’s look at the form.</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span> @<span class=\"attr\">submit</span>=<span class=\"string\">\"checkForm\"</span> <span class=\"attr\">method</span>=<span class=\"string\">\"post\"</span>&gt;</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">v-if</span>=<span class=\"string\">\"errors.length\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">b</span>&gt;</span>Please correct the following error(s):<span class=\"tag\">&lt;/<span class=\"name\">b</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"error in errors\"</span>&gt;</span>&#123;&#123; error &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"name\"</span>&gt;</span>New Product Name: <span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"name\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"name\"</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"name\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"submit\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"Submit\"</span>&gt;</span>  </span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>There isn’t anything special here. So let’s go on to the JavaScript.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> apiUrl = <span class=\"string\">'https://openwhisk.ng.bluemix.net/api/v1/web/rcamden%40us.ibm.com_My%20Space/safeToDelete/productName.json?name='</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> app = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  el: <span class=\"string\">'#app'</span>,</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    errors: [],</span><br><span class=\"line\">    name: <span class=\"string\">''</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  methods:&#123;</span><br><span class=\"line\">    checkForm: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">      e.preventDefault();</span><br><span class=\"line\">      </span><br><span class=\"line\">      <span class=\"keyword\">this</span>.errors = [];</span><br><span class=\"line\">      </span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.name === <span class=\"string\">''</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.errors.push(<span class=\"string\">'Product name is required.'</span>);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        fetch(apiUrl + <span class=\"built_in\">encodeURIComponent</span>(<span class=\"keyword\">this</span>.name))</span><br><span class=\"line\">        .then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> res.json())</span><br><span class=\"line\">        .then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (res.error) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.errors.push(res.error);</span><br><span class=\"line\">          &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// redirect to a new URL, or do something on success</span></span><br><span class=\"line\">            alert(<span class=\"string\">'ok!'</span>);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>We start off with a variable representing the URL of the API that is running on OpenWhisk. Now look at <code>checkForm</code>. In this version, we always prevent the form from submitting (which, by the way, could be done in the HTML with Vue as well). You can see a basic check on <code>this.name</code> being empty, and then we hit the API. If it’s bad, we add an error as before. If it’s good, right now we do nothing (just an alert), but you could navigate the user to a new page with the product name in the URL, or do other actions as well. You can run this demo below:</p>\n<p></p><p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"BmgzeM\" data-default-tab=\"js,result\" data-user=\"cfjedimaster\" data-embed-version=\"2\" data-pen-title=\"form validation 4\" class=\"codepen\">See the Pen <a href=\"https://codepen.io/cfjedimaster/pen/BmgzeM/\" target=\"_blank\" rel=\"noopener\">form validation 4</a> by Raymond Camden (<a href=\"https://codepen.io/cfjedimaster\" target=\"_blank\" rel=\"noopener\">@cfjedimaster</a>) on <a href=\"https://codepen.io\" target=\"_blank\" rel=\"noopener\">CodePen</a>.</p><p></p>\n<script async src=\"https://production-assets.codepen.io/assets/embed/ei.js\"></script>\n\n<h2 id=\"Alternative-Patterns\"><a href=\"#Alternative-Patterns\" class=\"headerlink\" title=\"Alternative Patterns\"></a>Alternative Patterns</h2><p>While this cookbook entry focused on doing form validation “by hand”, there are, of course, some great Vue libraries that will handle a lot of this for you. Switching to a prepackage library may impact the final size of your application, but the benefits could be tremendous. You have code that is (most likely) heavily tested and also updated on a regular basis. Some examples of form validation libraries for Vue include:</p>\n<ul>\n<li><a href=\"https://github.com/monterail/vuelidate\" target=\"_blank\" rel=\"noopener\">vuelidate</a></li>\n<li><a href=\"http://vee-validate.logaretm.com/\" target=\"_blank\" rel=\"noopener\">VeeValidate</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Base-Example\"><a href=\"#Base-Example\" class=\"headerlink\" title=\"Base Example\"></a>Base Example</h2><p>Form validation is natively supported by the browser, but sometimes different browsers will handle things in a manner which makes relying on it a bit tricky. Even when validation is supported perfectly, there may be times when custom validations are needed and a more manual, Vue-based solution may be more appropriate. Let’s begin with a simple example.</p>\n<p>Given a form of three fields, make two required. Let’s look at the HTML first:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span> @<span class=\"attr\">submit</span>=<span class=\"string\">\"checkForm\"</span> <span class=\"attr\">action</span>=<span class=\"string\">\"https://vuejs.org/\"</span> <span class=\"attr\">method</span>=<span class=\"string\">\"post\"</span>&gt;</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">v-if</span>=<span class=\"string\">\"errors.length\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">b</span>&gt;</span>Please correct the following error(s):<span class=\"tag\">&lt;/<span class=\"name\">b</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"error in errors\"</span>&gt;</span>&#123;&#123; error &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"name\"</span>&gt;</span>Name<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"name\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"name\"</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"name\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"age\"</span>&gt;</span>Age<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"number\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"age\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"age\"</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"age\"</span> <span class=\"attr\">min</span>=<span class=\"string\">\"0\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"movie\"</span>&gt;</span>Favorite Movie<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">name</span>=<span class=\"string\">\"movie\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"movie\"</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"movie\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">option</span>&gt;</span>Star Wars<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">option</span>&gt;</span>Vanilla Sky<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">option</span>&gt;</span>Atomic Blonde<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"submit\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"Submit\"</span>&gt;</span>  </span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>Let’s cover it from the top. The <code>&lt;form&gt;</code> tag has an ID that we’ll be using for the Vue component. There’s a submit handler that you’ll see in a bit, and the <code>action</code> is a temporary URL that would point to something real on a server someplace (where you have backup server-side validation of course).</p>\n<p>Beneath that there is a paragraph that shows or hides itself based on an error state. This will render a simple list of errors on top of the form. Also note we fire the validation on submit rather than as every field is modified. </p>\n<p>The final thing to note is that each of the three fields has a corresponding <code>v-model</code> to connect them to values we will work with in the JavaScript. Now let’s look at that.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> app = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  el: <span class=\"string\">'#app'</span>,</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    errors: [],</span><br><span class=\"line\">    name: <span class=\"literal\">null</span>,</span><br><span class=\"line\">    age: <span class=\"literal\">null</span>,</span><br><span class=\"line\">    movie: <span class=\"literal\">null</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  methods:&#123;</span><br><span class=\"line\">    checkForm: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.name &amp;&amp; <span class=\"keyword\">this</span>.age) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      </span><br><span class=\"line\">      <span class=\"keyword\">this</span>.errors = [];</span><br><span class=\"line\">      </span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>.name) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.errors.push(<span class=\"string\">'Name required.'</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>.age) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.errors.push(<span class=\"string\">'Age required.'</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      </span><br><span class=\"line\">      e.preventDefault();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>Fairly short and simple. We define an array to hold errors and set <code>null</code> values for the three form fields. The <code>checkForm</code> logic (which is run on submit remember) checks for name and age only as movie is optional. If they are empty we check each and set a specific error for each. And that’s really it. You can run the demo below. Don’t forget that on a successful submission it’s going to POST to a temporary URL.</p>\n<p></p><p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"GObpZM\" data-default-tab=\"html,result\" data-user=\"cfjedimaster\" data-embed-version=\"2\" data-pen-title=\"form validation 1\" class=\"codepen\">See the Pen <a href=\"https://codepen.io/cfjedimaster/pen/GObpZM/\" target=\"_blank\" rel=\"noopener\">form validation 1</a> by Raymond Camden (<a href=\"https://codepen.io/cfjedimaster\" target=\"_blank\" rel=\"noopener\">@cfjedimaster</a>) on <a href=\"https://codepen.io\" target=\"_blank\" rel=\"noopener\">CodePen</a>.</p><p></p>\n<script async src=\"https://production-assets.codepen.io/assets/embed/ei.js\"></script>\n\n<h2 id=\"Using-Custom-Validation\"><a href=\"#Using-Custom-Validation\" class=\"headerlink\" title=\"Using Custom Validation\"></a>Using Custom Validation</h2><p>For the second example, the second text field (age) was switched to email which will be validated with a bit of custom logic. The code is taken from the StackOverflow question, <a href=\"https://stackoverflow.com/questions/46155/how-to-validate-email-address-in-javascript\" target=\"_blank\" rel=\"noopener\">How to validate email address in JavaScript?</a>. This is an awesome question because it makes your most intense Facebook political/religious argument look like a slight disagreement over who makes the best beer. Seriously - it’s insane. Here is the HTML, even though it’s really close to the first example.</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span> @<span class=\"attr\">submit</span>=<span class=\"string\">\"checkForm\"</span> <span class=\"attr\">action</span>=<span class=\"string\">\"https://vuejs.org/\"</span> <span class=\"attr\">method</span>=<span class=\"string\">\"post\"</span> <span class=\"attr\">novalidate</span>=<span class=\"string\">\"true\"</span>&gt;</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">v-if</span>=<span class=\"string\">\"errors.length\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">b</span>&gt;</span>Please correct the following error(s):<span class=\"tag\">&lt;/<span class=\"name\">b</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"error in errors\"</span>&gt;</span>&#123;&#123; error &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"name\"</span>&gt;</span>Name<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"name\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"name\"</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"name\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"email\"</span>&gt;</span>Email<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"email\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"email\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"email\"</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"email\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"movie\"</span>&gt;</span>Favorite Movie<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">name</span>=<span class=\"string\">\"movie\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"movie\"</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"movie\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">option</span>&gt;</span>Star Wars<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">option</span>&gt;</span>Vanilla Sky<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">option</span>&gt;</span>Atomic Blonde<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"submit\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"Submit\"</span>&gt;</span>  </span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>While the change here is small, note the <code>novalidate=&quot;true&quot;</code> on top. This is important because the browser will attempt to validate the email address in the field when <code>type=&quot;email&quot;</code>. Frankly it may make more sense to trust the browser in this case, but as we wanted an example with custom validation, we’re disabling it. Here’s the updated JavaScript.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> app = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  el: <span class=\"string\">'#app'</span>,</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    errors: [],</span><br><span class=\"line\">    name: <span class=\"literal\">null</span>,</span><br><span class=\"line\">    email: <span class=\"literal\">null</span>,</span><br><span class=\"line\">    movie: <span class=\"literal\">null</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    checkForm: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.errors = [];</span><br><span class=\"line\">      </span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>.name) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.errors.push(<span class=\"string\">\"Name required.\"</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>.email) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.errors.push(<span class=\"string\">'Email required.'</span>);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>.validEmail(<span class=\"keyword\">this</span>.email)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.errors.push(<span class=\"string\">'Valid email required.'</span>);        </span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      </span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>.errors.length) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      </span><br><span class=\"line\">      e.preventDefault();</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    validEmail: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">email</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> re = <span class=\"regexp\">/^(([^&lt;&gt;()\\[\\]\\\\.,;:\\s@\"]+(\\.[^&lt;&gt;()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]&#123;1,3&#125;\\.[0-9]&#123;1,3&#125;\\.[0-9]&#123;1,3&#125;\\.[0-9]&#123;1,3&#125;\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]&#123;2,&#125;))$/</span>;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> re.test(email);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>As you can see, we’ve added <code>validEmail</code> as a new method and it is simply called from <code>checkForm</code>. You can play with this example here:</p>\n<p></p><p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"vWqNXZ\" data-default-tab=\"html,result\" data-user=\"cfjedimaster\" data-embed-version=\"2\" data-pen-title=\"form validation 2\" class=\"codepen\">See the Pen <a href=\"https://codepen.io/cfjedimaster/pen/vWqNXZ/\" target=\"_blank\" rel=\"noopener\">form validation 2</a> by Raymond Camden (<a href=\"https://codepen.io/cfjedimaster\" target=\"_blank\" rel=\"noopener\">@cfjedimaster</a>) on <a href=\"https://codepen.io\" target=\"_blank\" rel=\"noopener\">CodePen</a>.</p><p></p>\n<script async src=\"https://production-assets.codepen.io/assets/embed/ei.js\"></script>\n\n<h2 id=\"Another-Example-of-Custom-Validation\"><a href=\"#Another-Example-of-Custom-Validation\" class=\"headerlink\" title=\"Another Example of Custom Validation\"></a>Another Example of Custom Validation</h2><p>For the third example, we’ve built something you’ve probably seen in survey apps. The user is asked to spend a “budget” for a set of features for a new Star Destroyer model. The total must equal 100. First, the HTML.</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span> @<span class=\"attr\">submit</span>=<span class=\"string\">\"checkForm\"</span> <span class=\"attr\">action</span>=<span class=\"string\">\"https://vuejs.org/\"</span> <span class=\"attr\">method</span>=<span class=\"string\">\"post\"</span> <span class=\"attr\">novalidate</span>=<span class=\"string\">\"true\"</span>&gt;</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">v-if</span>=<span class=\"string\">\"errors.length\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">b</span>&gt;</span>Please correct the following error(s):<span class=\"tag\">&lt;/<span class=\"name\">b</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"error in errors\"</span>&gt;</span>&#123;&#123; error &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    Given a budget of 100 dollars, indicate how much</span><br><span class=\"line\">    you would spend on the following features for the</span><br><span class=\"line\">    next generation Star Destroyer. Your total must sum up to 100.</span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"number\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"weapons\"</span> <span class=\"attr\">v-model.number</span>=<span class=\"string\">\"weapons\"</span>&gt;</span> Weapons <span class=\"tag\">&lt;<span class=\"name\">br</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"number\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"shields\"</span> <span class=\"attr\">v-model.number</span>=<span class=\"string\">\"shields\"</span>&gt;</span> Shields <span class=\"tag\">&lt;<span class=\"name\">br</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"number\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"coffee\"</span> <span class=\"attr\">v-model.number</span>=<span class=\"string\">\"coffee\"</span>&gt;</span> Coffee <span class=\"tag\">&lt;<span class=\"name\">br</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"number\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"ac\"</span> <span class=\"attr\">v-model.number</span>=<span class=\"string\">\"ac\"</span>&gt;</span> Air Conditioning <span class=\"tag\">&lt;<span class=\"name\">br</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"number\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"mousedroids\"</span> <span class=\"attr\">v-model.number</span>=<span class=\"string\">\"mousedroids\"</span>&gt;</span> Mouse Droids <span class=\"tag\">&lt;<span class=\"name\">br</span>/&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    Current Total: &#123;&#123;total&#125;&#125;</span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"submit\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"Submit\"</span>&gt;</span>  </span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>Note the set of inputs covering the five different features. Note the addition of <code>.number</code> to the <code>v-model</code> attribute. This tells Vue to cast the value to a number when you use it. However, there is a bug with this feature such that when the value is blank, it turns back into a string. You’ll see the workaround below. To make it a bit easier for the user, we also added a current total right below so they can see, in real time, what their total is. Now let’s look at the JavaScript.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> app = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  el: <span class=\"string\">'#app'</span>,</span><br><span class=\"line\">  data:&#123;</span><br><span class=\"line\">    errors: [],</span><br><span class=\"line\">    weapons: <span class=\"number\">0</span>,</span><br><span class=\"line\">    shields: <span class=\"number\">0</span>,</span><br><span class=\"line\">    coffee: <span class=\"number\">0</span>,</span><br><span class=\"line\">    ac: <span class=\"number\">0</span>,</span><br><span class=\"line\">    mousedroids: <span class=\"number\">0</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  computed: &#123;</span><br><span class=\"line\">     total: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">       <span class=\"comment\">// must parse because Vue turns empty value to string</span></span><br><span class=\"line\">       <span class=\"keyword\">return</span> <span class=\"built_in\">Number</span>(<span class=\"keyword\">this</span>.weapons) +</span><br><span class=\"line\">         <span class=\"built_in\">Number</span>(<span class=\"keyword\">this</span>.shields) +</span><br><span class=\"line\">         <span class=\"built_in\">Number</span>(<span class=\"keyword\">this</span>.coffee) +</span><br><span class=\"line\">         <span class=\"built_in\">Number</span>(<span class=\"keyword\">this</span>.ac+<span class=\"keyword\">this</span>.mousedroids);</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  methods:&#123;</span><br><span class=\"line\">    checkForm: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.errors = [];</span><br><span class=\"line\">      </span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.total != <span class=\"number\">100</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.errors.push(<span class=\"string\">'Total must be 100!'</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      </span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>.errors.length) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      </span><br><span class=\"line\">      e.preventDefault();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>We set up the total value as a computed value, and outside of that bug I ran into, it was simple enough to setup. My checkForm method now just needs to see if the total is 100 and that’s it. You can play with this here:</p>\n<p></p><p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"vWqGoy\" data-default-tab=\"html,result\" data-user=\"cfjedimaster\" data-embed-version=\"2\" data-pen-title=\"form validation 3\" class=\"codepen\">See the Pen <a href=\"https://codepen.io/cfjedimaster/pen/vWqGoy/\" target=\"_blank\" rel=\"noopener\">form validation 3</a> by Raymond Camden (<a href=\"https://codepen.io/cfjedimaster\" target=\"_blank\" rel=\"noopener\">@cfjedimaster</a>) on <a href=\"https://codepen.io\" target=\"_blank\" rel=\"noopener\">CodePen</a>.</p><p></p>\n<script async src=\"https://production-assets.codepen.io/assets/embed/ei.js\"></script>\n\n<h2 id=\"Server-side-Validation\"><a href=\"#Server-side-Validation\" class=\"headerlink\" title=\"Server-side Validation\"></a>Server-side Validation</h2><p>In my final example, we built something that makes use of Ajax to validate at the server. The form will ask you to name a new product and will then check to ensure that the name is unique. We wrote a quick <a href=\"http://openwhisk.apache.org/\" target=\"_blank\" rel=\"noopener\">OpenWhisk</a> serverless action to do the validation. While it isn’t terribly important, here is the logic:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">main</span>(<span class=\"params\">args</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// bad product names: vista, empire, mbp</span></span><br><span class=\"line\">        <span class=\"keyword\">const</span> badNames = [<span class=\"string\">'vista'</span>, <span class=\"string\">'empire'</span>, <span class=\"string\">'mbp'</span>];</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (badNames.includes(args.name)) &#123;</span><br><span class=\"line\">          reject(&#123;<span class=\"attr\">error</span>: <span class=\"string\">'Existing product'</span>&#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        resolve(&#123;<span class=\"attr\">status</span>: <span class=\"string\">'ok'</span>&#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Basically any name but “vista”, “empire”, and “mbp” are acceptable. Ok, so let’s look at the form.</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span> @<span class=\"attr\">submit</span>=<span class=\"string\">\"checkForm\"</span> <span class=\"attr\">method</span>=<span class=\"string\">\"post\"</span>&gt;</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">v-if</span>=<span class=\"string\">\"errors.length\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">b</span>&gt;</span>Please correct the following error(s):<span class=\"tag\">&lt;/<span class=\"name\">b</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"error in errors\"</span>&gt;</span>&#123;&#123; error &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"name\"</span>&gt;</span>New Product Name: <span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"name\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"name\"</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"name\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"submit\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"Submit\"</span>&gt;</span>  </span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>There isn’t anything special here. So let’s go on to the JavaScript.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> apiUrl = <span class=\"string\">'https://openwhisk.ng.bluemix.net/api/v1/web/rcamden%40us.ibm.com_My%20Space/safeToDelete/productName.json?name='</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> app = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  el: <span class=\"string\">'#app'</span>,</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    errors: [],</span><br><span class=\"line\">    name: <span class=\"string\">''</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  methods:&#123;</span><br><span class=\"line\">    checkForm: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">      e.preventDefault();</span><br><span class=\"line\">      </span><br><span class=\"line\">      <span class=\"keyword\">this</span>.errors = [];</span><br><span class=\"line\">      </span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.name === <span class=\"string\">''</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.errors.push(<span class=\"string\">'Product name is required.'</span>);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        fetch(apiUrl + <span class=\"built_in\">encodeURIComponent</span>(<span class=\"keyword\">this</span>.name))</span><br><span class=\"line\">        .then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> res.json())</span><br><span class=\"line\">        .then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (res.error) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.errors.push(res.error);</span><br><span class=\"line\">          &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// redirect to a new URL, or do something on success</span></span><br><span class=\"line\">            alert(<span class=\"string\">'ok!'</span>);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>We start off with a variable representing the URL of the API that is running on OpenWhisk. Now look at <code>checkForm</code>. In this version, we always prevent the form from submitting (which, by the way, could be done in the HTML with Vue as well). You can see a basic check on <code>this.name</code> being empty, and then we hit the API. If it’s bad, we add an error as before. If it’s good, right now we do nothing (just an alert), but you could navigate the user to a new page with the product name in the URL, or do other actions as well. You can run this demo below:</p>\n<p></p><p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"BmgzeM\" data-default-tab=\"js,result\" data-user=\"cfjedimaster\" data-embed-version=\"2\" data-pen-title=\"form validation 4\" class=\"codepen\">See the Pen <a href=\"https://codepen.io/cfjedimaster/pen/BmgzeM/\" target=\"_blank\" rel=\"noopener\">form validation 4</a> by Raymond Camden (<a href=\"https://codepen.io/cfjedimaster\" target=\"_blank\" rel=\"noopener\">@cfjedimaster</a>) on <a href=\"https://codepen.io\" target=\"_blank\" rel=\"noopener\">CodePen</a>.</p><p></p>\n<script async src=\"https://production-assets.codepen.io/assets/embed/ei.js\"></script>\n\n<h2 id=\"Alternative-Patterns\"><a href=\"#Alternative-Patterns\" class=\"headerlink\" title=\"Alternative Patterns\"></a>Alternative Patterns</h2><p>While this cookbook entry focused on doing form validation “by hand”, there are, of course, some great Vue libraries that will handle a lot of this for you. Switching to a prepackage library may impact the final size of your application, but the benefits could be tremendous. You have code that is (most likely) heavily tested and also updated on a regular basis. Some examples of form validation libraries for Vue include:</p>\n<ul>\n<li><a href=\"https://github.com/monterail/vuelidate\" target=\"_blank\" rel=\"noopener\">vuelidate</a></li>\n<li><a href=\"http://vee-validate.logaretm.com/\" target=\"_blank\" rel=\"noopener\">VeeValidate</a></li>\n</ul>\n"},{"title":"Packaging Vue Components for npm","type":"cookbook","order":12,"_content":"\n## Base Example\n\nVue components by nature are meant to be re-used. This is easy when the component is only used within a single application. But how can you write a component once and use it in multiple sites/applications? Perhaps the easiest solution is via npm.\n\nBy packaging your component to be shared via npm, it can be imported/required into a build process for use in full-fledged web applications:\n\n```js\nimport MyComponent from 'my-component';\n\nexport default {\n  components: {\n    MyComponent,\n  },\n  // rest of the component\n}\n```\n\nOr even used via `<script>` tag in the browser directly:\n\n```html\n  <script src=\"https://unpkg.com/vue\"></script>\n  <script src=\"https://unpkg.com/my-component\"></script>\n  ...\n  <my-component></my-component>\n  ...\n```\n\nNot only does this help you avoid copy/pasting components around, but it also allows you to give back to the Vue community!\n\n## Can't I Just Share `.vue` Files Directly?\n\nVue already allows components to be written as a single file. Because a Single File Component (SFC) is already just one file, you might ask:\n\n> \"Why can't people use my `.vue` file directly? Isn't that the simplest way to share components?\"\n\nIt's true, you can share `.vue` files directly, and anyone using a [Vue build](https://vuejs.org/v2/guide/installation.html#Explanation-of-Different-Builds) containing the Vue compiler can consume it immediately. Also, the SSR build uses string concatenation as an optimization, so the `.vue` file might be preferred in this scenario (see [Packaging Components for npm > SSR Usage](#SSR-Usage) for details). However, this excludes anyone who wishes to use the component directly in a browser via `<script>` tag, anyone who uses a runtime-only build, or build processes which don't understand what to do with `.vue` files.\n\nProperly packaging your SFC for distribution via npm enables your component to be shared in a way which is ready to use everywhere!\n\n## Packaging Components for npm\n\nFor the purposes of this section, assume the following file structure:\n\n```\npackage.json\nbuild/\n   rollup.config.json\nsrc/\n   wrapper.js\n   my-component.vue\ndist/\n```\n\n<p class=\"tip\">Throughout this document, references are made to the package.json file listed above. The file used in these examples was generated by hand, and will include the minimum configuration required for the discussion/task at hand. It is likely your own package.json file will contain a lot more than is listed here.</p>\n\n### How does npm know which version to serve to a browser/build process?\n\nThe package.json file used by npm really only requires one version (`main`), but as it turns out, we aren't limited to that. We can address the most common use cases by specifying 2 additional versions (`module` and `unpkg`), and provide access to the `.vue` file itself using the `browser` field. A sample package.json would look like this:\n\n```json\n{\n  \"name\": \"my-component\",\n  \"version\": \"1.2.3\",\n  \"main\": \"dist/my-component.umd.js\",\n  \"module\": \"dist/my-component.esm.js\",\n  \"unpkg\": \"dist/my-component.min.js\",\n  \"browser\": {\n    \"./sfc\": \"src/my-component.vue\"\n  },\n  ...\n}\n```\n\nWhen webpack 2+, Rollup, or other modern build tools are used, they will pick up on the `module` build. Legacy applications would use the `main` build, and the `unpkg` build can be used directly in browsers. In fact, the [unpkg](https://unpkg.com) cdn automatically uses this when someone enters the URL for your module into their service!\n\n### SSR Usage\n\nYou might have noticed something interesting - browsers aren't going to be using the `browser` version. That's because this field is actually intended to allow authors to provide [hints to bundlers](https://github.com/defunctzombie/package-browser-field-spec#spec) which in turn create their own packages for client side use. With a little creativity, this field allows us to map an alias to the `.vue` file itself. For example:\n\n```js\nimport MyComponent from 'my-component/sfc'; // Note the '/sfc'\n```\n\nCompatible bundlers see the `browser` definition in package.json and translate requests for `my-component/sfc` into `my-component/src/my-component.vue`, resulting in the original `.vue` file being used instead. Now the SSR process can use the string concatenation optimizations it needs to for a boost in performance.\n\n<p class=\"tip\">Note: When using `.vue` components directly, pay attention to any type of pre-processing required by `script` and `style` tags. These dependencies will be passed on to users. Consider providing 'plain' SFCs to keep things as light as possible.</p>\n\n### How do I make multiple versions of my component?\n\nThere is no need to write your module multiple times. It is possible to prepare all 3 versions of your module in one step, in a matter of seconds. The example here uses [Rollup](https://rollupjs.org) due to its minimal configuration, but similar configuration is possible with other build tools - more details on this decision can be found [here](https://medium.com/webpack/webpack-and-rollup-the-same-but-different-a41ad427058c). The package.json `scripts` section can be updated with a single entry for each build target, and a more generic `build` script that runs them all in one pass. The sample package.json file now looks like this:\n\n```json\n{\n  \"name\": \"my-component\",\n  \"version\": \"1.2.3\",\n  \"main\": \"dist/my-component.umd.js\",\n  \"module\": \"dist/my-component.esm.js\",\n  \"unpkg\": \"dist/my-component.min.js\",\n  \"browser\": {\n    \"./sfc\": \"src/my-component.vue\"\n  },\n  \"scripts\": {\n    \"build\": \"npm run build:umd & npm run build:es & npm run build:unpkg\",\n    \"build:umd\": \"rollup --config build/rollup.config.js --format umd --file dist/my-component.umd.js\",\n    \"build:es\": \"rollup --config build/rollup.config.js --format es --file dist/my-component.esm.js\",\n    \"build:unpkg\": \"rollup --config build/rollup.config.js --format iife --file dist/my-component.min.js\"\n  },\n  \"devDependencies\": {\n    \"rollup\": \"^0.57.1\",\n    \"rollup-plugin-buble\": \"^0.19.2\",\n    \"rollup-plugin-vue\": \"^3.0.0\",\n    \"vue\": \"^2.5.16\",\n    \"vue-template-compiler\": \"^2.5.16\",\n    ...\n  },\n  ...\n}\n```\n\n<p class=\"tip\">Remember, if you have an existing package.json file, it will likely contain a lot more than this one does. This merely illustrates a starting point. Also, the <i>packages</i> listed in devDependencies (not their versions) are the minimum requirements for rollup to create the three separate builds (umd, es, and unpkg) mentioned. As newer versions become available, they should be updated as necessary.</p>\n\nOur changes to package.json are complete. Next, we need a small wrapper to export/auto-install the actual SFC, plus a mimimal Rollup configuration, and we're set!\n\n### What does my packaged component look like?\n\nDepending on how your component is being used, it needs to be exposed as either a [CommonJS/UMD](https://medium.freecodecamp.org/javascript-modules-a-beginner-s-guide-783f7d7a5fcc#c33a) javascript module, an [ES6 javascript](https://medium.freecodecamp.org/javascript-modules-a-beginner-s-guide-783f7d7a5fcc#4f5e) module, or in the case of a `<script>` tag, it will be automatically loaded into Vue via `Vue.use(...)` so it's immediately available to the page. This is accomplished by a simple wrapper.js file which handles the module export and auto-install. That wrapper, in its entirety, looks like this:\n\n```js\n// Import vue component\nimport component from './my-component.vue';\n\n// Declare install function executed by Vue.use()\nexport function install(Vue) {\n\tif (install.installed) return;\n\tinstall.installed = true;\n\tVue.component('MyComponent', component);\n}\n\n// Create module definition for Vue.use()\nconst plugin = {\n\tinstall,\n};\n\n// Auto-install when vue is found (eg. in browser via <script> tag)\nlet GlobalVue = null;\nif (typeof window !== 'undefined') {\n\tGlobalVue = window.Vue;\n} else if (typeof global !== 'undefined') {\n\tGlobalVue = global.Vue;\n}\nif (GlobalVue) {\n\tGlobalVue.use(plugin);\n}\n\n// To allow use as module (npm/webpack/etc.) export component\nexport default component;\n```\n\nNotice the first line directly imports your SFC, and the last line exports it unchanged. As indicated by the comments in the rest of the code, the wrapper provides an `install` function for Vue, then attempts to detect Vue and automatically install the component. With 90% of the work done, it's time to sprint to the finish!\n\n### How do I configure the Rollup build?\n\nWith the package.json `scripts` section ready and the SFC wrapper in place, all that is left is to ensure Rollup is properly configured. Fortunately, this can be done with a small 16 line rollup.config.js file:\n\n```js\nimport vue from 'rollup-plugin-vue'; // Handle .vue SFC files\nimport buble from 'rollup-plugin-buble'; // Transpile/polyfill with reasonable browser support\nexport default {\n    input: 'build/wrapper.js', // Path relative to package.json\n    output: {\n        name: 'MyComponent',\n        exports: 'named',\n    },\n    plugins: [\n        vue({\n            css: true, // Dynamically inject css as a <style> tag\n            compileTemplate: true, // Explicitly convert template to render function\n        }),\n        buble(), // Transpile to ES5\n    ],\n};\n```\n\nThis sample config file contains the minimum settings to package your SFC for npm. There is room for customization, such as extracting CSS to a separate file, using a CSS preprocessor, uglifying the JS output, etc.\n\nAlso, it is worth noting the `name` given the component here. This is a PascalCase name that the component will be given, and should correspond with the kebab-case name used elsewhere throughout this recipe.\n\n### Will this replace my current development process?\n\nThe configuration here is not meant to replace the development process that you currently use. If you currently have a webpack setup with hot module reloading (HMR), keep using it! If you're starting from scratch, feel free to install [Vue CLI 3](https://github.com/vuejs/vue-cli/), which will give you the whole HMR experience config free:\n\n```bash\nvue serve --open src/my-component.vue\n```\n\nIn other words, do all of your development in whatever way you are comfortable. The things outlined in this recipe are more like 'finishing touches' than a full dev process.\n\n## When to Avoid this Pattern\n\nPackaging SFCs in this manner might not be a good idea in certain scenarios. This recipe doesn't go into detail on how the components themselves are written. Some components might provide side effects like directives, or extend other libraries with additional functionality. In those cases, you will need to evaluate whether or not the changes required to this recipe are too extensive.\n\nIn addition, pay attention to any dependencies that your SFC might have. For example, if you require a third party library for sorting or communication with an API, Rollup might roll those packages into the final code if not properly configured. To continue using this recipe, you would need to configure Rollup to exclude those files from the output, then update your documentation to inform your users about these dependencies.\n\n## Alternative Patterns\n\nAt the time this recipe was written, Vue CLI 3 was itself in beta. This version of the CLI comes with a built-in `library` build mode, which creates CommonJS and UMD versions of a component. This might be adequate for your use cases, though you will still need to make sure your package.json file points to `main` and `unpkg` properly. Also, there will be no ES6 `module` output unless that capability is added to the CLI before its release or via plugin.\n\n## Acknowledgements\n\nThis recipe is the result of a lightning talk given by [Mike Dodge](https://twitter.com/mgdodgeycode) at VueConf.us in March 2018. He has published a utility to npm which will quickly scaffold a sample SFC using this recipe. You can download the utility, [vue-sfc-rollup](https://www.npmjs.com/package/vue-sfc-rollup), from npm. You can also [clone the repo](https://github.com/team-innovation/vue-sfc-rollup) and customize it.\n","source":"v2/cookbook/packaging-sfc-for-npm.md","raw":"---\ntitle: Packaging Vue Components for npm\ntype: cookbook\norder: 12\n---\n\n## Base Example\n\nVue components by nature are meant to be re-used. This is easy when the component is only used within a single application. But how can you write a component once and use it in multiple sites/applications? Perhaps the easiest solution is via npm.\n\nBy packaging your component to be shared via npm, it can be imported/required into a build process for use in full-fledged web applications:\n\n```js\nimport MyComponent from 'my-component';\n\nexport default {\n  components: {\n    MyComponent,\n  },\n  // rest of the component\n}\n```\n\nOr even used via `<script>` tag in the browser directly:\n\n```html\n  <script src=\"https://unpkg.com/vue\"></script>\n  <script src=\"https://unpkg.com/my-component\"></script>\n  ...\n  <my-component></my-component>\n  ...\n```\n\nNot only does this help you avoid copy/pasting components around, but it also allows you to give back to the Vue community!\n\n## Can't I Just Share `.vue` Files Directly?\n\nVue already allows components to be written as a single file. Because a Single File Component (SFC) is already just one file, you might ask:\n\n> \"Why can't people use my `.vue` file directly? Isn't that the simplest way to share components?\"\n\nIt's true, you can share `.vue` files directly, and anyone using a [Vue build](https://vuejs.org/v2/guide/installation.html#Explanation-of-Different-Builds) containing the Vue compiler can consume it immediately. Also, the SSR build uses string concatenation as an optimization, so the `.vue` file might be preferred in this scenario (see [Packaging Components for npm > SSR Usage](#SSR-Usage) for details). However, this excludes anyone who wishes to use the component directly in a browser via `<script>` tag, anyone who uses a runtime-only build, or build processes which don't understand what to do with `.vue` files.\n\nProperly packaging your SFC for distribution via npm enables your component to be shared in a way which is ready to use everywhere!\n\n## Packaging Components for npm\n\nFor the purposes of this section, assume the following file structure:\n\n```\npackage.json\nbuild/\n   rollup.config.json\nsrc/\n   wrapper.js\n   my-component.vue\ndist/\n```\n\n<p class=\"tip\">Throughout this document, references are made to the package.json file listed above. The file used in these examples was generated by hand, and will include the minimum configuration required for the discussion/task at hand. It is likely your own package.json file will contain a lot more than is listed here.</p>\n\n### How does npm know which version to serve to a browser/build process?\n\nThe package.json file used by npm really only requires one version (`main`), but as it turns out, we aren't limited to that. We can address the most common use cases by specifying 2 additional versions (`module` and `unpkg`), and provide access to the `.vue` file itself using the `browser` field. A sample package.json would look like this:\n\n```json\n{\n  \"name\": \"my-component\",\n  \"version\": \"1.2.3\",\n  \"main\": \"dist/my-component.umd.js\",\n  \"module\": \"dist/my-component.esm.js\",\n  \"unpkg\": \"dist/my-component.min.js\",\n  \"browser\": {\n    \"./sfc\": \"src/my-component.vue\"\n  },\n  ...\n}\n```\n\nWhen webpack 2+, Rollup, or other modern build tools are used, they will pick up on the `module` build. Legacy applications would use the `main` build, and the `unpkg` build can be used directly in browsers. In fact, the [unpkg](https://unpkg.com) cdn automatically uses this when someone enters the URL for your module into their service!\n\n### SSR Usage\n\nYou might have noticed something interesting - browsers aren't going to be using the `browser` version. That's because this field is actually intended to allow authors to provide [hints to bundlers](https://github.com/defunctzombie/package-browser-field-spec#spec) which in turn create their own packages for client side use. With a little creativity, this field allows us to map an alias to the `.vue` file itself. For example:\n\n```js\nimport MyComponent from 'my-component/sfc'; // Note the '/sfc'\n```\n\nCompatible bundlers see the `browser` definition in package.json and translate requests for `my-component/sfc` into `my-component/src/my-component.vue`, resulting in the original `.vue` file being used instead. Now the SSR process can use the string concatenation optimizations it needs to for a boost in performance.\n\n<p class=\"tip\">Note: When using `.vue` components directly, pay attention to any type of pre-processing required by `script` and `style` tags. These dependencies will be passed on to users. Consider providing 'plain' SFCs to keep things as light as possible.</p>\n\n### How do I make multiple versions of my component?\n\nThere is no need to write your module multiple times. It is possible to prepare all 3 versions of your module in one step, in a matter of seconds. The example here uses [Rollup](https://rollupjs.org) due to its minimal configuration, but similar configuration is possible with other build tools - more details on this decision can be found [here](https://medium.com/webpack/webpack-and-rollup-the-same-but-different-a41ad427058c). The package.json `scripts` section can be updated with a single entry for each build target, and a more generic `build` script that runs them all in one pass. The sample package.json file now looks like this:\n\n```json\n{\n  \"name\": \"my-component\",\n  \"version\": \"1.2.3\",\n  \"main\": \"dist/my-component.umd.js\",\n  \"module\": \"dist/my-component.esm.js\",\n  \"unpkg\": \"dist/my-component.min.js\",\n  \"browser\": {\n    \"./sfc\": \"src/my-component.vue\"\n  },\n  \"scripts\": {\n    \"build\": \"npm run build:umd & npm run build:es & npm run build:unpkg\",\n    \"build:umd\": \"rollup --config build/rollup.config.js --format umd --file dist/my-component.umd.js\",\n    \"build:es\": \"rollup --config build/rollup.config.js --format es --file dist/my-component.esm.js\",\n    \"build:unpkg\": \"rollup --config build/rollup.config.js --format iife --file dist/my-component.min.js\"\n  },\n  \"devDependencies\": {\n    \"rollup\": \"^0.57.1\",\n    \"rollup-plugin-buble\": \"^0.19.2\",\n    \"rollup-plugin-vue\": \"^3.0.0\",\n    \"vue\": \"^2.5.16\",\n    \"vue-template-compiler\": \"^2.5.16\",\n    ...\n  },\n  ...\n}\n```\n\n<p class=\"tip\">Remember, if you have an existing package.json file, it will likely contain a lot more than this one does. This merely illustrates a starting point. Also, the <i>packages</i> listed in devDependencies (not their versions) are the minimum requirements for rollup to create the three separate builds (umd, es, and unpkg) mentioned. As newer versions become available, they should be updated as necessary.</p>\n\nOur changes to package.json are complete. Next, we need a small wrapper to export/auto-install the actual SFC, plus a mimimal Rollup configuration, and we're set!\n\n### What does my packaged component look like?\n\nDepending on how your component is being used, it needs to be exposed as either a [CommonJS/UMD](https://medium.freecodecamp.org/javascript-modules-a-beginner-s-guide-783f7d7a5fcc#c33a) javascript module, an [ES6 javascript](https://medium.freecodecamp.org/javascript-modules-a-beginner-s-guide-783f7d7a5fcc#4f5e) module, or in the case of a `<script>` tag, it will be automatically loaded into Vue via `Vue.use(...)` so it's immediately available to the page. This is accomplished by a simple wrapper.js file which handles the module export and auto-install. That wrapper, in its entirety, looks like this:\n\n```js\n// Import vue component\nimport component from './my-component.vue';\n\n// Declare install function executed by Vue.use()\nexport function install(Vue) {\n\tif (install.installed) return;\n\tinstall.installed = true;\n\tVue.component('MyComponent', component);\n}\n\n// Create module definition for Vue.use()\nconst plugin = {\n\tinstall,\n};\n\n// Auto-install when vue is found (eg. in browser via <script> tag)\nlet GlobalVue = null;\nif (typeof window !== 'undefined') {\n\tGlobalVue = window.Vue;\n} else if (typeof global !== 'undefined') {\n\tGlobalVue = global.Vue;\n}\nif (GlobalVue) {\n\tGlobalVue.use(plugin);\n}\n\n// To allow use as module (npm/webpack/etc.) export component\nexport default component;\n```\n\nNotice the first line directly imports your SFC, and the last line exports it unchanged. As indicated by the comments in the rest of the code, the wrapper provides an `install` function for Vue, then attempts to detect Vue and automatically install the component. With 90% of the work done, it's time to sprint to the finish!\n\n### How do I configure the Rollup build?\n\nWith the package.json `scripts` section ready and the SFC wrapper in place, all that is left is to ensure Rollup is properly configured. Fortunately, this can be done with a small 16 line rollup.config.js file:\n\n```js\nimport vue from 'rollup-plugin-vue'; // Handle .vue SFC files\nimport buble from 'rollup-plugin-buble'; // Transpile/polyfill with reasonable browser support\nexport default {\n    input: 'build/wrapper.js', // Path relative to package.json\n    output: {\n        name: 'MyComponent',\n        exports: 'named',\n    },\n    plugins: [\n        vue({\n            css: true, // Dynamically inject css as a <style> tag\n            compileTemplate: true, // Explicitly convert template to render function\n        }),\n        buble(), // Transpile to ES5\n    ],\n};\n```\n\nThis sample config file contains the minimum settings to package your SFC for npm. There is room for customization, such as extracting CSS to a separate file, using a CSS preprocessor, uglifying the JS output, etc.\n\nAlso, it is worth noting the `name` given the component here. This is a PascalCase name that the component will be given, and should correspond with the kebab-case name used elsewhere throughout this recipe.\n\n### Will this replace my current development process?\n\nThe configuration here is not meant to replace the development process that you currently use. If you currently have a webpack setup with hot module reloading (HMR), keep using it! If you're starting from scratch, feel free to install [Vue CLI 3](https://github.com/vuejs/vue-cli/), which will give you the whole HMR experience config free:\n\n```bash\nvue serve --open src/my-component.vue\n```\n\nIn other words, do all of your development in whatever way you are comfortable. The things outlined in this recipe are more like 'finishing touches' than a full dev process.\n\n## When to Avoid this Pattern\n\nPackaging SFCs in this manner might not be a good idea in certain scenarios. This recipe doesn't go into detail on how the components themselves are written. Some components might provide side effects like directives, or extend other libraries with additional functionality. In those cases, you will need to evaluate whether or not the changes required to this recipe are too extensive.\n\nIn addition, pay attention to any dependencies that your SFC might have. For example, if you require a third party library for sorting or communication with an API, Rollup might roll those packages into the final code if not properly configured. To continue using this recipe, you would need to configure Rollup to exclude those files from the output, then update your documentation to inform your users about these dependencies.\n\n## Alternative Patterns\n\nAt the time this recipe was written, Vue CLI 3 was itself in beta. This version of the CLI comes with a built-in `library` build mode, which creates CommonJS and UMD versions of a component. This might be adequate for your use cases, though you will still need to make sure your package.json file points to `main` and `unpkg` properly. Also, there will be no ES6 `module` output unless that capability is added to the CLI before its release or via plugin.\n\n## Acknowledgements\n\nThis recipe is the result of a lightning talk given by [Mike Dodge](https://twitter.com/mgdodgeycode) at VueConf.us in March 2018. He has published a utility to npm which will quickly scaffold a sample SFC using this recipe. You can download the utility, [vue-sfc-rollup](https://www.npmjs.com/package/vue-sfc-rollup), from npm. You can also [clone the repo](https://github.com/team-innovation/vue-sfc-rollup) and customize it.\n","date":"2018-07-19T04:04:16.859Z","updated":"2018-07-19T04:04:16.859Z","path":"v2/cookbook/packaging-sfc-for-npm.html","comments":1,"layout":"page","_id":"cjk0zidox0012vkrt7u82hkuv","content":"<h2 id=\"Base-Example\"><a href=\"#Base-Example\" class=\"headerlink\" title=\"Base Example\"></a>Base Example</h2><p>Vue components by nature are meant to be re-used. This is easy when the component is only used within a single application. But how can you write a component once and use it in multiple sites/applications? Perhaps the easiest solution is via npm.</p>\n<p>By packaging your component to be shared via npm, it can be imported/required into a build process for use in full-fledged web applications:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> MyComponent <span class=\"keyword\">from</span> <span class=\"string\">'my-component'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  components: &#123;</span><br><span class=\"line\">    MyComponent,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">// rest of the component</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Or even used via <code>&lt;script&gt;</code> tag in the browser directly:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://unpkg.com/vue\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://unpkg.com/my-component\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">my-component</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">my-component</span>&gt;</span></span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<p>Not only does this help you avoid copy/pasting components around, but it also allows you to give back to the Vue community!</p>\n<h2 id=\"Can’t-I-Just-Share-vue-Files-Directly\"><a href=\"#Can’t-I-Just-Share-vue-Files-Directly\" class=\"headerlink\" title=\"Can’t I Just Share .vue Files Directly?\"></a>Can’t I Just Share <code>.vue</code> Files Directly?</h2><p>Vue already allows components to be written as a single file. Because a Single File Component (SFC) is already just one file, you might ask:</p>\n<blockquote>\n<p>“Why can’t people use my <code>.vue</code> file directly? Isn’t that the simplest way to share components?”</p>\n</blockquote>\n<p>It’s true, you can share <code>.vue</code> files directly, and anyone using a <a href=\"https://vuejs.org/v2/guide/installation.html#Explanation-of-Different-Builds\">Vue build</a> containing the Vue compiler can consume it immediately. Also, the SSR build uses string concatenation as an optimization, so the <code>.vue</code> file might be preferred in this scenario (see <a href=\"#SSR-Usage\">Packaging Components for npm &gt; SSR Usage</a> for details). However, this excludes anyone who wishes to use the component directly in a browser via <code>&lt;script&gt;</code> tag, anyone who uses a runtime-only build, or build processes which don’t understand what to do with <code>.vue</code> files.</p>\n<p>Properly packaging your SFC for distribution via npm enables your component to be shared in a way which is ready to use everywhere!</p>\n<h2 id=\"Packaging-Components-for-npm\"><a href=\"#Packaging-Components-for-npm\" class=\"headerlink\" title=\"Packaging Components for npm\"></a>Packaging Components for npm</h2><p>For the purposes of this section, assume the following file structure:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">package.json</span><br><span class=\"line\">build/</span><br><span class=\"line\">   rollup.config.json</span><br><span class=\"line\">src/</span><br><span class=\"line\">   wrapper.js</span><br><span class=\"line\">   my-component.vue</span><br><span class=\"line\">dist/</span><br></pre></td></tr></table></figure>\n<p class=\"tip\">Throughout this document, references are made to the package.json file listed above. The file used in these examples was generated by hand, and will include the minimum configuration required for the discussion/task at hand. It is likely your own package.json file will contain a lot more than is listed here.</p>\n\n<h3 id=\"How-does-npm-know-which-version-to-serve-to-a-browser-build-process\"><a href=\"#How-does-npm-know-which-version-to-serve-to-a-browser-build-process\" class=\"headerlink\" title=\"How does npm know which version to serve to a browser/build process?\"></a>How does npm know which version to serve to a browser/build process?</h3><p>The package.json file used by npm really only requires one version (<code>main</code>), but as it turns out, we aren’t limited to that. We can address the most common use cases by specifying 2 additional versions (<code>module</code> and <code>unpkg</code>), and provide access to the <code>.vue</code> file itself using the <code>browser</code> field. A sample package.json would look like this:</p>\n<figure class=\"highlight\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"my-component\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"version\"</span>: <span class=\"string\">\"1.2.3\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"main\"</span>: <span class=\"string\">\"dist/my-component.umd.js\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"module\"</span>: <span class=\"string\">\"dist/my-component.esm.js\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"unpkg\"</span>: <span class=\"string\">\"dist/my-component.min.js\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"browser\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"./sfc\"</span>: <span class=\"string\">\"src/my-component.vue\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>When webpack 2+, Rollup, or other modern build tools are used, they will pick up on the <code>module</code> build. Legacy applications would use the <code>main</code> build, and the <code>unpkg</code> build can be used directly in browsers. In fact, the <a href=\"https://unpkg.com\" target=\"_blank\" rel=\"noopener\">unpkg</a> cdn automatically uses this when someone enters the URL for your module into their service!</p>\n<h3 id=\"SSR-Usage\"><a href=\"#SSR-Usage\" class=\"headerlink\" title=\"SSR Usage\"></a>SSR Usage</h3><p>You might have noticed something interesting - browsers aren’t going to be using the <code>browser</code> version. That’s because this field is actually intended to allow authors to provide <a href=\"https://github.com/defunctzombie/package-browser-field-spec#spec\" target=\"_blank\" rel=\"noopener\">hints to bundlers</a> which in turn create their own packages for client side use. With a little creativity, this field allows us to map an alias to the <code>.vue</code> file itself. For example:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> MyComponent <span class=\"keyword\">from</span> <span class=\"string\">'my-component/sfc'</span>; <span class=\"comment\">// Note the '/sfc'</span></span><br></pre></td></tr></table></figure>\n<p>Compatible bundlers see the <code>browser</code> definition in package.json and translate requests for <code>my-component/sfc</code> into <code>my-component/src/my-component.vue</code>, resulting in the original <code>.vue</code> file being used instead. Now the SSR process can use the string concatenation optimizations it needs to for a boost in performance.</p>\n<p class=\"tip\">Note: When using <code>.vue</code> components directly, pay attention to any type of pre-processing required by <code>script</code> and <code>style</code> tags. These dependencies will be passed on to users. Consider providing ‘plain’ SFCs to keep things as light as possible.</p>\n\n<h3 id=\"How-do-I-make-multiple-versions-of-my-component\"><a href=\"#How-do-I-make-multiple-versions-of-my-component\" class=\"headerlink\" title=\"How do I make multiple versions of my component?\"></a>How do I make multiple versions of my component?</h3><p>There is no need to write your module multiple times. It is possible to prepare all 3 versions of your module in one step, in a matter of seconds. The example here uses <a href=\"https://rollupjs.org\" target=\"_blank\" rel=\"noopener\">Rollup</a> due to its minimal configuration, but similar configuration is possible with other build tools - more details on this decision can be found <a href=\"https://medium.com/webpack/webpack-and-rollup-the-same-but-different-a41ad427058c\" target=\"_blank\" rel=\"noopener\">here</a>. The package.json <code>scripts</code> section can be updated with a single entry for each build target, and a more generic <code>build</code> script that runs them all in one pass. The sample package.json file now looks like this:</p>\n<figure class=\"highlight\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"my-component\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"version\"</span>: <span class=\"string\">\"1.2.3\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"main\"</span>: <span class=\"string\">\"dist/my-component.umd.js\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"module\"</span>: <span class=\"string\">\"dist/my-component.esm.js\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"unpkg\"</span>: <span class=\"string\">\"dist/my-component.min.js\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"browser\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"./sfc\"</span>: <span class=\"string\">\"src/my-component.vue\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">\"scripts\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"build\"</span>: <span class=\"string\">\"npm run build:umd &amp; npm run build:es &amp; npm run build:unpkg\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"build:umd\"</span>: <span class=\"string\">\"rollup --config build/rollup.config.js --format umd --file dist/my-component.umd.js\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"build:es\"</span>: <span class=\"string\">\"rollup --config build/rollup.config.js --format es --file dist/my-component.esm.js\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"build:unpkg\"</span>: <span class=\"string\">\"rollup --config build/rollup.config.js --format iife --file dist/my-component.min.js\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">\"devDependencies\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"rollup\"</span>: <span class=\"string\">\"^0.57.1\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"rollup-plugin-buble\"</span>: <span class=\"string\">\"^0.19.2\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"rollup-plugin-vue\"</span>: <span class=\"string\">\"^3.0.0\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"vue\"</span>: <span class=\"string\">\"^2.5.16\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"vue-template-compiler\"</span>: <span class=\"string\">\"^2.5.16\"</span>,</span><br><span class=\"line\">    ...</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p class=\"tip\">Remember, if you have an existing package.json file, it will likely contain a lot more than this one does. This merely illustrates a starting point. Also, the <i>packages</i> listed in devDependencies (not their versions) are the minimum requirements for rollup to create the three separate builds (umd, es, and unpkg) mentioned. As newer versions become available, they should be updated as necessary.</p>\n\n<p>Our changes to package.json are complete. Next, we need a small wrapper to export/auto-install the actual SFC, plus a mimimal Rollup configuration, and we’re set!</p>\n<h3 id=\"What-does-my-packaged-component-look-like\"><a href=\"#What-does-my-packaged-component-look-like\" class=\"headerlink\" title=\"What does my packaged component look like?\"></a>What does my packaged component look like?</h3><p>Depending on how your component is being used, it needs to be exposed as either a <a href=\"https://medium.freecodecamp.org/javascript-modules-a-beginner-s-guide-783f7d7a5fcc#c33a\" target=\"_blank\" rel=\"noopener\">CommonJS/UMD</a> javascript module, an <a href=\"https://medium.freecodecamp.org/javascript-modules-a-beginner-s-guide-783f7d7a5fcc#4f5e\" target=\"_blank\" rel=\"noopener\">ES6 javascript</a> module, or in the case of a <code>&lt;script&gt;</code> tag, it will be automatically loaded into Vue via <code>Vue.use(...)</code> so it’s immediately available to the page. This is accomplished by a simple wrapper.js file which handles the module export and auto-install. That wrapper, in its entirety, looks like this:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Import vue component</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> component <span class=\"keyword\">from</span> <span class=\"string\">'./my-component.vue'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Declare install function executed by Vue.use()</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">install</span>(<span class=\"params\">Vue</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (install.installed) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">\tinstall.installed = <span class=\"literal\">true</span>;</span><br><span class=\"line\">\tVue.component(<span class=\"string\">'MyComponent'</span>, component);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Create module definition for Vue.use()</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> plugin = &#123;</span><br><span class=\"line\">\tinstall,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Auto-install when vue is found (eg. in browser via &lt;script&gt; tag)</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> GlobalVue = <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> <span class=\"built_in\">window</span> !== <span class=\"string\">'undefined'</span>) &#123;</span><br><span class=\"line\">\tGlobalVue = <span class=\"built_in\">window</span>.Vue;</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> global !== <span class=\"string\">'undefined'</span>) &#123;</span><br><span class=\"line\">\tGlobalVue = global.Vue;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (GlobalVue) &#123;</span><br><span class=\"line\">\tGlobalVue.use(plugin);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// To allow use as module (npm/webpack/etc.) export component</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> component;</span><br></pre></td></tr></table></figure>\n<p>Notice the first line directly imports your SFC, and the last line exports it unchanged. As indicated by the comments in the rest of the code, the wrapper provides an <code>install</code> function for Vue, then attempts to detect Vue and automatically install the component. With 90% of the work done, it’s time to sprint to the finish!</p>\n<h3 id=\"How-do-I-configure-the-Rollup-build\"><a href=\"#How-do-I-configure-the-Rollup-build\" class=\"headerlink\" title=\"How do I configure the Rollup build?\"></a>How do I configure the Rollup build?</h3><p>With the package.json <code>scripts</code> section ready and the SFC wrapper in place, all that is left is to ensure Rollup is properly configured. Fortunately, this can be done with a small 16 line rollup.config.js file:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> vue <span class=\"keyword\">from</span> <span class=\"string\">'rollup-plugin-vue'</span>; <span class=\"comment\">// Handle .vue SFC files</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> buble <span class=\"keyword\">from</span> <span class=\"string\">'rollup-plugin-buble'</span>; <span class=\"comment\">// Transpile/polyfill with reasonable browser support</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">    input: <span class=\"string\">'build/wrapper.js'</span>, <span class=\"comment\">// Path relative to package.json</span></span><br><span class=\"line\">    output: &#123;</span><br><span class=\"line\">        name: <span class=\"string\">'MyComponent'</span>,</span><br><span class=\"line\">        exports: <span class=\"string\">'named'</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    plugins: [</span><br><span class=\"line\">        vue(&#123;</span><br><span class=\"line\">            css: <span class=\"literal\">true</span>, <span class=\"comment\">// Dynamically inject css as a &lt;style&gt; tag</span></span><br><span class=\"line\">            compileTemplate: <span class=\"literal\">true</span>, <span class=\"comment\">// Explicitly convert template to render function</span></span><br><span class=\"line\">        &#125;),</span><br><span class=\"line\">        buble(), <span class=\"comment\">// Transpile to ES5</span></span><br><span class=\"line\">    ],</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>This sample config file contains the minimum settings to package your SFC for npm. There is room for customization, such as extracting CSS to a separate file, using a CSS preprocessor, uglifying the JS output, etc.</p>\n<p>Also, it is worth noting the <code>name</code> given the component here. This is a PascalCase name that the component will be given, and should correspond with the kebab-case name used elsewhere throughout this recipe.</p>\n<h3 id=\"Will-this-replace-my-current-development-process\"><a href=\"#Will-this-replace-my-current-development-process\" class=\"headerlink\" title=\"Will this replace my current development process?\"></a>Will this replace my current development process?</h3><p>The configuration here is not meant to replace the development process that you currently use. If you currently have a webpack setup with hot module reloading (HMR), keep using it! If you’re starting from scratch, feel free to install <a href=\"https://github.com/vuejs/vue-cli/\" target=\"_blank\" rel=\"noopener\">Vue CLI 3</a>, which will give you the whole HMR experience config free:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">vue serve --open src/my-component.vue</span><br></pre></td></tr></table></figure>\n<p>In other words, do all of your development in whatever way you are comfortable. The things outlined in this recipe are more like ‘finishing touches’ than a full dev process.</p>\n<h2 id=\"When-to-Avoid-this-Pattern\"><a href=\"#When-to-Avoid-this-Pattern\" class=\"headerlink\" title=\"When to Avoid this Pattern\"></a>When to Avoid this Pattern</h2><p>Packaging SFCs in this manner might not be a good idea in certain scenarios. This recipe doesn’t go into detail on how the components themselves are written. Some components might provide side effects like directives, or extend other libraries with additional functionality. In those cases, you will need to evaluate whether or not the changes required to this recipe are too extensive.</p>\n<p>In addition, pay attention to any dependencies that your SFC might have. For example, if you require a third party library for sorting or communication with an API, Rollup might roll those packages into the final code if not properly configured. To continue using this recipe, you would need to configure Rollup to exclude those files from the output, then update your documentation to inform your users about these dependencies.</p>\n<h2 id=\"Alternative-Patterns\"><a href=\"#Alternative-Patterns\" class=\"headerlink\" title=\"Alternative Patterns\"></a>Alternative Patterns</h2><p>At the time this recipe was written, Vue CLI 3 was itself in beta. This version of the CLI comes with a built-in <code>library</code> build mode, which creates CommonJS and UMD versions of a component. This might be adequate for your use cases, though you will still need to make sure your package.json file points to <code>main</code> and <code>unpkg</code> properly. Also, there will be no ES6 <code>module</code> output unless that capability is added to the CLI before its release or via plugin.</p>\n<h2 id=\"Acknowledgements\"><a href=\"#Acknowledgements\" class=\"headerlink\" title=\"Acknowledgements\"></a>Acknowledgements</h2><p>This recipe is the result of a lightning talk given by <a href=\"https://twitter.com/mgdodgeycode\" target=\"_blank\" rel=\"noopener\">Mike Dodge</a> at VueConf.us in March 2018. He has published a utility to npm which will quickly scaffold a sample SFC using this recipe. You can download the utility, <a href=\"https://www.npmjs.com/package/vue-sfc-rollup\" target=\"_blank\" rel=\"noopener\">vue-sfc-rollup</a>, from npm. You can also <a href=\"https://github.com/team-innovation/vue-sfc-rollup\" target=\"_blank\" rel=\"noopener\">clone the repo</a> and customize it.</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Base-Example\"><a href=\"#Base-Example\" class=\"headerlink\" title=\"Base Example\"></a>Base Example</h2><p>Vue components by nature are meant to be re-used. This is easy when the component is only used within a single application. But how can you write a component once and use it in multiple sites/applications? Perhaps the easiest solution is via npm.</p>\n<p>By packaging your component to be shared via npm, it can be imported/required into a build process for use in full-fledged web applications:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> MyComponent <span class=\"keyword\">from</span> <span class=\"string\">'my-component'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  components: &#123;</span><br><span class=\"line\">    MyComponent,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">// rest of the component</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Or even used via <code>&lt;script&gt;</code> tag in the browser directly:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://unpkg.com/vue\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://unpkg.com/my-component\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">my-component</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">my-component</span>&gt;</span></span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<p>Not only does this help you avoid copy/pasting components around, but it also allows you to give back to the Vue community!</p>\n<h2 id=\"Can’t-I-Just-Share-vue-Files-Directly\"><a href=\"#Can’t-I-Just-Share-vue-Files-Directly\" class=\"headerlink\" title=\"Can’t I Just Share .vue Files Directly?\"></a>Can’t I Just Share <code>.vue</code> Files Directly?</h2><p>Vue already allows components to be written as a single file. Because a Single File Component (SFC) is already just one file, you might ask:</p>\n<blockquote>\n<p>“Why can’t people use my <code>.vue</code> file directly? Isn’t that the simplest way to share components?”</p>\n</blockquote>\n<p>It’s true, you can share <code>.vue</code> files directly, and anyone using a <a href=\"https://vuejs.org/v2/guide/installation.html#Explanation-of-Different-Builds\">Vue build</a> containing the Vue compiler can consume it immediately. Also, the SSR build uses string concatenation as an optimization, so the <code>.vue</code> file might be preferred in this scenario (see <a href=\"#SSR-Usage\">Packaging Components for npm &gt; SSR Usage</a> for details). However, this excludes anyone who wishes to use the component directly in a browser via <code>&lt;script&gt;</code> tag, anyone who uses a runtime-only build, or build processes which don’t understand what to do with <code>.vue</code> files.</p>\n<p>Properly packaging your SFC for distribution via npm enables your component to be shared in a way which is ready to use everywhere!</p>\n<h2 id=\"Packaging-Components-for-npm\"><a href=\"#Packaging-Components-for-npm\" class=\"headerlink\" title=\"Packaging Components for npm\"></a>Packaging Components for npm</h2><p>For the purposes of this section, assume the following file structure:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">package.json</span><br><span class=\"line\">build/</span><br><span class=\"line\">   rollup.config.json</span><br><span class=\"line\">src/</span><br><span class=\"line\">   wrapper.js</span><br><span class=\"line\">   my-component.vue</span><br><span class=\"line\">dist/</span><br></pre></td></tr></table></figure>\n<p class=\"tip\">Throughout this document, references are made to the package.json file listed above. The file used in these examples was generated by hand, and will include the minimum configuration required for the discussion/task at hand. It is likely your own package.json file will contain a lot more than is listed here.</p>\n\n<h3 id=\"How-does-npm-know-which-version-to-serve-to-a-browser-build-process\"><a href=\"#How-does-npm-know-which-version-to-serve-to-a-browser-build-process\" class=\"headerlink\" title=\"How does npm know which version to serve to a browser/build process?\"></a>How does npm know which version to serve to a browser/build process?</h3><p>The package.json file used by npm really only requires one version (<code>main</code>), but as it turns out, we aren’t limited to that. We can address the most common use cases by specifying 2 additional versions (<code>module</code> and <code>unpkg</code>), and provide access to the <code>.vue</code> file itself using the <code>browser</code> field. A sample package.json would look like this:</p>\n<figure class=\"highlight\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"my-component\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"version\"</span>: <span class=\"string\">\"1.2.3\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"main\"</span>: <span class=\"string\">\"dist/my-component.umd.js\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"module\"</span>: <span class=\"string\">\"dist/my-component.esm.js\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"unpkg\"</span>: <span class=\"string\">\"dist/my-component.min.js\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"browser\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"./sfc\"</span>: <span class=\"string\">\"src/my-component.vue\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>When webpack 2+, Rollup, or other modern build tools are used, they will pick up on the <code>module</code> build. Legacy applications would use the <code>main</code> build, and the <code>unpkg</code> build can be used directly in browsers. In fact, the <a href=\"https://unpkg.com\" target=\"_blank\" rel=\"noopener\">unpkg</a> cdn automatically uses this when someone enters the URL for your module into their service!</p>\n<h3 id=\"SSR-Usage\"><a href=\"#SSR-Usage\" class=\"headerlink\" title=\"SSR Usage\"></a>SSR Usage</h3><p>You might have noticed something interesting - browsers aren’t going to be using the <code>browser</code> version. That’s because this field is actually intended to allow authors to provide <a href=\"https://github.com/defunctzombie/package-browser-field-spec#spec\" target=\"_blank\" rel=\"noopener\">hints to bundlers</a> which in turn create their own packages for client side use. With a little creativity, this field allows us to map an alias to the <code>.vue</code> file itself. For example:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> MyComponent <span class=\"keyword\">from</span> <span class=\"string\">'my-component/sfc'</span>; <span class=\"comment\">// Note the '/sfc'</span></span><br></pre></td></tr></table></figure>\n<p>Compatible bundlers see the <code>browser</code> definition in package.json and translate requests for <code>my-component/sfc</code> into <code>my-component/src/my-component.vue</code>, resulting in the original <code>.vue</code> file being used instead. Now the SSR process can use the string concatenation optimizations it needs to for a boost in performance.</p>\n<p class=\"tip\">Note: When using <code>.vue</code> components directly, pay attention to any type of pre-processing required by <code>script</code> and <code>style</code> tags. These dependencies will be passed on to users. Consider providing ‘plain’ SFCs to keep things as light as possible.</p>\n\n<h3 id=\"How-do-I-make-multiple-versions-of-my-component\"><a href=\"#How-do-I-make-multiple-versions-of-my-component\" class=\"headerlink\" title=\"How do I make multiple versions of my component?\"></a>How do I make multiple versions of my component?</h3><p>There is no need to write your module multiple times. It is possible to prepare all 3 versions of your module in one step, in a matter of seconds. The example here uses <a href=\"https://rollupjs.org\" target=\"_blank\" rel=\"noopener\">Rollup</a> due to its minimal configuration, but similar configuration is possible with other build tools - more details on this decision can be found <a href=\"https://medium.com/webpack/webpack-and-rollup-the-same-but-different-a41ad427058c\" target=\"_blank\" rel=\"noopener\">here</a>. The package.json <code>scripts</code> section can be updated with a single entry for each build target, and a more generic <code>build</code> script that runs them all in one pass. The sample package.json file now looks like this:</p>\n<figure class=\"highlight\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"my-component\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"version\"</span>: <span class=\"string\">\"1.2.3\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"main\"</span>: <span class=\"string\">\"dist/my-component.umd.js\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"module\"</span>: <span class=\"string\">\"dist/my-component.esm.js\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"unpkg\"</span>: <span class=\"string\">\"dist/my-component.min.js\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"browser\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"./sfc\"</span>: <span class=\"string\">\"src/my-component.vue\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">\"scripts\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"build\"</span>: <span class=\"string\">\"npm run build:umd &amp; npm run build:es &amp; npm run build:unpkg\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"build:umd\"</span>: <span class=\"string\">\"rollup --config build/rollup.config.js --format umd --file dist/my-component.umd.js\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"build:es\"</span>: <span class=\"string\">\"rollup --config build/rollup.config.js --format es --file dist/my-component.esm.js\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"build:unpkg\"</span>: <span class=\"string\">\"rollup --config build/rollup.config.js --format iife --file dist/my-component.min.js\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">\"devDependencies\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"rollup\"</span>: <span class=\"string\">\"^0.57.1\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"rollup-plugin-buble\"</span>: <span class=\"string\">\"^0.19.2\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"rollup-plugin-vue\"</span>: <span class=\"string\">\"^3.0.0\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"vue\"</span>: <span class=\"string\">\"^2.5.16\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"vue-template-compiler\"</span>: <span class=\"string\">\"^2.5.16\"</span>,</span><br><span class=\"line\">    ...</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p class=\"tip\">Remember, if you have an existing package.json file, it will likely contain a lot more than this one does. This merely illustrates a starting point. Also, the <i>packages</i> listed in devDependencies (not their versions) are the minimum requirements for rollup to create the three separate builds (umd, es, and unpkg) mentioned. As newer versions become available, they should be updated as necessary.</p>\n\n<p>Our changes to package.json are complete. Next, we need a small wrapper to export/auto-install the actual SFC, plus a mimimal Rollup configuration, and we’re set!</p>\n<h3 id=\"What-does-my-packaged-component-look-like\"><a href=\"#What-does-my-packaged-component-look-like\" class=\"headerlink\" title=\"What does my packaged component look like?\"></a>What does my packaged component look like?</h3><p>Depending on how your component is being used, it needs to be exposed as either a <a href=\"https://medium.freecodecamp.org/javascript-modules-a-beginner-s-guide-783f7d7a5fcc#c33a\" target=\"_blank\" rel=\"noopener\">CommonJS/UMD</a> javascript module, an <a href=\"https://medium.freecodecamp.org/javascript-modules-a-beginner-s-guide-783f7d7a5fcc#4f5e\" target=\"_blank\" rel=\"noopener\">ES6 javascript</a> module, or in the case of a <code>&lt;script&gt;</code> tag, it will be automatically loaded into Vue via <code>Vue.use(...)</code> so it’s immediately available to the page. This is accomplished by a simple wrapper.js file which handles the module export and auto-install. That wrapper, in its entirety, looks like this:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Import vue component</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> component <span class=\"keyword\">from</span> <span class=\"string\">'./my-component.vue'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Declare install function executed by Vue.use()</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">install</span>(<span class=\"params\">Vue</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (install.installed) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">\tinstall.installed = <span class=\"literal\">true</span>;</span><br><span class=\"line\">\tVue.component(<span class=\"string\">'MyComponent'</span>, component);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Create module definition for Vue.use()</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> plugin = &#123;</span><br><span class=\"line\">\tinstall,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Auto-install when vue is found (eg. in browser via &lt;script&gt; tag)</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> GlobalVue = <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> <span class=\"built_in\">window</span> !== <span class=\"string\">'undefined'</span>) &#123;</span><br><span class=\"line\">\tGlobalVue = <span class=\"built_in\">window</span>.Vue;</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> global !== <span class=\"string\">'undefined'</span>) &#123;</span><br><span class=\"line\">\tGlobalVue = global.Vue;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (GlobalVue) &#123;</span><br><span class=\"line\">\tGlobalVue.use(plugin);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// To allow use as module (npm/webpack/etc.) export component</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> component;</span><br></pre></td></tr></table></figure>\n<p>Notice the first line directly imports your SFC, and the last line exports it unchanged. As indicated by the comments in the rest of the code, the wrapper provides an <code>install</code> function for Vue, then attempts to detect Vue and automatically install the component. With 90% of the work done, it’s time to sprint to the finish!</p>\n<h3 id=\"How-do-I-configure-the-Rollup-build\"><a href=\"#How-do-I-configure-the-Rollup-build\" class=\"headerlink\" title=\"How do I configure the Rollup build?\"></a>How do I configure the Rollup build?</h3><p>With the package.json <code>scripts</code> section ready and the SFC wrapper in place, all that is left is to ensure Rollup is properly configured. Fortunately, this can be done with a small 16 line rollup.config.js file:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> vue <span class=\"keyword\">from</span> <span class=\"string\">'rollup-plugin-vue'</span>; <span class=\"comment\">// Handle .vue SFC files</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> buble <span class=\"keyword\">from</span> <span class=\"string\">'rollup-plugin-buble'</span>; <span class=\"comment\">// Transpile/polyfill with reasonable browser support</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">    input: <span class=\"string\">'build/wrapper.js'</span>, <span class=\"comment\">// Path relative to package.json</span></span><br><span class=\"line\">    output: &#123;</span><br><span class=\"line\">        name: <span class=\"string\">'MyComponent'</span>,</span><br><span class=\"line\">        exports: <span class=\"string\">'named'</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    plugins: [</span><br><span class=\"line\">        vue(&#123;</span><br><span class=\"line\">            css: <span class=\"literal\">true</span>, <span class=\"comment\">// Dynamically inject css as a &lt;style&gt; tag</span></span><br><span class=\"line\">            compileTemplate: <span class=\"literal\">true</span>, <span class=\"comment\">// Explicitly convert template to render function</span></span><br><span class=\"line\">        &#125;),</span><br><span class=\"line\">        buble(), <span class=\"comment\">// Transpile to ES5</span></span><br><span class=\"line\">    ],</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>This sample config file contains the minimum settings to package your SFC for npm. There is room for customization, such as extracting CSS to a separate file, using a CSS preprocessor, uglifying the JS output, etc.</p>\n<p>Also, it is worth noting the <code>name</code> given the component here. This is a PascalCase name that the component will be given, and should correspond with the kebab-case name used elsewhere throughout this recipe.</p>\n<h3 id=\"Will-this-replace-my-current-development-process\"><a href=\"#Will-this-replace-my-current-development-process\" class=\"headerlink\" title=\"Will this replace my current development process?\"></a>Will this replace my current development process?</h3><p>The configuration here is not meant to replace the development process that you currently use. If you currently have a webpack setup with hot module reloading (HMR), keep using it! If you’re starting from scratch, feel free to install <a href=\"https://github.com/vuejs/vue-cli/\" target=\"_blank\" rel=\"noopener\">Vue CLI 3</a>, which will give you the whole HMR experience config free:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">vue serve --open src/my-component.vue</span><br></pre></td></tr></table></figure>\n<p>In other words, do all of your development in whatever way you are comfortable. The things outlined in this recipe are more like ‘finishing touches’ than a full dev process.</p>\n<h2 id=\"When-to-Avoid-this-Pattern\"><a href=\"#When-to-Avoid-this-Pattern\" class=\"headerlink\" title=\"When to Avoid this Pattern\"></a>When to Avoid this Pattern</h2><p>Packaging SFCs in this manner might not be a good idea in certain scenarios. This recipe doesn’t go into detail on how the components themselves are written. Some components might provide side effects like directives, or extend other libraries with additional functionality. In those cases, you will need to evaluate whether or not the changes required to this recipe are too extensive.</p>\n<p>In addition, pay attention to any dependencies that your SFC might have. For example, if you require a third party library for sorting or communication with an API, Rollup might roll those packages into the final code if not properly configured. To continue using this recipe, you would need to configure Rollup to exclude those files from the output, then update your documentation to inform your users about these dependencies.</p>\n<h2 id=\"Alternative-Patterns\"><a href=\"#Alternative-Patterns\" class=\"headerlink\" title=\"Alternative Patterns\"></a>Alternative Patterns</h2><p>At the time this recipe was written, Vue CLI 3 was itself in beta. This version of the CLI comes with a built-in <code>library</code> build mode, which creates CommonJS and UMD versions of a component. This might be adequate for your use cases, though you will still need to make sure your package.json file points to <code>main</code> and <code>unpkg</code> properly. Also, there will be no ES6 <code>module</code> output unless that capability is added to the CLI before its release or via plugin.</p>\n<h2 id=\"Acknowledgements\"><a href=\"#Acknowledgements\" class=\"headerlink\" title=\"Acknowledgements\"></a>Acknowledgements</h2><p>This recipe is the result of a lightning talk given by <a href=\"https://twitter.com/mgdodgeycode\" target=\"_blank\" rel=\"noopener\">Mike Dodge</a> at VueConf.us in March 2018. He has published a utility to npm which will quickly scaffold a sample SFC using this recipe. You can download the utility, <a href=\"https://www.npmjs.com/package/vue-sfc-rollup\" target=\"_blank\" rel=\"noopener\">vue-sfc-rollup</a>, from npm. You can also <a href=\"https://github.com/team-innovation/vue-sfc-rollup\" target=\"_blank\" rel=\"noopener\">clone the repo</a> and customize it.</p>\n"},{"title":"Create a CMS-Powered Blog","type":"cookbook","order":5,"_content":"\nSo you've just launched your Vue.js website, congrats! Now you want to add a blog that quickly plugs into your website and you don't want to have to spin up a whole server just to host a Wordpress instance (or any DB-powered CMS for that matter). You want to just be able to add a few Vue.js blog components and some routes and have it all just work, right? What you're looking for is a blog that's powered entirely by API's you can consume directly from your Vue.js application. This tutorial will teach you how to do just that, let's dive in!\n\nWe're going to quickly build a CMS-powered blog with Vue.js. It uses [ButterCMS](https://buttercms.com/), an API-first CMS that lets you manage content using the ButterCMS dashboard and integrate our content API into your Vue.js app. You can use ButterCMS for new or existing Vue.js projects.\n \n![Butter Dashboard](https://user-images.githubusercontent.com/160873/36677285-648798e4-1ad3-11e8-9454-d22fca8280b7.png \"Butter Dashboard\")\n\n## Install\n\nRun this in your commandline:\n\n`npm install buttercms --save`\n\nButter can also be loaded using a CDN: \n\n`<script src=\"https://cdnjs.buttercms.com/buttercms-1.1.0.min.js\"></script>`\n\n## Quickstart\n\nSet your API token:\n\n`var butter = require('buttercms')('your_api_token');`\n\nUsing ES6:\n\n```javascript\nimport Butter from 'buttercms';\nconst butter = Butter('your_api_token');\n```\n\nUsing CDN: \n\n```html\n<script src=\"https://cdnjs.buttercms.com/buttercms-1.1.0.min.js\"></script>\n<script>\n  var butter = Butter('your_api_token');\n</script>\n```\n \nImport this file into any component you want to use ButterCMS. Then from the console run:\n \n```javascript\nbutter.post.list({page: 1, page_size: 10}).then(function(response) {\n  console.log(response)\n})\n```\n\nThis API request fetches your blog posts. Your account comes with one example post which you'll see in the response.\n\n## Display posts\n\nTo display posts we create a `/blog` route (using Vue Router) in our app and fetch blog posts from the Butter API, as well as a `/blog/:slug` route to handle individual posts. \n\nSee the ButterCMS [API reference](https://buttercms.com/docs/api/?javascript#blog-posts) for additional options such as filtering by category or author. The response also includes some metadata we'll use for pagination.\n\n`router/index.js:`\n\n```javascript\nimport Vue from 'vue'\nimport Router from 'vue-router'\nimport BlogHome from '@/components/BlogHome'\nimport BlogPost from '@/components/BlogPost'\n\nVue.use(Router)\n\nexport default new Router({\n  mode: 'history',\n  routes: [\n    {\n      path: '/blog/',\n      name: 'blog-home',\n      component: BlogHome\n    },\n    {\n      path: '/blog/:slug',\n      name: 'blog-post',\n      component: BlogPost\n    }\n  ]\n})\n```\n\nThen create `components/BlogHome.vue` which will be your blog homepage that lists your most recent posts.\n\n```html\n<script>\n  import { butter } from '@/buttercms'\n  export default {\n    name: 'blog-home',\n    data() {\n      return {\n        page_title: 'Blog',\n        posts: []\n      }\n    },\n    methods: {\n      getPosts() {\n        butter.post.list({\n          page: 1,\n          page_size: 10\n        }).then((res) => {\n          this.posts = res.data.data\n        })\n      }\n    },\n    created() {\n      this.getPosts()\n    }\n  }\n</script>\n\n<template>\n  <div id=\"blog-home\">\n      <h1>{{ page_title }}</h1>\n      <!-- Create `v-for` and apply a `key` for Vue. Here we are using a combination of the slug and index. -->\n      <div v-for=\"(post,index) in posts\" :key=\"post.slug + '_' + index\">\n        <router-link :to=\"'/blog/' + post.slug\">\n          <article class=\"media\">\n            <figure>\n              <!-- Bind results using a `:` -->\n              <!-- Use a `v-if`/`else` if their is a `featured_image` -->\n              <img v-if=\"post.featured_image\" :src=\"post.featured_image\" alt=\"\">\n              <img v-else src=\"http://via.placeholder.com/250x250\" alt=\"\">\n            </figure>\n            <h2>{{ post.title }}</h2>\n            <p>{{ post.summary }}</p>\n          </article>\n        </router-link>\n      </div>\n  </div>\n</template>\n```\n\nHere's what it looks like (note we added CSS from https://bulma.io/ for quick styling):\n\n![buttercms-bloglist](https://user-images.githubusercontent.com/160873/36868500-1b22e374-1d5e-11e8-82a0-20c8dc312716.png)\n\nNow create `components/BlogPost.vue` which will be your Blog Post page to list a single post.\n\n```html\n<script>\n  import { butter } from '@/buttercms'\n  export default {\n    name: 'blog-post',\n    data() {\n      return {\n        post: {}\n      }\n    },\n    methods: {\n      getPost() {\n        butter.post.retrieve(this.$route.params.slug)\n          .then((res) => {\n            this.post = res.data\n          }).catch((res) => {\n            console.log(res)\n          })\n      }\n    },\n    created() {\n      this.getPost()\n    }\n  }\n</script>\n\n<template>\n  <div id=\"blog-post\">\n    <h1>{{ post.data.title }}</h1>\n    <h4>{{ post.data.author.first_name }} {{ post.data.author.last_name }}</h4>\n    <div v-html=\"post.data.body\"></div>\n\n    <router-link v-if=\"post.meta.previous_post\" :to=\"/blog/ + post.meta.previous_post.slug\" class=\"button\">\n      {{ post.meta.previous_post.title }}\n    </router-link>\n    <router-link v-if=\"post.meta.next_post\" :to=\"/blog/ + post.meta.next_post.slug\" class=\"button\">\n      {{ post.meta.next_post.title }}\n    </router-link>\n  </div>\n</template>\n```\n\nHere's a preview:\n\n![buttercms-blogdetail](https://user-images.githubusercontent.com/160873/36868506-218c86b6-1d5e-11e8-8691-0409d91366d6.png)\n\nNow our app is pulling all blog posts and we can navigate to individual posts. However, our next/previous post buttons are not working.\n\nOne thing to note when using routes with params is that when the user navigates from `/blog/foo` to `/blog/bar`, the same component instance will be reused. Since both routes render the same component, this is more efficient than destroying the old instance and then creating a new one. \n\n<p class=\"tip\">Be aware, that using the component this way will mean that the lifecycle hooks of the component will not be called. Visit the Vue Router's docs to learn more about [Dynamic Route Matching](https://router.vuejs.org/en/essentials/dynamic-matching.html)</p>\n\nTo fix this we need to watch the `$route` object and call `getPost()` when the route changes.\n\nUpdated `<script>` section in `components/BlogPost.vue`:\n\n```html\n<script>\n  import { butter } from '@/buttercms'\n  export default {\n    name: 'blog-post',\n    data() {\n      return {\n        post: {}\n      }\n    },\n    methods: {\n      getPost() {\n        butter.post.retrieve(this.$route.params.slug)\n          .then((res) => {\n            // console.log(res.data)\n            this.post = res.data\n          }).catch((res) => {\n            console.log(res)\n          })\n      }\n    },\n    watch: {\n      $route(to, from) {\n        this.getPost()\n      }\n    },\n    created() {\n      this.getPost()\n    }\n  }\n</script>\n```\n\nNow your app has a working blog that can be updated easily in the ButterCMS dashboard.\n\n## Categories, Tags, and Authors\n\nUse Butter's APIs for categories, tags, and authors to feature and filter content on your blog.\n\nSee the ButterCMS API reference for more information about these objects:\n\n* [Categories](https://buttercms.com/docs/api/?ruby#categories)\n* [Tags](https://buttercms.com/docs/api/?ruby#tags)\n* [Authors](https://buttercms.com/docs/api/?ruby#authors)\n\nHere's an example of listing all categories and getting posts by category. Call these methods on the `created()` lifecycle hook:\n\n```javascript\nmethods: {\n  ...\n  getCategories() {\n    butter.category.list()\n      .then((res) => {\n        console.log('List of Categories:')\n        console.log(res.data.data)\n      })\n  },\n  getPostsByCategory() {\n    butter.category.retrieve('example-category', {\n        include: 'recent_posts'\n      })\n      .then((res) => {\n        console.log('Posts with specific category:')\n        console.log(res)\n      })\n  }\n},\ncreated() {\n  ...\n  this.getCategories()\n  this.getPostsByCategory()\n}\n```\n\n## Alternative Patterns\n\nAn alternative pattern to consider, especially if you prefer writing only in Markdown, is using something like [Nuxtent](https://nuxtent.now.sh/guide/writing#async-components). Nuxtent allows you to use `Vue Component` inside of Markdown files. This approach would be akin to a static site approach (i.e. Jekyll) where you compose your blog posts in Markdown files. Nuxtent adds a nice integration between Vue.js and Markdown allowing you to live in a 100% Vue.js world.\n\n## Wrap up\n\nThat's it! You now have a fully functional CMS-powered blog running in your app. We hope this tutorial was helpful and made your development experience with Vue.js even more enjoyable :)\n","source":"v2/cookbook/serverless-blog.md","raw":"---\ntitle: Create a CMS-Powered Blog\ntype: cookbook\norder: 5\n---\n\nSo you've just launched your Vue.js website, congrats! Now you want to add a blog that quickly plugs into your website and you don't want to have to spin up a whole server just to host a Wordpress instance (or any DB-powered CMS for that matter). You want to just be able to add a few Vue.js blog components and some routes and have it all just work, right? What you're looking for is a blog that's powered entirely by API's you can consume directly from your Vue.js application. This tutorial will teach you how to do just that, let's dive in!\n\nWe're going to quickly build a CMS-powered blog with Vue.js. It uses [ButterCMS](https://buttercms.com/), an API-first CMS that lets you manage content using the ButterCMS dashboard and integrate our content API into your Vue.js app. You can use ButterCMS for new or existing Vue.js projects.\n \n![Butter Dashboard](https://user-images.githubusercontent.com/160873/36677285-648798e4-1ad3-11e8-9454-d22fca8280b7.png \"Butter Dashboard\")\n\n## Install\n\nRun this in your commandline:\n\n`npm install buttercms --save`\n\nButter can also be loaded using a CDN: \n\n`<script src=\"https://cdnjs.buttercms.com/buttercms-1.1.0.min.js\"></script>`\n\n## Quickstart\n\nSet your API token:\n\n`var butter = require('buttercms')('your_api_token');`\n\nUsing ES6:\n\n```javascript\nimport Butter from 'buttercms';\nconst butter = Butter('your_api_token');\n```\n\nUsing CDN: \n\n```html\n<script src=\"https://cdnjs.buttercms.com/buttercms-1.1.0.min.js\"></script>\n<script>\n  var butter = Butter('your_api_token');\n</script>\n```\n \nImport this file into any component you want to use ButterCMS. Then from the console run:\n \n```javascript\nbutter.post.list({page: 1, page_size: 10}).then(function(response) {\n  console.log(response)\n})\n```\n\nThis API request fetches your blog posts. Your account comes with one example post which you'll see in the response.\n\n## Display posts\n\nTo display posts we create a `/blog` route (using Vue Router) in our app and fetch blog posts from the Butter API, as well as a `/blog/:slug` route to handle individual posts. \n\nSee the ButterCMS [API reference](https://buttercms.com/docs/api/?javascript#blog-posts) for additional options such as filtering by category or author. The response also includes some metadata we'll use for pagination.\n\n`router/index.js:`\n\n```javascript\nimport Vue from 'vue'\nimport Router from 'vue-router'\nimport BlogHome from '@/components/BlogHome'\nimport BlogPost from '@/components/BlogPost'\n\nVue.use(Router)\n\nexport default new Router({\n  mode: 'history',\n  routes: [\n    {\n      path: '/blog/',\n      name: 'blog-home',\n      component: BlogHome\n    },\n    {\n      path: '/blog/:slug',\n      name: 'blog-post',\n      component: BlogPost\n    }\n  ]\n})\n```\n\nThen create `components/BlogHome.vue` which will be your blog homepage that lists your most recent posts.\n\n```html\n<script>\n  import { butter } from '@/buttercms'\n  export default {\n    name: 'blog-home',\n    data() {\n      return {\n        page_title: 'Blog',\n        posts: []\n      }\n    },\n    methods: {\n      getPosts() {\n        butter.post.list({\n          page: 1,\n          page_size: 10\n        }).then((res) => {\n          this.posts = res.data.data\n        })\n      }\n    },\n    created() {\n      this.getPosts()\n    }\n  }\n</script>\n\n<template>\n  <div id=\"blog-home\">\n      <h1>{{ page_title }}</h1>\n      <!-- Create `v-for` and apply a `key` for Vue. Here we are using a combination of the slug and index. -->\n      <div v-for=\"(post,index) in posts\" :key=\"post.slug + '_' + index\">\n        <router-link :to=\"'/blog/' + post.slug\">\n          <article class=\"media\">\n            <figure>\n              <!-- Bind results using a `:` -->\n              <!-- Use a `v-if`/`else` if their is a `featured_image` -->\n              <img v-if=\"post.featured_image\" :src=\"post.featured_image\" alt=\"\">\n              <img v-else src=\"http://via.placeholder.com/250x250\" alt=\"\">\n            </figure>\n            <h2>{{ post.title }}</h2>\n            <p>{{ post.summary }}</p>\n          </article>\n        </router-link>\n      </div>\n  </div>\n</template>\n```\n\nHere's what it looks like (note we added CSS from https://bulma.io/ for quick styling):\n\n![buttercms-bloglist](https://user-images.githubusercontent.com/160873/36868500-1b22e374-1d5e-11e8-82a0-20c8dc312716.png)\n\nNow create `components/BlogPost.vue` which will be your Blog Post page to list a single post.\n\n```html\n<script>\n  import { butter } from '@/buttercms'\n  export default {\n    name: 'blog-post',\n    data() {\n      return {\n        post: {}\n      }\n    },\n    methods: {\n      getPost() {\n        butter.post.retrieve(this.$route.params.slug)\n          .then((res) => {\n            this.post = res.data\n          }).catch((res) => {\n            console.log(res)\n          })\n      }\n    },\n    created() {\n      this.getPost()\n    }\n  }\n</script>\n\n<template>\n  <div id=\"blog-post\">\n    <h1>{{ post.data.title }}</h1>\n    <h4>{{ post.data.author.first_name }} {{ post.data.author.last_name }}</h4>\n    <div v-html=\"post.data.body\"></div>\n\n    <router-link v-if=\"post.meta.previous_post\" :to=\"/blog/ + post.meta.previous_post.slug\" class=\"button\">\n      {{ post.meta.previous_post.title }}\n    </router-link>\n    <router-link v-if=\"post.meta.next_post\" :to=\"/blog/ + post.meta.next_post.slug\" class=\"button\">\n      {{ post.meta.next_post.title }}\n    </router-link>\n  </div>\n</template>\n```\n\nHere's a preview:\n\n![buttercms-blogdetail](https://user-images.githubusercontent.com/160873/36868506-218c86b6-1d5e-11e8-8691-0409d91366d6.png)\n\nNow our app is pulling all blog posts and we can navigate to individual posts. However, our next/previous post buttons are not working.\n\nOne thing to note when using routes with params is that when the user navigates from `/blog/foo` to `/blog/bar`, the same component instance will be reused. Since both routes render the same component, this is more efficient than destroying the old instance and then creating a new one. \n\n<p class=\"tip\">Be aware, that using the component this way will mean that the lifecycle hooks of the component will not be called. Visit the Vue Router's docs to learn more about [Dynamic Route Matching](https://router.vuejs.org/en/essentials/dynamic-matching.html)</p>\n\nTo fix this we need to watch the `$route` object and call `getPost()` when the route changes.\n\nUpdated `<script>` section in `components/BlogPost.vue`:\n\n```html\n<script>\n  import { butter } from '@/buttercms'\n  export default {\n    name: 'blog-post',\n    data() {\n      return {\n        post: {}\n      }\n    },\n    methods: {\n      getPost() {\n        butter.post.retrieve(this.$route.params.slug)\n          .then((res) => {\n            // console.log(res.data)\n            this.post = res.data\n          }).catch((res) => {\n            console.log(res)\n          })\n      }\n    },\n    watch: {\n      $route(to, from) {\n        this.getPost()\n      }\n    },\n    created() {\n      this.getPost()\n    }\n  }\n</script>\n```\n\nNow your app has a working blog that can be updated easily in the ButterCMS dashboard.\n\n## Categories, Tags, and Authors\n\nUse Butter's APIs for categories, tags, and authors to feature and filter content on your blog.\n\nSee the ButterCMS API reference for more information about these objects:\n\n* [Categories](https://buttercms.com/docs/api/?ruby#categories)\n* [Tags](https://buttercms.com/docs/api/?ruby#tags)\n* [Authors](https://buttercms.com/docs/api/?ruby#authors)\n\nHere's an example of listing all categories and getting posts by category. Call these methods on the `created()` lifecycle hook:\n\n```javascript\nmethods: {\n  ...\n  getCategories() {\n    butter.category.list()\n      .then((res) => {\n        console.log('List of Categories:')\n        console.log(res.data.data)\n      })\n  },\n  getPostsByCategory() {\n    butter.category.retrieve('example-category', {\n        include: 'recent_posts'\n      })\n      .then((res) => {\n        console.log('Posts with specific category:')\n        console.log(res)\n      })\n  }\n},\ncreated() {\n  ...\n  this.getCategories()\n  this.getPostsByCategory()\n}\n```\n\n## Alternative Patterns\n\nAn alternative pattern to consider, especially if you prefer writing only in Markdown, is using something like [Nuxtent](https://nuxtent.now.sh/guide/writing#async-components). Nuxtent allows you to use `Vue Component` inside of Markdown files. This approach would be akin to a static site approach (i.e. Jekyll) where you compose your blog posts in Markdown files. Nuxtent adds a nice integration between Vue.js and Markdown allowing you to live in a 100% Vue.js world.\n\n## Wrap up\n\nThat's it! You now have a fully functional CMS-powered blog running in your app. We hope this tutorial was helpful and made your development experience with Vue.js even more enjoyable :)\n","date":"2018-07-19T04:04:16.860Z","updated":"2018-07-19T04:04:16.860Z","path":"v2/cookbook/serverless-blog.html","comments":1,"layout":"page","_id":"cjk0zidoy0013vkrt0bzpzmct","content":"<p>So you’ve just launched your Vue.js website, congrats! Now you want to add a blog that quickly plugs into your website and you don’t want to have to spin up a whole server just to host a Wordpress instance (or any DB-powered CMS for that matter). You want to just be able to add a few Vue.js blog components and some routes and have it all just work, right? What you’re looking for is a blog that’s powered entirely by API’s you can consume directly from your Vue.js application. This tutorial will teach you how to do just that, let’s dive in!</p>\n<p>We’re going to quickly build a CMS-powered blog with Vue.js. It uses <a href=\"https://buttercms.com/\" target=\"_blank\" rel=\"noopener\">ButterCMS</a>, an API-first CMS that lets you manage content using the ButterCMS dashboard and integrate our content API into your Vue.js app. You can use ButterCMS for new or existing Vue.js projects.</p>\n<p><img src=\"https://user-images.githubusercontent.com/160873/36677285-648798e4-1ad3-11e8-9454-d22fca8280b7.png\" alt=\"Butter Dashboard\" title=\"Butter Dashboard\"></p>\n<h2 id=\"Install\"><a href=\"#Install\" class=\"headerlink\" title=\"Install\"></a>Install</h2><p>Run this in your commandline:</p>\n<p><code>npm install buttercms --save</code></p>\n<p>Butter can also be loaded using a CDN: </p>\n<p><code>&lt;script src=&quot;https://cdnjs.buttercms.com/buttercms-1.1.0.min.js&quot;&gt;&lt;/script&gt;</code></p>\n<h2 id=\"Quickstart\"><a href=\"#Quickstart\" class=\"headerlink\" title=\"Quickstart\"></a>Quickstart</h2><p>Set your API token:</p>\n<p><code>var butter = require(&#39;buttercms&#39;)(&#39;your_api_token&#39;);</code></p>\n<p>Using ES6:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Butter <span class=\"keyword\">from</span> <span class=\"string\">'buttercms'</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> butter = Butter(<span class=\"string\">'your_api_token'</span>);</span><br></pre></td></tr></table></figure>\n<p>Using CDN: </p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://cdnjs.buttercms.com/buttercms-1.1.0.min.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">var</span> butter = Butter(<span class=\"string\">'your_api_token'</span>);</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>Import this file into any component you want to use ButterCMS. Then from the console run:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">butter.post.list(&#123;<span class=\"attr\">page</span>: <span class=\"number\">1</span>, <span class=\"attr\">page_size</span>: <span class=\"number\">10</span>&#125;).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">response</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(response)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>This API request fetches your blog posts. Your account comes with one example post which you’ll see in the response.</p>\n<h2 id=\"Display-posts\"><a href=\"#Display-posts\" class=\"headerlink\" title=\"Display posts\"></a>Display posts</h2><p>To display posts we create a <code>/blog</code> route (using Vue Router) in our app and fetch blog posts from the Butter API, as well as a <code>/blog/:slug</code> route to handle individual posts. </p>\n<p>See the ButterCMS <a href=\"https://buttercms.com/docs/api/?javascript#blog-posts\" target=\"_blank\" rel=\"noopener\">API reference</a> for additional options such as filtering by category or author. The response also includes some metadata we’ll use for pagination.</p>\n<p><code>router/index.js:</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">'vue'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> Router <span class=\"keyword\">from</span> <span class=\"string\">'vue-router'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> BlogHome <span class=\"keyword\">from</span> <span class=\"string\">'@/components/BlogHome'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> BlogPost <span class=\"keyword\">from</span> <span class=\"string\">'@/components/BlogPost'</span></span><br><span class=\"line\"></span><br><span class=\"line\">Vue.use(Router)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">new</span> Router(&#123;</span><br><span class=\"line\">  mode: <span class=\"string\">'history'</span>,</span><br><span class=\"line\">  routes: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      path: <span class=\"string\">'/blog/'</span>,</span><br><span class=\"line\">      name: <span class=\"string\">'blog-home'</span>,</span><br><span class=\"line\">      component: BlogHome</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      path: <span class=\"string\">'/blog/:slug'</span>,</span><br><span class=\"line\">      name: <span class=\"string\">'blog-post'</span>,</span><br><span class=\"line\">      component: BlogPost</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>Then create <code>components/BlogHome.vue</code> which will be your blog homepage that lists your most recent posts.</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">import</span> &#123; butter &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@/buttercms'</span></span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    name: <span class=\"string\">'blog-home'</span>,</span></span><br><span class=\"line\"><span class=\"undefined\">    data() &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        page_title: <span class=\"string\">'Blog'</span>,</span></span><br><span class=\"line\"><span class=\"undefined\">        posts: []</span></span><br><span class=\"line\"><span class=\"undefined\">      &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">    methods: &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">      getPosts() &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">        butter.post.list(&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">          page: 1,</span></span><br><span class=\"line\"><span class=\"undefined\">          page_size: 10</span></span><br><span class=\"line\"><span class=\"javascript\">        &#125;).then(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">          <span class=\"keyword\">this</span>.posts = res.data.data</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;)</span></span><br><span class=\"line\"><span class=\"undefined\">      &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">    created() &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">this</span>.getPosts()</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">  &#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"blog-home\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>&#123;&#123; page_title &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">      <span class=\"comment\">&lt;!-- Create `v-for` and apply a `key` for Vue. Here we are using a combination of the slug and index. --&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"(post,index) in posts\"</span> <span class=\"attr\">:key</span>=<span class=\"string\">\"post.slug + '_' + index\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">router-link</span> <span class=\"attr\">:to</span>=<span class=\"string\">\"'/blog/' + post.slug\"</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">article</span> <span class=\"attr\">class</span>=<span class=\"string\">\"media\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">figure</span>&gt;</span></span><br><span class=\"line\">              <span class=\"comment\">&lt;!-- Bind results using a `:` --&gt;</span></span><br><span class=\"line\">              <span class=\"comment\">&lt;!-- Use a `v-if`/`else` if their is a `featured_image` --&gt;</span></span><br><span class=\"line\">              <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">v-if</span>=<span class=\"string\">\"post.featured_image\"</span> <span class=\"attr\">:src</span>=<span class=\"string\">\"post.featured_image\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"\"</span>&gt;</span></span><br><span class=\"line\">              <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">v-else</span> <span class=\"attr\">src</span>=<span class=\"string\">\"http://via.placeholder.com/250x250\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">figure</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>&#123;&#123; post.title &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;&#123; post.summary &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;/<span class=\"name\">article</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">router-link</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>Here’s what it looks like (note we added CSS from <a href=\"https://bulma.io/\" target=\"_blank\" rel=\"noopener\">https://bulma.io/</a> for quick styling):</p>\n<p><img src=\"https://user-images.githubusercontent.com/160873/36868500-1b22e374-1d5e-11e8-82a0-20c8dc312716.png\" alt=\"buttercms-bloglist\"></p>\n<p>Now create <code>components/BlogPost.vue</code> which will be your Blog Post page to list a single post.</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">import</span> &#123; butter &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@/buttercms'</span></span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    name: <span class=\"string\">'blog-post'</span>,</span></span><br><span class=\"line\"><span class=\"undefined\">    data() &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">        post: &#123;&#125;</span></span><br><span class=\"line\"><span class=\"undefined\">      &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">    methods: &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">      getPost() &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        butter.post.retrieve(<span class=\"keyword\">this</span>.$route.params.slug)</span></span><br><span class=\"line\"><span class=\"javascript\">          .then(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"keyword\">this</span>.post = res.data</span></span><br><span class=\"line\"><span class=\"javascript\">          &#125;).catch(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"built_in\">console</span>.log(res)</span></span><br><span class=\"line\"><span class=\"undefined\">          &#125;)</span></span><br><span class=\"line\"><span class=\"undefined\">      &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">    created() &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">this</span>.getPost()</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">  &#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"blog-post\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>&#123;&#123; post.data.title &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h4</span>&gt;</span>&#123;&#123; post.data.author.first_name &#125;&#125; &#123;&#123; post.data.author.last_name &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">h4</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-html</span>=<span class=\"string\">\"post.data.body\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">router-link</span> <span class=\"attr\">v-if</span>=<span class=\"string\">\"post.meta.previous_post\"</span> <span class=\"attr\">:to</span>=<span class=\"string\">\"/blog/ + post.meta.previous_post.slug\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"button\"</span>&gt;</span></span><br><span class=\"line\">      &#123;&#123; post.meta.previous_post.title &#125;&#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">router-link</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">router-link</span> <span class=\"attr\">v-if</span>=<span class=\"string\">\"post.meta.next_post\"</span> <span class=\"attr\">:to</span>=<span class=\"string\">\"/blog/ + post.meta.next_post.slug\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"button\"</span>&gt;</span></span><br><span class=\"line\">      &#123;&#123; post.meta.next_post.title &#125;&#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">router-link</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>Here’s a preview:</p>\n<p><img src=\"https://user-images.githubusercontent.com/160873/36868506-218c86b6-1d5e-11e8-8691-0409d91366d6.png\" alt=\"buttercms-blogdetail\"></p>\n<p>Now our app is pulling all blog posts and we can navigate to individual posts. However, our next/previous post buttons are not working.</p>\n<p>One thing to note when using routes with params is that when the user navigates from <code>/blog/foo</code> to <code>/blog/bar</code>, the same component instance will be reused. Since both routes render the same component, this is more efficient than destroying the old instance and then creating a new one. </p>\n<p class=\"tip\">Be aware, that using the component this way will mean that the lifecycle hooks of the component will not be called. Visit the Vue Router’s docs to learn more about <a href=\"https://router.vuejs.org/en/essentials/dynamic-matching.html\" target=\"_blank\" rel=\"noopener\">Dynamic Route Matching</a></p>\n\n<p>To fix this we need to watch the <code>$route</code> object and call <code>getPost()</code> when the route changes.</p>\n<p>Updated <code>&lt;script&gt;</code> section in <code>components/BlogPost.vue</code>:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">import</span> &#123; butter &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@/buttercms'</span></span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    name: <span class=\"string\">'blog-post'</span>,</span></span><br><span class=\"line\"><span class=\"undefined\">    data() &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">        post: &#123;&#125;</span></span><br><span class=\"line\"><span class=\"undefined\">      &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">    methods: &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">      getPost() &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        butter.post.retrieve(<span class=\"keyword\">this</span>.$route.params.slug)</span></span><br><span class=\"line\"><span class=\"javascript\">          .then(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"comment\">// console.log(res.data)</span></span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"keyword\">this</span>.post = res.data</span></span><br><span class=\"line\"><span class=\"javascript\">          &#125;).catch(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"built_in\">console</span>.log(res)</span></span><br><span class=\"line\"><span class=\"undefined\">          &#125;)</span></span><br><span class=\"line\"><span class=\"undefined\">      &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">    watch: &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      $route(to, <span class=\"keyword\">from</span>) &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">this</span>.getPost()</span></span><br><span class=\"line\"><span class=\"undefined\">      &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">    created() &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">this</span>.getPost()</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">  &#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>Now your app has a working blog that can be updated easily in the ButterCMS dashboard.</p>\n<h2 id=\"Categories-Tags-and-Authors\"><a href=\"#Categories-Tags-and-Authors\" class=\"headerlink\" title=\"Categories, Tags, and Authors\"></a>Categories, Tags, and Authors</h2><p>Use Butter’s APIs for categories, tags, and authors to feature and filter content on your blog.</p>\n<p>See the ButterCMS API reference for more information about these objects:</p>\n<ul>\n<li><a href=\"https://buttercms.com/docs/api/?ruby#categories\" target=\"_blank\" rel=\"noopener\">Categories</a></li>\n<li><a href=\"https://buttercms.com/docs/api/?ruby#tags\" target=\"_blank\" rel=\"noopener\">Tags</a></li>\n<li><a href=\"https://buttercms.com/docs/api/?ruby#authors\" target=\"_blank\" rel=\"noopener\">Authors</a></li>\n</ul>\n<p>Here’s an example of listing all categories and getting posts by category. Call these methods on the <code>created()</code> lifecycle hook:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">methods: &#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  getCategories() &#123;</span><br><span class=\"line\">    butter.category.list()</span><br><span class=\"line\">      .then(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'List of Categories:'</span>)</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(res.data.data)</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  getPostsByCategory() &#123;</span><br><span class=\"line\">    butter.category.retrieve(<span class=\"string\">'example-category'</span>, &#123;</span><br><span class=\"line\">        include: <span class=\"string\">'recent_posts'</span></span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">      .then(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Posts with specific category:'</span>)</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(res)</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">created() &#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.getCategories()</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.getPostsByCategory()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Alternative-Patterns\"><a href=\"#Alternative-Patterns\" class=\"headerlink\" title=\"Alternative Patterns\"></a>Alternative Patterns</h2><p>An alternative pattern to consider, especially if you prefer writing only in Markdown, is using something like <a href=\"https://nuxtent.now.sh/guide/writing#async-components\" target=\"_blank\" rel=\"noopener\">Nuxtent</a>. Nuxtent allows you to use <code>Vue Component</code> inside of Markdown files. This approach would be akin to a static site approach (i.e. Jekyll) where you compose your blog posts in Markdown files. Nuxtent adds a nice integration between Vue.js and Markdown allowing you to live in a 100% Vue.js world.</p>\n<h2 id=\"Wrap-up\"><a href=\"#Wrap-up\" class=\"headerlink\" title=\"Wrap up\"></a>Wrap up</h2><p>That’s it! You now have a fully functional CMS-powered blog running in your app. We hope this tutorial was helpful and made your development experience with Vue.js even more enjoyable :)</p>\n","site":{"data":{}},"excerpt":"","more":"<p>So you’ve just launched your Vue.js website, congrats! Now you want to add a blog that quickly plugs into your website and you don’t want to have to spin up a whole server just to host a Wordpress instance (or any DB-powered CMS for that matter). You want to just be able to add a few Vue.js blog components and some routes and have it all just work, right? What you’re looking for is a blog that’s powered entirely by API’s you can consume directly from your Vue.js application. This tutorial will teach you how to do just that, let’s dive in!</p>\n<p>We’re going to quickly build a CMS-powered blog with Vue.js. It uses <a href=\"https://buttercms.com/\" target=\"_blank\" rel=\"noopener\">ButterCMS</a>, an API-first CMS that lets you manage content using the ButterCMS dashboard and integrate our content API into your Vue.js app. You can use ButterCMS for new or existing Vue.js projects.</p>\n<p><img src=\"https://user-images.githubusercontent.com/160873/36677285-648798e4-1ad3-11e8-9454-d22fca8280b7.png\" alt=\"Butter Dashboard\" title=\"Butter Dashboard\"></p>\n<h2 id=\"Install\"><a href=\"#Install\" class=\"headerlink\" title=\"Install\"></a>Install</h2><p>Run this in your commandline:</p>\n<p><code>npm install buttercms --save</code></p>\n<p>Butter can also be loaded using a CDN: </p>\n<p><code>&lt;script src=&quot;https://cdnjs.buttercms.com/buttercms-1.1.0.min.js&quot;&gt;&lt;/script&gt;</code></p>\n<h2 id=\"Quickstart\"><a href=\"#Quickstart\" class=\"headerlink\" title=\"Quickstart\"></a>Quickstart</h2><p>Set your API token:</p>\n<p><code>var butter = require(&#39;buttercms&#39;)(&#39;your_api_token&#39;);</code></p>\n<p>Using ES6:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Butter <span class=\"keyword\">from</span> <span class=\"string\">'buttercms'</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> butter = Butter(<span class=\"string\">'your_api_token'</span>);</span><br></pre></td></tr></table></figure>\n<p>Using CDN: </p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://cdnjs.buttercms.com/buttercms-1.1.0.min.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">var</span> butter = Butter(<span class=\"string\">'your_api_token'</span>);</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>Import this file into any component you want to use ButterCMS. Then from the console run:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">butter.post.list(&#123;<span class=\"attr\">page</span>: <span class=\"number\">1</span>, <span class=\"attr\">page_size</span>: <span class=\"number\">10</span>&#125;).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">response</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(response)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>This API request fetches your blog posts. Your account comes with one example post which you’ll see in the response.</p>\n<h2 id=\"Display-posts\"><a href=\"#Display-posts\" class=\"headerlink\" title=\"Display posts\"></a>Display posts</h2><p>To display posts we create a <code>/blog</code> route (using Vue Router) in our app and fetch blog posts from the Butter API, as well as a <code>/blog/:slug</code> route to handle individual posts. </p>\n<p>See the ButterCMS <a href=\"https://buttercms.com/docs/api/?javascript#blog-posts\" target=\"_blank\" rel=\"noopener\">API reference</a> for additional options such as filtering by category or author. The response also includes some metadata we’ll use for pagination.</p>\n<p><code>router/index.js:</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">'vue'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> Router <span class=\"keyword\">from</span> <span class=\"string\">'vue-router'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> BlogHome <span class=\"keyword\">from</span> <span class=\"string\">'@/components/BlogHome'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> BlogPost <span class=\"keyword\">from</span> <span class=\"string\">'@/components/BlogPost'</span></span><br><span class=\"line\"></span><br><span class=\"line\">Vue.use(Router)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">new</span> Router(&#123;</span><br><span class=\"line\">  mode: <span class=\"string\">'history'</span>,</span><br><span class=\"line\">  routes: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      path: <span class=\"string\">'/blog/'</span>,</span><br><span class=\"line\">      name: <span class=\"string\">'blog-home'</span>,</span><br><span class=\"line\">      component: BlogHome</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      path: <span class=\"string\">'/blog/:slug'</span>,</span><br><span class=\"line\">      name: <span class=\"string\">'blog-post'</span>,</span><br><span class=\"line\">      component: BlogPost</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>Then create <code>components/BlogHome.vue</code> which will be your blog homepage that lists your most recent posts.</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">import</span> &#123; butter &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@/buttercms'</span></span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    name: <span class=\"string\">'blog-home'</span>,</span></span><br><span class=\"line\"><span class=\"undefined\">    data() &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        page_title: <span class=\"string\">'Blog'</span>,</span></span><br><span class=\"line\"><span class=\"undefined\">        posts: []</span></span><br><span class=\"line\"><span class=\"undefined\">      &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">    methods: &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">      getPosts() &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">        butter.post.list(&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">          page: 1,</span></span><br><span class=\"line\"><span class=\"undefined\">          page_size: 10</span></span><br><span class=\"line\"><span class=\"javascript\">        &#125;).then(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">          <span class=\"keyword\">this</span>.posts = res.data.data</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;)</span></span><br><span class=\"line\"><span class=\"undefined\">      &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">    created() &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">this</span>.getPosts()</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">  &#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"blog-home\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>&#123;&#123; page_title &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">      <span class=\"comment\">&lt;!-- Create `v-for` and apply a `key` for Vue. Here we are using a combination of the slug and index. --&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"(post,index) in posts\"</span> <span class=\"attr\">:key</span>=<span class=\"string\">\"post.slug + '_' + index\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">router-link</span> <span class=\"attr\">:to</span>=<span class=\"string\">\"'/blog/' + post.slug\"</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">article</span> <span class=\"attr\">class</span>=<span class=\"string\">\"media\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">figure</span>&gt;</span></span><br><span class=\"line\">              <span class=\"comment\">&lt;!-- Bind results using a `:` --&gt;</span></span><br><span class=\"line\">              <span class=\"comment\">&lt;!-- Use a `v-if`/`else` if their is a `featured_image` --&gt;</span></span><br><span class=\"line\">              <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">v-if</span>=<span class=\"string\">\"post.featured_image\"</span> <span class=\"attr\">:src</span>=<span class=\"string\">\"post.featured_image\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"\"</span>&gt;</span></span><br><span class=\"line\">              <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">v-else</span> <span class=\"attr\">src</span>=<span class=\"string\">\"http://via.placeholder.com/250x250\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">figure</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>&#123;&#123; post.title &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;&#123; post.summary &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;/<span class=\"name\">article</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">router-link</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>Here’s what it looks like (note we added CSS from <a href=\"https://bulma.io/\" target=\"_blank\" rel=\"noopener\">https://bulma.io/</a> for quick styling):</p>\n<p><img src=\"https://user-images.githubusercontent.com/160873/36868500-1b22e374-1d5e-11e8-82a0-20c8dc312716.png\" alt=\"buttercms-bloglist\"></p>\n<p>Now create <code>components/BlogPost.vue</code> which will be your Blog Post page to list a single post.</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">import</span> &#123; butter &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@/buttercms'</span></span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    name: <span class=\"string\">'blog-post'</span>,</span></span><br><span class=\"line\"><span class=\"undefined\">    data() &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">        post: &#123;&#125;</span></span><br><span class=\"line\"><span class=\"undefined\">      &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">    methods: &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">      getPost() &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        butter.post.retrieve(<span class=\"keyword\">this</span>.$route.params.slug)</span></span><br><span class=\"line\"><span class=\"javascript\">          .then(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"keyword\">this</span>.post = res.data</span></span><br><span class=\"line\"><span class=\"javascript\">          &#125;).catch(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"built_in\">console</span>.log(res)</span></span><br><span class=\"line\"><span class=\"undefined\">          &#125;)</span></span><br><span class=\"line\"><span class=\"undefined\">      &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">    created() &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">this</span>.getPost()</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">  &#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"blog-post\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>&#123;&#123; post.data.title &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h4</span>&gt;</span>&#123;&#123; post.data.author.first_name &#125;&#125; &#123;&#123; post.data.author.last_name &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">h4</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-html</span>=<span class=\"string\">\"post.data.body\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">router-link</span> <span class=\"attr\">v-if</span>=<span class=\"string\">\"post.meta.previous_post\"</span> <span class=\"attr\">:to</span>=<span class=\"string\">\"/blog/ + post.meta.previous_post.slug\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"button\"</span>&gt;</span></span><br><span class=\"line\">      &#123;&#123; post.meta.previous_post.title &#125;&#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">router-link</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">router-link</span> <span class=\"attr\">v-if</span>=<span class=\"string\">\"post.meta.next_post\"</span> <span class=\"attr\">:to</span>=<span class=\"string\">\"/blog/ + post.meta.next_post.slug\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"button\"</span>&gt;</span></span><br><span class=\"line\">      &#123;&#123; post.meta.next_post.title &#125;&#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">router-link</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>Here’s a preview:</p>\n<p><img src=\"https://user-images.githubusercontent.com/160873/36868506-218c86b6-1d5e-11e8-8691-0409d91366d6.png\" alt=\"buttercms-blogdetail\"></p>\n<p>Now our app is pulling all blog posts and we can navigate to individual posts. However, our next/previous post buttons are not working.</p>\n<p>One thing to note when using routes with params is that when the user navigates from <code>/blog/foo</code> to <code>/blog/bar</code>, the same component instance will be reused. Since both routes render the same component, this is more efficient than destroying the old instance and then creating a new one. </p>\n<p class=\"tip\">Be aware, that using the component this way will mean that the lifecycle hooks of the component will not be called. Visit the Vue Router’s docs to learn more about <a href=\"https://router.vuejs.org/en/essentials/dynamic-matching.html\" target=\"_blank\" rel=\"noopener\">Dynamic Route Matching</a></p>\n\n<p>To fix this we need to watch the <code>$route</code> object and call <code>getPost()</code> when the route changes.</p>\n<p>Updated <code>&lt;script&gt;</code> section in <code>components/BlogPost.vue</code>:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">import</span> &#123; butter &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@/buttercms'</span></span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    name: <span class=\"string\">'blog-post'</span>,</span></span><br><span class=\"line\"><span class=\"undefined\">    data() &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">        post: &#123;&#125;</span></span><br><span class=\"line\"><span class=\"undefined\">      &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">    methods: &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">      getPost() &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        butter.post.retrieve(<span class=\"keyword\">this</span>.$route.params.slug)</span></span><br><span class=\"line\"><span class=\"javascript\">          .then(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"comment\">// console.log(res.data)</span></span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"keyword\">this</span>.post = res.data</span></span><br><span class=\"line\"><span class=\"javascript\">          &#125;).catch(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"built_in\">console</span>.log(res)</span></span><br><span class=\"line\"><span class=\"undefined\">          &#125;)</span></span><br><span class=\"line\"><span class=\"undefined\">      &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">    watch: &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      $route(to, <span class=\"keyword\">from</span>) &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">this</span>.getPost()</span></span><br><span class=\"line\"><span class=\"undefined\">      &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">    created() &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">this</span>.getPost()</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">  &#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>Now your app has a working blog that can be updated easily in the ButterCMS dashboard.</p>\n<h2 id=\"Categories-Tags-and-Authors\"><a href=\"#Categories-Tags-and-Authors\" class=\"headerlink\" title=\"Categories, Tags, and Authors\"></a>Categories, Tags, and Authors</h2><p>Use Butter’s APIs for categories, tags, and authors to feature and filter content on your blog.</p>\n<p>See the ButterCMS API reference for more information about these objects:</p>\n<ul>\n<li><a href=\"https://buttercms.com/docs/api/?ruby#categories\" target=\"_blank\" rel=\"noopener\">Categories</a></li>\n<li><a href=\"https://buttercms.com/docs/api/?ruby#tags\" target=\"_blank\" rel=\"noopener\">Tags</a></li>\n<li><a href=\"https://buttercms.com/docs/api/?ruby#authors\" target=\"_blank\" rel=\"noopener\">Authors</a></li>\n</ul>\n<p>Here’s an example of listing all categories and getting posts by category. Call these methods on the <code>created()</code> lifecycle hook:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">methods: &#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  getCategories() &#123;</span><br><span class=\"line\">    butter.category.list()</span><br><span class=\"line\">      .then(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'List of Categories:'</span>)</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(res.data.data)</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  getPostsByCategory() &#123;</span><br><span class=\"line\">    butter.category.retrieve(<span class=\"string\">'example-category'</span>, &#123;</span><br><span class=\"line\">        include: <span class=\"string\">'recent_posts'</span></span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">      .then(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Posts with specific category:'</span>)</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(res)</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">created() &#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.getCategories()</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.getPostsByCategory()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Alternative-Patterns\"><a href=\"#Alternative-Patterns\" class=\"headerlink\" title=\"Alternative Patterns\"></a>Alternative Patterns</h2><p>An alternative pattern to consider, especially if you prefer writing only in Markdown, is using something like <a href=\"https://nuxtent.now.sh/guide/writing#async-components\" target=\"_blank\" rel=\"noopener\">Nuxtent</a>. Nuxtent allows you to use <code>Vue Component</code> inside of Markdown files. This approach would be akin to a static site approach (i.e. Jekyll) where you compose your blog posts in Markdown files. Nuxtent adds a nice integration between Vue.js and Markdown allowing you to live in a 100% Vue.js world.</p>\n<h2 id=\"Wrap-up\"><a href=\"#Wrap-up\" class=\"headerlink\" title=\"Wrap up\"></a>Wrap up</h2><p>That’s it! You now have a fully functional CMS-powered blog running in your app. We hope this tutorial was helpful and made your development experience with Vue.js even more enjoyable :)</p>\n"},{"title":"Unit Testing Vue Components","type":"cookbook","order":6,"_content":"\n## Base Example\n\nUnit testing is a fundamental part of software development. Unit tests execute the smallest units of code in isolation, in order to increase ease of adding new features and track down bugs. Vue's [single-file components](../guide/single-file-components.html) make it straight forward to write unit tests for components in isolation. This lets you develop new features with confidence you are not breaking existing ones, and helps other developers understand what your component does.\n\nThis simple example tests whether some text is rendered:\n\n```html\n<template>\n  <div>\n    <input v-model=\"username\">\n    <div \n      v-if=\"error\"\n      class=\"error\"\n    >\n      {{ error }}\n    </div>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: 'Hello',\n  data () {\n    return {\n      username: ''\n    }\n  },\n\n  computed: {\n    error () {\n      return this.username.trim().length < 7\n        ? 'Please enter a longer username'\n        : ''\n    }\n  }\n}\n</script>\n```\n\n```js\nimport { shallowMount } from '@vue/test-utils'\n\ntest('Foo', () => {\n  // render the component\n  const wrapper = shallowMount(Hello)\n\n  // should not allow for `username` less than 7 characters, excludes whitespace\n  wrapper.setData({ username: ' '.repeat(7) })\n\n  // assert the error is rendered\n  expect(wrapper.find('.error').exists()).toBe(true)\n\n  // update the name to be long enough\n  wrapper.setData({\n    username: 'Lachlan'\n  })\n\n  // assert the error has gone away\n  expect(wrapper.find('.error').exists()).toBe(false)\n})\n```\n\nThe above code snippet shows how to test whether an error message is rendered based on the length of the username. It demonstrates the general idea of unit testing Vue components: render the component, and assert that the markup matches the state of the component.\n\n## Why test?\n\nComponent unit tests have lots of benefits:\n\n- Provide documentation on how the component should behave\n- Save time over testing manually\n- Reduce bugs in new features\n- Improve design\n- Facilitate refactoring\n\nAutomated testing allows large teams of developers to maintain complex codebases.\n\n#### Getting started\n\n[Vue Test Utils](https://github.com/vuejs/vue-test-utils) is the official library for unit testing Vue components. The [vue-cli](https://github.com/vuejs/vue-cli) `webpack` template comes with either Karma or Jest, both well supported test runners, and there are some [guides](https://vue-test-utils.vuejs.org/guides/) in the Vue Test Utils documentation.\n\n## Real-World Example\n\nUnit tests should be:\n\n- Fast to run\n- Easy to understand\n- Only test a _single unit of work_\n\nLet's continue building on the previous example, while introducing the idea of a <a href=\"https://en.wikipedia.org/wiki/Factory_(object-oriented_programming)\">factory function</a> to make our test more compact and readable. The component should:\n\n- show a 'Welcome to the Vue.js cookbook' greeting.\n- prompt the user to enter their username\n- display an error if the entered username is less than seven letters\n\nLet's take a look at the component code first:\n\n```html\n<template>\n  <div>\n    <div class=\"message\">\n      {{ message }}\n    </div>\n    Enter your username: <input v-model=\"username\">\n    <div \n      v-if=\"error\"\n      class=\"error\"\n    >\n      Please enter a username with at least seven letters.\n    </div>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: 'Foo',\n\n  data () {\n    return {\n      message: 'Welcome to the Vue.js cookbook',\n      username: ''\n    }\n  },\n\n  computed: {\n    error () {\n      return this.username.trim().length < 7\n    }\n  }\n}\n</script>\n```\n\nThe things that we should test are:\n\n- is the `message` rendered?\n- if `error` is `true`, `<div class=\"error\">` should be present\n- if `error` is `false`, `<div class=\"error\">` should not be present\n\nAnd our first attempt at test:\n\n```js\nimport { shallowMount } from '@vue/test-utils'\n\ndescribe('Foo', () => {\n  it('renders a message and responds correctly to user input', () => {\n    const wrapper = shallowMount(Foo, {\n      data: {\n        message: 'Hello World',\n        username: ''\n      }\n    })\n\n    // see if the message renders\n    expect(wrapper.find('.message').text()).toEqual('Hello World')\n\n    // assert the error is rendered\n    expect(wrapper.find('.error').exists()).toBeTruthy()\n\n    // update the `username` and assert error is no longer rendered\n    wrapper.setData({ username: 'Lachlan' })\n    expect(wrapper.find('.error').exists()).toBeFalsy()\n  })\n})\n```\n\nThere are some problems with the above:\n\n- a single test is making assertions about different things\n- difficult to tell the different states the component can be in, and what should be rendered\n\nThe below example improves the test by:\n\n- only making one assertion per `it` block\n- having short, clear test descriptions\n- providing only the minimum data required for the test\n- refactoring duplicated logic (creating the `wrapper` and setting the `username` variable) into a factory function\n\n*Updated test*:\n```js\nimport { shallowMount } from '@vue/test-utils'\nimport Foo from './Foo'\n\nconst factory = (values = {}) => {\n  return shallowMount(Foo, {\n    data: { ...values  }\n  })\n}\n\ndescribe('Foo', () => {\n  it('renders a welcome message', () => {\n    const wrapper = factory()\n\n    expect(wrapper.find('.message').text()).toEqual(\"Welcome to the Vue.js cookbook\")\n  })\n\n  it('renders an error when username is less than 7 characters', () => {\n    const wrapper = factory({ username: ''  })\n\n    expect(wrapper.find('.error').exists()).toBeTruthy()\n  })\n\n  it('renders an error when username is whitespace', () => {\n    const wrapper = factory({ username: ' '.repeat(7) })\n\n    expect(wrapper.find('.error').exists()).toBeTruthy()\n  })\n\n  it('does not render an error when username is 7 characters or more', () => {\n    const wrapper = factory({ username: 'Lachlan'  })\n\n    expect(wrapper.find('.error').exists()).toBeFalsy()\n  })\n})\n```\n\nPoints to note:\n\nAt the top, we declare the factory function which merges the `values` object into `data` and returns a new `wrapper` instance. This way, we don't need to duplicate `const wrapper = shallowMount(Foo)` in every test. Another great benefit to this is when more complex components with a method or computed property you might want to mock or stub in every test, you only need to declare it once.\n\n## Additional Context\n\nThe above test is fairly simple, but in practice Vue components often have other behaviors you want to test, such as:\n\n- making API calls\n- committing or dispatching mutations or actions with a `Vuex` store\n- testing interaction\n\nThere are more complete examples showing such tests in the Vue Test Utils [guides](https://vue-test-utils.vuejs.org/guides/).\n\nVue Test Utils and the enormous JavaScript ecosystem provides plenty of tooling to facilitate almost 100% test coverage. Unit tests are only one part of the testing pyramid, though. Some other types of tests include e2e (end to end) tests, and snapshot tests. Unit tests are the smallest and most simple of tests - they make assertions on the smallest units of work, isolating each part of a single component.\n\nSnapshot tests save the markup of your Vue component, and compare to the new one generated each time the test runs. If something changes, the developer is notified, and can decide if the change was intentional (the component was updated) or accidental (the component is behaving incorrectly).\n\nEnd to end tests ensure a number of components interact well together. They are more high level. Some examples might be testing if a user can sign up, log in, and update their username. These are slower to run than unit tests or snapshot tests.\n\nUnit tests are most useful during development, either to help a developer think about how to design a component, or refactor an existing component, and are often run every time code is changed.\n\nHigher level tests, such as end to end tests, run much slower. These usually run pre-deploy, to ensure each part of the system is working together correctly.\n\nMore information about testing Vue components can be found in [Testing Vue.js Applications](https://www.manning.com/books/testing-vuejs-applications) by core team member [Edd Yerburgh](https://eddyerburgh.me/).\n\n## When To Avoid This Pattern\n\nUnit testing is an important part of any serious application. At first, when the vision of an application is not clear, unit testing might slow down development, but once a vision is established and real users will be interacting with the application, unit tests (and other types of automated tests) are absolutely essential to ensure the codebase is maintainable and scalable.\n","source":"v2/cookbook/unit-testing-vue-components.md","raw":"---\ntitle: Unit Testing Vue Components\ntype: cookbook\norder: 6\n---\n\n## Base Example\n\nUnit testing is a fundamental part of software development. Unit tests execute the smallest units of code in isolation, in order to increase ease of adding new features and track down bugs. Vue's [single-file components](../guide/single-file-components.html) make it straight forward to write unit tests for components in isolation. This lets you develop new features with confidence you are not breaking existing ones, and helps other developers understand what your component does.\n\nThis simple example tests whether some text is rendered:\n\n```html\n<template>\n  <div>\n    <input v-model=\"username\">\n    <div \n      v-if=\"error\"\n      class=\"error\"\n    >\n      {{ error }}\n    </div>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: 'Hello',\n  data () {\n    return {\n      username: ''\n    }\n  },\n\n  computed: {\n    error () {\n      return this.username.trim().length < 7\n        ? 'Please enter a longer username'\n        : ''\n    }\n  }\n}\n</script>\n```\n\n```js\nimport { shallowMount } from '@vue/test-utils'\n\ntest('Foo', () => {\n  // render the component\n  const wrapper = shallowMount(Hello)\n\n  // should not allow for `username` less than 7 characters, excludes whitespace\n  wrapper.setData({ username: ' '.repeat(7) })\n\n  // assert the error is rendered\n  expect(wrapper.find('.error').exists()).toBe(true)\n\n  // update the name to be long enough\n  wrapper.setData({\n    username: 'Lachlan'\n  })\n\n  // assert the error has gone away\n  expect(wrapper.find('.error').exists()).toBe(false)\n})\n```\n\nThe above code snippet shows how to test whether an error message is rendered based on the length of the username. It demonstrates the general idea of unit testing Vue components: render the component, and assert that the markup matches the state of the component.\n\n## Why test?\n\nComponent unit tests have lots of benefits:\n\n- Provide documentation on how the component should behave\n- Save time over testing manually\n- Reduce bugs in new features\n- Improve design\n- Facilitate refactoring\n\nAutomated testing allows large teams of developers to maintain complex codebases.\n\n#### Getting started\n\n[Vue Test Utils](https://github.com/vuejs/vue-test-utils) is the official library for unit testing Vue components. The [vue-cli](https://github.com/vuejs/vue-cli) `webpack` template comes with either Karma or Jest, both well supported test runners, and there are some [guides](https://vue-test-utils.vuejs.org/guides/) in the Vue Test Utils documentation.\n\n## Real-World Example\n\nUnit tests should be:\n\n- Fast to run\n- Easy to understand\n- Only test a _single unit of work_\n\nLet's continue building on the previous example, while introducing the idea of a <a href=\"https://en.wikipedia.org/wiki/Factory_(object-oriented_programming)\">factory function</a> to make our test more compact and readable. The component should:\n\n- show a 'Welcome to the Vue.js cookbook' greeting.\n- prompt the user to enter their username\n- display an error if the entered username is less than seven letters\n\nLet's take a look at the component code first:\n\n```html\n<template>\n  <div>\n    <div class=\"message\">\n      {{ message }}\n    </div>\n    Enter your username: <input v-model=\"username\">\n    <div \n      v-if=\"error\"\n      class=\"error\"\n    >\n      Please enter a username with at least seven letters.\n    </div>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: 'Foo',\n\n  data () {\n    return {\n      message: 'Welcome to the Vue.js cookbook',\n      username: ''\n    }\n  },\n\n  computed: {\n    error () {\n      return this.username.trim().length < 7\n    }\n  }\n}\n</script>\n```\n\nThe things that we should test are:\n\n- is the `message` rendered?\n- if `error` is `true`, `<div class=\"error\">` should be present\n- if `error` is `false`, `<div class=\"error\">` should not be present\n\nAnd our first attempt at test:\n\n```js\nimport { shallowMount } from '@vue/test-utils'\n\ndescribe('Foo', () => {\n  it('renders a message and responds correctly to user input', () => {\n    const wrapper = shallowMount(Foo, {\n      data: {\n        message: 'Hello World',\n        username: ''\n      }\n    })\n\n    // see if the message renders\n    expect(wrapper.find('.message').text()).toEqual('Hello World')\n\n    // assert the error is rendered\n    expect(wrapper.find('.error').exists()).toBeTruthy()\n\n    // update the `username` and assert error is no longer rendered\n    wrapper.setData({ username: 'Lachlan' })\n    expect(wrapper.find('.error').exists()).toBeFalsy()\n  })\n})\n```\n\nThere are some problems with the above:\n\n- a single test is making assertions about different things\n- difficult to tell the different states the component can be in, and what should be rendered\n\nThe below example improves the test by:\n\n- only making one assertion per `it` block\n- having short, clear test descriptions\n- providing only the minimum data required for the test\n- refactoring duplicated logic (creating the `wrapper` and setting the `username` variable) into a factory function\n\n*Updated test*:\n```js\nimport { shallowMount } from '@vue/test-utils'\nimport Foo from './Foo'\n\nconst factory = (values = {}) => {\n  return shallowMount(Foo, {\n    data: { ...values  }\n  })\n}\n\ndescribe('Foo', () => {\n  it('renders a welcome message', () => {\n    const wrapper = factory()\n\n    expect(wrapper.find('.message').text()).toEqual(\"Welcome to the Vue.js cookbook\")\n  })\n\n  it('renders an error when username is less than 7 characters', () => {\n    const wrapper = factory({ username: ''  })\n\n    expect(wrapper.find('.error').exists()).toBeTruthy()\n  })\n\n  it('renders an error when username is whitespace', () => {\n    const wrapper = factory({ username: ' '.repeat(7) })\n\n    expect(wrapper.find('.error').exists()).toBeTruthy()\n  })\n\n  it('does not render an error when username is 7 characters or more', () => {\n    const wrapper = factory({ username: 'Lachlan'  })\n\n    expect(wrapper.find('.error').exists()).toBeFalsy()\n  })\n})\n```\n\nPoints to note:\n\nAt the top, we declare the factory function which merges the `values` object into `data` and returns a new `wrapper` instance. This way, we don't need to duplicate `const wrapper = shallowMount(Foo)` in every test. Another great benefit to this is when more complex components with a method or computed property you might want to mock or stub in every test, you only need to declare it once.\n\n## Additional Context\n\nThe above test is fairly simple, but in practice Vue components often have other behaviors you want to test, such as:\n\n- making API calls\n- committing or dispatching mutations or actions with a `Vuex` store\n- testing interaction\n\nThere are more complete examples showing such tests in the Vue Test Utils [guides](https://vue-test-utils.vuejs.org/guides/).\n\nVue Test Utils and the enormous JavaScript ecosystem provides plenty of tooling to facilitate almost 100% test coverage. Unit tests are only one part of the testing pyramid, though. Some other types of tests include e2e (end to end) tests, and snapshot tests. Unit tests are the smallest and most simple of tests - they make assertions on the smallest units of work, isolating each part of a single component.\n\nSnapshot tests save the markup of your Vue component, and compare to the new one generated each time the test runs. If something changes, the developer is notified, and can decide if the change was intentional (the component was updated) or accidental (the component is behaving incorrectly).\n\nEnd to end tests ensure a number of components interact well together. They are more high level. Some examples might be testing if a user can sign up, log in, and update their username. These are slower to run than unit tests or snapshot tests.\n\nUnit tests are most useful during development, either to help a developer think about how to design a component, or refactor an existing component, and are often run every time code is changed.\n\nHigher level tests, such as end to end tests, run much slower. These usually run pre-deploy, to ensure each part of the system is working together correctly.\n\nMore information about testing Vue components can be found in [Testing Vue.js Applications](https://www.manning.com/books/testing-vuejs-applications) by core team member [Edd Yerburgh](https://eddyerburgh.me/).\n\n## When To Avoid This Pattern\n\nUnit testing is an important part of any serious application. At first, when the vision of an application is not clear, unit testing might slow down development, but once a vision is established and real users will be interacting with the application, unit tests (and other types of automated tests) are absolutely essential to ensure the codebase is maintainable and scalable.\n","date":"2018-07-19T04:04:16.860Z","updated":"2018-07-19T04:04:16.860Z","path":"v2/cookbook/unit-testing-vue-components.html","comments":1,"layout":"page","_id":"cjk0zidoy0014vkrtpzx5oegb","content":"<h2 id=\"Base-Example\"><a href=\"#Base-Example\" class=\"headerlink\" title=\"Base Example\"></a>Base Example</h2><p>Unit testing is a fundamental part of software development. Unit tests execute the smallest units of code in isolation, in order to increase ease of adding new features and track down bugs. Vue’s <a href=\"../guide/single-file-components.html\">single-file components</a> make it straight forward to write unit tests for components in isolation. This lets you develop new features with confidence you are not breaking existing ones, and helps other developers understand what your component does.</p>\n<p>This simple example tests whether some text is rendered:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"username\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> </span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">v-if</span>=<span class=\"string\">\"error\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">class</span>=<span class=\"string\">\"error\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    &gt;</span></span><br><span class=\"line\">      &#123;&#123; error &#125;&#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">  name: <span class=\"string\">'Hello'</span>,</span></span><br><span class=\"line\"><span class=\"undefined\">  data () &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      username: <span class=\"string\">''</span></span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">  &#125;,</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">  computed: &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">    error () &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.username.trim().length &lt; <span class=\"number\">7</span></span></span><br><span class=\"line\"><span class=\"javascript\">        ? <span class=\"string\">'Please enter a longer username'</span></span></span><br><span class=\"line\"><span class=\"javascript\">        : <span class=\"string\">''</span></span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">  &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">&#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; shallowMount &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@vue/test-utils'</span></span><br><span class=\"line\"></span><br><span class=\"line\">test(<span class=\"string\">'Foo'</span>, () =&gt; &#123;</span><br><span class=\"line\">  <span class=\"comment\">// render the component</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> wrapper = shallowMount(Hello)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// should not allow for `username` less than 7 characters, excludes whitespace</span></span><br><span class=\"line\">  wrapper.setData(&#123; <span class=\"attr\">username</span>: <span class=\"string\">' '</span>.repeat(<span class=\"number\">7</span>) &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// assert the error is rendered</span></span><br><span class=\"line\">  expect(wrapper.find(<span class=\"string\">'.error'</span>).exists()).toBe(<span class=\"literal\">true</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// update the name to be long enough</span></span><br><span class=\"line\">  wrapper.setData(&#123;</span><br><span class=\"line\">    username: <span class=\"string\">'Lachlan'</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// assert the error has gone away</span></span><br><span class=\"line\">  expect(wrapper.find(<span class=\"string\">'.error'</span>).exists()).toBe(<span class=\"literal\">false</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>The above code snippet shows how to test whether an error message is rendered based on the length of the username. It demonstrates the general idea of unit testing Vue components: render the component, and assert that the markup matches the state of the component.</p>\n<h2 id=\"Why-test\"><a href=\"#Why-test\" class=\"headerlink\" title=\"Why test?\"></a>Why test?</h2><p>Component unit tests have lots of benefits:</p>\n<ul>\n<li>Provide documentation on how the component should behave</li>\n<li>Save time over testing manually</li>\n<li>Reduce bugs in new features</li>\n<li>Improve design</li>\n<li>Facilitate refactoring</li>\n</ul>\n<p>Automated testing allows large teams of developers to maintain complex codebases.</p>\n<h4 id=\"Getting-started\"><a href=\"#Getting-started\" class=\"headerlink\" title=\"Getting started\"></a>Getting started</h4><p><a href=\"https://github.com/vuejs/vue-test-utils\" target=\"_blank\" rel=\"noopener\">Vue Test Utils</a> is the official library for unit testing Vue components. The <a href=\"https://github.com/vuejs/vue-cli\" target=\"_blank\" rel=\"noopener\">vue-cli</a> <code>webpack</code> template comes with either Karma or Jest, both well supported test runners, and there are some <a href=\"https://vue-test-utils.vuejs.org/guides/\" target=\"_blank\" rel=\"noopener\">guides</a> in the Vue Test Utils documentation.</p>\n<h2 id=\"Real-World-Example\"><a href=\"#Real-World-Example\" class=\"headerlink\" title=\"Real-World Example\"></a>Real-World Example</h2><p>Unit tests should be:</p>\n<ul>\n<li>Fast to run</li>\n<li>Easy to understand</li>\n<li>Only test a <em>single unit of work</em></li>\n</ul>\n<p>Let’s continue building on the previous example, while introducing the idea of a <a href=\"https://en.wikipedia.org/wiki/Factory_(object-oriented_programming)\" target=\"_blank\" rel=\"noopener\">factory function</a> to make our test more compact and readable. The component should:</p>\n<ul>\n<li>show a ‘Welcome to the Vue.js cookbook’ greeting.</li>\n<li>prompt the user to enter their username</li>\n<li>display an error if the entered username is less than seven letters</li>\n</ul>\n<p>Let’s take a look at the component code first:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"message\"</span>&gt;</span></span><br><span class=\"line\">      &#123;&#123; message &#125;&#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    Enter your username: <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"username\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> </span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">v-if</span>=<span class=\"string\">\"error\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">class</span>=<span class=\"string\">\"error\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    &gt;</span></span><br><span class=\"line\">      Please enter a username with at least seven letters.</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">  name: <span class=\"string\">'Foo'</span>,</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">  data () &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      message: <span class=\"string\">'Welcome to the Vue.js cookbook'</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">      username: <span class=\"string\">''</span></span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">  &#125;,</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">  computed: &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">    error () &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.username.trim().length &lt; <span class=\"number\">7</span></span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">  &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">&#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>The things that we should test are:</p>\n<ul>\n<li>is the <code>message</code> rendered?</li>\n<li>if <code>error</code> is <code>true</code>, <code>&lt;div class=&quot;error&quot;&gt;</code> should be present</li>\n<li>if <code>error</code> is <code>false</code>, <code>&lt;div class=&quot;error&quot;&gt;</code> should not be present</li>\n</ul>\n<p>And our first attempt at test:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; shallowMount &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@vue/test-utils'</span></span><br><span class=\"line\"></span><br><span class=\"line\">describe(<span class=\"string\">'Foo'</span>, () =&gt; &#123;</span><br><span class=\"line\">  it(<span class=\"string\">'renders a message and responds correctly to user input'</span>, () =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> wrapper = shallowMount(Foo, &#123;</span><br><span class=\"line\">      data: &#123;</span><br><span class=\"line\">        message: <span class=\"string\">'Hello World'</span>,</span><br><span class=\"line\">        username: <span class=\"string\">''</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// see if the message renders</span></span><br><span class=\"line\">    expect(wrapper.find(<span class=\"string\">'.message'</span>).text()).toEqual(<span class=\"string\">'Hello World'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// assert the error is rendered</span></span><br><span class=\"line\">    expect(wrapper.find(<span class=\"string\">'.error'</span>).exists()).toBeTruthy()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// update the `username` and assert error is no longer rendered</span></span><br><span class=\"line\">    wrapper.setData(&#123; <span class=\"attr\">username</span>: <span class=\"string\">'Lachlan'</span> &#125;)</span><br><span class=\"line\">    expect(wrapper.find(<span class=\"string\">'.error'</span>).exists()).toBeFalsy()</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>There are some problems with the above:</p>\n<ul>\n<li>a single test is making assertions about different things</li>\n<li>difficult to tell the different states the component can be in, and what should be rendered</li>\n</ul>\n<p>The below example improves the test by:</p>\n<ul>\n<li>only making one assertion per <code>it</code> block</li>\n<li>having short, clear test descriptions</li>\n<li>providing only the minimum data required for the test</li>\n<li>refactoring duplicated logic (creating the <code>wrapper</code> and setting the <code>username</code> variable) into a factory function</li>\n</ul>\n<p><em>Updated test</em>:<br><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; shallowMount &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@vue/test-utils'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> Foo <span class=\"keyword\">from</span> <span class=\"string\">'./Foo'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> factory = <span class=\"function\">(<span class=\"params\">values = &#123;&#125;</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> shallowMount(Foo, &#123;</span><br><span class=\"line\">    data: &#123; ...values  &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">describe(<span class=\"string\">'Foo'</span>, () =&gt; &#123;</span><br><span class=\"line\">  it(<span class=\"string\">'renders a welcome message'</span>, () =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> wrapper = factory()</span><br><span class=\"line\"></span><br><span class=\"line\">    expect(wrapper.find(<span class=\"string\">'.message'</span>).text()).toEqual(<span class=\"string\">\"Welcome to the Vue.js cookbook\"</span>)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">  it(<span class=\"string\">'renders an error when username is less than 7 characters'</span>, () =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> wrapper = factory(&#123; <span class=\"attr\">username</span>: <span class=\"string\">''</span>  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    expect(wrapper.find(<span class=\"string\">'.error'</span>).exists()).toBeTruthy()</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">  it(<span class=\"string\">'renders an error when username is whitespace'</span>, () =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> wrapper = factory(&#123; <span class=\"attr\">username</span>: <span class=\"string\">' '</span>.repeat(<span class=\"number\">7</span>) &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    expect(wrapper.find(<span class=\"string\">'.error'</span>).exists()).toBeTruthy()</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">  it(<span class=\"string\">'does not render an error when username is 7 characters or more'</span>, () =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> wrapper = factory(&#123; <span class=\"attr\">username</span>: <span class=\"string\">'Lachlan'</span>  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    expect(wrapper.find(<span class=\"string\">'.error'</span>).exists()).toBeFalsy()</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>Points to note:</p>\n<p>At the top, we declare the factory function which merges the <code>values</code> object into <code>data</code> and returns a new <code>wrapper</code> instance. This way, we don’t need to duplicate <code>const wrapper = shallowMount(Foo)</code> in every test. Another great benefit to this is when more complex components with a method or computed property you might want to mock or stub in every test, you only need to declare it once.</p>\n<h2 id=\"Additional-Context\"><a href=\"#Additional-Context\" class=\"headerlink\" title=\"Additional Context\"></a>Additional Context</h2><p>The above test is fairly simple, but in practice Vue components often have other behaviors you want to test, such as:</p>\n<ul>\n<li>making API calls</li>\n<li>committing or dispatching mutations or actions with a <code>Vuex</code> store</li>\n<li>testing interaction</li>\n</ul>\n<p>There are more complete examples showing such tests in the Vue Test Utils <a href=\"https://vue-test-utils.vuejs.org/guides/\" target=\"_blank\" rel=\"noopener\">guides</a>.</p>\n<p>Vue Test Utils and the enormous JavaScript ecosystem provides plenty of tooling to facilitate almost 100% test coverage. Unit tests are only one part of the testing pyramid, though. Some other types of tests include e2e (end to end) tests, and snapshot tests. Unit tests are the smallest and most simple of tests - they make assertions on the smallest units of work, isolating each part of a single component.</p>\n<p>Snapshot tests save the markup of your Vue component, and compare to the new one generated each time the test runs. If something changes, the developer is notified, and can decide if the change was intentional (the component was updated) or accidental (the component is behaving incorrectly).</p>\n<p>End to end tests ensure a number of components interact well together. They are more high level. Some examples might be testing if a user can sign up, log in, and update their username. These are slower to run than unit tests or snapshot tests.</p>\n<p>Unit tests are most useful during development, either to help a developer think about how to design a component, or refactor an existing component, and are often run every time code is changed.</p>\n<p>Higher level tests, such as end to end tests, run much slower. These usually run pre-deploy, to ensure each part of the system is working together correctly.</p>\n<p>More information about testing Vue components can be found in <a href=\"https://www.manning.com/books/testing-vuejs-applications\" target=\"_blank\" rel=\"noopener\">Testing Vue.js Applications</a> by core team member <a href=\"https://eddyerburgh.me/\" target=\"_blank\" rel=\"noopener\">Edd Yerburgh</a>.</p>\n<h2 id=\"When-To-Avoid-This-Pattern\"><a href=\"#When-To-Avoid-This-Pattern\" class=\"headerlink\" title=\"When To Avoid This Pattern\"></a>When To Avoid This Pattern</h2><p>Unit testing is an important part of any serious application. At first, when the vision of an application is not clear, unit testing might slow down development, but once a vision is established and real users will be interacting with the application, unit tests (and other types of automated tests) are absolutely essential to ensure the codebase is maintainable and scalable.</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Base-Example\"><a href=\"#Base-Example\" class=\"headerlink\" title=\"Base Example\"></a>Base Example</h2><p>Unit testing is a fundamental part of software development. Unit tests execute the smallest units of code in isolation, in order to increase ease of adding new features and track down bugs. Vue’s <a href=\"../guide/single-file-components.html\">single-file components</a> make it straight forward to write unit tests for components in isolation. This lets you develop new features with confidence you are not breaking existing ones, and helps other developers understand what your component does.</p>\n<p>This simple example tests whether some text is rendered:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"username\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> </span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">v-if</span>=<span class=\"string\">\"error\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">class</span>=<span class=\"string\">\"error\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    &gt;</span></span><br><span class=\"line\">      &#123;&#123; error &#125;&#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">  name: <span class=\"string\">'Hello'</span>,</span></span><br><span class=\"line\"><span class=\"undefined\">  data () &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      username: <span class=\"string\">''</span></span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">  &#125;,</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">  computed: &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">    error () &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.username.trim().length &lt; <span class=\"number\">7</span></span></span><br><span class=\"line\"><span class=\"javascript\">        ? <span class=\"string\">'Please enter a longer username'</span></span></span><br><span class=\"line\"><span class=\"javascript\">        : <span class=\"string\">''</span></span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">  &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">&#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; shallowMount &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@vue/test-utils'</span></span><br><span class=\"line\"></span><br><span class=\"line\">test(<span class=\"string\">'Foo'</span>, () =&gt; &#123;</span><br><span class=\"line\">  <span class=\"comment\">// render the component</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> wrapper = shallowMount(Hello)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// should not allow for `username` less than 7 characters, excludes whitespace</span></span><br><span class=\"line\">  wrapper.setData(&#123; <span class=\"attr\">username</span>: <span class=\"string\">' '</span>.repeat(<span class=\"number\">7</span>) &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// assert the error is rendered</span></span><br><span class=\"line\">  expect(wrapper.find(<span class=\"string\">'.error'</span>).exists()).toBe(<span class=\"literal\">true</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// update the name to be long enough</span></span><br><span class=\"line\">  wrapper.setData(&#123;</span><br><span class=\"line\">    username: <span class=\"string\">'Lachlan'</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// assert the error has gone away</span></span><br><span class=\"line\">  expect(wrapper.find(<span class=\"string\">'.error'</span>).exists()).toBe(<span class=\"literal\">false</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>The above code snippet shows how to test whether an error message is rendered based on the length of the username. It demonstrates the general idea of unit testing Vue components: render the component, and assert that the markup matches the state of the component.</p>\n<h2 id=\"Why-test\"><a href=\"#Why-test\" class=\"headerlink\" title=\"Why test?\"></a>Why test?</h2><p>Component unit tests have lots of benefits:</p>\n<ul>\n<li>Provide documentation on how the component should behave</li>\n<li>Save time over testing manually</li>\n<li>Reduce bugs in new features</li>\n<li>Improve design</li>\n<li>Facilitate refactoring</li>\n</ul>\n<p>Automated testing allows large teams of developers to maintain complex codebases.</p>\n<h4 id=\"Getting-started\"><a href=\"#Getting-started\" class=\"headerlink\" title=\"Getting started\"></a>Getting started</h4><p><a href=\"https://github.com/vuejs/vue-test-utils\" target=\"_blank\" rel=\"noopener\">Vue Test Utils</a> is the official library for unit testing Vue components. The <a href=\"https://github.com/vuejs/vue-cli\" target=\"_blank\" rel=\"noopener\">vue-cli</a> <code>webpack</code> template comes with either Karma or Jest, both well supported test runners, and there are some <a href=\"https://vue-test-utils.vuejs.org/guides/\" target=\"_blank\" rel=\"noopener\">guides</a> in the Vue Test Utils documentation.</p>\n<h2 id=\"Real-World-Example\"><a href=\"#Real-World-Example\" class=\"headerlink\" title=\"Real-World Example\"></a>Real-World Example</h2><p>Unit tests should be:</p>\n<ul>\n<li>Fast to run</li>\n<li>Easy to understand</li>\n<li>Only test a <em>single unit of work</em></li>\n</ul>\n<p>Let’s continue building on the previous example, while introducing the idea of a <a href=\"https://en.wikipedia.org/wiki/Factory_(object-oriented_programming)\" target=\"_blank\" rel=\"noopener\">factory function</a> to make our test more compact and readable. The component should:</p>\n<ul>\n<li>show a ‘Welcome to the Vue.js cookbook’ greeting.</li>\n<li>prompt the user to enter their username</li>\n<li>display an error if the entered username is less than seven letters</li>\n</ul>\n<p>Let’s take a look at the component code first:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"message\"</span>&gt;</span></span><br><span class=\"line\">      &#123;&#123; message &#125;&#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    Enter your username: <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"username\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> </span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">v-if</span>=<span class=\"string\">\"error\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">class</span>=<span class=\"string\">\"error\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    &gt;</span></span><br><span class=\"line\">      Please enter a username with at least seven letters.</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">  name: <span class=\"string\">'Foo'</span>,</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">  data () &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      message: <span class=\"string\">'Welcome to the Vue.js cookbook'</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">      username: <span class=\"string\">''</span></span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">  &#125;,</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">  computed: &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">    error () &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.username.trim().length &lt; <span class=\"number\">7</span></span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">  &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">&#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>The things that we should test are:</p>\n<ul>\n<li>is the <code>message</code> rendered?</li>\n<li>if <code>error</code> is <code>true</code>, <code>&lt;div class=&quot;error&quot;&gt;</code> should be present</li>\n<li>if <code>error</code> is <code>false</code>, <code>&lt;div class=&quot;error&quot;&gt;</code> should not be present</li>\n</ul>\n<p>And our first attempt at test:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; shallowMount &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@vue/test-utils'</span></span><br><span class=\"line\"></span><br><span class=\"line\">describe(<span class=\"string\">'Foo'</span>, () =&gt; &#123;</span><br><span class=\"line\">  it(<span class=\"string\">'renders a message and responds correctly to user input'</span>, () =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> wrapper = shallowMount(Foo, &#123;</span><br><span class=\"line\">      data: &#123;</span><br><span class=\"line\">        message: <span class=\"string\">'Hello World'</span>,</span><br><span class=\"line\">        username: <span class=\"string\">''</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// see if the message renders</span></span><br><span class=\"line\">    expect(wrapper.find(<span class=\"string\">'.message'</span>).text()).toEqual(<span class=\"string\">'Hello World'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// assert the error is rendered</span></span><br><span class=\"line\">    expect(wrapper.find(<span class=\"string\">'.error'</span>).exists()).toBeTruthy()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// update the `username` and assert error is no longer rendered</span></span><br><span class=\"line\">    wrapper.setData(&#123; <span class=\"attr\">username</span>: <span class=\"string\">'Lachlan'</span> &#125;)</span><br><span class=\"line\">    expect(wrapper.find(<span class=\"string\">'.error'</span>).exists()).toBeFalsy()</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>There are some problems with the above:</p>\n<ul>\n<li>a single test is making assertions about different things</li>\n<li>difficult to tell the different states the component can be in, and what should be rendered</li>\n</ul>\n<p>The below example improves the test by:</p>\n<ul>\n<li>only making one assertion per <code>it</code> block</li>\n<li>having short, clear test descriptions</li>\n<li>providing only the minimum data required for the test</li>\n<li>refactoring duplicated logic (creating the <code>wrapper</code> and setting the <code>username</code> variable) into a factory function</li>\n</ul>\n<p><em>Updated test</em>:<br><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; shallowMount &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@vue/test-utils'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> Foo <span class=\"keyword\">from</span> <span class=\"string\">'./Foo'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> factory = <span class=\"function\">(<span class=\"params\">values = &#123;&#125;</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> shallowMount(Foo, &#123;</span><br><span class=\"line\">    data: &#123; ...values  &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">describe(<span class=\"string\">'Foo'</span>, () =&gt; &#123;</span><br><span class=\"line\">  it(<span class=\"string\">'renders a welcome message'</span>, () =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> wrapper = factory()</span><br><span class=\"line\"></span><br><span class=\"line\">    expect(wrapper.find(<span class=\"string\">'.message'</span>).text()).toEqual(<span class=\"string\">\"Welcome to the Vue.js cookbook\"</span>)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">  it(<span class=\"string\">'renders an error when username is less than 7 characters'</span>, () =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> wrapper = factory(&#123; <span class=\"attr\">username</span>: <span class=\"string\">''</span>  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    expect(wrapper.find(<span class=\"string\">'.error'</span>).exists()).toBeTruthy()</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">  it(<span class=\"string\">'renders an error when username is whitespace'</span>, () =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> wrapper = factory(&#123; <span class=\"attr\">username</span>: <span class=\"string\">' '</span>.repeat(<span class=\"number\">7</span>) &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    expect(wrapper.find(<span class=\"string\">'.error'</span>).exists()).toBeTruthy()</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">  it(<span class=\"string\">'does not render an error when username is 7 characters or more'</span>, () =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> wrapper = factory(&#123; <span class=\"attr\">username</span>: <span class=\"string\">'Lachlan'</span>  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    expect(wrapper.find(<span class=\"string\">'.error'</span>).exists()).toBeFalsy()</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>Points to note:</p>\n<p>At the top, we declare the factory function which merges the <code>values</code> object into <code>data</code> and returns a new <code>wrapper</code> instance. This way, we don’t need to duplicate <code>const wrapper = shallowMount(Foo)</code> in every test. Another great benefit to this is when more complex components with a method or computed property you might want to mock or stub in every test, you only need to declare it once.</p>\n<h2 id=\"Additional-Context\"><a href=\"#Additional-Context\" class=\"headerlink\" title=\"Additional Context\"></a>Additional Context</h2><p>The above test is fairly simple, but in practice Vue components often have other behaviors you want to test, such as:</p>\n<ul>\n<li>making API calls</li>\n<li>committing or dispatching mutations or actions with a <code>Vuex</code> store</li>\n<li>testing interaction</li>\n</ul>\n<p>There are more complete examples showing such tests in the Vue Test Utils <a href=\"https://vue-test-utils.vuejs.org/guides/\" target=\"_blank\" rel=\"noopener\">guides</a>.</p>\n<p>Vue Test Utils and the enormous JavaScript ecosystem provides plenty of tooling to facilitate almost 100% test coverage. Unit tests are only one part of the testing pyramid, though. Some other types of tests include e2e (end to end) tests, and snapshot tests. Unit tests are the smallest and most simple of tests - they make assertions on the smallest units of work, isolating each part of a single component.</p>\n<p>Snapshot tests save the markup of your Vue component, and compare to the new one generated each time the test runs. If something changes, the developer is notified, and can decide if the change was intentional (the component was updated) or accidental (the component is behaving incorrectly).</p>\n<p>End to end tests ensure a number of components interact well together. They are more high level. Some examples might be testing if a user can sign up, log in, and update their username. These are slower to run than unit tests or snapshot tests.</p>\n<p>Unit tests are most useful during development, either to help a developer think about how to design a component, or refactor an existing component, and are often run every time code is changed.</p>\n<p>Higher level tests, such as end to end tests, run much slower. These usually run pre-deploy, to ensure each part of the system is working together correctly.</p>\n<p>More information about testing Vue components can be found in <a href=\"https://www.manning.com/books/testing-vuejs-applications\" target=\"_blank\" rel=\"noopener\">Testing Vue.js Applications</a> by core team member <a href=\"https://eddyerburgh.me/\" target=\"_blank\" rel=\"noopener\">Edd Yerburgh</a>.</p>\n<h2 id=\"When-To-Avoid-This-Pattern\"><a href=\"#When-To-Avoid-This-Pattern\" class=\"headerlink\" title=\"When To Avoid This Pattern\"></a>When To Avoid This Pattern</h2><p>Unit testing is an important part of any serious application. At first, when the vision of an application is not clear, unit testing might slow down development, but once a vision is established and real users will be interacting with the application, unit tests (and other types of automated tests) are absolutely essential to ensure the codebase is maintainable and scalable.</p>\n"},{"title":"Using Axios to Consume APIs","type":"cookbook","order":9,"_content":"\n## Base Example\n\nThere are many times when building application for the web that you may want to consume and display data from an API. There are several ways to do so, but a very popular approach is to use [axios](https://github.com/axios/axios), a promise-based HTTP client.\n\nIn this exercise, we'll use the [CoinDesk API](https://www.coindesk.com/api/) to walk through displaying Bitcoin prices, updated every minute. First, we'd install axios with either npm/yarn or through a CDN link.\n\nThere are a number of ways we can request information from the API, but it's nice to first find out what the shape of the data looks like, in order to know what to display. In order to do so, we'll make a call to the API endpoint and output it so we can see it. We can see in the CoinDesk API documentation, that this call will be made to `https://api.coindesk.com/v1/bpi/currentprice.json`. So first, we'll create a data property that will eventually house our information, and we'll retrieve the data and assign it using the `mounted` lifecycle hook:\n\n```js\nnew Vue({\n  el: '#app',\n  data () {\n    return {\n      info: null\n    }\n  },\n  mounted () {\n    axios\n      .get('https://api.coindesk.com/v1/bpi/currentprice.json')\n      .then(response => (this.info = response))\n  }\n})\n```\n\n```html\n<div id=\"app\">\n  {{ info }}\n</div>\n```\n\nAnd what we get is this:\n\n<p data-height=\"350\" data-theme-id=\"32763\" data-slug-hash=\"80043dfdb7b90f138f5585ade1a5286f\" data-default-tab=\"result\" data-user=\"Vue\" data-embed-version=\"2\" data-pen-title=\"First Step Axios and Vue\" class=\"codepen\">See the Pen <a href=\"https://codepen.io/team/Vue/pen/80043dfdb7b90f138f5585ade1a5286f/\">First Step Axios and Vue</a> by Vue (<a href=\"https://codepen.io/Vue\">@Vue</a>) on <a href=\"https://codepen.io\">CodePen</a>.</p>\n<script async src=\"https://static.codepen.io/assets/embed/ei.js\"></script>\n\nExcellent! We've got some data. But it looks pretty messy right now so let's display it properly and add some error handling in case things aren't working as expected or it takes longer than we thought to get the information.\n\n## Real-World Example: Working with the Data\n\n### Displaying Data from an API\n\nIt's pretty typical that the information we'll need is within the response, and we'll have to traverse what we've just stored to access it properly. In our case, we can see that the price information we need lives in `response.data.bpi`. If we use this instead, our output is as follows:\n\n```js\naxios\n  .get('https://api.coindesk.com/v1/bpi/currentprice.json')\n  .then(response => (this.info = response.data.bpi))\n```\n\n<p data-height=\"200\" data-theme-id=\"32763\" data-slug-hash=\"6100b10f1b4ac2961208643560ba7d11\" data-default-tab=\"result\" data-user=\"Vue\" data-embed-version=\"2\" data-pen-title=\"Second Step Axios and Vue\" class=\"codepen\">See the Pen <a href=\"https://codepen.io/team/Vue/pen/6100b10f1b4ac2961208643560ba7d11/\">Second Step Axios and Vue</a> by Vue (<a href=\"https://codepen.io/Vue\">@Vue</a>) on <a href=\"https://codepen.io\">CodePen</a>.</p>\n<script async src=\"https://static.codepen.io/assets/embed/ei.js\"></script>\n\nThis is a lot easier for us to display, so we can now update our HTML to display only the information we need from the data we've received, and we'll create a [filter](../api/#Vue-filter) to make sure that the decimal is in the appropriate place as well.\n\n```html\n<div id=\"app\">\n  <h1>Bitcoin Price Index</h1>\n  <div v-for=\"currency in info\" class=\"currency\">\n    {{ currency.description }}:\n    <span class=\"lighten\">\n      <span v-html=\"currency.symbol\"></span>{{ currency.rate_float | currencydecimal }}\n    </span>\n  </div>\n</div>\n```\n\n```js\nfilters: {\n  currencydecimal (value) {\n    return value.toFixed(2)\n  }\n},\n```\n\n<p data-height=\"300\" data-theme-id=\"32763\" data-slug-hash=\"9d59319c09eaccfaf35d9e9f11990f0f\" data-default-tab=\"result\" data-user=\"Vue\" data-embed-version=\"2\" data-pen-title=\"Third Step Axios and Vue\" class=\"codepen\">See the Pen <a href=\"https://codepen.io/team/Vue/pen/9d59319c09eaccfaf35d9e9f11990f0f/\">Third Step Axios and Vue</a> by Vue (<a href=\"https://codepen.io/Vue\">@Vue</a>) on <a href=\"https://codepen.io\">CodePen</a>.</p>\n<script async src=\"https://static.codepen.io/assets/embed/ei.js\"></script>\n\n### Dealing with Errors\n\nThere are times when we might not get the data we need from the API. There are several reasons that our axios call might fail, including but not limited to:\n\n* The API is down.\n* The request was made incorrectly.\n* The API isn't giving us the information in the format that we anticipated.\n\nWhen making this request, we should be checking for just such circumstances, and giving ourselves information in every case so we know how to handle the problem. In an axios call, we'll do so by using `catch`.\n\n```js\naxios\n  .get('https://api.coindesk.com/v1/bpi/currentprice.json')\n  .then(response => (this.info = response.data.bpi))\n  .catch(error => console.log(error))\n```\n\nThis will let us know if something failed during the API request, but what if the data is mangled or the API is down? Right now the user will just see nothing. We might want to build a loader for this case, and then tell the user if we're not able to get the data at all.\n\n```js\nnew Vue({\n  el: '#app',\n  data () {\n    return {\n      info: null,\n      loading: true,\n      errored: false\n    }\n  },\n  filters: {\n    currencydecimal (value) {\n      return value.toFixed(2)\n    }\n  },\n  mounted () {\n    axios\n      .get('https://api.coindesk.com/v1/bpi/currentprice.json')\n      .then(response => {\n        this.info = response.data.bpi\n      })\n      .catch(error => {\n        console.log(error)\n        this.errored = true\n      })\n      .finally(() => this.loading = false)\n  }\n})\n```\n\n```html\n<div id=\"app\">\n  <h1>Bitcoin Price Index</h1>\n\n  <section v-if=\"errored\">\n    <p>We're sorry, we're not able to retrieve this information at the moment, please try back later</p>\n  </section>\n\n  <section v-else>\n    <div v-if=\"loading\">Loading...</div>\n\n    <div v-else v-for=\"currency in info\" class=\"currency\">\n      {{ currency.description }}:\n      <span class=\"lighten\">\n        <span v-html=\"currency.symbol\"></span>{{ currency.rate_float | currencydecimal }}\n      </span>\n    </div>\n\n  </section>\n</div>\n```\n\nYou can hit the rerun button on this pen to see the loading status briefly while we gather data from the API:\n\n<p data-height=\"300\" data-theme-id=\"32763\" data-slug-hash=\"6c01922c9af3883890fd7393e8147ec4\" data-default-tab=\"result\" data-user=\"Vue\" data-embed-version=\"2\" data-pen-title=\"Fourth Step Axios and Vue\" class=\"codepen\">See the Pen <a href=\"https://codepen.io/team/Vue/pen/6c01922c9af3883890fd7393e8147ec4/\">Fourth Step Axios and Vue</a> by Vue (<a href=\"https://codepen.io/Vue\">@Vue</a>) on <a href=\"https://codepen.io\">CodePen</a>.</p>\n<script async src=\"https://static.codepen.io/assets/embed/ei.js\"></script>\n\nThis can be even further improved with the use of components for different sections and more distinct error reporting, depending on the API you're using and the complexity of your application.\n\n## Alternative Patterns\n\n### Fetch API\n\nThe [Fetch API](https://developers.google.com/web/updates/2015/03/introduction-to-fetch) is a powerful native API for these types of requests. You may have heard that one of the benefits of the Fetch API is that you don't need to load an external resource in order to use it, which is true! Except... that it's not fully supported yet, so you will still need to use a polyfill. There are also some gotchas when working with this API, which is why many prefer to use axios for now. This may very well change in the future though.\n\nIf you're interested in using the Fetch API, there are some [very good articles](https://scotch.io/@bedakb/lets-build-type-ahead-component-with-vuejs-2-and-fetch-api) explaining how to do so.\n\n## Wrapping Up\n\nThere are many ways to work with Vue and axios beyond consuming and displaying an API. You can also communicate with Serverless Functions, post/edit/delete from an API where you have write access, and many other benefits. Due to the straightforward integration of these two libraries, it's become a very common choice for developers who need to integrate HTTP clients into their workflow.\n","source":"v2/cookbook/using-axios-to-consume-apis.md","raw":"---\ntitle: Using Axios to Consume APIs\ntype: cookbook\norder: 9\n---\n\n## Base Example\n\nThere are many times when building application for the web that you may want to consume and display data from an API. There are several ways to do so, but a very popular approach is to use [axios](https://github.com/axios/axios), a promise-based HTTP client.\n\nIn this exercise, we'll use the [CoinDesk API](https://www.coindesk.com/api/) to walk through displaying Bitcoin prices, updated every minute. First, we'd install axios with either npm/yarn or through a CDN link.\n\nThere are a number of ways we can request information from the API, but it's nice to first find out what the shape of the data looks like, in order to know what to display. In order to do so, we'll make a call to the API endpoint and output it so we can see it. We can see in the CoinDesk API documentation, that this call will be made to `https://api.coindesk.com/v1/bpi/currentprice.json`. So first, we'll create a data property that will eventually house our information, and we'll retrieve the data and assign it using the `mounted` lifecycle hook:\n\n```js\nnew Vue({\n  el: '#app',\n  data () {\n    return {\n      info: null\n    }\n  },\n  mounted () {\n    axios\n      .get('https://api.coindesk.com/v1/bpi/currentprice.json')\n      .then(response => (this.info = response))\n  }\n})\n```\n\n```html\n<div id=\"app\">\n  {{ info }}\n</div>\n```\n\nAnd what we get is this:\n\n<p data-height=\"350\" data-theme-id=\"32763\" data-slug-hash=\"80043dfdb7b90f138f5585ade1a5286f\" data-default-tab=\"result\" data-user=\"Vue\" data-embed-version=\"2\" data-pen-title=\"First Step Axios and Vue\" class=\"codepen\">See the Pen <a href=\"https://codepen.io/team/Vue/pen/80043dfdb7b90f138f5585ade1a5286f/\">First Step Axios and Vue</a> by Vue (<a href=\"https://codepen.io/Vue\">@Vue</a>) on <a href=\"https://codepen.io\">CodePen</a>.</p>\n<script async src=\"https://static.codepen.io/assets/embed/ei.js\"></script>\n\nExcellent! We've got some data. But it looks pretty messy right now so let's display it properly and add some error handling in case things aren't working as expected or it takes longer than we thought to get the information.\n\n## Real-World Example: Working with the Data\n\n### Displaying Data from an API\n\nIt's pretty typical that the information we'll need is within the response, and we'll have to traverse what we've just stored to access it properly. In our case, we can see that the price information we need lives in `response.data.bpi`. If we use this instead, our output is as follows:\n\n```js\naxios\n  .get('https://api.coindesk.com/v1/bpi/currentprice.json')\n  .then(response => (this.info = response.data.bpi))\n```\n\n<p data-height=\"200\" data-theme-id=\"32763\" data-slug-hash=\"6100b10f1b4ac2961208643560ba7d11\" data-default-tab=\"result\" data-user=\"Vue\" data-embed-version=\"2\" data-pen-title=\"Second Step Axios and Vue\" class=\"codepen\">See the Pen <a href=\"https://codepen.io/team/Vue/pen/6100b10f1b4ac2961208643560ba7d11/\">Second Step Axios and Vue</a> by Vue (<a href=\"https://codepen.io/Vue\">@Vue</a>) on <a href=\"https://codepen.io\">CodePen</a>.</p>\n<script async src=\"https://static.codepen.io/assets/embed/ei.js\"></script>\n\nThis is a lot easier for us to display, so we can now update our HTML to display only the information we need from the data we've received, and we'll create a [filter](../api/#Vue-filter) to make sure that the decimal is in the appropriate place as well.\n\n```html\n<div id=\"app\">\n  <h1>Bitcoin Price Index</h1>\n  <div v-for=\"currency in info\" class=\"currency\">\n    {{ currency.description }}:\n    <span class=\"lighten\">\n      <span v-html=\"currency.symbol\"></span>{{ currency.rate_float | currencydecimal }}\n    </span>\n  </div>\n</div>\n```\n\n```js\nfilters: {\n  currencydecimal (value) {\n    return value.toFixed(2)\n  }\n},\n```\n\n<p data-height=\"300\" data-theme-id=\"32763\" data-slug-hash=\"9d59319c09eaccfaf35d9e9f11990f0f\" data-default-tab=\"result\" data-user=\"Vue\" data-embed-version=\"2\" data-pen-title=\"Third Step Axios and Vue\" class=\"codepen\">See the Pen <a href=\"https://codepen.io/team/Vue/pen/9d59319c09eaccfaf35d9e9f11990f0f/\">Third Step Axios and Vue</a> by Vue (<a href=\"https://codepen.io/Vue\">@Vue</a>) on <a href=\"https://codepen.io\">CodePen</a>.</p>\n<script async src=\"https://static.codepen.io/assets/embed/ei.js\"></script>\n\n### Dealing with Errors\n\nThere are times when we might not get the data we need from the API. There are several reasons that our axios call might fail, including but not limited to:\n\n* The API is down.\n* The request was made incorrectly.\n* The API isn't giving us the information in the format that we anticipated.\n\nWhen making this request, we should be checking for just such circumstances, and giving ourselves information in every case so we know how to handle the problem. In an axios call, we'll do so by using `catch`.\n\n```js\naxios\n  .get('https://api.coindesk.com/v1/bpi/currentprice.json')\n  .then(response => (this.info = response.data.bpi))\n  .catch(error => console.log(error))\n```\n\nThis will let us know if something failed during the API request, but what if the data is mangled or the API is down? Right now the user will just see nothing. We might want to build a loader for this case, and then tell the user if we're not able to get the data at all.\n\n```js\nnew Vue({\n  el: '#app',\n  data () {\n    return {\n      info: null,\n      loading: true,\n      errored: false\n    }\n  },\n  filters: {\n    currencydecimal (value) {\n      return value.toFixed(2)\n    }\n  },\n  mounted () {\n    axios\n      .get('https://api.coindesk.com/v1/bpi/currentprice.json')\n      .then(response => {\n        this.info = response.data.bpi\n      })\n      .catch(error => {\n        console.log(error)\n        this.errored = true\n      })\n      .finally(() => this.loading = false)\n  }\n})\n```\n\n```html\n<div id=\"app\">\n  <h1>Bitcoin Price Index</h1>\n\n  <section v-if=\"errored\">\n    <p>We're sorry, we're not able to retrieve this information at the moment, please try back later</p>\n  </section>\n\n  <section v-else>\n    <div v-if=\"loading\">Loading...</div>\n\n    <div v-else v-for=\"currency in info\" class=\"currency\">\n      {{ currency.description }}:\n      <span class=\"lighten\">\n        <span v-html=\"currency.symbol\"></span>{{ currency.rate_float | currencydecimal }}\n      </span>\n    </div>\n\n  </section>\n</div>\n```\n\nYou can hit the rerun button on this pen to see the loading status briefly while we gather data from the API:\n\n<p data-height=\"300\" data-theme-id=\"32763\" data-slug-hash=\"6c01922c9af3883890fd7393e8147ec4\" data-default-tab=\"result\" data-user=\"Vue\" data-embed-version=\"2\" data-pen-title=\"Fourth Step Axios and Vue\" class=\"codepen\">See the Pen <a href=\"https://codepen.io/team/Vue/pen/6c01922c9af3883890fd7393e8147ec4/\">Fourth Step Axios and Vue</a> by Vue (<a href=\"https://codepen.io/Vue\">@Vue</a>) on <a href=\"https://codepen.io\">CodePen</a>.</p>\n<script async src=\"https://static.codepen.io/assets/embed/ei.js\"></script>\n\nThis can be even further improved with the use of components for different sections and more distinct error reporting, depending on the API you're using and the complexity of your application.\n\n## Alternative Patterns\n\n### Fetch API\n\nThe [Fetch API](https://developers.google.com/web/updates/2015/03/introduction-to-fetch) is a powerful native API for these types of requests. You may have heard that one of the benefits of the Fetch API is that you don't need to load an external resource in order to use it, which is true! Except... that it's not fully supported yet, so you will still need to use a polyfill. There are also some gotchas when working with this API, which is why many prefer to use axios for now. This may very well change in the future though.\n\nIf you're interested in using the Fetch API, there are some [very good articles](https://scotch.io/@bedakb/lets-build-type-ahead-component-with-vuejs-2-and-fetch-api) explaining how to do so.\n\n## Wrapping Up\n\nThere are many ways to work with Vue and axios beyond consuming and displaying an API. You can also communicate with Serverless Functions, post/edit/delete from an API where you have write access, and many other benefits. Due to the straightforward integration of these two libraries, it's become a very common choice for developers who need to integrate HTTP clients into their workflow.\n","date":"2018-07-19T04:04:16.860Z","updated":"2018-07-19T04:04:16.860Z","path":"v2/cookbook/using-axios-to-consume-apis.html","comments":1,"layout":"page","_id":"cjk0zidoy0015vkrt0flog2vk","content":"<h2 id=\"Base-Example\"><a href=\"#Base-Example\" class=\"headerlink\" title=\"Base Example\"></a>Base Example</h2><p>There are many times when building application for the web that you may want to consume and display data from an API. There are several ways to do so, but a very popular approach is to use <a href=\"https://github.com/axios/axios\" target=\"_blank\" rel=\"noopener\">axios</a>, a promise-based HTTP client.</p>\n<p>In this exercise, we’ll use the <a href=\"https://www.coindesk.com/api/\" target=\"_blank\" rel=\"noopener\">CoinDesk API</a> to walk through displaying Bitcoin prices, updated every minute. First, we’d install axios with either npm/yarn or through a CDN link.</p>\n<p>There are a number of ways we can request information from the API, but it’s nice to first find out what the shape of the data looks like, in order to know what to display. In order to do so, we’ll make a call to the API endpoint and output it so we can see it. We can see in the CoinDesk API documentation, that this call will be made to <code>https://api.coindesk.com/v1/bpi/currentprice.json</code>. So first, we’ll create a data property that will eventually house our information, and we’ll retrieve the data and assign it using the <code>mounted</code> lifecycle hook:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  el: <span class=\"string\">'#app'</span>,</span><br><span class=\"line\">  data () &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      info: <span class=\"literal\">null</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  mounted () &#123;</span><br><span class=\"line\">    axios</span><br><span class=\"line\">      .get(<span class=\"string\">'https://api.coindesk.com/v1/bpi/currentprice.json'</span>)</span><br><span class=\"line\">      .then(<span class=\"function\"><span class=\"params\">response</span> =&gt;</span> (<span class=\"keyword\">this</span>.info = response))</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span>&gt;</span></span><br><span class=\"line\">  &#123;&#123; info &#125;&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>And what we get is this:</p>\n<p></p><p data-height=\"350\" data-theme-id=\"32763\" data-slug-hash=\"80043dfdb7b90f138f5585ade1a5286f\" data-default-tab=\"result\" data-user=\"Vue\" data-embed-version=\"2\" data-pen-title=\"First Step Axios and Vue\" class=\"codepen\">See the Pen <a href=\"https://codepen.io/team/Vue/pen/80043dfdb7b90f138f5585ade1a5286f/\" target=\"_blank\" rel=\"noopener\">First Step Axios and Vue</a> by Vue (<a href=\"https://codepen.io/Vue\" target=\"_blank\" rel=\"noopener\">@Vue</a>) on <a href=\"https://codepen.io\" target=\"_blank\" rel=\"noopener\">CodePen</a>.</p><p></p>\n<script async src=\"https://static.codepen.io/assets/embed/ei.js\"></script>\n\n<p>Excellent! We’ve got some data. But it looks pretty messy right now so let’s display it properly and add some error handling in case things aren’t working as expected or it takes longer than we thought to get the information.</p>\n<h2 id=\"Real-World-Example-Working-with-the-Data\"><a href=\"#Real-World-Example-Working-with-the-Data\" class=\"headerlink\" title=\"Real-World Example: Working with the Data\"></a>Real-World Example: Working with the Data</h2><h3 id=\"Displaying-Data-from-an-API\"><a href=\"#Displaying-Data-from-an-API\" class=\"headerlink\" title=\"Displaying Data from an API\"></a>Displaying Data from an API</h3><p>It’s pretty typical that the information we’ll need is within the response, and we’ll have to traverse what we’ve just stored to access it properly. In our case, we can see that the price information we need lives in <code>response.data.bpi</code>. If we use this instead, our output is as follows:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">axios</span><br><span class=\"line\">  .get(<span class=\"string\">'https://api.coindesk.com/v1/bpi/currentprice.json'</span>)</span><br><span class=\"line\">  .then(<span class=\"function\"><span class=\"params\">response</span> =&gt;</span> (<span class=\"keyword\">this</span>.info = response.data.bpi))</span><br></pre></td></tr></table></figure>\n<p></p><p data-height=\"200\" data-theme-id=\"32763\" data-slug-hash=\"6100b10f1b4ac2961208643560ba7d11\" data-default-tab=\"result\" data-user=\"Vue\" data-embed-version=\"2\" data-pen-title=\"Second Step Axios and Vue\" class=\"codepen\">See the Pen <a href=\"https://codepen.io/team/Vue/pen/6100b10f1b4ac2961208643560ba7d11/\" target=\"_blank\" rel=\"noopener\">Second Step Axios and Vue</a> by Vue (<a href=\"https://codepen.io/Vue\" target=\"_blank\" rel=\"noopener\">@Vue</a>) on <a href=\"https://codepen.io\" target=\"_blank\" rel=\"noopener\">CodePen</a>.</p><p></p>\n<script async src=\"https://static.codepen.io/assets/embed/ei.js\"></script>\n\n<p>This is a lot easier for us to display, so we can now update our HTML to display only the information we need from the data we’ve received, and we’ll create a <a href=\"../api/#Vue-filter\">filter</a> to make sure that the decimal is in the appropriate place as well.</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Bitcoin Price Index<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"currency in info\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"currency\"</span>&gt;</span></span><br><span class=\"line\">    &#123;&#123; currency.description &#125;&#125;:</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"lighten\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">v-html</span>=<span class=\"string\">\"currency.symbol\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span>&#123;&#123; currency.rate_float | currencydecimal &#125;&#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">filters: &#123;</span><br><span class=\"line\">  currencydecimal (value) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> value.toFixed(<span class=\"number\">2</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n<p></p><p data-height=\"300\" data-theme-id=\"32763\" data-slug-hash=\"9d59319c09eaccfaf35d9e9f11990f0f\" data-default-tab=\"result\" data-user=\"Vue\" data-embed-version=\"2\" data-pen-title=\"Third Step Axios and Vue\" class=\"codepen\">See the Pen <a href=\"https://codepen.io/team/Vue/pen/9d59319c09eaccfaf35d9e9f11990f0f/\" target=\"_blank\" rel=\"noopener\">Third Step Axios and Vue</a> by Vue (<a href=\"https://codepen.io/Vue\" target=\"_blank\" rel=\"noopener\">@Vue</a>) on <a href=\"https://codepen.io\" target=\"_blank\" rel=\"noopener\">CodePen</a>.</p><p></p>\n<script async src=\"https://static.codepen.io/assets/embed/ei.js\"></script>\n\n<h3 id=\"Dealing-with-Errors\"><a href=\"#Dealing-with-Errors\" class=\"headerlink\" title=\"Dealing with Errors\"></a>Dealing with Errors</h3><p>There are times when we might not get the data we need from the API. There are several reasons that our axios call might fail, including but not limited to:</p>\n<ul>\n<li>The API is down.</li>\n<li>The request was made incorrectly.</li>\n<li>The API isn’t giving us the information in the format that we anticipated.</li>\n</ul>\n<p>When making this request, we should be checking for just such circumstances, and giving ourselves information in every case so we know how to handle the problem. In an axios call, we’ll do so by using <code>catch</code>.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">axios</span><br><span class=\"line\">  .get(<span class=\"string\">'https://api.coindesk.com/v1/bpi/currentprice.json'</span>)</span><br><span class=\"line\">  .then(<span class=\"function\"><span class=\"params\">response</span> =&gt;</span> (<span class=\"keyword\">this</span>.info = response.data.bpi))</span><br><span class=\"line\">  .catch(<span class=\"function\"><span class=\"params\">error</span> =&gt;</span> <span class=\"built_in\">console</span>.log(error))</span><br></pre></td></tr></table></figure>\n<p>This will let us know if something failed during the API request, but what if the data is mangled or the API is down? Right now the user will just see nothing. We might want to build a loader for this case, and then tell the user if we’re not able to get the data at all.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  el: <span class=\"string\">'#app'</span>,</span><br><span class=\"line\">  data () &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      info: <span class=\"literal\">null</span>,</span><br><span class=\"line\">      loading: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      errored: <span class=\"literal\">false</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  filters: &#123;</span><br><span class=\"line\">    currencydecimal (value) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> value.toFixed(<span class=\"number\">2</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  mounted () &#123;</span><br><span class=\"line\">    axios</span><br><span class=\"line\">      .get(<span class=\"string\">'https://api.coindesk.com/v1/bpi/currentprice.json'</span>)</span><br><span class=\"line\">      .then(<span class=\"function\"><span class=\"params\">response</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.info = response.data.bpi</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">      .catch(<span class=\"function\"><span class=\"params\">error</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(error)</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.errored = <span class=\"literal\">true</span></span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">      .finally(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"keyword\">this</span>.loading = <span class=\"literal\">false</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Bitcoin Price Index<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">section</span> <span class=\"attr\">v-if</span>=<span class=\"string\">\"errored\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>We're sorry, we're not able to retrieve this information at the moment, please try back later<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">section</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">section</span> <span class=\"attr\">v-else</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-if</span>=<span class=\"string\">\"loading\"</span>&gt;</span>Loading...<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-else</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"currency in info\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"currency\"</span>&gt;</span></span><br><span class=\"line\">      &#123;&#123; currency.description &#125;&#125;:</span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"lighten\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">v-html</span>=<span class=\"string\">\"currency.symbol\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span>&#123;&#123; currency.rate_float | currencydecimal &#125;&#125;</span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">section</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>You can hit the rerun button on this pen to see the loading status briefly while we gather data from the API:</p>\n<p></p><p data-height=\"300\" data-theme-id=\"32763\" data-slug-hash=\"6c01922c9af3883890fd7393e8147ec4\" data-default-tab=\"result\" data-user=\"Vue\" data-embed-version=\"2\" data-pen-title=\"Fourth Step Axios and Vue\" class=\"codepen\">See the Pen <a href=\"https://codepen.io/team/Vue/pen/6c01922c9af3883890fd7393e8147ec4/\" target=\"_blank\" rel=\"noopener\">Fourth Step Axios and Vue</a> by Vue (<a href=\"https://codepen.io/Vue\" target=\"_blank\" rel=\"noopener\">@Vue</a>) on <a href=\"https://codepen.io\" target=\"_blank\" rel=\"noopener\">CodePen</a>.</p><p></p>\n<script async src=\"https://static.codepen.io/assets/embed/ei.js\"></script>\n\n<p>This can be even further improved with the use of components for different sections and more distinct error reporting, depending on the API you’re using and the complexity of your application.</p>\n<h2 id=\"Alternative-Patterns\"><a href=\"#Alternative-Patterns\" class=\"headerlink\" title=\"Alternative Patterns\"></a>Alternative Patterns</h2><h3 id=\"Fetch-API\"><a href=\"#Fetch-API\" class=\"headerlink\" title=\"Fetch API\"></a>Fetch API</h3><p>The <a href=\"https://developers.google.com/web/updates/2015/03/introduction-to-fetch\" target=\"_blank\" rel=\"noopener\">Fetch API</a> is a powerful native API for these types of requests. You may have heard that one of the benefits of the Fetch API is that you don’t need to load an external resource in order to use it, which is true! Except… that it’s not fully supported yet, so you will still need to use a polyfill. There are also some gotchas when working with this API, which is why many prefer to use axios for now. This may very well change in the future though.</p>\n<p>If you’re interested in using the Fetch API, there are some <a href=\"https://scotch.io/@bedakb/lets-build-type-ahead-component-with-vuejs-2-and-fetch-api\" target=\"_blank\" rel=\"noopener\">very good articles</a> explaining how to do so.</p>\n<h2 id=\"Wrapping-Up\"><a href=\"#Wrapping-Up\" class=\"headerlink\" title=\"Wrapping Up\"></a>Wrapping Up</h2><p>There are many ways to work with Vue and axios beyond consuming and displaying an API. You can also communicate with Serverless Functions, post/edit/delete from an API where you have write access, and many other benefits. Due to the straightforward integration of these two libraries, it’s become a very common choice for developers who need to integrate HTTP clients into their workflow.</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Base-Example\"><a href=\"#Base-Example\" class=\"headerlink\" title=\"Base Example\"></a>Base Example</h2><p>There are many times when building application for the web that you may want to consume and display data from an API. There are several ways to do so, but a very popular approach is to use <a href=\"https://github.com/axios/axios\" target=\"_blank\" rel=\"noopener\">axios</a>, a promise-based HTTP client.</p>\n<p>In this exercise, we’ll use the <a href=\"https://www.coindesk.com/api/\" target=\"_blank\" rel=\"noopener\">CoinDesk API</a> to walk through displaying Bitcoin prices, updated every minute. First, we’d install axios with either npm/yarn or through a CDN link.</p>\n<p>There are a number of ways we can request information from the API, but it’s nice to first find out what the shape of the data looks like, in order to know what to display. In order to do so, we’ll make a call to the API endpoint and output it so we can see it. We can see in the CoinDesk API documentation, that this call will be made to <code>https://api.coindesk.com/v1/bpi/currentprice.json</code>. So first, we’ll create a data property that will eventually house our information, and we’ll retrieve the data and assign it using the <code>mounted</code> lifecycle hook:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  el: <span class=\"string\">'#app'</span>,</span><br><span class=\"line\">  data () &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      info: <span class=\"literal\">null</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  mounted () &#123;</span><br><span class=\"line\">    axios</span><br><span class=\"line\">      .get(<span class=\"string\">'https://api.coindesk.com/v1/bpi/currentprice.json'</span>)</span><br><span class=\"line\">      .then(<span class=\"function\"><span class=\"params\">response</span> =&gt;</span> (<span class=\"keyword\">this</span>.info = response))</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span>&gt;</span></span><br><span class=\"line\">  &#123;&#123; info &#125;&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>And what we get is this:</p>\n<p></p><p data-height=\"350\" data-theme-id=\"32763\" data-slug-hash=\"80043dfdb7b90f138f5585ade1a5286f\" data-default-tab=\"result\" data-user=\"Vue\" data-embed-version=\"2\" data-pen-title=\"First Step Axios and Vue\" class=\"codepen\">See the Pen <a href=\"https://codepen.io/team/Vue/pen/80043dfdb7b90f138f5585ade1a5286f/\" target=\"_blank\" rel=\"noopener\">First Step Axios and Vue</a> by Vue (<a href=\"https://codepen.io/Vue\" target=\"_blank\" rel=\"noopener\">@Vue</a>) on <a href=\"https://codepen.io\" target=\"_blank\" rel=\"noopener\">CodePen</a>.</p><p></p>\n<script async src=\"https://static.codepen.io/assets/embed/ei.js\"></script>\n\n<p>Excellent! We’ve got some data. But it looks pretty messy right now so let’s display it properly and add some error handling in case things aren’t working as expected or it takes longer than we thought to get the information.</p>\n<h2 id=\"Real-World-Example-Working-with-the-Data\"><a href=\"#Real-World-Example-Working-with-the-Data\" class=\"headerlink\" title=\"Real-World Example: Working with the Data\"></a>Real-World Example: Working with the Data</h2><h3 id=\"Displaying-Data-from-an-API\"><a href=\"#Displaying-Data-from-an-API\" class=\"headerlink\" title=\"Displaying Data from an API\"></a>Displaying Data from an API</h3><p>It’s pretty typical that the information we’ll need is within the response, and we’ll have to traverse what we’ve just stored to access it properly. In our case, we can see that the price information we need lives in <code>response.data.bpi</code>. If we use this instead, our output is as follows:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">axios</span><br><span class=\"line\">  .get(<span class=\"string\">'https://api.coindesk.com/v1/bpi/currentprice.json'</span>)</span><br><span class=\"line\">  .then(<span class=\"function\"><span class=\"params\">response</span> =&gt;</span> (<span class=\"keyword\">this</span>.info = response.data.bpi))</span><br></pre></td></tr></table></figure>\n<p></p><p data-height=\"200\" data-theme-id=\"32763\" data-slug-hash=\"6100b10f1b4ac2961208643560ba7d11\" data-default-tab=\"result\" data-user=\"Vue\" data-embed-version=\"2\" data-pen-title=\"Second Step Axios and Vue\" class=\"codepen\">See the Pen <a href=\"https://codepen.io/team/Vue/pen/6100b10f1b4ac2961208643560ba7d11/\" target=\"_blank\" rel=\"noopener\">Second Step Axios and Vue</a> by Vue (<a href=\"https://codepen.io/Vue\" target=\"_blank\" rel=\"noopener\">@Vue</a>) on <a href=\"https://codepen.io\" target=\"_blank\" rel=\"noopener\">CodePen</a>.</p><p></p>\n<script async src=\"https://static.codepen.io/assets/embed/ei.js\"></script>\n\n<p>This is a lot easier for us to display, so we can now update our HTML to display only the information we need from the data we’ve received, and we’ll create a <a href=\"../api/#Vue-filter\">filter</a> to make sure that the decimal is in the appropriate place as well.</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Bitcoin Price Index<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"currency in info\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"currency\"</span>&gt;</span></span><br><span class=\"line\">    &#123;&#123; currency.description &#125;&#125;:</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"lighten\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">v-html</span>=<span class=\"string\">\"currency.symbol\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span>&#123;&#123; currency.rate_float | currencydecimal &#125;&#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">filters: &#123;</span><br><span class=\"line\">  currencydecimal (value) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> value.toFixed(<span class=\"number\">2</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n<p></p><p data-height=\"300\" data-theme-id=\"32763\" data-slug-hash=\"9d59319c09eaccfaf35d9e9f11990f0f\" data-default-tab=\"result\" data-user=\"Vue\" data-embed-version=\"2\" data-pen-title=\"Third Step Axios and Vue\" class=\"codepen\">See the Pen <a href=\"https://codepen.io/team/Vue/pen/9d59319c09eaccfaf35d9e9f11990f0f/\" target=\"_blank\" rel=\"noopener\">Third Step Axios and Vue</a> by Vue (<a href=\"https://codepen.io/Vue\" target=\"_blank\" rel=\"noopener\">@Vue</a>) on <a href=\"https://codepen.io\" target=\"_blank\" rel=\"noopener\">CodePen</a>.</p><p></p>\n<script async src=\"https://static.codepen.io/assets/embed/ei.js\"></script>\n\n<h3 id=\"Dealing-with-Errors\"><a href=\"#Dealing-with-Errors\" class=\"headerlink\" title=\"Dealing with Errors\"></a>Dealing with Errors</h3><p>There are times when we might not get the data we need from the API. There are several reasons that our axios call might fail, including but not limited to:</p>\n<ul>\n<li>The API is down.</li>\n<li>The request was made incorrectly.</li>\n<li>The API isn’t giving us the information in the format that we anticipated.</li>\n</ul>\n<p>When making this request, we should be checking for just such circumstances, and giving ourselves information in every case so we know how to handle the problem. In an axios call, we’ll do so by using <code>catch</code>.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">axios</span><br><span class=\"line\">  .get(<span class=\"string\">'https://api.coindesk.com/v1/bpi/currentprice.json'</span>)</span><br><span class=\"line\">  .then(<span class=\"function\"><span class=\"params\">response</span> =&gt;</span> (<span class=\"keyword\">this</span>.info = response.data.bpi))</span><br><span class=\"line\">  .catch(<span class=\"function\"><span class=\"params\">error</span> =&gt;</span> <span class=\"built_in\">console</span>.log(error))</span><br></pre></td></tr></table></figure>\n<p>This will let us know if something failed during the API request, but what if the data is mangled or the API is down? Right now the user will just see nothing. We might want to build a loader for this case, and then tell the user if we’re not able to get the data at all.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  el: <span class=\"string\">'#app'</span>,</span><br><span class=\"line\">  data () &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      info: <span class=\"literal\">null</span>,</span><br><span class=\"line\">      loading: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      errored: <span class=\"literal\">false</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  filters: &#123;</span><br><span class=\"line\">    currencydecimal (value) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> value.toFixed(<span class=\"number\">2</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  mounted () &#123;</span><br><span class=\"line\">    axios</span><br><span class=\"line\">      .get(<span class=\"string\">'https://api.coindesk.com/v1/bpi/currentprice.json'</span>)</span><br><span class=\"line\">      .then(<span class=\"function\"><span class=\"params\">response</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.info = response.data.bpi</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">      .catch(<span class=\"function\"><span class=\"params\">error</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(error)</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.errored = <span class=\"literal\">true</span></span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">      .finally(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"keyword\">this</span>.loading = <span class=\"literal\">false</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Bitcoin Price Index<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">section</span> <span class=\"attr\">v-if</span>=<span class=\"string\">\"errored\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>We're sorry, we're not able to retrieve this information at the moment, please try back later<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">section</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">section</span> <span class=\"attr\">v-else</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-if</span>=<span class=\"string\">\"loading\"</span>&gt;</span>Loading...<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-else</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"currency in info\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"currency\"</span>&gt;</span></span><br><span class=\"line\">      &#123;&#123; currency.description &#125;&#125;:</span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"lighten\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">v-html</span>=<span class=\"string\">\"currency.symbol\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span>&#123;&#123; currency.rate_float | currencydecimal &#125;&#125;</span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">section</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>You can hit the rerun button on this pen to see the loading status briefly while we gather data from the API:</p>\n<p></p><p data-height=\"300\" data-theme-id=\"32763\" data-slug-hash=\"6c01922c9af3883890fd7393e8147ec4\" data-default-tab=\"result\" data-user=\"Vue\" data-embed-version=\"2\" data-pen-title=\"Fourth Step Axios and Vue\" class=\"codepen\">See the Pen <a href=\"https://codepen.io/team/Vue/pen/6c01922c9af3883890fd7393e8147ec4/\" target=\"_blank\" rel=\"noopener\">Fourth Step Axios and Vue</a> by Vue (<a href=\"https://codepen.io/Vue\" target=\"_blank\" rel=\"noopener\">@Vue</a>) on <a href=\"https://codepen.io\" target=\"_blank\" rel=\"noopener\">CodePen</a>.</p><p></p>\n<script async src=\"https://static.codepen.io/assets/embed/ei.js\"></script>\n\n<p>This can be even further improved with the use of components for different sections and more distinct error reporting, depending on the API you’re using and the complexity of your application.</p>\n<h2 id=\"Alternative-Patterns\"><a href=\"#Alternative-Patterns\" class=\"headerlink\" title=\"Alternative Patterns\"></a>Alternative Patterns</h2><h3 id=\"Fetch-API\"><a href=\"#Fetch-API\" class=\"headerlink\" title=\"Fetch API\"></a>Fetch API</h3><p>The <a href=\"https://developers.google.com/web/updates/2015/03/introduction-to-fetch\" target=\"_blank\" rel=\"noopener\">Fetch API</a> is a powerful native API for these types of requests. You may have heard that one of the benefits of the Fetch API is that you don’t need to load an external resource in order to use it, which is true! Except… that it’s not fully supported yet, so you will still need to use a polyfill. There are also some gotchas when working with this API, which is why many prefer to use axios for now. This may very well change in the future though.</p>\n<p>If you’re interested in using the Fetch API, there are some <a href=\"https://scotch.io/@bedakb/lets-build-type-ahead-component-with-vuejs-2-and-fetch-api\" target=\"_blank\" rel=\"noopener\">very good articles</a> explaining how to do so.</p>\n<h2 id=\"Wrapping-Up\"><a href=\"#Wrapping-Up\" class=\"headerlink\" title=\"Wrapping Up\"></a>Wrapping Up</h2><p>There are many ways to work with Vue and axios beyond consuming and displaying an API. You can also communicate with Serverless Functions, post/edit/delete from an API where you have write access, and many other benefits. Due to the straightforward integration of these two libraries, it’s become a very common choice for developers who need to integrate HTTP clients into their workflow.</p>\n"},{"title":"Installation","type":"guide","order":1,"_content":"\nNuxt.js is really easy to get started with. A simple project only needs the `nuxt` dependency.\n\n## Using Tooltwist Nuxt.js Starter Template\n\nTo get started quickly, the Tooltwist has created a [starter template](https://github.com/tooltwist/nuxt-starter-template).\n\n[Download the .zip](https://github.com/tooltwist/nuxt-starter-template/archive/master.zip) starter template or install it with vue-cli:\n\n```bash\n$ vue init tooltwist/nuxt-starter-template my-project\n```\n\nIf [vue-cli](https://github.com/vuejs/vue-cli) is not installed, please install it with `npm install -g vue-cli`\n\nthen install the dependencies:\n\n```bash\n$ cd <project-name>\n$ npm install\n```\n\nand launch the project with:\n\n```bash\n$ npm run dev\n```\n\nThe application is now running on http://localhost:3000.\n\n<p class=\"tip\">Nuxt.js will listen for file changes inside the <code>pages</code> directory, so there is no need to restart the application when adding new pages.</p>\n\nTo discover more about the directory structure of the project: [Directory Structure Documentation](/guide/directory-structure).\n\n## Steps To Create a Project Manually\n\nThese steps were used to create the template directory in this repo.\n\n\n### Before Starting\n\n- [Install nodeJS/npm](https://nodejs.org/en/download/)\n- [Install Atom (editor)](https://atom.io/)\n\n> <b>Notes for Atom<b>:\n> - Use ⌘-t to jump to a file quickly.\n> - Use shift-⌘-t-\\ to show the currently open file in the tree on the left.\n\n### Create a default Nuxt project\n\n```bash\n$ vue init nuxt/starter <project-name>\n$ cd <project-name>\n$ npm install\n$ npm run dev\n```\n\n<p class=\"tip\"><b>Info:</b> replace <code>&lt;project-name&gt;</nom-du-projet></code> by the name of the project.</p>\n\n\nOpen browser at http://localhost:3000.\n\n> <b>Notes<b>:\n> - Look at pages/index.vue\n>   - Make a change and see it appear on the browser.\n>   - Notice the 3 sections to the page - &lt;template&gt; contains html, &lt;script&gt; contains Javascript, and &lt;style&gt; contains CSS.\n> - Look at components/AppLogo.vue\n>   - Contains sections, similar to index.vue, but missing &lt;script> (he &lt;script&gt; and &lt;style&gt; sections are optional).\n>   - Notice that index.vue:\n>     - imports AppLogo.vue\n>     - registers it as a component\n>     - uses it in the HTML, as &lt;app-logo&gt;&lt;/app-logo&gt;\n\n\n\n### Add Pug, SCSS\n\n```bash\nnpm install --save-dev pug@2.0.0-beta6 pug-loader node-sass sass-loader\n```\n\nModify `pages/index.vue` to use Pug:\n\n```vue\n<template lang=\"pug\">\n  section.container.has-text-centered\n    div\n      app-logo\n      h1.title\n        | j1\n      h2.subtitle\n        | Nuxt.js project\n      .links\n        a.button--green(href=\"https://nuxtjs.org/\", target=\"_blank\") Documentation\n        a.button--grey(href=\"https://github.com/nuxt/nuxt.js\", target=\"_blank\") GitHub\n</template>\n\n```\n\nCheck the page still works.\n\n\n> Notes:\n> - uses indentation to indicate nesting, which removes the need for closing tags.\n> - uses CSS-like syntax for tags definitions: `h1.title#heading Hello ` is equivalent to `<h1 class=“title” id=“heading”>Hello</h1>`\n> - Everything is assumed a tag unless prfixed with `‘|’`.\n> - Indentation must correctly reflect the nesting of the html elements.\n\nDetails about ‘pug’ (previously called ‘jade’) can be found at https://pugjs.org.\n\n\n\n### Add Bulma / Buefy\n\n```bash\nnpm install nuxt-buefy --save\n```\n\nIn `nuxt.config.js` add:\n\n\n```JS\nmodules: [\n  ['nuxt-buefy'],\n],\nbuefy: { defaultIconPack: 'fas' }\n```\n\n<p class=\"tip\">Bulma = CSS library, like Bootstrap but newer and simpler. It makes creating responsive pages easy. See `https://bulma.io/documentation`</p>\n\nModify `pages/index.vue`:\n- Remove the styles (we’ll use Bulma instead):\n\n  ```vue\n  <style>\n  </style>\n  ```\n- Delete the .links section and it’s two buttons.\n\n- Do alignment using Bulma classes. Modify the template to match this div section.container.has-text-centered br br app-logo\n  ```vue\n    section.container.has-text-centered\n      br\n      h1.title.is-1\n        | z58b\n      h2.subtitle.is-4\n        | Nuxt.js project\n  ```\n\nRestart the server and see how this looks in the browser.\n\n- Add a box using Bulma, below the subtitle, with the same indent as h2:\n  ```vue\n  br\n  .box\n    | Some nice text can go inside this box.\n  ```\n\n<p class=\"tip\">\nBuefy = Reusable components for VueJS, using Bulma https://buefy.github.io/#/documentation/start\n<br>\nBulma only provides CSS. Buefy provides components that extends Bulma’s CSS and may also contain Javascript code. \n</p>\n\n\nAdd the following below the box code from above (with the same indent):\n```vue\nbr\nb-collapse(:open=\"false\")\n  button.button.is-primary(slot=\"trigger\") Click me!\n  br\n  .notification\n    .content\n      h3.subtitle.is-4 Blurb\n      p\n        | Lorem ipsum dolor sit amet, consectetur adipiscing elit.\n        | Nulla accumsan, metus ultrices eleifend gravida, nulla nunceu lectus.\n        | Ut vulputate semper dui. Fusce erat odio, sollicitudin vel.\n```\n\n<p class=\"tip\">\nNote that the button defined here is NOT the same as the default buttons that came with the generated project. The button—green and button—grey came from `layouts/default.vue`, whereas classes button and is-primary come from Bulma.\n</p>\n\n\n### Add Font-awesome\n\n```bash\nnpm install @nuxtjs/font-awesome --save\n```\n\nIn `nuxt.config.js` add:\n\n```JS\nmodules: [\n  ['nuxt-buefy'],\n  '@nuxtjs/font-awesome',\n],\n```\n\nIn `pages/index.vue`:\n\n```vue\n.box\n  i.fa.fa-user\n  | &nbsp; Some nice text can go inside this box.\n```\n\nRestart the server and see how it looks.\n\n\n### Adjusting the Site\n\n#### Add a Header and Footer\n- Copy `/assets/images/*` from new-nuxt-project.zip into your project\n- Add `components/PublicHeader.vue`:\n\n  ```vue\n  <template lang=\"pug\">\n     // styles defined in assets/scss/main.cscc\n      nav.navbar.is-dark.is-fixed-top.my-header\n        .container\n          .navbar-brand\n            router-link.navbar-item(to=\"/\")\n              img(src=\"@/assets/images/tooltwist-logo-white.png\", alt=\"My Project\")\n\n            .navbar-burger.burger(data-target=\"navbarExampleTransparentExample\", @click=\"toggleNavbar()\", v-bind:class=\"{'is-active': isActive}\")\n              span\n              span\n              span\n          //- navbar-brand\n\n          #navbarExampleTransparentExample.navbar-menu(v-bind:class=\"{'is-active': isActive}\")\n            .navbar-start\n              router-link.navbar-item(to=\"/publicPage\") publicPage\n              router-link.navbar-item(to=\"/user/privatePage\") privatePage\n            //- navbar-start\n\n            .navbar-end\n              .navbar-item.has-text-grey-light.is-size-7.has-text-weight-light(v-show=\"isLoggedIn\") [ {{userTitle}} ]\n              router-link.navbar-item(v-show=\"!isLoggedIn\", to=\"/login\") Login\n              a.navbar-item(v-show=\"isLoggedIn\", @click=\"doLogout\") Sign out\n            //- navbar-end\n\n          //- navbar-menu\n        //- container\n      //- nav\n    </template>\n\n    <script>\n    export default {\n      data: function() {\n        return {\n          isActive: false\n        }\n      },\n      methods: {\n        toggleNavbar() {\n          this.isActive = !this.isActive\n        },\n        doLogout: function () {\n          this.$loginservice.logout()\n          this.$router.push('/')\n        }\n      },\n      computed: {\n        isLoggedIn: function () {\n          if (this.$loginservice && this.$loginservice.user) {\n            return true;\n          }\n          return false;\n        },\n        userTitle: function () {\n          if (this.$loginservice && this.$loginservice.user) {\n            if (this.$loginservice.user.username) {\n              return this.$loginservice.user.username\n            } else {\n              return this.$loginservice.user.email\n            }\n          }\n          return null\n        }\n      }\n    }\n    </script>\n  ```\n- Add `components/PublicFooter.vue`:\n  ```vue\n  <template lang=\"pug\">\n     // styles defined in assets/scss/main.cscc\n     footer.footer.has-background-dark.has-text-light.has-text-centered.my-footer\n       | Copyright &copy; ToolTwist 2018\n   </template>\n  ```\n- Add `assets/scss/main.scss   `:\n  This contains styles that will be applied across the website.\n  ```scss\n  // Positioning of the footer\n  $my-header-height: 52;\n  $my-footer-height: 42;\n\n  .above-my-footer {\n    display: block;\n    top: 0px;\n    min-height: calc(100vh - #{$my-footer-height}px);\n    padding-top: #{$my-header-height}px;\n  }\n  .my-footer {\n    height: $my-footer-height;\n    padding-top: 8px;\n    padding-bottom: 10px;\n    border-top: solid 1px #e0e0e0;\n    border-bottom: solid 1px #e0e0e0;\n  }\n  ```\n- Load the styles globally, by adding it to `nuxt.config.js`:\n  ```\n  module.exports = { … css: [ { src: '@/assets/scss/main.scss', lang: 'sass' } ], }\n  ```\n\n\n#### Update `layouts/default.vue`:\n\n- remove .button—green and .button-grey and also their hover classes.\n- import the header and footer.\n- use header and footer on the page\n- use the .above-my-footer and .my-footer classes to position the footer div .above-my-footer public-header nuxt\n  ```\n    public-footer.my-footer\n  ```\n\nThe page should now have a header and footer.\n\n#### Add a Couple of Pages\n- Add `pages/publicPage.vue`:\n  ```\n  section.container br br h1.title Public Page br | This page can be seen irrespective of whether the user is logged in. <script> </script> <style> </style>\n  ```\n- Add `pages/user/privatePage.vue`:\n  ```\n  section.container br br h1.title Private Page br | This page should only be seen when the user is logged in. <script> </script> <style> </style>\n  ```\n\n\nYou should now be able to navigate to these pages using the navbar at the top of the page.\n\n<p class=\"tip\">\nResize the screen and see how it adjusts. When the screen gets small enough it replaces the menu options with a “burger”, for mobile devices. This functionality is provided by a combination of Bulma and the toggleNavbar() method in PublicHeader.vue.\n</p>\n\n\n### Install libraries\n```bash\nnpm install axios debounce v-hotkey vue-drag-drop vue-froala-wysiwyg vue-split-panel vue-awesome --save\n\nnpm install vue-loginservice vue-contentservice --save\n```\n- In nuxt.config.js:\n\n  ```JS\n  const nodeExternals = require('webpack-node-externals')  \n  const webpack = require('webpack')  \n\n  module.exports = {  \n    …  \n    build: {  \n      …  \n      extend…  \n\n      plugins: [\n        /*\n         *  These are the Webpack plugins (not to be mistaken for Nuxt plugins)\n         *  https://nuxtjs.org/faq/webpack-plugins/\n         */\n        // https://nuxtjs.org/faq/webpack-plugins/\n        // https://github.com/nuxt/nuxt.js/issues/843\n        new webpack.ProvidePlugin({\n          $: 'jquery',\n          jQuery: 'jquery',\n          'window.jQuery': 'jquery'\n        })\n      ],\n    },\n    …\n    plugins: [\n      /*\n       *  These are our Nuxt plugins, defined in the /plugins directory.\n       */\n      { src: '~plugins/vue-awesome.js', ssr: true },\n      { src: '~plugins/vue-loginservice.js', ssr: false },\n      { src: '~plugins/vue-contentservice.js', ssr: false },\n      { src: '~/plugins/nuxt-drag-drop.js', ssr: true },\n      { src: '~/plugins/nuxt-froala.js', ssr: false },\n      { src: '~/plugins/nuxt-vue-split-panel.js', ssr: false },\n      { src: '~plugins/vue-hotkey.js', ssr: false },\n    ],\n    modules…\n  ```\n\n  <p class=\"tip\">\n  Note that there are two plugins sections. The section inside build refers to webpack plugins, while the other refers to Nuxt plugins.\n  </p>\n\n- Copy `/plugins/*` from <b>new-nuxt-project.zip</b> into your project\n- Copy `/lib` from <b>new-nuxt-project.zip</b> into your project\n\n\n\n### Using Tooltwist Components\n\n- Copy `/protected-config/websiteConfig.js` from <b>new-nuxt-project.zip</b> into your project\n- If you already have a Tooltwist account, define a new application, get an APIKey, and update `websiteConfig.js` with your new APIKey.\n\n##### Login page\n\n- Create `pages/login.vue`\n\n  ```vue\n  <template lang=\"pug\">\n  .my-login-page\n    section\n      br\n      br\n      loginservice-login(@userchange=\"onUserChange\")\n  </template>\n\n  <script>\n  import PublicHeader from '@/components/PublicHeader.vue'\n  import PublicFooter from '@/components/PublicFooter.vue'\n\n  export default {\n    name: 'a3-login-page',\n    components: {\n      PublicHeader,\n      PublicFooter\n    },\n    methods: {\n      onUserChange () {\n        if (this.$loginservice.user) {\n          this.$router.push('/user/privatePage')\n        }\n      }\n    }\n  }\n  </script>\n  ```\n\n\n> Notice how the menu bar changes when the user logs in:\n> - Restart the server, and log in with demo/demo.\n> - The computed value ‘isLoggedIn’ changes from false to true, causing the label to switch from ‘Login’ to ‘Sign out’.\n> - The computed value ‘userTitle’ gets displayed when the user is logged in.\n\n\n### Redirect Middleware\n\n```\na) Some pages should be visible only when a user is logged in.\n\nb) Other pages should not be shown when a user is logged in.\n\nc) Using Nuxt middleware we can intercept the routing to a page, and forward instead to a different page if required.\n\nd) The Server Side Rendering cannot access browser cookies, so the middleware cannot determine if the user is logged in. Instead it needs to return to a page to the browser that will immediately redirect to the required page, causing the middleware to run again, this time on the browser.\n\nTo provide this functionality, a Nuxt middleware named redirectIfServer is used.\n\n```\n\n- Copy `/middleware/only-if-logged-in.js` from <b>new-nuxt-project.zip</b> into your project.\n- Copy `/pages/loginservice-redirect` from <b>new-nuxt-project.zip</b> into your project.\n- Add the following to `nuxt.config.js`:\n  ```JS\n  module.exports = {\n     …\n     css: […],\n    router: {\n        middleware: 'only-if-logged-in'\n     }\n   }\n  ```\n\n<p class=\"tip\">\nNote that if you now try to go to privatePage without being logged in, you will be forwarded to the login page. Take a look at the output of npm run dev, and also the Javascript console of your browser and you will see debug messages explaining what the router is doing and why.\nIf you ever wonder why some pages cannot be accessed, this is the first place to look.\n</p>\n\n\nWe should stop privatePage from being displayed in the user is not logged in.\n\n- Add the following code in `components/PublicHeader.vue`:\n  ```vue\n  #navbarExampleTransparentExample.navbar-menu(v-bind:class=\"{'is-active': isActive}\")\n    .navbar-start\n      router-link.navbar-item(to=\"/publicPage\") publicPage\n      router-link.navbar-item(to=\"/user/privatePage\", v-show=\"isLoggedIn\") privatePage\n    //- navbar-start\n  ```\n\n\n\n### Bounce Page (required for social media login)\n\nWhen logging in with Facebook/Google/Github/Twitter/LinkedIn the browser redirects to their authentication server, to loginservice, and finally back to an application page with the credentials provided as a URL parameter.  > Our application (via vue-loginservice) saves these credentials in a cookie and will stay logged in until the user logs out.\n\nThis leaves a problem… after logging out, if the user returns to that page via the browser history or the back button, the URL parameters will log the user back in. To avoid this problem, we need to prevent the URL with the authentication parameters being saved in the browser history.\n\nWe do this with a page called loginservice-bounce. Loginservice will jump to this page with the credentials, and this page will save the credentials as a cookie then immediately redirect to the actually required application page, without the URL parameters for the credentials.\n\n- Create `/pages/loginservice-bounce.vue` with the following:\n  ```vue\n  <template>\n    <loginservice-bounce-component/>\n  </template>\n  ```\n- In `plugins/vue-loginservice.js` un-comment the faceboook line:\n  ```JS\n  hints: {\n    …\n    sitename: 'ToolTwist',\n    login: {\n      facebook: true,       <----- here\n      // google: true,\n      // github: true,\n      …\n  ```\n\n\n\n### Account Page\n\n- Add a page `pages/user/account`:\n  ```vue\n  <template lang=\"pug\">\n  .a3-account-page\n    .a3-above-the-footer\n      a3-header\n      section.my-header\n        .container\n          br\n          .my-heading\n            | My Profile\n\n      br\n      br\n      .container\n        loginservice-user-details(:tenant=\"$loginservice.user.tenant\", :user-id=\"$loginservice.user.id\", change-password)\n\n    a3-footer.a3-the-footer\n  </template>\n  ```\n- Add a link to this new page to `/components/PublicHeader`:\n  ```vue\n  router-link.navbar-item(to=\"/user/account\", v-show=\"isLoggedIn\") Account\n  ```\n\n\n\n### Next Steps\n\nYou now have a demonstration application running, however it’s running against the demonstration user database. To create your own application:\n\n1. Go to tooltwist.com and register, click on the link in the verification email, create a new application, and allocate an APIKey. Replace the default ApiKey in /protected-config/websiteConfig.js and restart your server. \n\n2. Create a Mailchimp/Mandrill account, and install the registration and forgot-password templates from new-nuxt-project.zip. You will also need to verify that you own the domain used to send emails to users.\n\n3. If you wish to allow users to log in with a social media account, you will need to register the application with Facebook/Github/etc and enter the details into A3. The help links on the config pages explains how to configure Facebook, etc.   \n","source":"v2/guide/installation.md","raw":"---\ntitle: Installation\ntype: guide\norder: 1\n---\n\nNuxt.js is really easy to get started with. A simple project only needs the `nuxt` dependency.\n\n## Using Tooltwist Nuxt.js Starter Template\n\nTo get started quickly, the Tooltwist has created a [starter template](https://github.com/tooltwist/nuxt-starter-template).\n\n[Download the .zip](https://github.com/tooltwist/nuxt-starter-template/archive/master.zip) starter template or install it with vue-cli:\n\n```bash\n$ vue init tooltwist/nuxt-starter-template my-project\n```\n\nIf [vue-cli](https://github.com/vuejs/vue-cli) is not installed, please install it with `npm install -g vue-cli`\n\nthen install the dependencies:\n\n```bash\n$ cd <project-name>\n$ npm install\n```\n\nand launch the project with:\n\n```bash\n$ npm run dev\n```\n\nThe application is now running on http://localhost:3000.\n\n<p class=\"tip\">Nuxt.js will listen for file changes inside the <code>pages</code> directory, so there is no need to restart the application when adding new pages.</p>\n\nTo discover more about the directory structure of the project: [Directory Structure Documentation](/guide/directory-structure).\n\n## Steps To Create a Project Manually\n\nThese steps were used to create the template directory in this repo.\n\n\n### Before Starting\n\n- [Install nodeJS/npm](https://nodejs.org/en/download/)\n- [Install Atom (editor)](https://atom.io/)\n\n> <b>Notes for Atom<b>:\n> - Use ⌘-t to jump to a file quickly.\n> - Use shift-⌘-t-\\ to show the currently open file in the tree on the left.\n\n### Create a default Nuxt project\n\n```bash\n$ vue init nuxt/starter <project-name>\n$ cd <project-name>\n$ npm install\n$ npm run dev\n```\n\n<p class=\"tip\"><b>Info:</b> replace <code>&lt;project-name&gt;</nom-du-projet></code> by the name of the project.</p>\n\n\nOpen browser at http://localhost:3000.\n\n> <b>Notes<b>:\n> - Look at pages/index.vue\n>   - Make a change and see it appear on the browser.\n>   - Notice the 3 sections to the page - &lt;template&gt; contains html, &lt;script&gt; contains Javascript, and &lt;style&gt; contains CSS.\n> - Look at components/AppLogo.vue\n>   - Contains sections, similar to index.vue, but missing &lt;script> (he &lt;script&gt; and &lt;style&gt; sections are optional).\n>   - Notice that index.vue:\n>     - imports AppLogo.vue\n>     - registers it as a component\n>     - uses it in the HTML, as &lt;app-logo&gt;&lt;/app-logo&gt;\n\n\n\n### Add Pug, SCSS\n\n```bash\nnpm install --save-dev pug@2.0.0-beta6 pug-loader node-sass sass-loader\n```\n\nModify `pages/index.vue` to use Pug:\n\n```vue\n<template lang=\"pug\">\n  section.container.has-text-centered\n    div\n      app-logo\n      h1.title\n        | j1\n      h2.subtitle\n        | Nuxt.js project\n      .links\n        a.button--green(href=\"https://nuxtjs.org/\", target=\"_blank\") Documentation\n        a.button--grey(href=\"https://github.com/nuxt/nuxt.js\", target=\"_blank\") GitHub\n</template>\n\n```\n\nCheck the page still works.\n\n\n> Notes:\n> - uses indentation to indicate nesting, which removes the need for closing tags.\n> - uses CSS-like syntax for tags definitions: `h1.title#heading Hello ` is equivalent to `<h1 class=“title” id=“heading”>Hello</h1>`\n> - Everything is assumed a tag unless prfixed with `‘|’`.\n> - Indentation must correctly reflect the nesting of the html elements.\n\nDetails about ‘pug’ (previously called ‘jade’) can be found at https://pugjs.org.\n\n\n\n### Add Bulma / Buefy\n\n```bash\nnpm install nuxt-buefy --save\n```\n\nIn `nuxt.config.js` add:\n\n\n```JS\nmodules: [\n  ['nuxt-buefy'],\n],\nbuefy: { defaultIconPack: 'fas' }\n```\n\n<p class=\"tip\">Bulma = CSS library, like Bootstrap but newer and simpler. It makes creating responsive pages easy. See `https://bulma.io/documentation`</p>\n\nModify `pages/index.vue`:\n- Remove the styles (we’ll use Bulma instead):\n\n  ```vue\n  <style>\n  </style>\n  ```\n- Delete the .links section and it’s two buttons.\n\n- Do alignment using Bulma classes. Modify the template to match this div section.container.has-text-centered br br app-logo\n  ```vue\n    section.container.has-text-centered\n      br\n      h1.title.is-1\n        | z58b\n      h2.subtitle.is-4\n        | Nuxt.js project\n  ```\n\nRestart the server and see how this looks in the browser.\n\n- Add a box using Bulma, below the subtitle, with the same indent as h2:\n  ```vue\n  br\n  .box\n    | Some nice text can go inside this box.\n  ```\n\n<p class=\"tip\">\nBuefy = Reusable components for VueJS, using Bulma https://buefy.github.io/#/documentation/start\n<br>\nBulma only provides CSS. Buefy provides components that extends Bulma’s CSS and may also contain Javascript code. \n</p>\n\n\nAdd the following below the box code from above (with the same indent):\n```vue\nbr\nb-collapse(:open=\"false\")\n  button.button.is-primary(slot=\"trigger\") Click me!\n  br\n  .notification\n    .content\n      h3.subtitle.is-4 Blurb\n      p\n        | Lorem ipsum dolor sit amet, consectetur adipiscing elit.\n        | Nulla accumsan, metus ultrices eleifend gravida, nulla nunceu lectus.\n        | Ut vulputate semper dui. Fusce erat odio, sollicitudin vel.\n```\n\n<p class=\"tip\">\nNote that the button defined here is NOT the same as the default buttons that came with the generated project. The button—green and button—grey came from `layouts/default.vue`, whereas classes button and is-primary come from Bulma.\n</p>\n\n\n### Add Font-awesome\n\n```bash\nnpm install @nuxtjs/font-awesome --save\n```\n\nIn `nuxt.config.js` add:\n\n```JS\nmodules: [\n  ['nuxt-buefy'],\n  '@nuxtjs/font-awesome',\n],\n```\n\nIn `pages/index.vue`:\n\n```vue\n.box\n  i.fa.fa-user\n  | &nbsp; Some nice text can go inside this box.\n```\n\nRestart the server and see how it looks.\n\n\n### Adjusting the Site\n\n#### Add a Header and Footer\n- Copy `/assets/images/*` from new-nuxt-project.zip into your project\n- Add `components/PublicHeader.vue`:\n\n  ```vue\n  <template lang=\"pug\">\n     // styles defined in assets/scss/main.cscc\n      nav.navbar.is-dark.is-fixed-top.my-header\n        .container\n          .navbar-brand\n            router-link.navbar-item(to=\"/\")\n              img(src=\"@/assets/images/tooltwist-logo-white.png\", alt=\"My Project\")\n\n            .navbar-burger.burger(data-target=\"navbarExampleTransparentExample\", @click=\"toggleNavbar()\", v-bind:class=\"{'is-active': isActive}\")\n              span\n              span\n              span\n          //- navbar-brand\n\n          #navbarExampleTransparentExample.navbar-menu(v-bind:class=\"{'is-active': isActive}\")\n            .navbar-start\n              router-link.navbar-item(to=\"/publicPage\") publicPage\n              router-link.navbar-item(to=\"/user/privatePage\") privatePage\n            //- navbar-start\n\n            .navbar-end\n              .navbar-item.has-text-grey-light.is-size-7.has-text-weight-light(v-show=\"isLoggedIn\") [ {{userTitle}} ]\n              router-link.navbar-item(v-show=\"!isLoggedIn\", to=\"/login\") Login\n              a.navbar-item(v-show=\"isLoggedIn\", @click=\"doLogout\") Sign out\n            //- navbar-end\n\n          //- navbar-menu\n        //- container\n      //- nav\n    </template>\n\n    <script>\n    export default {\n      data: function() {\n        return {\n          isActive: false\n        }\n      },\n      methods: {\n        toggleNavbar() {\n          this.isActive = !this.isActive\n        },\n        doLogout: function () {\n          this.$loginservice.logout()\n          this.$router.push('/')\n        }\n      },\n      computed: {\n        isLoggedIn: function () {\n          if (this.$loginservice && this.$loginservice.user) {\n            return true;\n          }\n          return false;\n        },\n        userTitle: function () {\n          if (this.$loginservice && this.$loginservice.user) {\n            if (this.$loginservice.user.username) {\n              return this.$loginservice.user.username\n            } else {\n              return this.$loginservice.user.email\n            }\n          }\n          return null\n        }\n      }\n    }\n    </script>\n  ```\n- Add `components/PublicFooter.vue`:\n  ```vue\n  <template lang=\"pug\">\n     // styles defined in assets/scss/main.cscc\n     footer.footer.has-background-dark.has-text-light.has-text-centered.my-footer\n       | Copyright &copy; ToolTwist 2018\n   </template>\n  ```\n- Add `assets/scss/main.scss   `:\n  This contains styles that will be applied across the website.\n  ```scss\n  // Positioning of the footer\n  $my-header-height: 52;\n  $my-footer-height: 42;\n\n  .above-my-footer {\n    display: block;\n    top: 0px;\n    min-height: calc(100vh - #{$my-footer-height}px);\n    padding-top: #{$my-header-height}px;\n  }\n  .my-footer {\n    height: $my-footer-height;\n    padding-top: 8px;\n    padding-bottom: 10px;\n    border-top: solid 1px #e0e0e0;\n    border-bottom: solid 1px #e0e0e0;\n  }\n  ```\n- Load the styles globally, by adding it to `nuxt.config.js`:\n  ```\n  module.exports = { … css: [ { src: '@/assets/scss/main.scss', lang: 'sass' } ], }\n  ```\n\n\n#### Update `layouts/default.vue`:\n\n- remove .button—green and .button-grey and also their hover classes.\n- import the header and footer.\n- use header and footer on the page\n- use the .above-my-footer and .my-footer classes to position the footer div .above-my-footer public-header nuxt\n  ```\n    public-footer.my-footer\n  ```\n\nThe page should now have a header and footer.\n\n#### Add a Couple of Pages\n- Add `pages/publicPage.vue`:\n  ```\n  section.container br br h1.title Public Page br | This page can be seen irrespective of whether the user is logged in. <script> </script> <style> </style>\n  ```\n- Add `pages/user/privatePage.vue`:\n  ```\n  section.container br br h1.title Private Page br | This page should only be seen when the user is logged in. <script> </script> <style> </style>\n  ```\n\n\nYou should now be able to navigate to these pages using the navbar at the top of the page.\n\n<p class=\"tip\">\nResize the screen and see how it adjusts. When the screen gets small enough it replaces the menu options with a “burger”, for mobile devices. This functionality is provided by a combination of Bulma and the toggleNavbar() method in PublicHeader.vue.\n</p>\n\n\n### Install libraries\n```bash\nnpm install axios debounce v-hotkey vue-drag-drop vue-froala-wysiwyg vue-split-panel vue-awesome --save\n\nnpm install vue-loginservice vue-contentservice --save\n```\n- In nuxt.config.js:\n\n  ```JS\n  const nodeExternals = require('webpack-node-externals')  \n  const webpack = require('webpack')  \n\n  module.exports = {  \n    …  \n    build: {  \n      …  \n      extend…  \n\n      plugins: [\n        /*\n         *  These are the Webpack plugins (not to be mistaken for Nuxt plugins)\n         *  https://nuxtjs.org/faq/webpack-plugins/\n         */\n        // https://nuxtjs.org/faq/webpack-plugins/\n        // https://github.com/nuxt/nuxt.js/issues/843\n        new webpack.ProvidePlugin({\n          $: 'jquery',\n          jQuery: 'jquery',\n          'window.jQuery': 'jquery'\n        })\n      ],\n    },\n    …\n    plugins: [\n      /*\n       *  These are our Nuxt plugins, defined in the /plugins directory.\n       */\n      { src: '~plugins/vue-awesome.js', ssr: true },\n      { src: '~plugins/vue-loginservice.js', ssr: false },\n      { src: '~plugins/vue-contentservice.js', ssr: false },\n      { src: '~/plugins/nuxt-drag-drop.js', ssr: true },\n      { src: '~/plugins/nuxt-froala.js', ssr: false },\n      { src: '~/plugins/nuxt-vue-split-panel.js', ssr: false },\n      { src: '~plugins/vue-hotkey.js', ssr: false },\n    ],\n    modules…\n  ```\n\n  <p class=\"tip\">\n  Note that there are two plugins sections. The section inside build refers to webpack plugins, while the other refers to Nuxt plugins.\n  </p>\n\n- Copy `/plugins/*` from <b>new-nuxt-project.zip</b> into your project\n- Copy `/lib` from <b>new-nuxt-project.zip</b> into your project\n\n\n\n### Using Tooltwist Components\n\n- Copy `/protected-config/websiteConfig.js` from <b>new-nuxt-project.zip</b> into your project\n- If you already have a Tooltwist account, define a new application, get an APIKey, and update `websiteConfig.js` with your new APIKey.\n\n##### Login page\n\n- Create `pages/login.vue`\n\n  ```vue\n  <template lang=\"pug\">\n  .my-login-page\n    section\n      br\n      br\n      loginservice-login(@userchange=\"onUserChange\")\n  </template>\n\n  <script>\n  import PublicHeader from '@/components/PublicHeader.vue'\n  import PublicFooter from '@/components/PublicFooter.vue'\n\n  export default {\n    name: 'a3-login-page',\n    components: {\n      PublicHeader,\n      PublicFooter\n    },\n    methods: {\n      onUserChange () {\n        if (this.$loginservice.user) {\n          this.$router.push('/user/privatePage')\n        }\n      }\n    }\n  }\n  </script>\n  ```\n\n\n> Notice how the menu bar changes when the user logs in:\n> - Restart the server, and log in with demo/demo.\n> - The computed value ‘isLoggedIn’ changes from false to true, causing the label to switch from ‘Login’ to ‘Sign out’.\n> - The computed value ‘userTitle’ gets displayed when the user is logged in.\n\n\n### Redirect Middleware\n\n```\na) Some pages should be visible only when a user is logged in.\n\nb) Other pages should not be shown when a user is logged in.\n\nc) Using Nuxt middleware we can intercept the routing to a page, and forward instead to a different page if required.\n\nd) The Server Side Rendering cannot access browser cookies, so the middleware cannot determine if the user is logged in. Instead it needs to return to a page to the browser that will immediately redirect to the required page, causing the middleware to run again, this time on the browser.\n\nTo provide this functionality, a Nuxt middleware named redirectIfServer is used.\n\n```\n\n- Copy `/middleware/only-if-logged-in.js` from <b>new-nuxt-project.zip</b> into your project.\n- Copy `/pages/loginservice-redirect` from <b>new-nuxt-project.zip</b> into your project.\n- Add the following to `nuxt.config.js`:\n  ```JS\n  module.exports = {\n     …\n     css: […],\n    router: {\n        middleware: 'only-if-logged-in'\n     }\n   }\n  ```\n\n<p class=\"tip\">\nNote that if you now try to go to privatePage without being logged in, you will be forwarded to the login page. Take a look at the output of npm run dev, and also the Javascript console of your browser and you will see debug messages explaining what the router is doing and why.\nIf you ever wonder why some pages cannot be accessed, this is the first place to look.\n</p>\n\n\nWe should stop privatePage from being displayed in the user is not logged in.\n\n- Add the following code in `components/PublicHeader.vue`:\n  ```vue\n  #navbarExampleTransparentExample.navbar-menu(v-bind:class=\"{'is-active': isActive}\")\n    .navbar-start\n      router-link.navbar-item(to=\"/publicPage\") publicPage\n      router-link.navbar-item(to=\"/user/privatePage\", v-show=\"isLoggedIn\") privatePage\n    //- navbar-start\n  ```\n\n\n\n### Bounce Page (required for social media login)\n\nWhen logging in with Facebook/Google/Github/Twitter/LinkedIn the browser redirects to their authentication server, to loginservice, and finally back to an application page with the credentials provided as a URL parameter.  > Our application (via vue-loginservice) saves these credentials in a cookie and will stay logged in until the user logs out.\n\nThis leaves a problem… after logging out, if the user returns to that page via the browser history or the back button, the URL parameters will log the user back in. To avoid this problem, we need to prevent the URL with the authentication parameters being saved in the browser history.\n\nWe do this with a page called loginservice-bounce. Loginservice will jump to this page with the credentials, and this page will save the credentials as a cookie then immediately redirect to the actually required application page, without the URL parameters for the credentials.\n\n- Create `/pages/loginservice-bounce.vue` with the following:\n  ```vue\n  <template>\n    <loginservice-bounce-component/>\n  </template>\n  ```\n- In `plugins/vue-loginservice.js` un-comment the faceboook line:\n  ```JS\n  hints: {\n    …\n    sitename: 'ToolTwist',\n    login: {\n      facebook: true,       <----- here\n      // google: true,\n      // github: true,\n      …\n  ```\n\n\n\n### Account Page\n\n- Add a page `pages/user/account`:\n  ```vue\n  <template lang=\"pug\">\n  .a3-account-page\n    .a3-above-the-footer\n      a3-header\n      section.my-header\n        .container\n          br\n          .my-heading\n            | My Profile\n\n      br\n      br\n      .container\n        loginservice-user-details(:tenant=\"$loginservice.user.tenant\", :user-id=\"$loginservice.user.id\", change-password)\n\n    a3-footer.a3-the-footer\n  </template>\n  ```\n- Add a link to this new page to `/components/PublicHeader`:\n  ```vue\n  router-link.navbar-item(to=\"/user/account\", v-show=\"isLoggedIn\") Account\n  ```\n\n\n\n### Next Steps\n\nYou now have a demonstration application running, however it’s running against the demonstration user database. To create your own application:\n\n1. Go to tooltwist.com and register, click on the link in the verification email, create a new application, and allocate an APIKey. Replace the default ApiKey in /protected-config/websiteConfig.js and restart your server. \n\n2. Create a Mailchimp/Mandrill account, and install the registration and forgot-password templates from new-nuxt-project.zip. You will also need to verify that you own the domain used to send emails to users.\n\n3. If you wish to allow users to log in with a social media account, you will need to register the application with Facebook/Github/etc and enter the details into A3. The help links on the config pages explains how to configure Facebook, etc.   \n","date":"2018-07-19T04:04:16.864Z","updated":"2018-07-19T04:04:16.864Z","path":"v2/guide/installation.html","comments":1,"layout":"page","_id":"cjk0zidp00016vkrt7m1hky2e","content":"<p>Nuxt.js is really easy to get started with. A simple project only needs the <code>nuxt</code> dependency.</p>\n<h2 id=\"Using-Tooltwist-Nuxt-js-Starter-Template\"><a href=\"#Using-Tooltwist-Nuxt-js-Starter-Template\" class=\"headerlink\" title=\"Using Tooltwist Nuxt.js Starter Template\"></a>Using Tooltwist Nuxt.js Starter Template</h2><p>To get started quickly, the Tooltwist has created a <a href=\"https://github.com/tooltwist/nuxt-starter-template\" target=\"_blank\" rel=\"noopener\">starter template</a>.</p>\n<p><a href=\"https://github.com/tooltwist/nuxt-starter-template/archive/master.zip\" target=\"_blank\" rel=\"noopener\">Download the .zip</a> starter template or install it with vue-cli:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ vue init tooltwist/nuxt-starter-template my-project</span><br></pre></td></tr></table></figure>\n<p>If <a href=\"https://github.com/vuejs/vue-cli\" target=\"_blank\" rel=\"noopener\">vue-cli</a> is not installed, please install it with <code>npm install -g vue-cli</code></p>\n<p>then install the dependencies:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> &lt;project-name&gt;</span><br><span class=\"line\">$ npm install</span><br></pre></td></tr></table></figure>\n<p>and launch the project with:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ npm run dev</span><br></pre></td></tr></table></figure>\n<p>The application is now running on <a href=\"http://localhost:3000\" target=\"_blank\" rel=\"noopener\">http://localhost:3000</a>.</p>\n<p class=\"tip\">Nuxt.js will listen for file changes inside the <code>pages</code> directory, so there is no need to restart the application when adding new pages.</p>\n\n<p>To discover more about the directory structure of the project: <a href=\"/guide/directory-structure\">Directory Structure Documentation</a>.</p>\n<h2 id=\"Steps-To-Create-a-Project-Manually\"><a href=\"#Steps-To-Create-a-Project-Manually\" class=\"headerlink\" title=\"Steps To Create a Project Manually\"></a>Steps To Create a Project Manually</h2><p>These steps were used to create the template directory in this repo.</p>\n<h3 id=\"Before-Starting\"><a href=\"#Before-Starting\" class=\"headerlink\" title=\"Before Starting\"></a>Before Starting</h3><ul>\n<li><a href=\"https://nodejs.org/en/download/\" target=\"_blank\" rel=\"noopener\">Install nodeJS/npm</a></li>\n<li><a href=\"https://atom.io/\" target=\"_blank\" rel=\"noopener\">Install Atom (editor)</a></li>\n</ul>\n<blockquote>\n<p><b>Notes for Atom<b>:</b></b></p>\n<ul>\n<li>Use ⌘-t to jump to a file quickly.</li>\n<li>Use shift-⌘-t-\\ to show the currently open file in the tree on the left.</li>\n</ul>\n</blockquote>\n<h3 id=\"Create-a-default-Nuxt-project\"><a href=\"#Create-a-default-Nuxt-project\" class=\"headerlink\" title=\"Create a default Nuxt project\"></a>Create a default Nuxt project</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ vue init nuxt/starter &lt;project-name&gt;</span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> &lt;project-name&gt;</span><br><span class=\"line\">$ npm install</span><br><span class=\"line\">$ npm run dev</span><br></pre></td></tr></table></figure>\n<p class=\"tip\"><b>Info:</b> replace <code>&lt;project-name&gt;</code> by the name of the project.</p>\n\n\n<p>Open browser at <a href=\"http://localhost:3000\" target=\"_blank\" rel=\"noopener\">http://localhost:3000</a>.</p>\n<blockquote>\n<p><b>Notes<b>:</b></b></p>\n<ul>\n<li>Look at pages/index.vue<ul>\n<li>Make a change and see it appear on the browser.</li>\n<li>Notice the 3 sections to the page - &lt;template&gt; contains html, &lt;script&gt; contains Javascript, and &lt;style&gt; contains CSS.</li>\n</ul>\n</li>\n<li>Look at components/AppLogo.vue<ul>\n<li>Contains sections, similar to index.vue, but missing &lt;script&gt; (he &lt;script&gt; and &lt;style&gt; sections are optional).</li>\n<li>Notice that index.vue:<ul>\n<li>imports AppLogo.vue</li>\n<li>registers it as a component</li>\n<li>uses it in the HTML, as &lt;app-logo&gt;&lt;/app-logo&gt;</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<h3 id=\"Add-Pug-SCSS\"><a href=\"#Add-Pug-SCSS\" class=\"headerlink\" title=\"Add Pug, SCSS\"></a>Add Pug, SCSS</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install --save-dev pug@2.0.0-beta6 pug-loader node-sass sass-loader</span><br></pre></td></tr></table></figure>\n<p>Modify <code>pages/index.vue</code> to use Pug:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;template lang=&quot;pug&quot;&gt;</span><br><span class=\"line\">  section.container.has-text-centered</span><br><span class=\"line\">    div</span><br><span class=\"line\">      app-logo</span><br><span class=\"line\">      h1.title</span><br><span class=\"line\">        | j1</span><br><span class=\"line\">      h2.subtitle</span><br><span class=\"line\">        | Nuxt.js project</span><br><span class=\"line\">      .links</span><br><span class=\"line\">        a.button--green(href=&quot;https://nuxtjs.org/&quot;, target=&quot;_blank&quot;) Documentation</span><br><span class=\"line\">        a.button--grey(href=&quot;https://github.com/nuxt/nuxt.js&quot;, target=&quot;_blank&quot;) GitHub</span><br><span class=\"line\">&lt;/template&gt;</span><br></pre></td></tr></table></figure>\n<p>Check the page still works.</p>\n<blockquote>\n<p>Notes:</p>\n<ul>\n<li>uses indentation to indicate nesting, which removes the need for closing tags.</li>\n<li>uses CSS-like syntax for tags definitions: <code>h1.title#heading Hello</code> is equivalent to <code>&lt;h1 class=“title” id=“heading”&gt;Hello&lt;/h1&gt;</code></li>\n<li>Everything is assumed a tag unless prfixed with <code>‘|’</code>.</li>\n<li>Indentation must correctly reflect the nesting of the html elements.</li>\n</ul>\n</blockquote>\n<p>Details about ‘pug’ (previously called ‘jade’) can be found at <a href=\"https://pugjs.org\" target=\"_blank\" rel=\"noopener\">https://pugjs.org</a>.</p>\n<h3 id=\"Add-Bulma-Buefy\"><a href=\"#Add-Bulma-Buefy\" class=\"headerlink\" title=\"Add Bulma / Buefy\"></a>Add Bulma / Buefy</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install nuxt-buefy --save</span><br></pre></td></tr></table></figure>\n<p>In <code>nuxt.config.js</code> add:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">modules: [</span><br><span class=\"line\">  [<span class=\"string\">'nuxt-buefy'</span>],</span><br><span class=\"line\">],</span><br><span class=\"line\">buefy: &#123; <span class=\"attr\">defaultIconPack</span>: <span class=\"string\">'fas'</span> &#125;</span><br></pre></td></tr></table></figure>\n<p class=\"tip\">Bulma = CSS library, like Bootstrap but newer and simpler. It makes creating responsive pages easy. See <code>https://bulma.io/documentation</code></p>\n\n<p>Modify <code>pages/index.vue</code>:</p>\n<ul>\n<li><p>Remove the styles (we’ll use Bulma instead):</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\">&lt;/style&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Delete the .links section and it’s two buttons.</p>\n</li>\n<li><p>Do alignment using Bulma classes. Modify the template to match this div section.container.has-text-centered br br app-logo</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">section.container.has-text-centered</span><br><span class=\"line\">  br</span><br><span class=\"line\">  h1.title.is-1</span><br><span class=\"line\">    | z58b</span><br><span class=\"line\">  h2.subtitle.is-4</span><br><span class=\"line\">    | Nuxt.js project</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>Restart the server and see how this looks in the browser.</p>\n<ul>\n<li>Add a box using Bulma, below the subtitle, with the same indent as h2:<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">br</span><br><span class=\"line\">.box</span><br><span class=\"line\">  | Some nice text can go inside this box.</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p class=\"tip\"><br>Buefy = Reusable components for VueJS, using Bulma <a href=\"https://buefy.github.io/#/documentation/start\" target=\"_blank\" rel=\"noopener\">https://buefy.github.io/#/documentation/start</a><br><br><br>Bulma only provides CSS. Buefy provides components that extends Bulma’s CSS and may also contain Javascript code. <br></p>\n\n\n<p>Add the following below the box code from above (with the same indent):<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">br</span><br><span class=\"line\">b-collapse(:open=&quot;false&quot;)</span><br><span class=\"line\">  button.button.is-primary(slot=&quot;trigger&quot;) Click me!</span><br><span class=\"line\">  br</span><br><span class=\"line\">  .notification</span><br><span class=\"line\">    .content</span><br><span class=\"line\">      h3.subtitle.is-4 Blurb</span><br><span class=\"line\">      p</span><br><span class=\"line\">        | Lorem ipsum dolor sit amet, consectetur adipiscing elit.</span><br><span class=\"line\">        | Nulla accumsan, metus ultrices eleifend gravida, nulla nunceu lectus.</span><br><span class=\"line\">        | Ut vulputate semper dui. Fusce erat odio, sollicitudin vel.</span><br></pre></td></tr></table></figure></p>\n<p class=\"tip\"><br>Note that the button defined here is NOT the same as the default buttons that came with the generated project. The button—green and button—grey came from <code>layouts/default.vue</code>, whereas classes button and is-primary come from Bulma.<br></p>\n\n\n<h3 id=\"Add-Font-awesome\"><a href=\"#Add-Font-awesome\" class=\"headerlink\" title=\"Add Font-awesome\"></a>Add Font-awesome</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install @nuxtjs/font-awesome --save</span><br></pre></td></tr></table></figure>\n<p>In <code>nuxt.config.js</code> add:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">modules: [</span><br><span class=\"line\">  [<span class=\"string\">'nuxt-buefy'</span>],</span><br><span class=\"line\">  <span class=\"string\">'@nuxtjs/font-awesome'</span>,</span><br><span class=\"line\">],</span><br></pre></td></tr></table></figure>\n<p>In <code>pages/index.vue</code>:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">.box</span><br><span class=\"line\">  i.fa.fa-user</span><br><span class=\"line\">  | &amp;nbsp; Some nice text can go inside this box.</span><br></pre></td></tr></table></figure>\n<p>Restart the server and see how it looks.</p>\n<h3 id=\"Adjusting-the-Site\"><a href=\"#Adjusting-the-Site\" class=\"headerlink\" title=\"Adjusting the Site\"></a>Adjusting the Site</h3><h4 id=\"Add-a-Header-and-Footer\"><a href=\"#Add-a-Header-and-Footer\" class=\"headerlink\" title=\"Add a Header and Footer\"></a>Add a Header and Footer</h4><ul>\n<li>Copy <code>/assets/images/*</code> from new-nuxt-project.zip into your project</li>\n<li><p>Add <code>components/PublicHeader.vue</code>:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;template lang=&quot;pug&quot;&gt;</span><br><span class=\"line\">   // styles defined in assets/scss/main.cscc</span><br><span class=\"line\">    nav.navbar.is-dark.is-fixed-top.my-header</span><br><span class=\"line\">      .container</span><br><span class=\"line\">        .navbar-brand</span><br><span class=\"line\">          router-link.navbar-item(to=&quot;/&quot;)</span><br><span class=\"line\">            img(src=&quot;@/assets/images/tooltwist-logo-white.png&quot;, alt=&quot;My Project&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">          .navbar-burger.burger(data-target=&quot;navbarExampleTransparentExample&quot;, @click=&quot;toggleNavbar()&quot;, v-bind:class=&quot;&#123;&apos;is-active&apos;: isActive&#125;&quot;)</span><br><span class=\"line\">            span</span><br><span class=\"line\">            span</span><br><span class=\"line\">            span</span><br><span class=\"line\">        //- navbar-brand</span><br><span class=\"line\"></span><br><span class=\"line\">        #navbarExampleTransparentExample.navbar-menu(v-bind:class=&quot;&#123;&apos;is-active&apos;: isActive&#125;&quot;)</span><br><span class=\"line\">          .navbar-start</span><br><span class=\"line\">            router-link.navbar-item(to=&quot;/publicPage&quot;) publicPage</span><br><span class=\"line\">            router-link.navbar-item(to=&quot;/user/privatePage&quot;) privatePage</span><br><span class=\"line\">          //- navbar-start</span><br><span class=\"line\"></span><br><span class=\"line\">          .navbar-end</span><br><span class=\"line\">            .navbar-item.has-text-grey-light.is-size-7.has-text-weight-light(v-show=&quot;isLoggedIn&quot;) [ &#123;&#123;userTitle&#125;&#125; ]</span><br><span class=\"line\">            router-link.navbar-item(v-show=&quot;!isLoggedIn&quot;, to=&quot;/login&quot;) Login</span><br><span class=\"line\">            a.navbar-item(v-show=&quot;isLoggedIn&quot;, @click=&quot;doLogout&quot;) Sign out</span><br><span class=\"line\">          //- navbar-end</span><br><span class=\"line\"></span><br><span class=\"line\">        //- navbar-menu</span><br><span class=\"line\">      //- container</span><br><span class=\"line\">    //- nav</span><br><span class=\"line\">  &lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;script&gt;</span><br><span class=\"line\">  export default &#123;</span><br><span class=\"line\">    data: function() &#123;</span><br><span class=\"line\">      return &#123;</span><br><span class=\"line\">        isActive: false</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    methods: &#123;</span><br><span class=\"line\">      toggleNavbar() &#123;</span><br><span class=\"line\">        this.isActive = !this.isActive</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      doLogout: function () &#123;</span><br><span class=\"line\">        this.$loginservice.logout()</span><br><span class=\"line\">        this.$router.push(&apos;/&apos;)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    computed: &#123;</span><br><span class=\"line\">      isLoggedIn: function () &#123;</span><br><span class=\"line\">        if (this.$loginservice &amp;&amp; this.$loginservice.user) &#123;</span><br><span class=\"line\">          return true;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return false;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      userTitle: function () &#123;</span><br><span class=\"line\">        if (this.$loginservice &amp;&amp; this.$loginservice.user) &#123;</span><br><span class=\"line\">          if (this.$loginservice.user.username) &#123;</span><br><span class=\"line\">            return this.$loginservice.user.username</span><br><span class=\"line\">          &#125; else &#123;</span><br><span class=\"line\">            return this.$loginservice.user.email</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return null</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  &lt;/script&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Add <code>components/PublicFooter.vue</code>:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;template lang=&quot;pug&quot;&gt;</span><br><span class=\"line\">   // styles defined in assets/scss/main.cscc</span><br><span class=\"line\">   footer.footer.has-background-dark.has-text-light.has-text-centered.my-footer</span><br><span class=\"line\">     | Copyright &amp;copy; ToolTwist 2018</span><br><span class=\"line\"> &lt;/template&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Add <code>assets/scss/main.scss</code>:<br>This contains styles that will be applied across the website.</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Positioning of the footer</span></span><br><span class=\"line\"><span class=\"variable\">$my-header-height</span>: <span class=\"number\">52</span>;</span><br><span class=\"line\"><span class=\"variable\">$my-footer-height</span>: <span class=\"number\">42</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.above-my-footer</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: block;</span><br><span class=\"line\">  <span class=\"attribute\">top</span>: <span class=\"number\">0px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">min-height</span>: calc(<span class=\"number\">100vh</span> - #&#123;<span class=\"variable\">$my-footer-height</span>&#125;px);</span><br><span class=\"line\">  <span class=\"attribute\">padding-top</span>: #&#123;<span class=\"variable\">$my-header-height</span>&#125;px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.my-footer</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"variable\">$my-footer-height</span>;</span><br><span class=\"line\">  <span class=\"attribute\">padding-top</span>: <span class=\"number\">8px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">padding-bottom</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border-top</span>: solid <span class=\"number\">1px</span> <span class=\"number\">#e0e0e0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border-bottom</span>: solid <span class=\"number\">1px</span> <span class=\"number\">#e0e0e0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Load the styles globally, by adding it to <code>nuxt.config.js</code>:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">module.exports = &#123; … css: [ &#123; src: &apos;@/assets/scss/main.scss&apos;, lang: &apos;sass&apos; &#125; ], &#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"Update-layouts-default-vue\"><a href=\"#Update-layouts-default-vue\" class=\"headerlink\" title=\"Update layouts/default.vue:\"></a>Update <code>layouts/default.vue</code>:</h4><ul>\n<li>remove .button—green and .button-grey and also their hover classes.</li>\n<li>import the header and footer.</li>\n<li>use header and footer on the page</li>\n<li>use the .above-my-footer and .my-footer classes to position the footer div .above-my-footer public-header nuxt<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">public-footer.my-footer</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>The page should now have a header and footer.</p>\n<h4 id=\"Add-a-Couple-of-Pages\"><a href=\"#Add-a-Couple-of-Pages\" class=\"headerlink\" title=\"Add a Couple of Pages\"></a>Add a Couple of Pages</h4><ul>\n<li><p>Add <code>pages/publicPage.vue</code>:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">section.container br br h1.title Public Page br | This page can be seen irrespective of whether the user is logged in. &lt;script&gt; &lt;/script&gt; &lt;style&gt; &lt;/style&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Add <code>pages/user/privatePage.vue</code>:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">section.container br br h1.title Private Page br | This page should only be seen when the user is logged in. &lt;script&gt; &lt;/script&gt; &lt;style&gt; &lt;/style&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>You should now be able to navigate to these pages using the navbar at the top of the page.</p>\n<p class=\"tip\"><br>Resize the screen and see how it adjusts. When the screen gets small enough it replaces the menu options with a “burger”, for mobile devices. This functionality is provided by a combination of Bulma and the toggleNavbar() method in PublicHeader.vue.<br></p>\n\n\n<h3 id=\"Install-libraries\"><a href=\"#Install-libraries\" class=\"headerlink\" title=\"Install libraries\"></a>Install libraries</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install axios debounce v-hotkey vue-drag-drop vue-froala-wysiwyg vue-split-panel vue-awesome --save</span><br><span class=\"line\"></span><br><span class=\"line\">npm install vue-loginservice vue-contentservice --save</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>In nuxt.config.js:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> nodeExternals = <span class=\"built_in\">require</span>(<span class=\"string\">'webpack-node-externals'</span>)  </span><br><span class=\"line\"><span class=\"keyword\">const</span> webpack = <span class=\"built_in\">require</span>(<span class=\"string\">'webpack'</span>)  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;  </span><br><span class=\"line\">  …  </span><br><span class=\"line\">  build: &#123;  </span><br><span class=\"line\">    …  </span><br><span class=\"line\">    extend…  </span><br><span class=\"line\"></span><br><span class=\"line\">    plugins: [</span><br><span class=\"line\">      <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">       *  These are the Webpack plugins (not to be mistaken for Nuxt plugins)</span></span><br><span class=\"line\"><span class=\"comment\">       *  https://nuxtjs.org/faq/webpack-plugins/</span></span><br><span class=\"line\"><span class=\"comment\">       */</span></span><br><span class=\"line\">      <span class=\"comment\">// https://nuxtjs.org/faq/webpack-plugins/</span></span><br><span class=\"line\">      <span class=\"comment\">// https://github.com/nuxt/nuxt.js/issues/843</span></span><br><span class=\"line\">      <span class=\"keyword\">new</span> webpack.ProvidePlugin(&#123;</span><br><span class=\"line\">        $: <span class=\"string\">'jquery'</span>,</span><br><span class=\"line\">        jQuery: <span class=\"string\">'jquery'</span>,</span><br><span class=\"line\">        <span class=\"string\">'window.jQuery'</span>: <span class=\"string\">'jquery'</span></span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    ],</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  …</span><br><span class=\"line\">  plugins: [</span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">     *  These are our Nuxt plugins, defined in the /plugins directory.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    &#123; <span class=\"attr\">src</span>: <span class=\"string\">'~plugins/vue-awesome.js'</span>, <span class=\"attr\">ssr</span>: <span class=\"literal\">true</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">src</span>: <span class=\"string\">'~plugins/vue-loginservice.js'</span>, <span class=\"attr\">ssr</span>: <span class=\"literal\">false</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">src</span>: <span class=\"string\">'~plugins/vue-contentservice.js'</span>, <span class=\"attr\">ssr</span>: <span class=\"literal\">false</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">src</span>: <span class=\"string\">'~/plugins/nuxt-drag-drop.js'</span>, <span class=\"attr\">ssr</span>: <span class=\"literal\">true</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">src</span>: <span class=\"string\">'~/plugins/nuxt-froala.js'</span>, <span class=\"attr\">ssr</span>: <span class=\"literal\">false</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">src</span>: <span class=\"string\">'~/plugins/nuxt-vue-split-panel.js'</span>, <span class=\"attr\">ssr</span>: <span class=\"literal\">false</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">src</span>: <span class=\"string\">'~plugins/vue-hotkey.js'</span>, <span class=\"attr\">ssr</span>: <span class=\"literal\">false</span> &#125;,</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  modules…</span><br></pre></td></tr></table></figure>\n<p class=\"tip\"><br>Note that there are two plugins sections. The section inside build refers to webpack plugins, while the other refers to Nuxt plugins.<br></p>\n</li>\n<li><p>Copy <code>/plugins/*</code> from <b>new-nuxt-project.zip</b> into your project</p>\n</li>\n<li>Copy <code>/lib</code> from <b>new-nuxt-project.zip</b> into your project</li>\n</ul>\n<h3 id=\"Using-Tooltwist-Components\"><a href=\"#Using-Tooltwist-Components\" class=\"headerlink\" title=\"Using Tooltwist Components\"></a>Using Tooltwist Components</h3><ul>\n<li>Copy <code>/protected-config/websiteConfig.js</code> from <b>new-nuxt-project.zip</b> into your project</li>\n<li>If you already have a Tooltwist account, define a new application, get an APIKey, and update <code>websiteConfig.js</code> with your new APIKey.</li>\n</ul>\n<h5 id=\"Login-page\"><a href=\"#Login-page\" class=\"headerlink\" title=\"Login page\"></a>Login page</h5><ul>\n<li><p>Create <code>pages/login.vue</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;template lang=&quot;pug&quot;&gt;</span><br><span class=\"line\">.my-login-page</span><br><span class=\"line\">  section</span><br><span class=\"line\">    br</span><br><span class=\"line\">    br</span><br><span class=\"line\">    loginservice-login(@userchange=&quot;onUserChange&quot;)</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">import PublicHeader from &apos;@/components/PublicHeader.vue&apos;</span><br><span class=\"line\">import PublicFooter from &apos;@/components/PublicFooter.vue&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">export default &#123;</span><br><span class=\"line\">  name: &apos;a3-login-page&apos;,</span><br><span class=\"line\">  components: &#123;</span><br><span class=\"line\">    PublicHeader,</span><br><span class=\"line\">    PublicFooter</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    onUserChange () &#123;</span><br><span class=\"line\">      if (this.$loginservice.user) &#123;</span><br><span class=\"line\">        this.$router.push(&apos;/user/privatePage&apos;)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<blockquote>\n<p>Notice how the menu bar changes when the user logs in:</p>\n<ul>\n<li>Restart the server, and log in with demo/demo.</li>\n<li>The computed value ‘isLoggedIn’ changes from false to true, causing the label to switch from ‘Login’ to ‘Sign out’.</li>\n<li>The computed value ‘userTitle’ gets displayed when the user is logged in.</li>\n</ul>\n</blockquote>\n<h3 id=\"Redirect-Middleware\"><a href=\"#Redirect-Middleware\" class=\"headerlink\" title=\"Redirect Middleware\"></a>Redirect Middleware</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">a) Some pages should be visible only when a user is logged in.</span><br><span class=\"line\"></span><br><span class=\"line\">b) Other pages should not be shown when a user is logged in.</span><br><span class=\"line\"></span><br><span class=\"line\">c) Using Nuxt middleware we can intercept the routing to a page, and forward instead to a different page if required.</span><br><span class=\"line\"></span><br><span class=\"line\">d) The Server Side Rendering cannot access browser cookies, so the middleware cannot determine if the user is logged in. Instead it needs to return to a page to the browser that will immediately redirect to the required page, causing the middleware to run again, this time on the browser.</span><br><span class=\"line\"></span><br><span class=\"line\">To provide this functionality, a Nuxt middleware named redirectIfServer is used.</span><br></pre></td></tr></table></figure>\n<ul>\n<li>Copy <code>/middleware/only-if-logged-in.js</code> from <b>new-nuxt-project.zip</b> into your project.</li>\n<li>Copy <code>/pages/loginservice-redirect</code> from <b>new-nuxt-project.zip</b> into your project.</li>\n<li>Add the following to <code>nuxt.config.js</code>:<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">   …</span><br><span class=\"line\">   css: […],</span><br><span class=\"line\">  router: &#123;</span><br><span class=\"line\">      middleware: <span class=\"string\">'only-if-logged-in'</span></span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p class=\"tip\"><br>Note that if you now try to go to privatePage without being logged in, you will be forwarded to the login page. Take a look at the output of npm run dev, and also the Javascript console of your browser and you will see debug messages explaining what the router is doing and why.<br>If you ever wonder why some pages cannot be accessed, this is the first place to look.<br></p>\n\n\n<p>We should stop privatePage from being displayed in the user is not logged in.</p>\n<ul>\n<li>Add the following code in <code>components/PublicHeader.vue</code>:<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">#navbarExampleTransparentExample.navbar-menu(v-bind:class=&quot;&#123;&apos;is-active&apos;: isActive&#125;&quot;)</span><br><span class=\"line\">  .navbar-start</span><br><span class=\"line\">    router-link.navbar-item(to=&quot;/publicPage&quot;) publicPage</span><br><span class=\"line\">    router-link.navbar-item(to=&quot;/user/privatePage&quot;, v-show=&quot;isLoggedIn&quot;) privatePage</span><br><span class=\"line\">  //- navbar-start</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"Bounce-Page-required-for-social-media-login\"><a href=\"#Bounce-Page-required-for-social-media-login\" class=\"headerlink\" title=\"Bounce Page (required for social media login)\"></a>Bounce Page (required for social media login)</h3><p>When logging in with Facebook/Google/Github/Twitter/LinkedIn the browser redirects to their authentication server, to loginservice, and finally back to an application page with the credentials provided as a URL parameter.  &gt; Our application (via vue-loginservice) saves these credentials in a cookie and will stay logged in until the user logs out.</p>\n<p>This leaves a problem… after logging out, if the user returns to that page via the browser history or the back button, the URL parameters will log the user back in. To avoid this problem, we need to prevent the URL with the authentication parameters being saved in the browser history.</p>\n<p>We do this with a page called loginservice-bounce. Loginservice will jump to this page with the credentials, and this page will save the credentials as a cookie then immediately redirect to the actually required application page, without the URL parameters for the credentials.</p>\n<ul>\n<li><p>Create <code>/pages/loginservice-bounce.vue</code> with the following:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;loginservice-bounce-component/&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>In <code>plugins/vue-loginservice.js</code> un-comment the faceboook line:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">hints: &#123;</span><br><span class=\"line\">  …</span><br><span class=\"line\">  sitename: <span class=\"string\">'ToolTwist'</span>,</span><br><span class=\"line\">  login: &#123;</span><br><span class=\"line\">    facebook: <span class=\"literal\">true</span>,       &lt;----- here</span><br><span class=\"line\">    <span class=\"comment\">// google: true,</span></span><br><span class=\"line\">    <span class=\"comment\">// github: true,</span></span><br><span class=\"line\">    …</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"Account-Page\"><a href=\"#Account-Page\" class=\"headerlink\" title=\"Account Page\"></a>Account Page</h3><ul>\n<li><p>Add a page <code>pages/user/account</code>:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;template lang=&quot;pug&quot;&gt;</span><br><span class=\"line\">.a3-account-page</span><br><span class=\"line\">  .a3-above-the-footer</span><br><span class=\"line\">    a3-header</span><br><span class=\"line\">    section.my-header</span><br><span class=\"line\">      .container</span><br><span class=\"line\">        br</span><br><span class=\"line\">        .my-heading</span><br><span class=\"line\">          | My Profile</span><br><span class=\"line\"></span><br><span class=\"line\">    br</span><br><span class=\"line\">    br</span><br><span class=\"line\">    .container</span><br><span class=\"line\">      loginservice-user-details(:tenant=&quot;$loginservice.user.tenant&quot;, :user-id=&quot;$loginservice.user.id&quot;, change-password)</span><br><span class=\"line\"></span><br><span class=\"line\">  a3-footer.a3-the-footer</span><br><span class=\"line\">&lt;/template&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Add a link to this new page to <code>/components/PublicHeader</code>:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">router-link.navbar-item(to=&quot;/user/account&quot;, v-show=&quot;isLoggedIn&quot;) Account</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"Next-Steps\"><a href=\"#Next-Steps\" class=\"headerlink\" title=\"Next Steps\"></a>Next Steps</h3><p>You now have a demonstration application running, however it’s running against the demonstration user database. To create your own application:</p>\n<ol>\n<li><p>Go to tooltwist.com and register, click on the link in the verification email, create a new application, and allocate an APIKey. Replace the default ApiKey in /protected-config/websiteConfig.js and restart your server. </p>\n</li>\n<li><p>Create a Mailchimp/Mandrill account, and install the registration and forgot-password templates from new-nuxt-project.zip. You will also need to verify that you own the domain used to send emails to users.</p>\n</li>\n<li><p>If you wish to allow users to log in with a social media account, you will need to register the application with Facebook/Github/etc and enter the details into A3. The help links on the config pages explains how to configure Facebook, etc.   </p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<p>Nuxt.js is really easy to get started with. A simple project only needs the <code>nuxt</code> dependency.</p>\n<h2 id=\"Using-Tooltwist-Nuxt-js-Starter-Template\"><a href=\"#Using-Tooltwist-Nuxt-js-Starter-Template\" class=\"headerlink\" title=\"Using Tooltwist Nuxt.js Starter Template\"></a>Using Tooltwist Nuxt.js Starter Template</h2><p>To get started quickly, the Tooltwist has created a <a href=\"https://github.com/tooltwist/nuxt-starter-template\" target=\"_blank\" rel=\"noopener\">starter template</a>.</p>\n<p><a href=\"https://github.com/tooltwist/nuxt-starter-template/archive/master.zip\" target=\"_blank\" rel=\"noopener\">Download the .zip</a> starter template or install it with vue-cli:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ vue init tooltwist/nuxt-starter-template my-project</span><br></pre></td></tr></table></figure>\n<p>If <a href=\"https://github.com/vuejs/vue-cli\" target=\"_blank\" rel=\"noopener\">vue-cli</a> is not installed, please install it with <code>npm install -g vue-cli</code></p>\n<p>then install the dependencies:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> &lt;project-name&gt;</span><br><span class=\"line\">$ npm install</span><br></pre></td></tr></table></figure>\n<p>and launch the project with:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ npm run dev</span><br></pre></td></tr></table></figure>\n<p>The application is now running on <a href=\"http://localhost:3000\" target=\"_blank\" rel=\"noopener\">http://localhost:3000</a>.</p>\n<p class=\"tip\">Nuxt.js will listen for file changes inside the <code>pages</code> directory, so there is no need to restart the application when adding new pages.</p>\n\n<p>To discover more about the directory structure of the project: <a href=\"/guide/directory-structure\">Directory Structure Documentation</a>.</p>\n<h2 id=\"Steps-To-Create-a-Project-Manually\"><a href=\"#Steps-To-Create-a-Project-Manually\" class=\"headerlink\" title=\"Steps To Create a Project Manually\"></a>Steps To Create a Project Manually</h2><p>These steps were used to create the template directory in this repo.</p>\n<h3 id=\"Before-Starting\"><a href=\"#Before-Starting\" class=\"headerlink\" title=\"Before Starting\"></a>Before Starting</h3><ul>\n<li><a href=\"https://nodejs.org/en/download/\" target=\"_blank\" rel=\"noopener\">Install nodeJS/npm</a></li>\n<li><a href=\"https://atom.io/\" target=\"_blank\" rel=\"noopener\">Install Atom (editor)</a></li>\n</ul>\n<blockquote>\n<p><b>Notes for Atom<b>:</b></b></p>\n<ul>\n<li>Use ⌘-t to jump to a file quickly.</li>\n<li>Use shift-⌘-t-\\ to show the currently open file in the tree on the left.</li>\n</ul>\n</blockquote>\n<h3 id=\"Create-a-default-Nuxt-project\"><a href=\"#Create-a-default-Nuxt-project\" class=\"headerlink\" title=\"Create a default Nuxt project\"></a>Create a default Nuxt project</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ vue init nuxt/starter &lt;project-name&gt;</span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> &lt;project-name&gt;</span><br><span class=\"line\">$ npm install</span><br><span class=\"line\">$ npm run dev</span><br></pre></td></tr></table></figure>\n<p class=\"tip\"><b>Info:</b> replace <code>&lt;project-name&gt;</code> by the name of the project.</p>\n\n\n<p>Open browser at <a href=\"http://localhost:3000\" target=\"_blank\" rel=\"noopener\">http://localhost:3000</a>.</p>\n<blockquote>\n<p><b>Notes<b>:</b></b></p>\n<ul>\n<li>Look at pages/index.vue<ul>\n<li>Make a change and see it appear on the browser.</li>\n<li>Notice the 3 sections to the page - &lt;template&gt; contains html, &lt;script&gt; contains Javascript, and &lt;style&gt; contains CSS.</li>\n</ul>\n</li>\n<li>Look at components/AppLogo.vue<ul>\n<li>Contains sections, similar to index.vue, but missing &lt;script&gt; (he &lt;script&gt; and &lt;style&gt; sections are optional).</li>\n<li>Notice that index.vue:<ul>\n<li>imports AppLogo.vue</li>\n<li>registers it as a component</li>\n<li>uses it in the HTML, as &lt;app-logo&gt;&lt;/app-logo&gt;</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<h3 id=\"Add-Pug-SCSS\"><a href=\"#Add-Pug-SCSS\" class=\"headerlink\" title=\"Add Pug, SCSS\"></a>Add Pug, SCSS</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install --save-dev pug@2.0.0-beta6 pug-loader node-sass sass-loader</span><br></pre></td></tr></table></figure>\n<p>Modify <code>pages/index.vue</code> to use Pug:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;template lang=&quot;pug&quot;&gt;</span><br><span class=\"line\">  section.container.has-text-centered</span><br><span class=\"line\">    div</span><br><span class=\"line\">      app-logo</span><br><span class=\"line\">      h1.title</span><br><span class=\"line\">        | j1</span><br><span class=\"line\">      h2.subtitle</span><br><span class=\"line\">        | Nuxt.js project</span><br><span class=\"line\">      .links</span><br><span class=\"line\">        a.button--green(href=&quot;https://nuxtjs.org/&quot;, target=&quot;_blank&quot;) Documentation</span><br><span class=\"line\">        a.button--grey(href=&quot;https://github.com/nuxt/nuxt.js&quot;, target=&quot;_blank&quot;) GitHub</span><br><span class=\"line\">&lt;/template&gt;</span><br></pre></td></tr></table></figure>\n<p>Check the page still works.</p>\n<blockquote>\n<p>Notes:</p>\n<ul>\n<li>uses indentation to indicate nesting, which removes the need for closing tags.</li>\n<li>uses CSS-like syntax for tags definitions: <code>h1.title#heading Hello</code> is equivalent to <code>&lt;h1 class=“title” id=“heading”&gt;Hello&lt;/h1&gt;</code></li>\n<li>Everything is assumed a tag unless prfixed with <code>‘|’</code>.</li>\n<li>Indentation must correctly reflect the nesting of the html elements.</li>\n</ul>\n</blockquote>\n<p>Details about ‘pug’ (previously called ‘jade’) can be found at <a href=\"https://pugjs.org\" target=\"_blank\" rel=\"noopener\">https://pugjs.org</a>.</p>\n<h3 id=\"Add-Bulma-Buefy\"><a href=\"#Add-Bulma-Buefy\" class=\"headerlink\" title=\"Add Bulma / Buefy\"></a>Add Bulma / Buefy</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install nuxt-buefy --save</span><br></pre></td></tr></table></figure>\n<p>In <code>nuxt.config.js</code> add:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">modules: [</span><br><span class=\"line\">  [<span class=\"string\">'nuxt-buefy'</span>],</span><br><span class=\"line\">],</span><br><span class=\"line\">buefy: &#123; <span class=\"attr\">defaultIconPack</span>: <span class=\"string\">'fas'</span> &#125;</span><br></pre></td></tr></table></figure>\n<p class=\"tip\">Bulma = CSS library, like Bootstrap but newer and simpler. It makes creating responsive pages easy. See <code>https://bulma.io/documentation</code></p>\n\n<p>Modify <code>pages/index.vue</code>:</p>\n<ul>\n<li><p>Remove the styles (we’ll use Bulma instead):</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\">&lt;/style&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Delete the .links section and it’s two buttons.</p>\n</li>\n<li><p>Do alignment using Bulma classes. Modify the template to match this div section.container.has-text-centered br br app-logo</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">section.container.has-text-centered</span><br><span class=\"line\">  br</span><br><span class=\"line\">  h1.title.is-1</span><br><span class=\"line\">    | z58b</span><br><span class=\"line\">  h2.subtitle.is-4</span><br><span class=\"line\">    | Nuxt.js project</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>Restart the server and see how this looks in the browser.</p>\n<ul>\n<li>Add a box using Bulma, below the subtitle, with the same indent as h2:<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">br</span><br><span class=\"line\">.box</span><br><span class=\"line\">  | Some nice text can go inside this box.</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p class=\"tip\"><br>Buefy = Reusable components for VueJS, using Bulma <a href=\"https://buefy.github.io/#/documentation/start\" target=\"_blank\" rel=\"noopener\">https://buefy.github.io/#/documentation/start</a><br><br><br>Bulma only provides CSS. Buefy provides components that extends Bulma’s CSS and may also contain Javascript code. <br></p>\n\n\n<p>Add the following below the box code from above (with the same indent):<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">br</span><br><span class=\"line\">b-collapse(:open=&quot;false&quot;)</span><br><span class=\"line\">  button.button.is-primary(slot=&quot;trigger&quot;) Click me!</span><br><span class=\"line\">  br</span><br><span class=\"line\">  .notification</span><br><span class=\"line\">    .content</span><br><span class=\"line\">      h3.subtitle.is-4 Blurb</span><br><span class=\"line\">      p</span><br><span class=\"line\">        | Lorem ipsum dolor sit amet, consectetur adipiscing elit.</span><br><span class=\"line\">        | Nulla accumsan, metus ultrices eleifend gravida, nulla nunceu lectus.</span><br><span class=\"line\">        | Ut vulputate semper dui. Fusce erat odio, sollicitudin vel.</span><br></pre></td></tr></table></figure></p>\n<p class=\"tip\"><br>Note that the button defined here is NOT the same as the default buttons that came with the generated project. The button—green and button—grey came from <code>layouts/default.vue</code>, whereas classes button and is-primary come from Bulma.<br></p>\n\n\n<h3 id=\"Add-Font-awesome\"><a href=\"#Add-Font-awesome\" class=\"headerlink\" title=\"Add Font-awesome\"></a>Add Font-awesome</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install @nuxtjs/font-awesome --save</span><br></pre></td></tr></table></figure>\n<p>In <code>nuxt.config.js</code> add:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">modules: [</span><br><span class=\"line\">  [<span class=\"string\">'nuxt-buefy'</span>],</span><br><span class=\"line\">  <span class=\"string\">'@nuxtjs/font-awesome'</span>,</span><br><span class=\"line\">],</span><br></pre></td></tr></table></figure>\n<p>In <code>pages/index.vue</code>:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">.box</span><br><span class=\"line\">  i.fa.fa-user</span><br><span class=\"line\">  | &amp;nbsp; Some nice text can go inside this box.</span><br></pre></td></tr></table></figure>\n<p>Restart the server and see how it looks.</p>\n<h3 id=\"Adjusting-the-Site\"><a href=\"#Adjusting-the-Site\" class=\"headerlink\" title=\"Adjusting the Site\"></a>Adjusting the Site</h3><h4 id=\"Add-a-Header-and-Footer\"><a href=\"#Add-a-Header-and-Footer\" class=\"headerlink\" title=\"Add a Header and Footer\"></a>Add a Header and Footer</h4><ul>\n<li>Copy <code>/assets/images/*</code> from new-nuxt-project.zip into your project</li>\n<li><p>Add <code>components/PublicHeader.vue</code>:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;template lang=&quot;pug&quot;&gt;</span><br><span class=\"line\">   // styles defined in assets/scss/main.cscc</span><br><span class=\"line\">    nav.navbar.is-dark.is-fixed-top.my-header</span><br><span class=\"line\">      .container</span><br><span class=\"line\">        .navbar-brand</span><br><span class=\"line\">          router-link.navbar-item(to=&quot;/&quot;)</span><br><span class=\"line\">            img(src=&quot;@/assets/images/tooltwist-logo-white.png&quot;, alt=&quot;My Project&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">          .navbar-burger.burger(data-target=&quot;navbarExampleTransparentExample&quot;, @click=&quot;toggleNavbar()&quot;, v-bind:class=&quot;&#123;&apos;is-active&apos;: isActive&#125;&quot;)</span><br><span class=\"line\">            span</span><br><span class=\"line\">            span</span><br><span class=\"line\">            span</span><br><span class=\"line\">        //- navbar-brand</span><br><span class=\"line\"></span><br><span class=\"line\">        #navbarExampleTransparentExample.navbar-menu(v-bind:class=&quot;&#123;&apos;is-active&apos;: isActive&#125;&quot;)</span><br><span class=\"line\">          .navbar-start</span><br><span class=\"line\">            router-link.navbar-item(to=&quot;/publicPage&quot;) publicPage</span><br><span class=\"line\">            router-link.navbar-item(to=&quot;/user/privatePage&quot;) privatePage</span><br><span class=\"line\">          //- navbar-start</span><br><span class=\"line\"></span><br><span class=\"line\">          .navbar-end</span><br><span class=\"line\">            .navbar-item.has-text-grey-light.is-size-7.has-text-weight-light(v-show=&quot;isLoggedIn&quot;) [ &#123;&#123;userTitle&#125;&#125; ]</span><br><span class=\"line\">            router-link.navbar-item(v-show=&quot;!isLoggedIn&quot;, to=&quot;/login&quot;) Login</span><br><span class=\"line\">            a.navbar-item(v-show=&quot;isLoggedIn&quot;, @click=&quot;doLogout&quot;) Sign out</span><br><span class=\"line\">          //- navbar-end</span><br><span class=\"line\"></span><br><span class=\"line\">        //- navbar-menu</span><br><span class=\"line\">      //- container</span><br><span class=\"line\">    //- nav</span><br><span class=\"line\">  &lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;script&gt;</span><br><span class=\"line\">  export default &#123;</span><br><span class=\"line\">    data: function() &#123;</span><br><span class=\"line\">      return &#123;</span><br><span class=\"line\">        isActive: false</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    methods: &#123;</span><br><span class=\"line\">      toggleNavbar() &#123;</span><br><span class=\"line\">        this.isActive = !this.isActive</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      doLogout: function () &#123;</span><br><span class=\"line\">        this.$loginservice.logout()</span><br><span class=\"line\">        this.$router.push(&apos;/&apos;)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    computed: &#123;</span><br><span class=\"line\">      isLoggedIn: function () &#123;</span><br><span class=\"line\">        if (this.$loginservice &amp;&amp; this.$loginservice.user) &#123;</span><br><span class=\"line\">          return true;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return false;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      userTitle: function () &#123;</span><br><span class=\"line\">        if (this.$loginservice &amp;&amp; this.$loginservice.user) &#123;</span><br><span class=\"line\">          if (this.$loginservice.user.username) &#123;</span><br><span class=\"line\">            return this.$loginservice.user.username</span><br><span class=\"line\">          &#125; else &#123;</span><br><span class=\"line\">            return this.$loginservice.user.email</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return null</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  &lt;/script&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Add <code>components/PublicFooter.vue</code>:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;template lang=&quot;pug&quot;&gt;</span><br><span class=\"line\">   // styles defined in assets/scss/main.cscc</span><br><span class=\"line\">   footer.footer.has-background-dark.has-text-light.has-text-centered.my-footer</span><br><span class=\"line\">     | Copyright &amp;copy; ToolTwist 2018</span><br><span class=\"line\"> &lt;/template&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Add <code>assets/scss/main.scss</code>:<br>This contains styles that will be applied across the website.</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Positioning of the footer</span></span><br><span class=\"line\"><span class=\"variable\">$my-header-height</span>: <span class=\"number\">52</span>;</span><br><span class=\"line\"><span class=\"variable\">$my-footer-height</span>: <span class=\"number\">42</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.above-my-footer</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: block;</span><br><span class=\"line\">  <span class=\"attribute\">top</span>: <span class=\"number\">0px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">min-height</span>: calc(<span class=\"number\">100vh</span> - #&#123;<span class=\"variable\">$my-footer-height</span>&#125;px);</span><br><span class=\"line\">  <span class=\"attribute\">padding-top</span>: #&#123;<span class=\"variable\">$my-header-height</span>&#125;px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.my-footer</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"variable\">$my-footer-height</span>;</span><br><span class=\"line\">  <span class=\"attribute\">padding-top</span>: <span class=\"number\">8px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">padding-bottom</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border-top</span>: solid <span class=\"number\">1px</span> <span class=\"number\">#e0e0e0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border-bottom</span>: solid <span class=\"number\">1px</span> <span class=\"number\">#e0e0e0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Load the styles globally, by adding it to <code>nuxt.config.js</code>:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">module.exports = &#123; … css: [ &#123; src: &apos;@/assets/scss/main.scss&apos;, lang: &apos;sass&apos; &#125; ], &#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"Update-layouts-default-vue\"><a href=\"#Update-layouts-default-vue\" class=\"headerlink\" title=\"Update layouts/default.vue:\"></a>Update <code>layouts/default.vue</code>:</h4><ul>\n<li>remove .button—green and .button-grey and also their hover classes.</li>\n<li>import the header and footer.</li>\n<li>use header and footer on the page</li>\n<li>use the .above-my-footer and .my-footer classes to position the footer div .above-my-footer public-header nuxt<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">public-footer.my-footer</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>The page should now have a header and footer.</p>\n<h4 id=\"Add-a-Couple-of-Pages\"><a href=\"#Add-a-Couple-of-Pages\" class=\"headerlink\" title=\"Add a Couple of Pages\"></a>Add a Couple of Pages</h4><ul>\n<li><p>Add <code>pages/publicPage.vue</code>:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">section.container br br h1.title Public Page br | This page can be seen irrespective of whether the user is logged in. &lt;script&gt; &lt;/script&gt; &lt;style&gt; &lt;/style&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Add <code>pages/user/privatePage.vue</code>:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">section.container br br h1.title Private Page br | This page should only be seen when the user is logged in. &lt;script&gt; &lt;/script&gt; &lt;style&gt; &lt;/style&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>You should now be able to navigate to these pages using the navbar at the top of the page.</p>\n<p class=\"tip\"><br>Resize the screen and see how it adjusts. When the screen gets small enough it replaces the menu options with a “burger”, for mobile devices. This functionality is provided by a combination of Bulma and the toggleNavbar() method in PublicHeader.vue.<br></p>\n\n\n<h3 id=\"Install-libraries\"><a href=\"#Install-libraries\" class=\"headerlink\" title=\"Install libraries\"></a>Install libraries</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install axios debounce v-hotkey vue-drag-drop vue-froala-wysiwyg vue-split-panel vue-awesome --save</span><br><span class=\"line\"></span><br><span class=\"line\">npm install vue-loginservice vue-contentservice --save</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>In nuxt.config.js:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> nodeExternals = <span class=\"built_in\">require</span>(<span class=\"string\">'webpack-node-externals'</span>)  </span><br><span class=\"line\"><span class=\"keyword\">const</span> webpack = <span class=\"built_in\">require</span>(<span class=\"string\">'webpack'</span>)  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;  </span><br><span class=\"line\">  …  </span><br><span class=\"line\">  build: &#123;  </span><br><span class=\"line\">    …  </span><br><span class=\"line\">    extend…  </span><br><span class=\"line\"></span><br><span class=\"line\">    plugins: [</span><br><span class=\"line\">      <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">       *  These are the Webpack plugins (not to be mistaken for Nuxt plugins)</span></span><br><span class=\"line\"><span class=\"comment\">       *  https://nuxtjs.org/faq/webpack-plugins/</span></span><br><span class=\"line\"><span class=\"comment\">       */</span></span><br><span class=\"line\">      <span class=\"comment\">// https://nuxtjs.org/faq/webpack-plugins/</span></span><br><span class=\"line\">      <span class=\"comment\">// https://github.com/nuxt/nuxt.js/issues/843</span></span><br><span class=\"line\">      <span class=\"keyword\">new</span> webpack.ProvidePlugin(&#123;</span><br><span class=\"line\">        $: <span class=\"string\">'jquery'</span>,</span><br><span class=\"line\">        jQuery: <span class=\"string\">'jquery'</span>,</span><br><span class=\"line\">        <span class=\"string\">'window.jQuery'</span>: <span class=\"string\">'jquery'</span></span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    ],</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  …</span><br><span class=\"line\">  plugins: [</span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">     *  These are our Nuxt plugins, defined in the /plugins directory.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    &#123; <span class=\"attr\">src</span>: <span class=\"string\">'~plugins/vue-awesome.js'</span>, <span class=\"attr\">ssr</span>: <span class=\"literal\">true</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">src</span>: <span class=\"string\">'~plugins/vue-loginservice.js'</span>, <span class=\"attr\">ssr</span>: <span class=\"literal\">false</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">src</span>: <span class=\"string\">'~plugins/vue-contentservice.js'</span>, <span class=\"attr\">ssr</span>: <span class=\"literal\">false</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">src</span>: <span class=\"string\">'~/plugins/nuxt-drag-drop.js'</span>, <span class=\"attr\">ssr</span>: <span class=\"literal\">true</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">src</span>: <span class=\"string\">'~/plugins/nuxt-froala.js'</span>, <span class=\"attr\">ssr</span>: <span class=\"literal\">false</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">src</span>: <span class=\"string\">'~/plugins/nuxt-vue-split-panel.js'</span>, <span class=\"attr\">ssr</span>: <span class=\"literal\">false</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">src</span>: <span class=\"string\">'~plugins/vue-hotkey.js'</span>, <span class=\"attr\">ssr</span>: <span class=\"literal\">false</span> &#125;,</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  modules…</span><br></pre></td></tr></table></figure>\n<p class=\"tip\"><br>Note that there are two plugins sections. The section inside build refers to webpack plugins, while the other refers to Nuxt plugins.<br></p>\n</li>\n<li><p>Copy <code>/plugins/*</code> from <b>new-nuxt-project.zip</b> into your project</p>\n</li>\n<li>Copy <code>/lib</code> from <b>new-nuxt-project.zip</b> into your project</li>\n</ul>\n<h3 id=\"Using-Tooltwist-Components\"><a href=\"#Using-Tooltwist-Components\" class=\"headerlink\" title=\"Using Tooltwist Components\"></a>Using Tooltwist Components</h3><ul>\n<li>Copy <code>/protected-config/websiteConfig.js</code> from <b>new-nuxt-project.zip</b> into your project</li>\n<li>If you already have a Tooltwist account, define a new application, get an APIKey, and update <code>websiteConfig.js</code> with your new APIKey.</li>\n</ul>\n<h5 id=\"Login-page\"><a href=\"#Login-page\" class=\"headerlink\" title=\"Login page\"></a>Login page</h5><ul>\n<li><p>Create <code>pages/login.vue</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;template lang=&quot;pug&quot;&gt;</span><br><span class=\"line\">.my-login-page</span><br><span class=\"line\">  section</span><br><span class=\"line\">    br</span><br><span class=\"line\">    br</span><br><span class=\"line\">    loginservice-login(@userchange=&quot;onUserChange&quot;)</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">import PublicHeader from &apos;@/components/PublicHeader.vue&apos;</span><br><span class=\"line\">import PublicFooter from &apos;@/components/PublicFooter.vue&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">export default &#123;</span><br><span class=\"line\">  name: &apos;a3-login-page&apos;,</span><br><span class=\"line\">  components: &#123;</span><br><span class=\"line\">    PublicHeader,</span><br><span class=\"line\">    PublicFooter</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    onUserChange () &#123;</span><br><span class=\"line\">      if (this.$loginservice.user) &#123;</span><br><span class=\"line\">        this.$router.push(&apos;/user/privatePage&apos;)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<blockquote>\n<p>Notice how the menu bar changes when the user logs in:</p>\n<ul>\n<li>Restart the server, and log in with demo/demo.</li>\n<li>The computed value ‘isLoggedIn’ changes from false to true, causing the label to switch from ‘Login’ to ‘Sign out’.</li>\n<li>The computed value ‘userTitle’ gets displayed when the user is logged in.</li>\n</ul>\n</blockquote>\n<h3 id=\"Redirect-Middleware\"><a href=\"#Redirect-Middleware\" class=\"headerlink\" title=\"Redirect Middleware\"></a>Redirect Middleware</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">a) Some pages should be visible only when a user is logged in.</span><br><span class=\"line\"></span><br><span class=\"line\">b) Other pages should not be shown when a user is logged in.</span><br><span class=\"line\"></span><br><span class=\"line\">c) Using Nuxt middleware we can intercept the routing to a page, and forward instead to a different page if required.</span><br><span class=\"line\"></span><br><span class=\"line\">d) The Server Side Rendering cannot access browser cookies, so the middleware cannot determine if the user is logged in. Instead it needs to return to a page to the browser that will immediately redirect to the required page, causing the middleware to run again, this time on the browser.</span><br><span class=\"line\"></span><br><span class=\"line\">To provide this functionality, a Nuxt middleware named redirectIfServer is used.</span><br></pre></td></tr></table></figure>\n<ul>\n<li>Copy <code>/middleware/only-if-logged-in.js</code> from <b>new-nuxt-project.zip</b> into your project.</li>\n<li>Copy <code>/pages/loginservice-redirect</code> from <b>new-nuxt-project.zip</b> into your project.</li>\n<li>Add the following to <code>nuxt.config.js</code>:<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">   …</span><br><span class=\"line\">   css: […],</span><br><span class=\"line\">  router: &#123;</span><br><span class=\"line\">      middleware: <span class=\"string\">'only-if-logged-in'</span></span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p class=\"tip\"><br>Note that if you now try to go to privatePage without being logged in, you will be forwarded to the login page. Take a look at the output of npm run dev, and also the Javascript console of your browser and you will see debug messages explaining what the router is doing and why.<br>If you ever wonder why some pages cannot be accessed, this is the first place to look.<br></p>\n\n\n<p>We should stop privatePage from being displayed in the user is not logged in.</p>\n<ul>\n<li>Add the following code in <code>components/PublicHeader.vue</code>:<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">#navbarExampleTransparentExample.navbar-menu(v-bind:class=&quot;&#123;&apos;is-active&apos;: isActive&#125;&quot;)</span><br><span class=\"line\">  .navbar-start</span><br><span class=\"line\">    router-link.navbar-item(to=&quot;/publicPage&quot;) publicPage</span><br><span class=\"line\">    router-link.navbar-item(to=&quot;/user/privatePage&quot;, v-show=&quot;isLoggedIn&quot;) privatePage</span><br><span class=\"line\">  //- navbar-start</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"Bounce-Page-required-for-social-media-login\"><a href=\"#Bounce-Page-required-for-social-media-login\" class=\"headerlink\" title=\"Bounce Page (required for social media login)\"></a>Bounce Page (required for social media login)</h3><p>When logging in with Facebook/Google/Github/Twitter/LinkedIn the browser redirects to their authentication server, to loginservice, and finally back to an application page with the credentials provided as a URL parameter.  &gt; Our application (via vue-loginservice) saves these credentials in a cookie and will stay logged in until the user logs out.</p>\n<p>This leaves a problem… after logging out, if the user returns to that page via the browser history or the back button, the URL parameters will log the user back in. To avoid this problem, we need to prevent the URL with the authentication parameters being saved in the browser history.</p>\n<p>We do this with a page called loginservice-bounce. Loginservice will jump to this page with the credentials, and this page will save the credentials as a cookie then immediately redirect to the actually required application page, without the URL parameters for the credentials.</p>\n<ul>\n<li><p>Create <code>/pages/loginservice-bounce.vue</code> with the following:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;loginservice-bounce-component/&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>In <code>plugins/vue-loginservice.js</code> un-comment the faceboook line:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">hints: &#123;</span><br><span class=\"line\">  …</span><br><span class=\"line\">  sitename: <span class=\"string\">'ToolTwist'</span>,</span><br><span class=\"line\">  login: &#123;</span><br><span class=\"line\">    facebook: <span class=\"literal\">true</span>,       &lt;----- here</span><br><span class=\"line\">    <span class=\"comment\">// google: true,</span></span><br><span class=\"line\">    <span class=\"comment\">// github: true,</span></span><br><span class=\"line\">    …</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"Account-Page\"><a href=\"#Account-Page\" class=\"headerlink\" title=\"Account Page\"></a>Account Page</h3><ul>\n<li><p>Add a page <code>pages/user/account</code>:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;template lang=&quot;pug&quot;&gt;</span><br><span class=\"line\">.a3-account-page</span><br><span class=\"line\">  .a3-above-the-footer</span><br><span class=\"line\">    a3-header</span><br><span class=\"line\">    section.my-header</span><br><span class=\"line\">      .container</span><br><span class=\"line\">        br</span><br><span class=\"line\">        .my-heading</span><br><span class=\"line\">          | My Profile</span><br><span class=\"line\"></span><br><span class=\"line\">    br</span><br><span class=\"line\">    br</span><br><span class=\"line\">    .container</span><br><span class=\"line\">      loginservice-user-details(:tenant=&quot;$loginservice.user.tenant&quot;, :user-id=&quot;$loginservice.user.id&quot;, change-password)</span><br><span class=\"line\"></span><br><span class=\"line\">  a3-footer.a3-the-footer</span><br><span class=\"line\">&lt;/template&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Add a link to this new page to <code>/components/PublicHeader</code>:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">router-link.navbar-item(to=&quot;/user/account&quot;, v-show=&quot;isLoggedIn&quot;) Account</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"Next-Steps\"><a href=\"#Next-Steps\" class=\"headerlink\" title=\"Next Steps\"></a>Next Steps</h3><p>You now have a demonstration application running, however it’s running against the demonstration user database. To create your own application:</p>\n<ol>\n<li><p>Go to tooltwist.com and register, click on the link in the verification email, create a new application, and allocate an APIKey. Replace the default ApiKey in /protected-config/websiteConfig.js and restart your server. </p>\n</li>\n<li><p>Create a Mailchimp/Mandrill account, and install the registration and forgot-password templates from new-nuxt-project.zip. You will also need to verify that you own the domain used to send emails to users.</p>\n</li>\n<li><p>If you wish to allow users to log in with a social media account, you will need to register the application with Facebook/Github/etc and enter the details into A3. The help links on the config pages explains how to configure Facebook, etc.   </p>\n</li>\n</ol>\n"},{"title":"Style Guide","type":"style-guide","_content":"\nThis is the official style guide for Vue-specific code. If you use Vue in a project, it's a great reference to avoid errors, bikeshedding, and anti-patterns. However, we don't believe that any style guide is ideal for all teams or projects, so mindful deviations are encouraged based on past experience, the surrounding tech stack, and personal values.\n\nFor the most part, we also avoid suggestions about JavaScript or HTML in general. We don't mind whether you use semicolons or trailing commas. We don't mind whether your HTML uses single-quotes or double-quotes for attribute values. Some exceptions will exist however, where we've found that a particular pattern is helpful in the context of Vue.\n\n> **Soon, we'll also provide tips for enforcement.** Sometimes you'll simply have to be disciplined, but wherever possible, we'll try to show you how to use ESLint and other automated processes to make enforcement simpler.\n\nFinally, we've split rules into four categories:\n\n\n\n## Rule Categories\n\n### Priority A: Essential\n\nThese rules help prevent errors, so learn and abide by them at all costs. Exceptions may exist, but should be very rare and only be made by those with expert knowledge of both JavaScript and Vue.\n\n### Priority B: Strongly Recommended\n\nThese rules have been found to improve readability and/or developer experience in most projects. Your code will still run if you violate them, but violations should be rare and well-justified.\n\n### Priority C: Recommended\n\nWhere multiple, equally good options exist, an arbitrary choice can be made to ensure consistency. In these rules, we describe each acceptable option and suggest a default choice. That means you can feel free to make a different choice in your own codebase, as long as you're consistent and have a good reason. Please do have a good reason though! By adapting to the community standard, you will:\n\n1. train your brain to more easily parse most of the community code you encounter\n2. be able to copy and paste most community code examples without modification\n3. often find new hires are already accustomed to your preferred coding style, at least in regards to Vue\n\n### Priority D: Use with Caution\n\nSome features of Vue exist to accommodate rare edge cases or smoother migrations from a legacy code base. When overused however, they can make your code more difficult to maintain or even become a source of bugs. These rules shine a light on potentially risky features, describing when and why they should be avoided.\n\n\n\n## Priority A Rules: Essential (Error Prevention)\n\n\n\n### Multi-word component names <sup data-p=\"a\">essential</sup>\n\n**Component names should always be multi-word, except for root `App` components.**\n\nThis [prevents conflicts](http://w3c.github.io/webcomponents/spec/custom/#valid-custom-element-name) with existing and future HTML elements, since all HTML elements are a single word.\n\n{% raw %}<div class=\"style-example example-bad\">{% endraw %}\n#### Bad\n\n``` js\nVue.component('todo', {\n  // ...\n})\n```\n\n``` js\nexport default {\n  name: 'Todo',\n  // ...\n}\n```\n{% raw %}</div>{% endraw %}\n\n{% raw %}<div class=\"style-example example-good\">{% endraw %}\n#### Good\n\n``` js\nVue.component('todo-item', {\n  // ...\n})\n```\n\n``` js\nexport default {\n  name: 'TodoItem',\n  // ...\n}\n```\n{% raw %}</div>{% endraw %}\n\n\n\n### Component data <sup data-p=\"a\">essential</sup>\n\n**Component `data` must be a function.**\n\nWhen using the `data` property on a component (i.e. anywhere except on `new Vue`), the value must be a function that returns an object.\n\n{% raw %}\n<details>\n<summary>\n  <h4>Detailed Explanation</h4>\n</summary>\n{% endraw %}\n\nWhen the value of `data` is an object, it's shared across all instances of a component. Imagine, for example, a `TodoList` component with this data:\n\n``` js\ndata: {\n  listTitle: '',\n  todos: []\n}\n```\n\nWe might want to reuse this component, allowing users to maintain multiple lists (e.g. for shopping, wishlists, daily chores, etc). There's a problem though. Since every instance of the component references the same data object, changing the title of one list will also change the title of every other list. The same is true for adding/editing/deleting a todo.\n\nInstead, we want each component instance to only manage its own data. For that to happen, each instance must generate a unique data object. In JavaScript, this can be accomplished by returning the object in a function:\n\n``` js\ndata: function () {\n  return {\n    listTitle: '',\n    todos: []\n  }\n}\n```\n{% raw %}</details>{% endraw %}\n\n{% raw %}<div class=\"style-example example-bad\">{% endraw %}\n#### Bad\n\n``` js\nVue.component('some-comp', {\n  data: {\n    foo: 'bar'\n  }\n})\n```\n\n``` js\nexport default {\n  data: {\n    foo: 'bar'\n  }\n}\n```\n{% raw %}</div>{% endraw %}\n\n{% raw %}<div class=\"style-example example-good\">{% endraw %}\n#### Good\n``` js\nVue.component('some-comp', {\n  data: function () {\n    return {\n      foo: 'bar'\n    }\n  }\n})\n```\n\n``` js\n// In a .vue file\nexport default {\n  data () {\n    return {\n      foo: 'bar'\n    }\n  }\n}\n```\n\n``` js\n// It's OK to use an object directly in a root\n// Vue instance, since only a single instance\n// will ever exist.\nnew Vue({\n  data: {\n    foo: 'bar'\n  }\n})\n```\n{% raw %}</div>{% endraw %}\n\n\n\n### Prop definitions <sup data-p=\"a\">essential</sup>\n\n**Prop definitions should be as detailed as possible.**\n\nIn committed code, prop definitions should always be as detailed as possible, specifying at least type(s).\n\n{% raw %}\n<details>\n<summary>\n  <h4>Detailed Explanation</h4>\n</summary>\n{% endraw %}\n\nDetailed [prop definitions](https://vuejs.org/v2/guide/components.html#Prop-Validation) have two advantages:\n\n- They document the API of the component, so that it's easy to see how the component is meant to be used.\n- In development, Vue will warn you if a component is ever provided incorrectly formatted props, helping you catch potential sources of error.\n\n{% raw %}</details>{% endraw %}\n\n{% raw %}<div class=\"style-example example-bad\">{% endraw %}\n#### Bad\n\n``` js\n// This is only OK when prototyping\nprops: ['status']\n```\n{% raw %}</div>{% endraw %}\n\n{% raw %}<div class=\"style-example example-good\">{% endraw %}\n#### Good\n\n``` js\nprops: {\n  status: String\n}\n```\n\n``` js\n// Even better!\nprops: {\n  status: {\n    type: String,\n    required: true,\n    validator: function (value) {\n      return [\n        'syncing',\n        'synced',\n        'version-conflict',\n        'error'\n      ].indexOf(value) !== -1\n    }\n  }\n}\n```\n{% raw %}</div>{% endraw %}\n\n\n\n### Keyed `v-for` <sup data-p=\"a\">essential</sup>\n\n**Always use `key` with `v-for`.**\n\n`key` with `v-for` is _always_ required on components, in order to maintain internal component state down the subtree. Even for elements though, it's a good practice to maintain predictable behavior, such as [object constancy](https://bost.ocks.org/mike/constancy/) in animations.\n\n{% raw %}\n<details>\n<summary>\n  <h4>Detailed Explanation</h4>\n</summary>\n{% endraw %}\n\nLet's say you have a list of todos:\n\n``` js\ndata: function () {\n  return {\n    todos: [\n      {\n        id: 1,\n        text: 'Learn to use v-for'\n      },\n      {\n        id: 2,\n        text: 'Learn to use key'\n      }\n    ]\n  }\n}\n```\n\nThen you sort them alphabetically. When updating the DOM, Vue will optimize rendering to perform the cheapest DOM mutations possible. That might mean deleting the first todo element, then adding it again at the end of the list.\n\nThe problem is, there are cases where it's important not to delete elements that will remain in the DOM. For example, you may want to use `<transition-group>` to animate list sorting, or maintain focus if the rendered element is an `<input>`. In these cases, adding a unique key for each item (e.g. `:key=\"todo.id\"`) will tell Vue how to behave more predictably.\n\nIn our experience, it's better to _always_ add a unique key, so that you and your team simply never have to worry about these edge cases. Then in the rare, performance-critical scenarios where object constancy isn't necessary, you can make a conscious exception.\n\n{% raw %}</details>{% endraw %}\n\n{% raw %}<div class=\"style-example example-bad\">{% endraw %}\n#### Bad\n\n``` html\n<ul>\n  <li v-for=\"todo in todos\">\n    {{ todo.text }}\n  </li>\n</ul>\n```\n{% raw %}</div>{% endraw %}\n\n{% raw %}<div class=\"style-example example-good\">{% endraw %}\n#### Good\n\n``` html\n<ul>\n  <li\n    v-for=\"todo in todos\"\n    :key=\"todo.id\"\n  >\n    {{ todo.text }}\n  </li>\n</ul>\n```\n{% raw %}</div>{% endraw %}\n\n\n\n### Avoid `v-if` with `v-for` <sup data-p=\"a\">essential</sup>\n\n**Never use `v-if` on the same element as `v-for`.**\n\nThere are two common cases where this can be tempting:\n\n- To filter items in a list (e.g. `v-for=\"user in users\" v-if=\"user.isActive\"`). In these cases, replace `users` with a new computed property that returns your filtered list (e.g. `activeUsers`).\n\n- To avoid rendering a list if it should be hidden (e.g. `v-for=\"user in users\" v-if=\"shouldShowUsers\"`). In these cases, move the `v-if` to a container element (e.g. `ul`, `ol`).\n\n{% raw %}\n<details>\n<summary>\n  <h4>Detailed Explanation</h4>\n</summary>\n{% endraw %}\n\nWhen Vue processes directives, `v-for` has a higher priority than `v-if`, so that this template:\n\n``` html\n<ul>\n  <li\n    v-for=\"user in users\"\n    v-if=\"user.isActive\"\n    :key=\"user.id\"\n  >\n    {{ user.name }}\n  <li>\n</ul>\n```\n\nWill be evaluated similar to:\n\n``` js\nthis.users.map(function (user) {\n  if (user.isActive) {\n    return user.name\n  }\n})\n```\n\nSo even if we only render elements for a small fraction of users, we have to iterate over the entire list every time we re-render, whether or not the set of active users has changed.\n\nBy iterating over a computed property instead, like this:\n\n``` js\ncomputed: {\n  activeUsers: function () {\n    return this.users.filter(function (user) {\n      return user.isActive\n    })\n  }\n}\n```\n\n``` html\n<ul>\n  <li\n    v-for=\"user in activeUsers\"\n    :key=\"user.id\"\n  >\n    {{ user.name }}\n  <li>\n</ul>\n```\n\nWe get the following benefits:\n\n- The filtered list will _only_ be re-evaluated if there are relevant changes to the `users` array, making filtering much more efficient.\n- Using `v-for=\"user in activeUsers\"`, we _only_ iterate over active users during render, making rendering much more efficient.\n- Logic is now decoupled from the presentation layer, making maintenance (change/extension of logic) much easier.\n\nWe get similar benefits from updating:\n\n``` html\n<ul>\n  <li\n    v-for=\"user in users\"\n    v-if=\"shouldShowUsers\"\n    :key=\"user.id\"\n  >\n    {{ user.name }}\n  <li>\n</ul>\n```\n\nto:\n\n``` html\n<ul v-if=\"shouldShowUsers\">\n  <li\n    v-for=\"user in users\"\n    :key=\"user.id\"\n  >\n    {{ user.name }}\n  <li>\n</ul>\n```\n\nBy moving the `v-if` to a container element, we're no longer checking `shouldShowUsers` for _every_ user in the list. Instead, we check it once and don't even evaluate the `v-for` if `shouldShowUsers` is false.\n\n{% raw %}</details>{% endraw %}\n\n{% raw %}<div class=\"style-example example-bad\">{% endraw %}\n#### Bad\n\n``` html\n<ul>\n  <li\n    v-for=\"user in users\"\n    v-if=\"user.isActive\"\n    :key=\"user.id\"\n  >\n    {{ user.name }}\n  <li>\n</ul>\n```\n\n``` html\n<ul>\n  <li\n    v-for=\"user in users\"\n    v-if=\"shouldShowUsers\"\n    :key=\"user.id\"\n  >\n    {{ user.name }}\n  <li>\n</ul>\n```\n{% raw %}</div>{% endraw %}\n\n{% raw %}<div class=\"style-example example-good\">{% endraw %}\n#### Good\n\n``` html\n<ul>\n  <li\n    v-for=\"user in activeUsers\"\n    :key=\"user.id\"\n  >\n    {{ user.name }}\n  <li>\n</ul>\n```\n\n``` html\n<ul v-if=\"shouldShowUsers\">\n  <li\n    v-for=\"user in users\"\n    :key=\"user.id\"\n  >\n    {{ user.name }}\n  <li>\n</ul>\n```\n{% raw %}</div>{% endraw %}\n\n\n\n### Component style scoping <sup data-p=\"a\">essential</sup>\n\n**For applications, styles in a top-level `App` component and in layout components may be global, but all other components should always be scoped.**\n\nThis is only relevant for [single-file components](../guide/single-file-components.html). It does _not_ require that the [`scoped` attribute](https://vue-loader.vuejs.org/en/features/scoped-css.html) be used. Scoping could be through [CSS modules](https://vue-loader.vuejs.org/en/features/css-modules.html), a class-based strategy such as [BEM](http://getbem.com/), or another library/convention.\n\n**Component libraries, however, should prefer a class-based strategy instead of using the `scoped` attribute.**\n\nThis makes overriding internal styles easier, with human-readable class names that don't have too high specificity, but are still very unlikely to result in a conflict.\n\n{% raw %}\n<details>\n<summary>\n  <h4>Detailed Explanation</h4>\n</summary>\n{% endraw %}\n\nIf you are developing a large project, working with other developers, or sometimes include 3rd-party HTML/CSS (e.g. from Auth0), consistent scoping will ensure that your styles only apply to the components they are meant for.\n\nBeyond the `scoped` attribute, using unique class names can help ensure that 3rd-party CSS does not apply to your own HTML. For example, many projects use the `button`, `btn`, or `icon` class names, so even if not using a strategy such as BEM, adding an app-specific and/or component-specific prefix (e.g. `ButtonClose-icon`) can provide some protection.\n\n{% raw %}</details>{% endraw %}\n\n{% raw %}<div class=\"style-example example-bad\">{% endraw %}\n#### Bad\n\n``` html\n<template>\n  <button class=\"btn btn-close\">X</button>\n</template>\n\n<style>\n.btn-close {\n  background-color: red;\n}\n</style>\n```\n{% raw %}</div>{% endraw %}\n\n{% raw %}<div class=\"style-example example-good\">{% endraw %}\n#### Good\n\n``` html\n<template>\n  <button class=\"button button-close\">X</button>\n</template>\n\n<!-- Using the `scoped` attribute -->\n<style scoped>\n.button {\n  border: none;\n  border-radius: 2px;\n}\n\n.button-close {\n  background-color: red;\n}\n</style>\n```\n\n``` html\n<template>\n  <button :class=\"[$style.button, $style.buttonClose]\">X</button>\n</template>\n\n<!-- Using CSS modules -->\n<style module>\n.button {\n  border: none;\n  border-radius: 2px;\n}\n\n.buttonClose {\n  background-color: red;\n}\n</style>\n```\n\n``` html\n<template>\n  <button class=\"c-Button c-Button--close\">X</button>\n</template>\n\n<!-- Using the BEM convention -->\n<style>\n.c-Button {\n  border: none;\n  border-radius: 2px;\n}\n\n.c-Button--close {\n  background-color: red;\n}\n</style>\n```\n{% raw %}</div>{% endraw %}\n\n\n\n### Private property names <sup data-p=\"a\">essential</sup>\n\n**Always use the `$_` prefix for custom private properties in a plugin, mixin, etc. Then to avoid conflicts with code by other authors, also include a named scope (e.g. `$_yourPluginName_`).**\n\n{% raw %}\n<details>\n<summary>\n  <h4>Detailed Explanation</h4>\n</summary>\n{% endraw %}\n\nVue uses the `_` prefix to define its own private properties, so using the same prefix (e.g. `_update`) risks overwriting an instance property. Even if you check and Vue is not currently using a particular property name, there is no guarantee a conflict won't arise in a later version.\n\nAs for the `$` prefix, its purpose within the Vue ecosystem is special instance properties that are exposed to the user, so using it for _private_ properties would not be appropriate.\n\nInstead, we recommend combining the two prefixes into `$_`, as a convention for user-defined private properties that guarantee no conflicts with Vue.\n\n{% raw %}</details>{% endraw %}\n\n{% raw %}<div class=\"style-example example-bad\">{% endraw %}\n#### Bad\n\n``` js\nvar myGreatMixin = {\n  // ...\n  methods: {\n    update: function () {\n      // ...\n    }\n  }\n}\n```\n\n``` js\nvar myGreatMixin = {\n  // ...\n  methods: {\n    _update: function () {\n      // ...\n    }\n  }\n}\n```\n\n``` js\nvar myGreatMixin = {\n  // ...\n  methods: {\n    $update: function () {\n      // ...\n    }\n  }\n}\n```\n\n``` js\nvar myGreatMixin = {\n  // ...\n  methods: {\n    $_update: function () {\n      // ...\n    }\n  }\n}\n```\n\n{% raw %}</div>{% endraw %}\n\n{% raw %}<div class=\"style-example example-good\">{% endraw %}\n#### Good\n\n``` js\nvar myGreatMixin = {\n  // ...\n  methods: {\n    $_myGreatMixin_update: function () {\n      // ...\n    }\n  }\n}\n```\n{% raw %}</div>{% endraw %}\n\n\n\n## Priority B Rules: Strongly Recommended (Improving Readability)\n\n\n\n### Component files <sup data-p=\"b\">strongly recommended</sup>\n\n**Whenever a build system is available to concatenate files, each component should be in its own file.**\n\nThis helps you to more quickly find a component when you need to edit it or review how to use it.\n\n{% raw %}<div class=\"style-example example-bad\">{% endraw %}\n#### Bad\n\n``` js\nVue.component('TodoList', {\n  // ...\n})\n\nVue.component('TodoItem', {\n  // ...\n})\n```\n{% raw %}</div>{% endraw %}\n\n{% raw %}<div class=\"style-example example-good\">{% endraw %}\n#### Good\n\n```\ncomponents/\n|- TodoList.js\n|- TodoItem.js\n```\n\n```\ncomponents/\n|- TodoList.vue\n|- TodoItem.vue\n```\n{% raw %}</div>{% endraw %}\n\n\n\n### Single-file component filename casing <sup data-p=\"b\">strongly recommended</sup>\n\n**Filenames of [single-file components](../guide/single-file-components.html) should either be always PascalCase or always kebab-case.**\n\nPascalCase works best with autocompletion in code editors, as it's consistent with how we reference components in JS(X) and templates, wherever possible. However, mixed case filenames can sometimes create issues on case-insensitive file systems, which is why kebab-case is also perfectly acceptable.\n\n{% raw %}<div class=\"style-example example-bad\">{% endraw %}\n#### Bad\n\n```\ncomponents/\n|- mycomponent.vue\n```\n\n```\ncomponents/\n|- myComponent.vue\n```\n{% raw %}</div>{% endraw %}\n\n{% raw %}<div class=\"style-example example-good\">{% endraw %}\n#### Good\n\n```\ncomponents/\n|- MyComponent.vue\n```\n\n```\ncomponents/\n|- my-component.vue\n```\n{% raw %}</div>{% endraw %}\n\n\n\n### Base component names <sup data-p=\"b\">strongly recommended</sup>\n\n**Base components (a.k.a. presentational, dumb, or pure components) that apply app-specific styling and conventions should all begin with a specific prefix, such as `Base`, `App`, or `V`.**\n\n{% raw %}\n<details>\n<summary>\n  <h4>Detailed Explanation</h4>\n</summary>\n{% endraw %}\n\nThese components lay the foundation for consistent styling and behavior in your application. They may **only** contain:\n\n- HTML elements,\n- other base components, and\n- 3rd-party UI components.\n\nBut they'll **never** contain global state (e.g. from a Vuex store).\n\nTheir names often include the name of an element they wrap (e.g. `BaseButton`, `BaseTable`), unless no element exists for their specific purpose (e.g. `BaseIcon`). If you build similar components for a more specific context, they will almost always consume these components (e.g. `BaseButton` may be used in `ButtonSubmit`).\n\nSome advantages of this convention:\n\n- When organized alphabetically in editors, your app's base components are all listed together, making them easier to identify.\n\n- Since component names should always be multi-word, this convention prevents you from having to choose an arbitrary prefix for simple component wrappers (e.g. `MyButton`, `VueButton`).\n\n- Since these components are so frequently used, you may want to simply make them global instead of importing them everywhere. A prefix makes this possible with Webpack:\n\n  ``` js\n  var requireComponent = require.context(\"./src\", true, /^Base[A-Z]/)\n  requireComponent.keys().forEach(function (fileName) {\n    var baseComponentConfig = requireComponent(fileName)\n    baseComponentConfig = baseComponentConfig.default || baseComponentConfig\n    var baseComponentName = baseComponentConfig.name || (\n      fileName\n        .replace(/^.+\\//, '')\n        .replace(/\\.\\w+$/, '')\n    )\n    Vue.component(baseComponentName, baseComponentConfig)\n  })\n  ```\n\n{% raw %}</details>{% endraw %}\n\n{% raw %}<div class=\"style-example example-bad\">{% endraw %}\n#### Bad\n\n```\ncomponents/\n|- MyButton.vue\n|- VueTable.vue\n|- Icon.vue\n```\n{% raw %}</div>{% endraw %}\n\n{% raw %}<div class=\"style-example example-good\">{% endraw %}\n#### Good\n\n```\ncomponents/\n|- BaseButton.vue\n|- BaseTable.vue\n|- BaseIcon.vue\n```\n\n```\ncomponents/\n|- AppButton.vue\n|- AppTable.vue\n|- AppIcon.vue\n```\n\n```\ncomponents/\n|- VButton.vue\n|- VTable.vue\n|- VIcon.vue\n```\n{% raw %}</div>{% endraw %}\n\n\n\n### Single-instance component names <sup data-p=\"b\">strongly recommended</sup>\n\n**Components that should only ever have a single active instance should begin with the `The` prefix, to denote that there can be only one.**\n\nThis does not mean the component is only used in a single page, but it will only be used once _per page_. These components never accept any props, since they are specific to your app, not their context within your app. If you find the need to add props, it's a good indication that this is actually a reusable component that is only used once per page _for now_.\n\n{% raw %}<div class=\"style-example example-bad\">{% endraw %}\n#### Bad\n\n```\ncomponents/\n|- Heading.vue\n|- MySidebar.vue\n```\n{% raw %}</div>{% endraw %}\n\n{% raw %}<div class=\"style-example example-good\">{% endraw %}\n#### Good\n\n```\ncomponents/\n|- TheHeading.vue\n|- TheSidebar.vue\n```\n{% raw %}</div>{% endraw %}\n\n\n\n### Tightly coupled component names <sup data-p=\"b\">strongly recommended</sup>\n\n**Child components that are tightly coupled with their parent should include the parent component name as a prefix.**\n\nIf a component only makes sense in the context of a single parent component, that relationship should be evident in its name. Since editors typically organize files alphabetically, this also keeps these related files next to each other.\n\n{% raw %}\n<details>\n<summary>\n  <h4>Detailed Explanation</h4>\n</summary>\n{% endraw %}\n\nYou might be tempted to solve this problem by nesting child components in directories named after their parent. For example:\n\n```\ncomponents/\n|- TodoList/\n   |- Item/\n      |- index.vue\n      |- Button.vue\n   |- index.vue\n```\n\nor:\n\n```\ncomponents/\n|- TodoList/\n   |- Item/\n      |- Button.vue\n   |- Item.vue\n|- TodoList.vue\n```\n\nThis isn't recommended, as it results in:\n\n- Many files with similar names, making rapid file switching in code editors more difficult.\n- Many nested sub-directories, which increases the time it takes to browse components in an editor's sidebar.\n\n{% raw %}</details>{% endraw %}\n\n{% raw %}<div class=\"style-example example-bad\">{% endraw %}\n#### Bad\n\n```\ncomponents/\n|- TodoList.vue\n|- TodoItem.vue\n|- TodoButton.vue\n```\n\n```\ncomponents/\n|- SearchSidebar.vue\n|- NavigationForSearchSidebar.vue\n```\n{% raw %}</div>{% endraw %}\n\n{% raw %}<div class=\"style-example example-good\">{% endraw %}\n#### Good\n\n```\ncomponents/\n|- TodoList.vue\n|- TodoListItem.vue\n|- TodoListItemButton.vue\n```\n\n```\ncomponents/\n|- SearchSidebar.vue\n|- SearchSidebarNavigation.vue\n```\n{% raw %}</div>{% endraw %}\n\n\n\n### Order of words in component names <sup data-p=\"b\">strongly recommended</sup>\n\n**Component names should start with the highest-level (often most general) words and end with descriptive modifying words.**\n\n{% raw %}\n<details>\n<summary>\n  <h4>Detailed Explanation</h4>\n</summary>\n{% endraw %}\n\nYou may be wondering:\n\n> \"Why would we force component names to use less natural language?\"\n\nIn natural English, adjectives and other descriptors do typically appear before the nouns, while exceptions require connector words. For example:\n\n- Coffee _with_ milk\n- Soup _of the_ day\n- Visitor _to the_ museum\n\nYou can definitely include these connector words in component names if you'd like, but the order is still important.\n\nAlso note that **what's considered \"highest-level\" will be contextual to your app**. For example, imagine an app with a search form. It may include components like this one:\n\n```\ncomponents/\n|- ClearSearchButton.vue\n|- ExcludeFromSearchInput.vue\n|- LaunchOnStartupCheckbox.vue\n|- RunSearchButton.vue\n|- SearchInput.vue\n|- TermsCheckbox.vue\n```\n\nAs you might notice, it's quite difficult to see which components are specific to the search. Now let's rename the components according to the rule:\n\n```\ncomponents/\n|- SearchButtonClear.vue\n|- SearchButtonRun.vue\n|- SearchInputExcludeGlob.vue\n|- SearchInputQuery.vue\n|- SettingsCheckboxLaunchOnStartup.vue\n|- SettingsCheckboxTerms.vue\n```\n\nSince editors typically organize files alphabetically, all the important relationships between components are now evident at a glance.\n\nYou might be tempted to solve this problem differently, nesting all the search components under a \"search\" directory, then all the settings components under a \"settings\" directory. We only recommend considering this approach in very large apps (e.g. 100+ components), for these reasons:\n\n- It generally takes more time to navigate through nested sub-directories, than scrolling through a single `components` directory.\n- Name conflicts (e.g. multiple `ButtonDelete.vue` components) make it more difficult to quickly navigate to a specific component in a code editor.\n- Refactoring becomes more difficult, because find-and-replace often isn't sufficient to update relative references to a moved component.\n\n{% raw %}</details>{% endraw %}\n\n{% raw %}<div class=\"style-example example-bad\">{% endraw %}\n#### Bad\n\n```\ncomponents/\n|- ClearSearchButton.vue\n|- ExcludeFromSearchInput.vue\n|- LaunchOnStartupCheckbox.vue\n|- RunSearchButton.vue\n|- SearchInput.vue\n|- TermsCheckbox.vue\n```\n{% raw %}</div>{% endraw %}\n\n{% raw %}<div class=\"style-example example-good\">{% endraw %}\n#### Good\n\n```\ncomponents/\n|- SearchButtonClear.vue\n|- SearchButtonRun.vue\n|- SearchInputQuery.vue\n|- SearchInputExcludeGlob.vue\n|- SettingsCheckboxTerms.vue\n|- SettingsCheckboxLaunchOnStartup.vue\n```\n{% raw %}</div>{% endraw %}\n\n\n\n### Self-closing components <sup data-p=\"b\">strongly recommended</sup>\n\n**Components with no content should be self-closing in [single-file components](../guide/single-file-components.html), string templates, and [JSX](../guide/render-function.html#JSX) - but never in DOM templates.**\n\nComponents that self-close communicate that they not only have no content, but are **meant** to have no content. It's the difference between a blank page in a book and one labeled \"This page intentionally left blank.\" Your code is also cleaner without the unnecessary closing tag.\n\nUnfortunately, HTML doesn't allow custom elements to be self-closing - only [official \"void\" elements](https://www.w3.org/TR/html/syntax.html#void-elements). That's why the strategy is only possible when Vue's template compiler can reach the template before the DOM, then serve the DOM spec-compliant HTML.\n\n{% raw %}<div class=\"style-example example-bad\">{% endraw %}\n#### Bad\n\n``` html\n<!-- In single-file components, string templates, and JSX -->\n<MyComponent></MyComponent>\n```\n\n``` html\n<!-- In DOM templates -->\n<my-component/>\n```\n{% raw %}</div>{% endraw %}\n\n{% raw %}<div class=\"style-example example-good\">{% endraw %}\n#### Good\n\n``` html\n<!-- In single-file components, string templates, and JSX -->\n<MyComponent/>\n```\n\n``` html\n<!-- In DOM templates -->\n<my-component></my-component>\n```\n{% raw %}</div>{% endraw %}\n\n\n\n### Component name casing in templates <sup data-p=\"b\">strongly recommended</sup>\n\n**In most projects, component names should always be PascalCase in [single-file components](../guide/single-file-components.html) and string templates - but kebab-case in DOM templates.**\n\nPascalCase has a few advantages over kebab-case:\n\n- Editors can autocomplete component names in templates, because PascalCase is also used in JavaScript.\n- `<MyComponent>` is more visually distinct from a single-word HTML element than `<my-component>`, because there are two character differences (the two capitals), rather than just one (a hyphen).\n- If you use any non-Vue custom elements in your templates, such as a web component, PascalCase ensures that your Vue components remain distinctly visible.\n\nUnfortunately, due to HTML's case insensitivity, DOM templates must still use kebab-case.\n\nAlso note that if you've already invested heavily in kebab-case, consistency with HTML conventions and being able to use the same casing across all your projects may be more important than the advantages listed above. In those cases, **using kebab-case everywhere is also acceptable.**\n\n{% raw %}<div class=\"style-example example-bad\">{% endraw %}\n#### Bad\n\n``` html\n<!-- In single-file components and string templates -->\n<mycomponent/>\n```\n\n``` html\n<!-- In single-file components and string templates -->\n<myComponent/>\n```\n\n``` html\n<!-- In DOM templates -->\n<MyComponent></MyComponent>\n```\n{% raw %}</div>{% endraw %}\n\n{% raw %}<div class=\"style-example example-good\">{% endraw %}\n#### Good\n\n``` html\n<!-- In single-file components and string templates -->\n<MyComponent/>\n```\n\n``` html\n<!-- In DOM templates -->\n<my-component></my-component>\n```\n\nOR\n\n``` html\n<!-- Everywhere -->\n<my-component></my-component>\n```\n{% raw %}</div>{% endraw %}\n\n\n\n### Component name casing in JS/JSX <sup data-p=\"b\">strongly recommended</sup>\n\n**Component names in JS/[JSX](../guide/render-function.html#JSX) should always be PascalCase, though they may be kebab-case inside strings for simpler applications that only use global component registration through `Vue.component`.**\n\n{% raw %}\n<details>\n<summary>\n  <h4>Detailed Explanation</h4>\n</summary>\n{% endraw %}\n\nIn JavaScript, PascalCase is the convention for classes and prototype constructors - essentially, anything that can have distinct instances. Vue components also have instances, so it makes sense to also use PascalCase. As an added benefit, using PascalCase within JSX (and templates) allows readers of the code to more easily distinguish between components and HTML elements.\n\nHowever, for applications that use **only** global component definitions via `Vue.component`, we recommend kebab-case instead. The reasons are:\n\n- It's rare that global components are ever referenced in JavaScript, so following a convention for JavaScript makes less sense.\n- These applications always include many in-DOM templates, where [kebab-case **must** be used](#Component-name-casing-in-templates-strongly-recommended).\n\n{% raw %}</details>{% endraw %}\n\n{% raw %}<div class=\"style-example example-bad\">{% endraw %}\n#### Bad\n\n``` js\nVue.component('myComponent', {\n  // ...\n})\n```\n\n``` js\nimport myComponent from './MyComponent.vue'\n```\n\n``` js\nexport default {\n  name: 'myComponent',\n  // ...\n}\n```\n\n``` js\nexport default {\n  name: 'my-component',\n  // ...\n}\n```\n{% raw %}</div>{% endraw %}\n\n{% raw %}<div class=\"style-example example-good\">{% endraw %}\n#### Good\n\n``` js\nVue.component('MyComponent', {\n  // ...\n})\n```\n\n``` js\nVue.component('my-component', {\n  // ...\n})\n```\n\n``` js\nimport MyComponent from './MyComponent.vue'\n```\n\n``` js\nexport default {\n  name: 'MyComponent',\n  // ...\n}\n```\n{% raw %}</div>{% endraw %}\n\n\n\n### Full-word component names <sup data-p=\"b\">strongly recommended</sup>\n\n**Component names should prefer full words over abbreviations.**\n\nThe autocompletion in editors make the cost of writing longer names very low, while the clarity they provide is invaluable. Uncommon abbreviations, in particular, should always be avoided.\n\n{% raw %}<div class=\"style-example example-bad\">{% endraw %}\n#### Bad\n\n```\ncomponents/\n|- SdSettings.vue\n|- UProfOpts.vue\n```\n{% raw %}</div>{% endraw %}\n\n{% raw %}<div class=\"style-example example-good\">{% endraw %}\n#### Good\n\n```\ncomponents/\n|- StudentDashboardSettings.vue\n|- UserProfileOptions.vue\n```\n{% raw %}</div>{% endraw %}\n\n\n\n### Prop name casing <sup data-p=\"b\">strongly recommended</sup>\n\n**Prop names should always use camelCase during declaration, but kebab-case in templates and [JSX](../guide/render-function.html#JSX).**\n\nWe're simply following the conventions of each language. Within JavaScript, camelCase is more natural. Within HTML, kebab-case is.\n\n{% raw %}<div class=\"style-example example-bad\">{% endraw %}\n#### Bad\n\n``` js\nprops: {\n  'greeting-text': String\n}\n```\n\n``` html\n<WelcomeMessage greetingText=\"hi\"/>\n```\n{% raw %}</div>{% endraw %}\n\n{% raw %}<div class=\"style-example example-good\">{% endraw %}\n#### Good\n\n``` js\nprops: {\n  greetingText: String\n}\n```\n\n``` html\n<WelcomeMessage greeting-text=\"hi\"/>\n```\n{% raw %}</div>{% endraw %}\n\n\n\n### Multi-attribute elements <sup data-p=\"b\">strongly recommended</sup>\n\n**Elements with multiple attributes should span multiple lines, with one attribute per line.**\n\nIn JavaScript, splitting objects with multiple properties over multiple lines is widely considered a good convention, because it's much easier to read. Our templates and [JSX](../guide/render-function.html#JSX) deserve the same consideration.\n\n{% raw %}<div class=\"style-example example-bad\">{% endraw %}\n#### Bad\n\n``` html\n<img src=\"https://vuejs.org/images/logo.png\" alt=\"Vue Logo\">\n```\n\n``` html\n<MyComponent foo=\"a\" bar=\"b\" baz=\"c\"/>\n```\n{% raw %}</div>{% endraw %}\n\n{% raw %}<div class=\"style-example example-good\">{% endraw %}\n#### Good\n\n``` html\n<img\n  src=\"https://vuejs.org/images/logo.png\"\n  alt=\"Vue Logo\"\n>\n```\n\n``` html\n<MyComponent\n  foo=\"a\"\n  bar=\"b\"\n  baz=\"c\"\n/>\n```\n{% raw %}</div>{% endraw %}\n\n\n\n### Simple expressions in templates <sup data-p=\"b\">strongly recommended</sup>\n\n**Component templates should only include simple expressions, with more complex expressions refactored into computed properties or methods.**\n\nComplex expressions in your templates make them less declarative. We should strive to describe _what_ should appear, not _how_ we're computing that value. Computed properties and methods also allow the code to be reused.\n\n{% raw %}<div class=\"style-example example-bad\">{% endraw %}\n#### Bad\n\n``` html\n{{\n  fullName.split(' ').map(function (word) {\n    return word[0].toUpperCase() + word.slice(1)\n  }).join(' ')\n}}\n```\n{% raw %}</div>{% endraw %}\n\n{% raw %}<div class=\"style-example example-good\">{% endraw %}\n#### Good\n\n``` html\n<!-- In a template -->\n{{ normalizedFullName }}\n```\n\n``` js\n// The complex expression has been moved to a computed property\ncomputed: {\n  normalizedFullName: function () {\n    return this.fullName.split(' ').map(function (word) {\n      return word[0].toUpperCase() + word.slice(1)\n    }).join(' ')\n  }\n}\n```\n{% raw %}</div>{% endraw %}\n\n\n\n### Simple computed properties <sup data-p=\"b\">strongly recommended</sup>\n\n**Complex computed properties should be split into as many simpler properties as possible.**\n\n{% raw %}\n<details>\n<summary>\n  <h4>Detailed Explanation</h4>\n</summary>\n{% endraw %}\n\nSimpler, well-named computed properties are:\n\n- __Easier to test__\n\n  When each computed property contains only a very simple expression, with very few dependencies, it's much easier to write tests confirming that it works correctly.\n\n- __Easier to read__\n\n  Simplifying computed properties forces you to give each value a descriptive name, even if it's not reused. This makes it much easier for other developers (and future you) to focus in on the code they care about and figure out what's going on.\n\n- __More adaptable to changing requirements__\n\n  Any value that can be named might be useful to the view. For example, we might decide to display a message telling the user how much money they saved. We might also decide to calculate sales tax, but perhaps display it separately, rather than as part of the final price.\n\n  Small, focused computed properties make fewer assumptions about how information will be used, so require less refactoring as requirements change.\n\n{% raw %}</details>{% endraw %}\n\n{% raw %}<div class=\"style-example example-bad\">{% endraw %}\n#### Bad\n\n``` js\ncomputed: {\n  price: function () {\n    var basePrice = this.manufactureCost / (1 - this.profitMargin)\n    return (\n      basePrice -\n      basePrice * (this.discountPercent || 0)\n    )\n  }\n}\n```\n{% raw %}</div>{% endraw %}\n\n{% raw %}<div class=\"style-example example-good\">{% endraw %}\n#### Good\n\n``` js\ncomputed: {\n  basePrice: function () {\n    return this.manufactureCost / (1 - this.profitMargin)\n  },\n  discount: function () {\n    return this.basePrice * (this.discountPercent || 0)\n  },\n  finalPrice: function () {\n    return this.basePrice - this.discount\n  }\n}\n```\n{% raw %}</div>{% endraw %}\n\n\n\n### Quoted attribute values <sup data-p=\"b\">strongly recommended</sup>\n\n**Non-empty HTML attribute values should always be inside quotes (single or double, whichever is not used in JS).**\n\nWhile attribute values without any spaces are not required to have quotes in HTML, this practice often leads to _avoiding_ spaces, making attribute values less readable.\n\n{% raw %}<div class=\"style-example example-bad\">{% endraw %}\n#### Bad\n\n``` html\n<input type=text>\n```\n\n``` html\n<AppSidebar :style={width:sidebarWidth+'px'}>\n```\n{% raw %}</div>{% endraw %}\n\n{% raw %}<div class=\"style-example example-good\">{% endraw %}\n#### Good\n\n``` html\n<input type=\"text\">\n```\n\n``` html\n<AppSidebar :style=\"{ width: sidebarWidth + 'px' }\">\n```\n{% raw %}</div>{% endraw %}\n\n\n\n### Directive shorthands <sup data-p=\"b\">strongly recommended</sup>\n\n**Directive shorthands (`:` for `v-bind:` and `@` for `v-on:`) should be used always or never.**\n\n{% raw %}<div class=\"style-example example-bad\">{% endraw %}\n#### Bad\n\n``` html\n<input\n  v-bind:value=\"newTodoText\"\n  :placeholder=\"newTodoInstructions\"\n>\n```\n\n``` html\n<input\n  v-on:input=\"onInput\"\n  @focus=\"onFocus\"\n>\n```\n{% raw %}</div>{% endraw %}\n\n{% raw %}<div class=\"style-example example-good\">{% endraw %}\n#### Good\n\n``` html\n<input\n  :value=\"newTodoText\"\n  :placeholder=\"newTodoInstructions\"\n>\n```\n\n``` html\n<input\n  v-bind:value=\"newTodoText\"\n  v-bind:placeholder=\"newTodoInstructions\"\n>\n```\n\n``` html\n<input\n  @input=\"onInput\"\n  @focus=\"onFocus\"\n>\n```\n\n``` html\n<input\n  v-on:input=\"onInput\"\n  v-on:focus=\"onFocus\"\n>\n```\n{% raw %}</div>{% endraw %}\n\n\n\n\n## Priority C Rules: Recommended (Minimizing Arbitrary Choices and Cognitive Overhead)\n\n\n\n### Component/instance options order <sup data-p=\"c\">recommended</sup>\n\n**Component/instance options should be ordered consistently.**\n\nThis is the default order we recommend for component options. They're split into categories, so you'll know where to add new properties from plugins.\n\n1. **Side Effects** (triggers effects outside the component)\n  - `el`\n\n2. **Global Awareness** (requires knowledge beyond the component)\n  - `name`\n  - `parent`\n\n3. **Component Type** (changes the type of the component)\n  - `functional`\n\n4. **Template Modifiers** (changes the way templates are compiled)\n  - `delimiters`\n  - `comments`\n\n5. **Template Dependencies** (assets used in the template)\n  - `components`\n  - `directives`\n  - `filters`\n\n6. **Composition** (merges properties into the options)\n  - `extends`\n  - `mixins`\n\n7. **Interface** (the interface to the component)\n  - `inheritAttrs`\n  - `model`\n  - `props`/`propsData`\n\n8. **Local State** (local reactive properties)\n  - `data`\n  - `computed`\n\n9. **Events** (callbacks triggered by reactive events)\n  - `watch`\n  - Lifecycle Events (in the order they are called)\n    - `beforeCreate`\n    - `created`\n    - `beforeMount`\n    - `mounted`\n    - `beforeUpdate`\n    - `updated`\n    - `activated`\n    - `deactivated`\n    - `beforeDestroy`\n    - `destroyed`\n\n10. **Non-Reactive Properties** (instance properties independent of the reactivity system)\n  - `methods`\n\n11. **Rendering** (the declarative description of the component output)\n  - `template`/`render`\n  - `renderError`\n\n\n\n### Element attribute order <sup data-p=\"c\">recommended</sup>\n\n**The attributes of elements (including components) should be ordered consistently.**\n\nThis is the default order we recommend for component options. They're split into categories, so you'll know where to add custom attributes and directives.\n\n1. **Definition** (provides the component options)\n  - `is`\n\n2. **List Rendering** (creates multiple variations of the same element)\n  - `v-for`\n\n3. **Conditionals** (whether the element is rendered/shown)\n  - `v-if`\n  - `v-else-if`\n  - `v-else`\n  - `v-show`\n  - `v-cloak`\n\n4. **Render Modifiers** (changes the way the element renders)\n  - `v-pre`\n  - `v-once`\n\n5. **Global Awareness** (requires knowledge beyond the component)\n  - `id`\n\n6. **Unique Attributes** (attributes that require unique values)\n  - `ref`\n  - `key`\n  - `slot`\n\n7. **Two-Way Binding** (combining binding and events)\n  - `v-model`\n\n8. **Other Attributes** (all unspecified bound & unbound attributes)\n\n9. **Events** (component event listeners)\n  - `v-on`\n\n10. **Content** (overrides the content of the element)\n  - `v-html`\n  - `v-text`\n\n\n\n### Empty lines in component/instance options <sup data-p=\"c\">recommended</sup>\n\n**You may want to add one empty line between multi-line properties, particularly if the options can no longer fit on your screen without scrolling.**\n\nWhen components begin to feel cramped or difficult to read, adding spaces between multi-line properties can make them easier to skim again. In some editors, such as Vim, formatting options like this can also make them easier to navigate with the keyboard.\n\n{% raw %}<div class=\"style-example example-good\">{% endraw %}\n#### Good\n\n``` js\nprops: {\n  value: {\n    type: String,\n    required: true\n  },\n\n  focused: {\n    type: Boolean,\n    default: false\n  },\n\n  label: String,\n  icon: String\n},\n\ncomputed: {\n  formattedValue: function () {\n    // ...\n  },\n\n  inputClasses: function () {\n    // ...\n  }\n}\n```\n\n``` js\n// No spaces are also fine, as long as the component\n// is still easy to read and navigate.\nprops: {\n  value: {\n    type: String,\n    required: true\n  },\n  focused: {\n    type: Boolean,\n    default: false\n  },\n  label: String,\n  icon: String\n},\ncomputed: {\n  formattedValue: function () {\n    // ...\n  },\n  inputClasses: function () {\n    // ...\n  }\n}\n```\n{% raw %}</div>{% endraw %}\n\n\n\n### Single-file component top-level element order <sup data-p=\"c\">recommended</sup>\n\n**[Single-file components](../guide/single-file-components.html) should always order `<script>`, `<template>`, and `<style>` tags consistently, with `<style>` last, because at least one of the other two is always necessary.**\n\n{% raw %}<div class=\"style-example example-bad\">{% endraw %}\n#### Bad\n\n``` html\n<style>/* ... */</style>\n<script>/* ... */</script>\n<template>...</template>\n```\n\n``` html\n<!-- ComponentA.vue -->\n<script>/* ... */</script>\n<template>...</template>\n<style>/* ... */</style>\n\n<!-- ComponentB.vue -->\n<template>...</template>\n<script>/* ... */</script>\n<style>/* ... */</style>\n```\n{% raw %}</div>{% endraw %}\n\n{% raw %}<div class=\"style-example example-good\">{% endraw %}\n#### Good\n\n``` html\n<!-- ComponentA.vue -->\n<script>/* ... */</script>\n<template>...</template>\n<style>/* ... */</style>\n\n<!-- ComponentB.vue -->\n<script>/* ... */</script>\n<template>...</template>\n<style>/* ... */</style>\n```\n\n``` html\n<!-- ComponentA.vue -->\n<template>...</template>\n<script>/* ... */</script>\n<style>/* ... */</style>\n\n<!-- ComponentB.vue -->\n<template>...</template>\n<script>/* ... */</script>\n<style>/* ... */</style>\n```\n{% raw %}</div>{% endraw %}\n\n\n\n## Priority D Rules: Use with Caution (Potentially Dangerous Patterns)\n\n\n\n### `v-if`/`v-if-else`/`v-else` without `key` <sup data-p=\"d\">use with caution</sup>\n\n**It's usually best to use `key` with `v-if` + `v-else`, if they are the same element type (e.g. both `<div>` elements).**\n\nBy default, Vue updates the DOM as efficiently as possible. That means when switching between elements of the same type, it simply patches the existing element, rather than removing it and adding a new one in its place. This can have [unintended side effects](https://jsfiddle.net/chrisvfritz/bh8fLeds/) if these elements should not actually be considered the same.\n\n{% raw %}<div class=\"style-example example-bad\">{% endraw %}\n#### Bad\n\n``` html\n<div v-if=\"error\">\n  Error: {{ error }}\n</div>\n<div v-else>\n  {{ results }}\n</div>\n```\n{% raw %}</div>{% endraw %}\n\n{% raw %}<div class=\"style-example example-good\">{% endraw %}\n#### Good\n\n``` html\n<div\n  v-if=\"error\"\n  key=\"search-status\"\n>\n  Error: {{ error }}\n</div>\n<div\n  v-else\n  key=\"search-results\"\n>\n  {{ results }}\n</div>\n```\n\n``` html\n<p v-if=\"error\">\n  Error: {{ error }}\n</p>\n<div v-else>\n  {{ results }}\n</div>\n```\n{% raw %}</div>{% endraw %}\n\n\n\n### Element selectors with `scoped` <sup data-p=\"d\">use with caution</sup>\n\n**Element selectors should be avoided with `scoped`.**\n\nPrefer class selectors over element selectors in `scoped` styles, because large numbers of element selectors are slow.\n\n{% raw %}\n<details>\n<summary>\n  <h4>Detailed Explanation</h4>\n</summary>\n{% endraw %}\n\nTo scope styles, Vue adds a unique attribute to component elements, such as `data-v-f3f3eg9`. Then selectors are modified so that only matching elements with this attribute are selected (e.g. `button[data-v-f3f3eg9]`).\n\nThe problem is that large numbers of [element-attribute selectors](http://stevesouders.com/efws/css-selectors/csscreate.php?n=1000&sel=a%5Bhref%5D&body=background%3A+%23CFD&ne=1000) (e.g. `button[data-v-f3f3eg9]`) will be considerably slower than [class-attribute selectors](http://stevesouders.com/efws/css-selectors/csscreate.php?n=1000&sel=.class%5Bhref%5D&body=background%3A+%23CFD&ne=1000) (e.g. `.btn-close[data-v-f3f3eg9]`), so class selectors should be preferred whenever possible.\n\n{% raw %}</details>{% endraw %}\n\n{% raw %}<div class=\"style-example example-bad\">{% endraw %}\n#### Bad\n\n``` html\n<template>\n  <button>X</button>\n</template>\n\n<style scoped>\nbutton {\n  background-color: red;\n}\n</style>\n```\n{% raw %}</div>{% endraw %}\n\n{% raw %}<div class=\"style-example example-good\">{% endraw %}\n#### Good\n\n``` html\n<template>\n  <button class=\"btn btn-close\">X</button>\n</template>\n\n<style scoped>\n.btn-close {\n  background-color: red;\n}\n</style>\n```\n{% raw %}</div>{% endraw %}\n\n\n\n### Implicit parent-child communication <sup data-p=\"d\">use with caution</sup>\n\n**Props and events should be preferred for parent-child component communication, instead of `this.$parent` or mutating props.**\n\nAn ideal Vue application is props down, events up. Sticking to this convention makes your components much easier to understand. However, there are edge cases where prop mutation or `this.$parent` can simplify two components that are already deeply coupled.\n\nThe problem is, there are also many _simple_ cases where these patterns may offer convenience. Beware: do not be seduced into trading simplicity (being able to understand the flow of your state) for short-term convenience (writing less code).\n\n{% raw %}<div class=\"style-example example-bad\">{% endraw %}\n#### Bad\n\n``` js\nVue.component('TodoItem', {\n  props: {\n    todo: {\n      type: Object,\n      required: true\n    }\n  },\n  template: '<input v-model=\"todo.text\">'\n})\n```\n\n``` js\nVue.component('TodoItem', {\n  props: {\n    todo: {\n      type: Object,\n      required: true\n    }\n  },\n  methods: {\n    removeTodo () {\n      var vm = this\n      vm.$parent.todos = vm.$parent.todos.filter(function (todo) {\n        return todo.id !== vm.todo.id\n      })\n    }\n  },\n  template: `\n    <span>\n      {{ todo.text }}\n      <button @click=\"removeTodo\">\n        X\n      </button>\n    </span>\n  `\n})\n```\n{% raw %}</div>{% endraw %}\n\n{% raw %}<div class=\"style-example example-good\">{% endraw %}\n#### Good\n\n``` js\nVue.component('TodoItem', {\n  props: {\n    todo: {\n      type: Object,\n      required: true\n    }\n  },\n  template: `\n    <input\n      :value=\"todo.text\"\n      @input=\"$emit('input', $event.target.value)\"\n    >\n  `\n})\n```\n\n``` js\nVue.component('TodoItem', {\n  props: {\n    todo: {\n      type: Object,\n      required: true\n    }\n  },\n  template: `\n    <span>\n      {{ todo.text }}\n      <button @click=\"$emit('delete')\">\n        X\n      </button>\n    </span>\n  `\n})\n```\n{% raw %}</div>{% endraw %}\n\n\n\n### Non-flux state management <sup data-p=\"d\">use with caution</sup>\n\n**[Vuex](https://github.com/vuejs/vuex) should be preferred for global state management, instead of `this.$root` or a global event bus.**\n\nManaging state on `this.$root` and/or using a [global event bus](https://vuejs.org/v2/guide/migration.html#dispatch-and-broadcast-replaced) can be convenient for very simple cases, but are not appropriate for most applications. Vuex offers not only a central place to manage state, but also tools for organizing, tracking, and debugging state changes.\n\n{% raw %}</details>{% endraw %}\n\n{% raw %}<div class=\"style-example example-bad\">{% endraw %}\n#### Bad\n\n``` js\n// main.js\nnew Vue({\n  data: {\n    todos: []\n  },\n  created: function () {\n    this.$on('remove-todo', this.removeTodo)\n  },\n  methods: {\n    removeTodo: function (todo) {\n      var todoIdToRemove = todo.id\n      this.todos = this.todos.filter(function (todo) {\n        return todo.id !== todoIdToRemove\n      })\n    }\n  }\n})\n```\n{% raw %}</div>{% endraw %}\n\n{% raw %}<div class=\"style-example example-good\">{% endraw %}\n#### Good\n\n``` js\n// store/modules/todos.js\nexport default {\n  state: {\n    list: []\n  },\n  mutations: {\n    REMOVE_TODO (state, todoId) {\n      state.list = state.list.filter(todo => todo.id !== todoId)\n    }\n  },\n  actions: {\n    removeTodo ({ commit, state }, todo) {\n      commit('REMOVE_TODO', todo.id)\n    }\n  }\n}\n```\n\n``` html\n<!-- TodoItem.vue -->\n<template>\n  <span>\n    {{ todo.text }}\n    <button @click=\"removeTodo(todo)\">\n      X\n    </button>\n  </span>\n</template>\n\n<script>\nimport { mapActions } from 'vuex'\n\nexport default {\n  props: {\n    todo: {\n      type: Object,\n      required: true\n    }\n  },\n  methods: mapActions(['removeTodo'])\n}\n</script>\n```\n{% raw %}</div>{% endraw %}\n\n\n\n{% raw %}\n<script>\n(function () {\n  var enforcementTypes = {\n    none: '<span title=\"There is unfortunately no way to automatically enforce this rule.\">self-discipline</span>',\n    runtime: 'runtime error',\n    linter: '<a href=\"https://github.com/vuejs/eslint-plugin-vue#eslint-plugin-vue\" target=\"_blank\">plugin:vue/recommended</a>'\n  }\n  Vue.component('sg-enforcement', {\n    template: '\\\n      <span>\\\n        <strong>Enforcement</strong>:\\\n        <span class=\"style-rule-tag\" v-html=\"humanType\"/>\\\n      </span>\\\n    ',\n    props: {\n      type: {\n        type: String,\n        required: true,\n        validate: function (value) {\n          Object.keys(enforcementTypes).indexOf(value) !== -1\n        }\n      }\n    },\n    computed: {\n      humanType: function () {\n        return enforcementTypes[this.type]\n      }\n    }\n  })\n\n  // new Vue({\n  //  el: '#main'\n  // })\n})()\n</script>\n{% endraw %}\n","source":"v2/style-guide/index.md","raw":"---\ntitle: Style Guide\ntype: style-guide\n---\n\nThis is the official style guide for Vue-specific code. If you use Vue in a project, it's a great reference to avoid errors, bikeshedding, and anti-patterns. However, we don't believe that any style guide is ideal for all teams or projects, so mindful deviations are encouraged based on past experience, the surrounding tech stack, and personal values.\n\nFor the most part, we also avoid suggestions about JavaScript or HTML in general. We don't mind whether you use semicolons or trailing commas. We don't mind whether your HTML uses single-quotes or double-quotes for attribute values. Some exceptions will exist however, where we've found that a particular pattern is helpful in the context of Vue.\n\n> **Soon, we'll also provide tips for enforcement.** Sometimes you'll simply have to be disciplined, but wherever possible, we'll try to show you how to use ESLint and other automated processes to make enforcement simpler.\n\nFinally, we've split rules into four categories:\n\n\n\n## Rule Categories\n\n### Priority A: Essential\n\nThese rules help prevent errors, so learn and abide by them at all costs. Exceptions may exist, but should be very rare and only be made by those with expert knowledge of both JavaScript and Vue.\n\n### Priority B: Strongly Recommended\n\nThese rules have been found to improve readability and/or developer experience in most projects. Your code will still run if you violate them, but violations should be rare and well-justified.\n\n### Priority C: Recommended\n\nWhere multiple, equally good options exist, an arbitrary choice can be made to ensure consistency. In these rules, we describe each acceptable option and suggest a default choice. That means you can feel free to make a different choice in your own codebase, as long as you're consistent and have a good reason. Please do have a good reason though! By adapting to the community standard, you will:\n\n1. train your brain to more easily parse most of the community code you encounter\n2. be able to copy and paste most community code examples without modification\n3. often find new hires are already accustomed to your preferred coding style, at least in regards to Vue\n\n### Priority D: Use with Caution\n\nSome features of Vue exist to accommodate rare edge cases or smoother migrations from a legacy code base. When overused however, they can make your code more difficult to maintain or even become a source of bugs. These rules shine a light on potentially risky features, describing when and why they should be avoided.\n\n\n\n## Priority A Rules: Essential (Error Prevention)\n\n\n\n### Multi-word component names <sup data-p=\"a\">essential</sup>\n\n**Component names should always be multi-word, except for root `App` components.**\n\nThis [prevents conflicts](http://w3c.github.io/webcomponents/spec/custom/#valid-custom-element-name) with existing and future HTML elements, since all HTML elements are a single word.\n\n{% raw %}<div class=\"style-example example-bad\">{% endraw %}\n#### Bad\n\n``` js\nVue.component('todo', {\n  // ...\n})\n```\n\n``` js\nexport default {\n  name: 'Todo',\n  // ...\n}\n```\n{% raw %}</div>{% endraw %}\n\n{% raw %}<div class=\"style-example example-good\">{% endraw %}\n#### Good\n\n``` js\nVue.component('todo-item', {\n  // ...\n})\n```\n\n``` js\nexport default {\n  name: 'TodoItem',\n  // ...\n}\n```\n{% raw %}</div>{% endraw %}\n\n\n\n### Component data <sup data-p=\"a\">essential</sup>\n\n**Component `data` must be a function.**\n\nWhen using the `data` property on a component (i.e. anywhere except on `new Vue`), the value must be a function that returns an object.\n\n{% raw %}\n<details>\n<summary>\n  <h4>Detailed Explanation</h4>\n</summary>\n{% endraw %}\n\nWhen the value of `data` is an object, it's shared across all instances of a component. Imagine, for example, a `TodoList` component with this data:\n\n``` js\ndata: {\n  listTitle: '',\n  todos: []\n}\n```\n\nWe might want to reuse this component, allowing users to maintain multiple lists (e.g. for shopping, wishlists, daily chores, etc). There's a problem though. Since every instance of the component references the same data object, changing the title of one list will also change the title of every other list. The same is true for adding/editing/deleting a todo.\n\nInstead, we want each component instance to only manage its own data. For that to happen, each instance must generate a unique data object. In JavaScript, this can be accomplished by returning the object in a function:\n\n``` js\ndata: function () {\n  return {\n    listTitle: '',\n    todos: []\n  }\n}\n```\n{% raw %}</details>{% endraw %}\n\n{% raw %}<div class=\"style-example example-bad\">{% endraw %}\n#### Bad\n\n``` js\nVue.component('some-comp', {\n  data: {\n    foo: 'bar'\n  }\n})\n```\n\n``` js\nexport default {\n  data: {\n    foo: 'bar'\n  }\n}\n```\n{% raw %}</div>{% endraw %}\n\n{% raw %}<div class=\"style-example example-good\">{% endraw %}\n#### Good\n``` js\nVue.component('some-comp', {\n  data: function () {\n    return {\n      foo: 'bar'\n    }\n  }\n})\n```\n\n``` js\n// In a .vue file\nexport default {\n  data () {\n    return {\n      foo: 'bar'\n    }\n  }\n}\n```\n\n``` js\n// It's OK to use an object directly in a root\n// Vue instance, since only a single instance\n// will ever exist.\nnew Vue({\n  data: {\n    foo: 'bar'\n  }\n})\n```\n{% raw %}</div>{% endraw %}\n\n\n\n### Prop definitions <sup data-p=\"a\">essential</sup>\n\n**Prop definitions should be as detailed as possible.**\n\nIn committed code, prop definitions should always be as detailed as possible, specifying at least type(s).\n\n{% raw %}\n<details>\n<summary>\n  <h4>Detailed Explanation</h4>\n</summary>\n{% endraw %}\n\nDetailed [prop definitions](https://vuejs.org/v2/guide/components.html#Prop-Validation) have two advantages:\n\n- They document the API of the component, so that it's easy to see how the component is meant to be used.\n- In development, Vue will warn you if a component is ever provided incorrectly formatted props, helping you catch potential sources of error.\n\n{% raw %}</details>{% endraw %}\n\n{% raw %}<div class=\"style-example example-bad\">{% endraw %}\n#### Bad\n\n``` js\n// This is only OK when prototyping\nprops: ['status']\n```\n{% raw %}</div>{% endraw %}\n\n{% raw %}<div class=\"style-example example-good\">{% endraw %}\n#### Good\n\n``` js\nprops: {\n  status: String\n}\n```\n\n``` js\n// Even better!\nprops: {\n  status: {\n    type: String,\n    required: true,\n    validator: function (value) {\n      return [\n        'syncing',\n        'synced',\n        'version-conflict',\n        'error'\n      ].indexOf(value) !== -1\n    }\n  }\n}\n```\n{% raw %}</div>{% endraw %}\n\n\n\n### Keyed `v-for` <sup data-p=\"a\">essential</sup>\n\n**Always use `key` with `v-for`.**\n\n`key` with `v-for` is _always_ required on components, in order to maintain internal component state down the subtree. Even for elements though, it's a good practice to maintain predictable behavior, such as [object constancy](https://bost.ocks.org/mike/constancy/) in animations.\n\n{% raw %}\n<details>\n<summary>\n  <h4>Detailed Explanation</h4>\n</summary>\n{% endraw %}\n\nLet's say you have a list of todos:\n\n``` js\ndata: function () {\n  return {\n    todos: [\n      {\n        id: 1,\n        text: 'Learn to use v-for'\n      },\n      {\n        id: 2,\n        text: 'Learn to use key'\n      }\n    ]\n  }\n}\n```\n\nThen you sort them alphabetically. When updating the DOM, Vue will optimize rendering to perform the cheapest DOM mutations possible. That might mean deleting the first todo element, then adding it again at the end of the list.\n\nThe problem is, there are cases where it's important not to delete elements that will remain in the DOM. For example, you may want to use `<transition-group>` to animate list sorting, or maintain focus if the rendered element is an `<input>`. In these cases, adding a unique key for each item (e.g. `:key=\"todo.id\"`) will tell Vue how to behave more predictably.\n\nIn our experience, it's better to _always_ add a unique key, so that you and your team simply never have to worry about these edge cases. Then in the rare, performance-critical scenarios where object constancy isn't necessary, you can make a conscious exception.\n\n{% raw %}</details>{% endraw %}\n\n{% raw %}<div class=\"style-example example-bad\">{% endraw %}\n#### Bad\n\n``` html\n<ul>\n  <li v-for=\"todo in todos\">\n    {{ todo.text }}\n  </li>\n</ul>\n```\n{% raw %}</div>{% endraw %}\n\n{% raw %}<div class=\"style-example example-good\">{% endraw %}\n#### Good\n\n``` html\n<ul>\n  <li\n    v-for=\"todo in todos\"\n    :key=\"todo.id\"\n  >\n    {{ todo.text }}\n  </li>\n</ul>\n```\n{% raw %}</div>{% endraw %}\n\n\n\n### Avoid `v-if` with `v-for` <sup data-p=\"a\">essential</sup>\n\n**Never use `v-if` on the same element as `v-for`.**\n\nThere are two common cases where this can be tempting:\n\n- To filter items in a list (e.g. `v-for=\"user in users\" v-if=\"user.isActive\"`). In these cases, replace `users` with a new computed property that returns your filtered list (e.g. `activeUsers`).\n\n- To avoid rendering a list if it should be hidden (e.g. `v-for=\"user in users\" v-if=\"shouldShowUsers\"`). In these cases, move the `v-if` to a container element (e.g. `ul`, `ol`).\n\n{% raw %}\n<details>\n<summary>\n  <h4>Detailed Explanation</h4>\n</summary>\n{% endraw %}\n\nWhen Vue processes directives, `v-for` has a higher priority than `v-if`, so that this template:\n\n``` html\n<ul>\n  <li\n    v-for=\"user in users\"\n    v-if=\"user.isActive\"\n    :key=\"user.id\"\n  >\n    {{ user.name }}\n  <li>\n</ul>\n```\n\nWill be evaluated similar to:\n\n``` js\nthis.users.map(function (user) {\n  if (user.isActive) {\n    return user.name\n  }\n})\n```\n\nSo even if we only render elements for a small fraction of users, we have to iterate over the entire list every time we re-render, whether or not the set of active users has changed.\n\nBy iterating over a computed property instead, like this:\n\n``` js\ncomputed: {\n  activeUsers: function () {\n    return this.users.filter(function (user) {\n      return user.isActive\n    })\n  }\n}\n```\n\n``` html\n<ul>\n  <li\n    v-for=\"user in activeUsers\"\n    :key=\"user.id\"\n  >\n    {{ user.name }}\n  <li>\n</ul>\n```\n\nWe get the following benefits:\n\n- The filtered list will _only_ be re-evaluated if there are relevant changes to the `users` array, making filtering much more efficient.\n- Using `v-for=\"user in activeUsers\"`, we _only_ iterate over active users during render, making rendering much more efficient.\n- Logic is now decoupled from the presentation layer, making maintenance (change/extension of logic) much easier.\n\nWe get similar benefits from updating:\n\n``` html\n<ul>\n  <li\n    v-for=\"user in users\"\n    v-if=\"shouldShowUsers\"\n    :key=\"user.id\"\n  >\n    {{ user.name }}\n  <li>\n</ul>\n```\n\nto:\n\n``` html\n<ul v-if=\"shouldShowUsers\">\n  <li\n    v-for=\"user in users\"\n    :key=\"user.id\"\n  >\n    {{ user.name }}\n  <li>\n</ul>\n```\n\nBy moving the `v-if` to a container element, we're no longer checking `shouldShowUsers` for _every_ user in the list. Instead, we check it once and don't even evaluate the `v-for` if `shouldShowUsers` is false.\n\n{% raw %}</details>{% endraw %}\n\n{% raw %}<div class=\"style-example example-bad\">{% endraw %}\n#### Bad\n\n``` html\n<ul>\n  <li\n    v-for=\"user in users\"\n    v-if=\"user.isActive\"\n    :key=\"user.id\"\n  >\n    {{ user.name }}\n  <li>\n</ul>\n```\n\n``` html\n<ul>\n  <li\n    v-for=\"user in users\"\n    v-if=\"shouldShowUsers\"\n    :key=\"user.id\"\n  >\n    {{ user.name }}\n  <li>\n</ul>\n```\n{% raw %}</div>{% endraw %}\n\n{% raw %}<div class=\"style-example example-good\">{% endraw %}\n#### Good\n\n``` html\n<ul>\n  <li\n    v-for=\"user in activeUsers\"\n    :key=\"user.id\"\n  >\n    {{ user.name }}\n  <li>\n</ul>\n```\n\n``` html\n<ul v-if=\"shouldShowUsers\">\n  <li\n    v-for=\"user in users\"\n    :key=\"user.id\"\n  >\n    {{ user.name }}\n  <li>\n</ul>\n```\n{% raw %}</div>{% endraw %}\n\n\n\n### Component style scoping <sup data-p=\"a\">essential</sup>\n\n**For applications, styles in a top-level `App` component and in layout components may be global, but all other components should always be scoped.**\n\nThis is only relevant for [single-file components](../guide/single-file-components.html). It does _not_ require that the [`scoped` attribute](https://vue-loader.vuejs.org/en/features/scoped-css.html) be used. Scoping could be through [CSS modules](https://vue-loader.vuejs.org/en/features/css-modules.html), a class-based strategy such as [BEM](http://getbem.com/), or another library/convention.\n\n**Component libraries, however, should prefer a class-based strategy instead of using the `scoped` attribute.**\n\nThis makes overriding internal styles easier, with human-readable class names that don't have too high specificity, but are still very unlikely to result in a conflict.\n\n{% raw %}\n<details>\n<summary>\n  <h4>Detailed Explanation</h4>\n</summary>\n{% endraw %}\n\nIf you are developing a large project, working with other developers, or sometimes include 3rd-party HTML/CSS (e.g. from Auth0), consistent scoping will ensure that your styles only apply to the components they are meant for.\n\nBeyond the `scoped` attribute, using unique class names can help ensure that 3rd-party CSS does not apply to your own HTML. For example, many projects use the `button`, `btn`, or `icon` class names, so even if not using a strategy such as BEM, adding an app-specific and/or component-specific prefix (e.g. `ButtonClose-icon`) can provide some protection.\n\n{% raw %}</details>{% endraw %}\n\n{% raw %}<div class=\"style-example example-bad\">{% endraw %}\n#### Bad\n\n``` html\n<template>\n  <button class=\"btn btn-close\">X</button>\n</template>\n\n<style>\n.btn-close {\n  background-color: red;\n}\n</style>\n```\n{% raw %}</div>{% endraw %}\n\n{% raw %}<div class=\"style-example example-good\">{% endraw %}\n#### Good\n\n``` html\n<template>\n  <button class=\"button button-close\">X</button>\n</template>\n\n<!-- Using the `scoped` attribute -->\n<style scoped>\n.button {\n  border: none;\n  border-radius: 2px;\n}\n\n.button-close {\n  background-color: red;\n}\n</style>\n```\n\n``` html\n<template>\n  <button :class=\"[$style.button, $style.buttonClose]\">X</button>\n</template>\n\n<!-- Using CSS modules -->\n<style module>\n.button {\n  border: none;\n  border-radius: 2px;\n}\n\n.buttonClose {\n  background-color: red;\n}\n</style>\n```\n\n``` html\n<template>\n  <button class=\"c-Button c-Button--close\">X</button>\n</template>\n\n<!-- Using the BEM convention -->\n<style>\n.c-Button {\n  border: none;\n  border-radius: 2px;\n}\n\n.c-Button--close {\n  background-color: red;\n}\n</style>\n```\n{% raw %}</div>{% endraw %}\n\n\n\n### Private property names <sup data-p=\"a\">essential</sup>\n\n**Always use the `$_` prefix for custom private properties in a plugin, mixin, etc. Then to avoid conflicts with code by other authors, also include a named scope (e.g. `$_yourPluginName_`).**\n\n{% raw %}\n<details>\n<summary>\n  <h4>Detailed Explanation</h4>\n</summary>\n{% endraw %}\n\nVue uses the `_` prefix to define its own private properties, so using the same prefix (e.g. `_update`) risks overwriting an instance property. Even if you check and Vue is not currently using a particular property name, there is no guarantee a conflict won't arise in a later version.\n\nAs for the `$` prefix, its purpose within the Vue ecosystem is special instance properties that are exposed to the user, so using it for _private_ properties would not be appropriate.\n\nInstead, we recommend combining the two prefixes into `$_`, as a convention for user-defined private properties that guarantee no conflicts with Vue.\n\n{% raw %}</details>{% endraw %}\n\n{% raw %}<div class=\"style-example example-bad\">{% endraw %}\n#### Bad\n\n``` js\nvar myGreatMixin = {\n  // ...\n  methods: {\n    update: function () {\n      // ...\n    }\n  }\n}\n```\n\n``` js\nvar myGreatMixin = {\n  // ...\n  methods: {\n    _update: function () {\n      // ...\n    }\n  }\n}\n```\n\n``` js\nvar myGreatMixin = {\n  // ...\n  methods: {\n    $update: function () {\n      // ...\n    }\n  }\n}\n```\n\n``` js\nvar myGreatMixin = {\n  // ...\n  methods: {\n    $_update: function () {\n      // ...\n    }\n  }\n}\n```\n\n{% raw %}</div>{% endraw %}\n\n{% raw %}<div class=\"style-example example-good\">{% endraw %}\n#### Good\n\n``` js\nvar myGreatMixin = {\n  // ...\n  methods: {\n    $_myGreatMixin_update: function () {\n      // ...\n    }\n  }\n}\n```\n{% raw %}</div>{% endraw %}\n\n\n\n## Priority B Rules: Strongly Recommended (Improving Readability)\n\n\n\n### Component files <sup data-p=\"b\">strongly recommended</sup>\n\n**Whenever a build system is available to concatenate files, each component should be in its own file.**\n\nThis helps you to more quickly find a component when you need to edit it or review how to use it.\n\n{% raw %}<div class=\"style-example example-bad\">{% endraw %}\n#### Bad\n\n``` js\nVue.component('TodoList', {\n  // ...\n})\n\nVue.component('TodoItem', {\n  // ...\n})\n```\n{% raw %}</div>{% endraw %}\n\n{% raw %}<div class=\"style-example example-good\">{% endraw %}\n#### Good\n\n```\ncomponents/\n|- TodoList.js\n|- TodoItem.js\n```\n\n```\ncomponents/\n|- TodoList.vue\n|- TodoItem.vue\n```\n{% raw %}</div>{% endraw %}\n\n\n\n### Single-file component filename casing <sup data-p=\"b\">strongly recommended</sup>\n\n**Filenames of [single-file components](../guide/single-file-components.html) should either be always PascalCase or always kebab-case.**\n\nPascalCase works best with autocompletion in code editors, as it's consistent with how we reference components in JS(X) and templates, wherever possible. However, mixed case filenames can sometimes create issues on case-insensitive file systems, which is why kebab-case is also perfectly acceptable.\n\n{% raw %}<div class=\"style-example example-bad\">{% endraw %}\n#### Bad\n\n```\ncomponents/\n|- mycomponent.vue\n```\n\n```\ncomponents/\n|- myComponent.vue\n```\n{% raw %}</div>{% endraw %}\n\n{% raw %}<div class=\"style-example example-good\">{% endraw %}\n#### Good\n\n```\ncomponents/\n|- MyComponent.vue\n```\n\n```\ncomponents/\n|- my-component.vue\n```\n{% raw %}</div>{% endraw %}\n\n\n\n### Base component names <sup data-p=\"b\">strongly recommended</sup>\n\n**Base components (a.k.a. presentational, dumb, or pure components) that apply app-specific styling and conventions should all begin with a specific prefix, such as `Base`, `App`, or `V`.**\n\n{% raw %}\n<details>\n<summary>\n  <h4>Detailed Explanation</h4>\n</summary>\n{% endraw %}\n\nThese components lay the foundation for consistent styling and behavior in your application. They may **only** contain:\n\n- HTML elements,\n- other base components, and\n- 3rd-party UI components.\n\nBut they'll **never** contain global state (e.g. from a Vuex store).\n\nTheir names often include the name of an element they wrap (e.g. `BaseButton`, `BaseTable`), unless no element exists for their specific purpose (e.g. `BaseIcon`). If you build similar components for a more specific context, they will almost always consume these components (e.g. `BaseButton` may be used in `ButtonSubmit`).\n\nSome advantages of this convention:\n\n- When organized alphabetically in editors, your app's base components are all listed together, making them easier to identify.\n\n- Since component names should always be multi-word, this convention prevents you from having to choose an arbitrary prefix for simple component wrappers (e.g. `MyButton`, `VueButton`).\n\n- Since these components are so frequently used, you may want to simply make them global instead of importing them everywhere. A prefix makes this possible with Webpack:\n\n  ``` js\n  var requireComponent = require.context(\"./src\", true, /^Base[A-Z]/)\n  requireComponent.keys().forEach(function (fileName) {\n    var baseComponentConfig = requireComponent(fileName)\n    baseComponentConfig = baseComponentConfig.default || baseComponentConfig\n    var baseComponentName = baseComponentConfig.name || (\n      fileName\n        .replace(/^.+\\//, '')\n        .replace(/\\.\\w+$/, '')\n    )\n    Vue.component(baseComponentName, baseComponentConfig)\n  })\n  ```\n\n{% raw %}</details>{% endraw %}\n\n{% raw %}<div class=\"style-example example-bad\">{% endraw %}\n#### Bad\n\n```\ncomponents/\n|- MyButton.vue\n|- VueTable.vue\n|- Icon.vue\n```\n{% raw %}</div>{% endraw %}\n\n{% raw %}<div class=\"style-example example-good\">{% endraw %}\n#### Good\n\n```\ncomponents/\n|- BaseButton.vue\n|- BaseTable.vue\n|- BaseIcon.vue\n```\n\n```\ncomponents/\n|- AppButton.vue\n|- AppTable.vue\n|- AppIcon.vue\n```\n\n```\ncomponents/\n|- VButton.vue\n|- VTable.vue\n|- VIcon.vue\n```\n{% raw %}</div>{% endraw %}\n\n\n\n### Single-instance component names <sup data-p=\"b\">strongly recommended</sup>\n\n**Components that should only ever have a single active instance should begin with the `The` prefix, to denote that there can be only one.**\n\nThis does not mean the component is only used in a single page, but it will only be used once _per page_. These components never accept any props, since they are specific to your app, not their context within your app. If you find the need to add props, it's a good indication that this is actually a reusable component that is only used once per page _for now_.\n\n{% raw %}<div class=\"style-example example-bad\">{% endraw %}\n#### Bad\n\n```\ncomponents/\n|- Heading.vue\n|- MySidebar.vue\n```\n{% raw %}</div>{% endraw %}\n\n{% raw %}<div class=\"style-example example-good\">{% endraw %}\n#### Good\n\n```\ncomponents/\n|- TheHeading.vue\n|- TheSidebar.vue\n```\n{% raw %}</div>{% endraw %}\n\n\n\n### Tightly coupled component names <sup data-p=\"b\">strongly recommended</sup>\n\n**Child components that are tightly coupled with their parent should include the parent component name as a prefix.**\n\nIf a component only makes sense in the context of a single parent component, that relationship should be evident in its name. Since editors typically organize files alphabetically, this also keeps these related files next to each other.\n\n{% raw %}\n<details>\n<summary>\n  <h4>Detailed Explanation</h4>\n</summary>\n{% endraw %}\n\nYou might be tempted to solve this problem by nesting child components in directories named after their parent. For example:\n\n```\ncomponents/\n|- TodoList/\n   |- Item/\n      |- index.vue\n      |- Button.vue\n   |- index.vue\n```\n\nor:\n\n```\ncomponents/\n|- TodoList/\n   |- Item/\n      |- Button.vue\n   |- Item.vue\n|- TodoList.vue\n```\n\nThis isn't recommended, as it results in:\n\n- Many files with similar names, making rapid file switching in code editors more difficult.\n- Many nested sub-directories, which increases the time it takes to browse components in an editor's sidebar.\n\n{% raw %}</details>{% endraw %}\n\n{% raw %}<div class=\"style-example example-bad\">{% endraw %}\n#### Bad\n\n```\ncomponents/\n|- TodoList.vue\n|- TodoItem.vue\n|- TodoButton.vue\n```\n\n```\ncomponents/\n|- SearchSidebar.vue\n|- NavigationForSearchSidebar.vue\n```\n{% raw %}</div>{% endraw %}\n\n{% raw %}<div class=\"style-example example-good\">{% endraw %}\n#### Good\n\n```\ncomponents/\n|- TodoList.vue\n|- TodoListItem.vue\n|- TodoListItemButton.vue\n```\n\n```\ncomponents/\n|- SearchSidebar.vue\n|- SearchSidebarNavigation.vue\n```\n{% raw %}</div>{% endraw %}\n\n\n\n### Order of words in component names <sup data-p=\"b\">strongly recommended</sup>\n\n**Component names should start with the highest-level (often most general) words and end with descriptive modifying words.**\n\n{% raw %}\n<details>\n<summary>\n  <h4>Detailed Explanation</h4>\n</summary>\n{% endraw %}\n\nYou may be wondering:\n\n> \"Why would we force component names to use less natural language?\"\n\nIn natural English, adjectives and other descriptors do typically appear before the nouns, while exceptions require connector words. For example:\n\n- Coffee _with_ milk\n- Soup _of the_ day\n- Visitor _to the_ museum\n\nYou can definitely include these connector words in component names if you'd like, but the order is still important.\n\nAlso note that **what's considered \"highest-level\" will be contextual to your app**. For example, imagine an app with a search form. It may include components like this one:\n\n```\ncomponents/\n|- ClearSearchButton.vue\n|- ExcludeFromSearchInput.vue\n|- LaunchOnStartupCheckbox.vue\n|- RunSearchButton.vue\n|- SearchInput.vue\n|- TermsCheckbox.vue\n```\n\nAs you might notice, it's quite difficult to see which components are specific to the search. Now let's rename the components according to the rule:\n\n```\ncomponents/\n|- SearchButtonClear.vue\n|- SearchButtonRun.vue\n|- SearchInputExcludeGlob.vue\n|- SearchInputQuery.vue\n|- SettingsCheckboxLaunchOnStartup.vue\n|- SettingsCheckboxTerms.vue\n```\n\nSince editors typically organize files alphabetically, all the important relationships between components are now evident at a glance.\n\nYou might be tempted to solve this problem differently, nesting all the search components under a \"search\" directory, then all the settings components under a \"settings\" directory. We only recommend considering this approach in very large apps (e.g. 100+ components), for these reasons:\n\n- It generally takes more time to navigate through nested sub-directories, than scrolling through a single `components` directory.\n- Name conflicts (e.g. multiple `ButtonDelete.vue` components) make it more difficult to quickly navigate to a specific component in a code editor.\n- Refactoring becomes more difficult, because find-and-replace often isn't sufficient to update relative references to a moved component.\n\n{% raw %}</details>{% endraw %}\n\n{% raw %}<div class=\"style-example example-bad\">{% endraw %}\n#### Bad\n\n```\ncomponents/\n|- ClearSearchButton.vue\n|- ExcludeFromSearchInput.vue\n|- LaunchOnStartupCheckbox.vue\n|- RunSearchButton.vue\n|- SearchInput.vue\n|- TermsCheckbox.vue\n```\n{% raw %}</div>{% endraw %}\n\n{% raw %}<div class=\"style-example example-good\">{% endraw %}\n#### Good\n\n```\ncomponents/\n|- SearchButtonClear.vue\n|- SearchButtonRun.vue\n|- SearchInputQuery.vue\n|- SearchInputExcludeGlob.vue\n|- SettingsCheckboxTerms.vue\n|- SettingsCheckboxLaunchOnStartup.vue\n```\n{% raw %}</div>{% endraw %}\n\n\n\n### Self-closing components <sup data-p=\"b\">strongly recommended</sup>\n\n**Components with no content should be self-closing in [single-file components](../guide/single-file-components.html), string templates, and [JSX](../guide/render-function.html#JSX) - but never in DOM templates.**\n\nComponents that self-close communicate that they not only have no content, but are **meant** to have no content. It's the difference between a blank page in a book and one labeled \"This page intentionally left blank.\" Your code is also cleaner without the unnecessary closing tag.\n\nUnfortunately, HTML doesn't allow custom elements to be self-closing - only [official \"void\" elements](https://www.w3.org/TR/html/syntax.html#void-elements). That's why the strategy is only possible when Vue's template compiler can reach the template before the DOM, then serve the DOM spec-compliant HTML.\n\n{% raw %}<div class=\"style-example example-bad\">{% endraw %}\n#### Bad\n\n``` html\n<!-- In single-file components, string templates, and JSX -->\n<MyComponent></MyComponent>\n```\n\n``` html\n<!-- In DOM templates -->\n<my-component/>\n```\n{% raw %}</div>{% endraw %}\n\n{% raw %}<div class=\"style-example example-good\">{% endraw %}\n#### Good\n\n``` html\n<!-- In single-file components, string templates, and JSX -->\n<MyComponent/>\n```\n\n``` html\n<!-- In DOM templates -->\n<my-component></my-component>\n```\n{% raw %}</div>{% endraw %}\n\n\n\n### Component name casing in templates <sup data-p=\"b\">strongly recommended</sup>\n\n**In most projects, component names should always be PascalCase in [single-file components](../guide/single-file-components.html) and string templates - but kebab-case in DOM templates.**\n\nPascalCase has a few advantages over kebab-case:\n\n- Editors can autocomplete component names in templates, because PascalCase is also used in JavaScript.\n- `<MyComponent>` is more visually distinct from a single-word HTML element than `<my-component>`, because there are two character differences (the two capitals), rather than just one (a hyphen).\n- If you use any non-Vue custom elements in your templates, such as a web component, PascalCase ensures that your Vue components remain distinctly visible.\n\nUnfortunately, due to HTML's case insensitivity, DOM templates must still use kebab-case.\n\nAlso note that if you've already invested heavily in kebab-case, consistency with HTML conventions and being able to use the same casing across all your projects may be more important than the advantages listed above. In those cases, **using kebab-case everywhere is also acceptable.**\n\n{% raw %}<div class=\"style-example example-bad\">{% endraw %}\n#### Bad\n\n``` html\n<!-- In single-file components and string templates -->\n<mycomponent/>\n```\n\n``` html\n<!-- In single-file components and string templates -->\n<myComponent/>\n```\n\n``` html\n<!-- In DOM templates -->\n<MyComponent></MyComponent>\n```\n{% raw %}</div>{% endraw %}\n\n{% raw %}<div class=\"style-example example-good\">{% endraw %}\n#### Good\n\n``` html\n<!-- In single-file components and string templates -->\n<MyComponent/>\n```\n\n``` html\n<!-- In DOM templates -->\n<my-component></my-component>\n```\n\nOR\n\n``` html\n<!-- Everywhere -->\n<my-component></my-component>\n```\n{% raw %}</div>{% endraw %}\n\n\n\n### Component name casing in JS/JSX <sup data-p=\"b\">strongly recommended</sup>\n\n**Component names in JS/[JSX](../guide/render-function.html#JSX) should always be PascalCase, though they may be kebab-case inside strings for simpler applications that only use global component registration through `Vue.component`.**\n\n{% raw %}\n<details>\n<summary>\n  <h4>Detailed Explanation</h4>\n</summary>\n{% endraw %}\n\nIn JavaScript, PascalCase is the convention for classes and prototype constructors - essentially, anything that can have distinct instances. Vue components also have instances, so it makes sense to also use PascalCase. As an added benefit, using PascalCase within JSX (and templates) allows readers of the code to more easily distinguish between components and HTML elements.\n\nHowever, for applications that use **only** global component definitions via `Vue.component`, we recommend kebab-case instead. The reasons are:\n\n- It's rare that global components are ever referenced in JavaScript, so following a convention for JavaScript makes less sense.\n- These applications always include many in-DOM templates, where [kebab-case **must** be used](#Component-name-casing-in-templates-strongly-recommended).\n\n{% raw %}</details>{% endraw %}\n\n{% raw %}<div class=\"style-example example-bad\">{% endraw %}\n#### Bad\n\n``` js\nVue.component('myComponent', {\n  // ...\n})\n```\n\n``` js\nimport myComponent from './MyComponent.vue'\n```\n\n``` js\nexport default {\n  name: 'myComponent',\n  // ...\n}\n```\n\n``` js\nexport default {\n  name: 'my-component',\n  // ...\n}\n```\n{% raw %}</div>{% endraw %}\n\n{% raw %}<div class=\"style-example example-good\">{% endraw %}\n#### Good\n\n``` js\nVue.component('MyComponent', {\n  // ...\n})\n```\n\n``` js\nVue.component('my-component', {\n  // ...\n})\n```\n\n``` js\nimport MyComponent from './MyComponent.vue'\n```\n\n``` js\nexport default {\n  name: 'MyComponent',\n  // ...\n}\n```\n{% raw %}</div>{% endraw %}\n\n\n\n### Full-word component names <sup data-p=\"b\">strongly recommended</sup>\n\n**Component names should prefer full words over abbreviations.**\n\nThe autocompletion in editors make the cost of writing longer names very low, while the clarity they provide is invaluable. Uncommon abbreviations, in particular, should always be avoided.\n\n{% raw %}<div class=\"style-example example-bad\">{% endraw %}\n#### Bad\n\n```\ncomponents/\n|- SdSettings.vue\n|- UProfOpts.vue\n```\n{% raw %}</div>{% endraw %}\n\n{% raw %}<div class=\"style-example example-good\">{% endraw %}\n#### Good\n\n```\ncomponents/\n|- StudentDashboardSettings.vue\n|- UserProfileOptions.vue\n```\n{% raw %}</div>{% endraw %}\n\n\n\n### Prop name casing <sup data-p=\"b\">strongly recommended</sup>\n\n**Prop names should always use camelCase during declaration, but kebab-case in templates and [JSX](../guide/render-function.html#JSX).**\n\nWe're simply following the conventions of each language. Within JavaScript, camelCase is more natural. Within HTML, kebab-case is.\n\n{% raw %}<div class=\"style-example example-bad\">{% endraw %}\n#### Bad\n\n``` js\nprops: {\n  'greeting-text': String\n}\n```\n\n``` html\n<WelcomeMessage greetingText=\"hi\"/>\n```\n{% raw %}</div>{% endraw %}\n\n{% raw %}<div class=\"style-example example-good\">{% endraw %}\n#### Good\n\n``` js\nprops: {\n  greetingText: String\n}\n```\n\n``` html\n<WelcomeMessage greeting-text=\"hi\"/>\n```\n{% raw %}</div>{% endraw %}\n\n\n\n### Multi-attribute elements <sup data-p=\"b\">strongly recommended</sup>\n\n**Elements with multiple attributes should span multiple lines, with one attribute per line.**\n\nIn JavaScript, splitting objects with multiple properties over multiple lines is widely considered a good convention, because it's much easier to read. Our templates and [JSX](../guide/render-function.html#JSX) deserve the same consideration.\n\n{% raw %}<div class=\"style-example example-bad\">{% endraw %}\n#### Bad\n\n``` html\n<img src=\"https://vuejs.org/images/logo.png\" alt=\"Vue Logo\">\n```\n\n``` html\n<MyComponent foo=\"a\" bar=\"b\" baz=\"c\"/>\n```\n{% raw %}</div>{% endraw %}\n\n{% raw %}<div class=\"style-example example-good\">{% endraw %}\n#### Good\n\n``` html\n<img\n  src=\"https://vuejs.org/images/logo.png\"\n  alt=\"Vue Logo\"\n>\n```\n\n``` html\n<MyComponent\n  foo=\"a\"\n  bar=\"b\"\n  baz=\"c\"\n/>\n```\n{% raw %}</div>{% endraw %}\n\n\n\n### Simple expressions in templates <sup data-p=\"b\">strongly recommended</sup>\n\n**Component templates should only include simple expressions, with more complex expressions refactored into computed properties or methods.**\n\nComplex expressions in your templates make them less declarative. We should strive to describe _what_ should appear, not _how_ we're computing that value. Computed properties and methods also allow the code to be reused.\n\n{% raw %}<div class=\"style-example example-bad\">{% endraw %}\n#### Bad\n\n``` html\n{{\n  fullName.split(' ').map(function (word) {\n    return word[0].toUpperCase() + word.slice(1)\n  }).join(' ')\n}}\n```\n{% raw %}</div>{% endraw %}\n\n{% raw %}<div class=\"style-example example-good\">{% endraw %}\n#### Good\n\n``` html\n<!-- In a template -->\n{{ normalizedFullName }}\n```\n\n``` js\n// The complex expression has been moved to a computed property\ncomputed: {\n  normalizedFullName: function () {\n    return this.fullName.split(' ').map(function (word) {\n      return word[0].toUpperCase() + word.slice(1)\n    }).join(' ')\n  }\n}\n```\n{% raw %}</div>{% endraw %}\n\n\n\n### Simple computed properties <sup data-p=\"b\">strongly recommended</sup>\n\n**Complex computed properties should be split into as many simpler properties as possible.**\n\n{% raw %}\n<details>\n<summary>\n  <h4>Detailed Explanation</h4>\n</summary>\n{% endraw %}\n\nSimpler, well-named computed properties are:\n\n- __Easier to test__\n\n  When each computed property contains only a very simple expression, with very few dependencies, it's much easier to write tests confirming that it works correctly.\n\n- __Easier to read__\n\n  Simplifying computed properties forces you to give each value a descriptive name, even if it's not reused. This makes it much easier for other developers (and future you) to focus in on the code they care about and figure out what's going on.\n\n- __More adaptable to changing requirements__\n\n  Any value that can be named might be useful to the view. For example, we might decide to display a message telling the user how much money they saved. We might also decide to calculate sales tax, but perhaps display it separately, rather than as part of the final price.\n\n  Small, focused computed properties make fewer assumptions about how information will be used, so require less refactoring as requirements change.\n\n{% raw %}</details>{% endraw %}\n\n{% raw %}<div class=\"style-example example-bad\">{% endraw %}\n#### Bad\n\n``` js\ncomputed: {\n  price: function () {\n    var basePrice = this.manufactureCost / (1 - this.profitMargin)\n    return (\n      basePrice -\n      basePrice * (this.discountPercent || 0)\n    )\n  }\n}\n```\n{% raw %}</div>{% endraw %}\n\n{% raw %}<div class=\"style-example example-good\">{% endraw %}\n#### Good\n\n``` js\ncomputed: {\n  basePrice: function () {\n    return this.manufactureCost / (1 - this.profitMargin)\n  },\n  discount: function () {\n    return this.basePrice * (this.discountPercent || 0)\n  },\n  finalPrice: function () {\n    return this.basePrice - this.discount\n  }\n}\n```\n{% raw %}</div>{% endraw %}\n\n\n\n### Quoted attribute values <sup data-p=\"b\">strongly recommended</sup>\n\n**Non-empty HTML attribute values should always be inside quotes (single or double, whichever is not used in JS).**\n\nWhile attribute values without any spaces are not required to have quotes in HTML, this practice often leads to _avoiding_ spaces, making attribute values less readable.\n\n{% raw %}<div class=\"style-example example-bad\">{% endraw %}\n#### Bad\n\n``` html\n<input type=text>\n```\n\n``` html\n<AppSidebar :style={width:sidebarWidth+'px'}>\n```\n{% raw %}</div>{% endraw %}\n\n{% raw %}<div class=\"style-example example-good\">{% endraw %}\n#### Good\n\n``` html\n<input type=\"text\">\n```\n\n``` html\n<AppSidebar :style=\"{ width: sidebarWidth + 'px' }\">\n```\n{% raw %}</div>{% endraw %}\n\n\n\n### Directive shorthands <sup data-p=\"b\">strongly recommended</sup>\n\n**Directive shorthands (`:` for `v-bind:` and `@` for `v-on:`) should be used always or never.**\n\n{% raw %}<div class=\"style-example example-bad\">{% endraw %}\n#### Bad\n\n``` html\n<input\n  v-bind:value=\"newTodoText\"\n  :placeholder=\"newTodoInstructions\"\n>\n```\n\n``` html\n<input\n  v-on:input=\"onInput\"\n  @focus=\"onFocus\"\n>\n```\n{% raw %}</div>{% endraw %}\n\n{% raw %}<div class=\"style-example example-good\">{% endraw %}\n#### Good\n\n``` html\n<input\n  :value=\"newTodoText\"\n  :placeholder=\"newTodoInstructions\"\n>\n```\n\n``` html\n<input\n  v-bind:value=\"newTodoText\"\n  v-bind:placeholder=\"newTodoInstructions\"\n>\n```\n\n``` html\n<input\n  @input=\"onInput\"\n  @focus=\"onFocus\"\n>\n```\n\n``` html\n<input\n  v-on:input=\"onInput\"\n  v-on:focus=\"onFocus\"\n>\n```\n{% raw %}</div>{% endraw %}\n\n\n\n\n## Priority C Rules: Recommended (Minimizing Arbitrary Choices and Cognitive Overhead)\n\n\n\n### Component/instance options order <sup data-p=\"c\">recommended</sup>\n\n**Component/instance options should be ordered consistently.**\n\nThis is the default order we recommend for component options. They're split into categories, so you'll know where to add new properties from plugins.\n\n1. **Side Effects** (triggers effects outside the component)\n  - `el`\n\n2. **Global Awareness** (requires knowledge beyond the component)\n  - `name`\n  - `parent`\n\n3. **Component Type** (changes the type of the component)\n  - `functional`\n\n4. **Template Modifiers** (changes the way templates are compiled)\n  - `delimiters`\n  - `comments`\n\n5. **Template Dependencies** (assets used in the template)\n  - `components`\n  - `directives`\n  - `filters`\n\n6. **Composition** (merges properties into the options)\n  - `extends`\n  - `mixins`\n\n7. **Interface** (the interface to the component)\n  - `inheritAttrs`\n  - `model`\n  - `props`/`propsData`\n\n8. **Local State** (local reactive properties)\n  - `data`\n  - `computed`\n\n9. **Events** (callbacks triggered by reactive events)\n  - `watch`\n  - Lifecycle Events (in the order they are called)\n    - `beforeCreate`\n    - `created`\n    - `beforeMount`\n    - `mounted`\n    - `beforeUpdate`\n    - `updated`\n    - `activated`\n    - `deactivated`\n    - `beforeDestroy`\n    - `destroyed`\n\n10. **Non-Reactive Properties** (instance properties independent of the reactivity system)\n  - `methods`\n\n11. **Rendering** (the declarative description of the component output)\n  - `template`/`render`\n  - `renderError`\n\n\n\n### Element attribute order <sup data-p=\"c\">recommended</sup>\n\n**The attributes of elements (including components) should be ordered consistently.**\n\nThis is the default order we recommend for component options. They're split into categories, so you'll know where to add custom attributes and directives.\n\n1. **Definition** (provides the component options)\n  - `is`\n\n2. **List Rendering** (creates multiple variations of the same element)\n  - `v-for`\n\n3. **Conditionals** (whether the element is rendered/shown)\n  - `v-if`\n  - `v-else-if`\n  - `v-else`\n  - `v-show`\n  - `v-cloak`\n\n4. **Render Modifiers** (changes the way the element renders)\n  - `v-pre`\n  - `v-once`\n\n5. **Global Awareness** (requires knowledge beyond the component)\n  - `id`\n\n6. **Unique Attributes** (attributes that require unique values)\n  - `ref`\n  - `key`\n  - `slot`\n\n7. **Two-Way Binding** (combining binding and events)\n  - `v-model`\n\n8. **Other Attributes** (all unspecified bound & unbound attributes)\n\n9. **Events** (component event listeners)\n  - `v-on`\n\n10. **Content** (overrides the content of the element)\n  - `v-html`\n  - `v-text`\n\n\n\n### Empty lines in component/instance options <sup data-p=\"c\">recommended</sup>\n\n**You may want to add one empty line between multi-line properties, particularly if the options can no longer fit on your screen without scrolling.**\n\nWhen components begin to feel cramped or difficult to read, adding spaces between multi-line properties can make them easier to skim again. In some editors, such as Vim, formatting options like this can also make them easier to navigate with the keyboard.\n\n{% raw %}<div class=\"style-example example-good\">{% endraw %}\n#### Good\n\n``` js\nprops: {\n  value: {\n    type: String,\n    required: true\n  },\n\n  focused: {\n    type: Boolean,\n    default: false\n  },\n\n  label: String,\n  icon: String\n},\n\ncomputed: {\n  formattedValue: function () {\n    // ...\n  },\n\n  inputClasses: function () {\n    // ...\n  }\n}\n```\n\n``` js\n// No spaces are also fine, as long as the component\n// is still easy to read and navigate.\nprops: {\n  value: {\n    type: String,\n    required: true\n  },\n  focused: {\n    type: Boolean,\n    default: false\n  },\n  label: String,\n  icon: String\n},\ncomputed: {\n  formattedValue: function () {\n    // ...\n  },\n  inputClasses: function () {\n    // ...\n  }\n}\n```\n{% raw %}</div>{% endraw %}\n\n\n\n### Single-file component top-level element order <sup data-p=\"c\">recommended</sup>\n\n**[Single-file components](../guide/single-file-components.html) should always order `<script>`, `<template>`, and `<style>` tags consistently, with `<style>` last, because at least one of the other two is always necessary.**\n\n{% raw %}<div class=\"style-example example-bad\">{% endraw %}\n#### Bad\n\n``` html\n<style>/* ... */</style>\n<script>/* ... */</script>\n<template>...</template>\n```\n\n``` html\n<!-- ComponentA.vue -->\n<script>/* ... */</script>\n<template>...</template>\n<style>/* ... */</style>\n\n<!-- ComponentB.vue -->\n<template>...</template>\n<script>/* ... */</script>\n<style>/* ... */</style>\n```\n{% raw %}</div>{% endraw %}\n\n{% raw %}<div class=\"style-example example-good\">{% endraw %}\n#### Good\n\n``` html\n<!-- ComponentA.vue -->\n<script>/* ... */</script>\n<template>...</template>\n<style>/* ... */</style>\n\n<!-- ComponentB.vue -->\n<script>/* ... */</script>\n<template>...</template>\n<style>/* ... */</style>\n```\n\n``` html\n<!-- ComponentA.vue -->\n<template>...</template>\n<script>/* ... */</script>\n<style>/* ... */</style>\n\n<!-- ComponentB.vue -->\n<template>...</template>\n<script>/* ... */</script>\n<style>/* ... */</style>\n```\n{% raw %}</div>{% endraw %}\n\n\n\n## Priority D Rules: Use with Caution (Potentially Dangerous Patterns)\n\n\n\n### `v-if`/`v-if-else`/`v-else` without `key` <sup data-p=\"d\">use with caution</sup>\n\n**It's usually best to use `key` with `v-if` + `v-else`, if they are the same element type (e.g. both `<div>` elements).**\n\nBy default, Vue updates the DOM as efficiently as possible. That means when switching between elements of the same type, it simply patches the existing element, rather than removing it and adding a new one in its place. This can have [unintended side effects](https://jsfiddle.net/chrisvfritz/bh8fLeds/) if these elements should not actually be considered the same.\n\n{% raw %}<div class=\"style-example example-bad\">{% endraw %}\n#### Bad\n\n``` html\n<div v-if=\"error\">\n  Error: {{ error }}\n</div>\n<div v-else>\n  {{ results }}\n</div>\n```\n{% raw %}</div>{% endraw %}\n\n{% raw %}<div class=\"style-example example-good\">{% endraw %}\n#### Good\n\n``` html\n<div\n  v-if=\"error\"\n  key=\"search-status\"\n>\n  Error: {{ error }}\n</div>\n<div\n  v-else\n  key=\"search-results\"\n>\n  {{ results }}\n</div>\n```\n\n``` html\n<p v-if=\"error\">\n  Error: {{ error }}\n</p>\n<div v-else>\n  {{ results }}\n</div>\n```\n{% raw %}</div>{% endraw %}\n\n\n\n### Element selectors with `scoped` <sup data-p=\"d\">use with caution</sup>\n\n**Element selectors should be avoided with `scoped`.**\n\nPrefer class selectors over element selectors in `scoped` styles, because large numbers of element selectors are slow.\n\n{% raw %}\n<details>\n<summary>\n  <h4>Detailed Explanation</h4>\n</summary>\n{% endraw %}\n\nTo scope styles, Vue adds a unique attribute to component elements, such as `data-v-f3f3eg9`. Then selectors are modified so that only matching elements with this attribute are selected (e.g. `button[data-v-f3f3eg9]`).\n\nThe problem is that large numbers of [element-attribute selectors](http://stevesouders.com/efws/css-selectors/csscreate.php?n=1000&sel=a%5Bhref%5D&body=background%3A+%23CFD&ne=1000) (e.g. `button[data-v-f3f3eg9]`) will be considerably slower than [class-attribute selectors](http://stevesouders.com/efws/css-selectors/csscreate.php?n=1000&sel=.class%5Bhref%5D&body=background%3A+%23CFD&ne=1000) (e.g. `.btn-close[data-v-f3f3eg9]`), so class selectors should be preferred whenever possible.\n\n{% raw %}</details>{% endraw %}\n\n{% raw %}<div class=\"style-example example-bad\">{% endraw %}\n#### Bad\n\n``` html\n<template>\n  <button>X</button>\n</template>\n\n<style scoped>\nbutton {\n  background-color: red;\n}\n</style>\n```\n{% raw %}</div>{% endraw %}\n\n{% raw %}<div class=\"style-example example-good\">{% endraw %}\n#### Good\n\n``` html\n<template>\n  <button class=\"btn btn-close\">X</button>\n</template>\n\n<style scoped>\n.btn-close {\n  background-color: red;\n}\n</style>\n```\n{% raw %}</div>{% endraw %}\n\n\n\n### Implicit parent-child communication <sup data-p=\"d\">use with caution</sup>\n\n**Props and events should be preferred for parent-child component communication, instead of `this.$parent` or mutating props.**\n\nAn ideal Vue application is props down, events up. Sticking to this convention makes your components much easier to understand. However, there are edge cases where prop mutation or `this.$parent` can simplify two components that are already deeply coupled.\n\nThe problem is, there are also many _simple_ cases where these patterns may offer convenience. Beware: do not be seduced into trading simplicity (being able to understand the flow of your state) for short-term convenience (writing less code).\n\n{% raw %}<div class=\"style-example example-bad\">{% endraw %}\n#### Bad\n\n``` js\nVue.component('TodoItem', {\n  props: {\n    todo: {\n      type: Object,\n      required: true\n    }\n  },\n  template: '<input v-model=\"todo.text\">'\n})\n```\n\n``` js\nVue.component('TodoItem', {\n  props: {\n    todo: {\n      type: Object,\n      required: true\n    }\n  },\n  methods: {\n    removeTodo () {\n      var vm = this\n      vm.$parent.todos = vm.$parent.todos.filter(function (todo) {\n        return todo.id !== vm.todo.id\n      })\n    }\n  },\n  template: `\n    <span>\n      {{ todo.text }}\n      <button @click=\"removeTodo\">\n        X\n      </button>\n    </span>\n  `\n})\n```\n{% raw %}</div>{% endraw %}\n\n{% raw %}<div class=\"style-example example-good\">{% endraw %}\n#### Good\n\n``` js\nVue.component('TodoItem', {\n  props: {\n    todo: {\n      type: Object,\n      required: true\n    }\n  },\n  template: `\n    <input\n      :value=\"todo.text\"\n      @input=\"$emit('input', $event.target.value)\"\n    >\n  `\n})\n```\n\n``` js\nVue.component('TodoItem', {\n  props: {\n    todo: {\n      type: Object,\n      required: true\n    }\n  },\n  template: `\n    <span>\n      {{ todo.text }}\n      <button @click=\"$emit('delete')\">\n        X\n      </button>\n    </span>\n  `\n})\n```\n{% raw %}</div>{% endraw %}\n\n\n\n### Non-flux state management <sup data-p=\"d\">use with caution</sup>\n\n**[Vuex](https://github.com/vuejs/vuex) should be preferred for global state management, instead of `this.$root` or a global event bus.**\n\nManaging state on `this.$root` and/or using a [global event bus](https://vuejs.org/v2/guide/migration.html#dispatch-and-broadcast-replaced) can be convenient for very simple cases, but are not appropriate for most applications. Vuex offers not only a central place to manage state, but also tools for organizing, tracking, and debugging state changes.\n\n{% raw %}</details>{% endraw %}\n\n{% raw %}<div class=\"style-example example-bad\">{% endraw %}\n#### Bad\n\n``` js\n// main.js\nnew Vue({\n  data: {\n    todos: []\n  },\n  created: function () {\n    this.$on('remove-todo', this.removeTodo)\n  },\n  methods: {\n    removeTodo: function (todo) {\n      var todoIdToRemove = todo.id\n      this.todos = this.todos.filter(function (todo) {\n        return todo.id !== todoIdToRemove\n      })\n    }\n  }\n})\n```\n{% raw %}</div>{% endraw %}\n\n{% raw %}<div class=\"style-example example-good\">{% endraw %}\n#### Good\n\n``` js\n// store/modules/todos.js\nexport default {\n  state: {\n    list: []\n  },\n  mutations: {\n    REMOVE_TODO (state, todoId) {\n      state.list = state.list.filter(todo => todo.id !== todoId)\n    }\n  },\n  actions: {\n    removeTodo ({ commit, state }, todo) {\n      commit('REMOVE_TODO', todo.id)\n    }\n  }\n}\n```\n\n``` html\n<!-- TodoItem.vue -->\n<template>\n  <span>\n    {{ todo.text }}\n    <button @click=\"removeTodo(todo)\">\n      X\n    </button>\n  </span>\n</template>\n\n<script>\nimport { mapActions } from 'vuex'\n\nexport default {\n  props: {\n    todo: {\n      type: Object,\n      required: true\n    }\n  },\n  methods: mapActions(['removeTodo'])\n}\n</script>\n```\n{% raw %}</div>{% endraw %}\n\n\n\n{% raw %}\n<script>\n(function () {\n  var enforcementTypes = {\n    none: '<span title=\"There is unfortunately no way to automatically enforce this rule.\">self-discipline</span>',\n    runtime: 'runtime error',\n    linter: '<a href=\"https://github.com/vuejs/eslint-plugin-vue#eslint-plugin-vue\" target=\"_blank\">plugin:vue/recommended</a>'\n  }\n  Vue.component('sg-enforcement', {\n    template: '\\\n      <span>\\\n        <strong>Enforcement</strong>:\\\n        <span class=\"style-rule-tag\" v-html=\"humanType\"/>\\\n      </span>\\\n    ',\n    props: {\n      type: {\n        type: String,\n        required: true,\n        validate: function (value) {\n          Object.keys(enforcementTypes).indexOf(value) !== -1\n        }\n      }\n    },\n    computed: {\n      humanType: function () {\n        return enforcementTypes[this.type]\n      }\n    }\n  })\n\n  // new Vue({\n  //  el: '#main'\n  // })\n})()\n</script>\n{% endraw %}\n","date":"2018-07-19T04:04:16.865Z","updated":"2018-07-19T04:04:16.865Z","path":"v2/style-guide/index.html","comments":1,"layout":"page","_id":"cjk0zidp10017vkrtegde8ku3","content":"<p>This is the official style guide for Vue-specific code. If you use Vue in a project, it’s a great reference to avoid errors, bikeshedding, and anti-patterns. However, we don’t believe that any style guide is ideal for all teams or projects, so mindful deviations are encouraged based on past experience, the surrounding tech stack, and personal values.</p>\n<p>For the most part, we also avoid suggestions about JavaScript or HTML in general. We don’t mind whether you use semicolons or trailing commas. We don’t mind whether your HTML uses single-quotes or double-quotes for attribute values. Some exceptions will exist however, where we’ve found that a particular pattern is helpful in the context of Vue.</p>\n<blockquote>\n<p><strong>Soon, we’ll also provide tips for enforcement.</strong> Sometimes you’ll simply have to be disciplined, but wherever possible, we’ll try to show you how to use ESLint and other automated processes to make enforcement simpler.</p>\n</blockquote>\n<p>Finally, we’ve split rules into four categories:</p>\n<h2 id=\"Rule-Categories\"><a href=\"#Rule-Categories\" class=\"headerlink\" title=\"Rule Categories\"></a>Rule Categories</h2><h3 id=\"Priority-A-Essential\"><a href=\"#Priority-A-Essential\" class=\"headerlink\" title=\"Priority A: Essential\"></a>Priority A: Essential</h3><p>These rules help prevent errors, so learn and abide by them at all costs. Exceptions may exist, but should be very rare and only be made by those with expert knowledge of both JavaScript and Vue.</p>\n<h3 id=\"Priority-B-Strongly-Recommended\"><a href=\"#Priority-B-Strongly-Recommended\" class=\"headerlink\" title=\"Priority B: Strongly Recommended\"></a>Priority B: Strongly Recommended</h3><p>These rules have been found to improve readability and/or developer experience in most projects. Your code will still run if you violate them, but violations should be rare and well-justified.</p>\n<h3 id=\"Priority-C-Recommended\"><a href=\"#Priority-C-Recommended\" class=\"headerlink\" title=\"Priority C: Recommended\"></a>Priority C: Recommended</h3><p>Where multiple, equally good options exist, an arbitrary choice can be made to ensure consistency. In these rules, we describe each acceptable option and suggest a default choice. That means you can feel free to make a different choice in your own codebase, as long as you’re consistent and have a good reason. Please do have a good reason though! By adapting to the community standard, you will:</p>\n<ol>\n<li>train your brain to more easily parse most of the community code you encounter</li>\n<li>be able to copy and paste most community code examples without modification</li>\n<li>often find new hires are already accustomed to your preferred coding style, at least in regards to Vue</li>\n</ol>\n<h3 id=\"Priority-D-Use-with-Caution\"><a href=\"#Priority-D-Use-with-Caution\" class=\"headerlink\" title=\"Priority D: Use with Caution\"></a>Priority D: Use with Caution</h3><p>Some features of Vue exist to accommodate rare edge cases or smoother migrations from a legacy code base. When overused however, they can make your code more difficult to maintain or even become a source of bugs. These rules shine a light on potentially risky features, describing when and why they should be avoided.</p>\n<h2 id=\"Priority-A-Rules-Essential-Error-Prevention\"><a href=\"#Priority-A-Rules-Essential-Error-Prevention\" class=\"headerlink\" title=\"Priority A Rules: Essential (Error Prevention)\"></a>Priority A Rules: Essential (Error Prevention)</h2><h3 id=\"Multi-word-component-names-essential\"><a href=\"#Multi-word-component-names-essential\" class=\"headerlink\" title=\"Multi-word component names essential\"></a>Multi-word component names <sup data-p=\"a\">essential</sup></h3><p><strong>Component names should always be multi-word, except for root <code>App</code> components.</strong></p>\n<p>This <a href=\"http://w3c.github.io/webcomponents/spec/custom/#valid-custom-element-name\" target=\"_blank\" rel=\"noopener\">prevents conflicts</a> with existing and future HTML elements, since all HTML elements are a single word.</p>\n<div class=\"style-example example-bad\">\n<h4 id=\"Bad\"><a href=\"#Bad\" class=\"headerlink\" title=\"Bad\"></a>Bad</h4><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">Vue.component(<span class=\"string\">'todo'</span>, &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  name: <span class=\"string\">'Todo'</span>,</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</div>\n<div class=\"style-example example-good\">\n<h4 id=\"Good\"><a href=\"#Good\" class=\"headerlink\" title=\"Good\"></a>Good</h4><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">Vue.component(<span class=\"string\">'todo-item'</span>, &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  name: <span class=\"string\">'TodoItem'</span>,</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</div>\n<h3 id=\"Component-data-essential\"><a href=\"#Component-data-essential\" class=\"headerlink\" title=\"Component data essential\"></a>Component data <sup data-p=\"a\">essential</sup></h3><p><strong>Component <code>data</code> must be a function.</strong></p>\n<p>When using the <code>data</code> property on a component (i.e. anywhere except on <code>new Vue</code>), the value must be a function that returns an object.</p>\n\n<details>\n<summary>\n  <h4>Detailed Explanation</h4>\n</summary>\n\n<p>When the value of <code>data</code> is an object, it’s shared across all instances of a component. Imagine, for example, a <code>TodoList</code> component with this data:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">data: &#123;</span><br><span class=\"line\">  listTitle: <span class=\"string\">''</span>,</span><br><span class=\"line\">  todos: []</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>We might want to reuse this component, allowing users to maintain multiple lists (e.g. for shopping, wishlists, daily chores, etc). There’s a problem though. Since every instance of the component references the same data object, changing the title of one list will also change the title of every other list. The same is true for adding/editing/deleting a todo.</p>\n<p>Instead, we want each component instance to only manage its own data. For that to happen, each instance must generate a unique data object. In JavaScript, this can be accomplished by returning the object in a function:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">data: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    listTitle: <span class=\"string\">''</span>,</span><br><span class=\"line\">    todos: []</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</details>\n<div class=\"style-example example-bad\">\n<h4 id=\"Bad-1\"><a href=\"#Bad-1\" class=\"headerlink\" title=\"Bad\"></a>Bad</h4><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">Vue.component(<span class=\"string\">'some-comp'</span>, &#123;</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    foo: <span class=\"string\">'bar'</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    foo: <span class=\"string\">'bar'</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</div>\n<div class=\"style-example example-good\">\n<h4 id=\"Good-1\"><a href=\"#Good-1\" class=\"headerlink\" title=\"Good\"></a>Good</h4><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">Vue.component(<span class=\"string\">'some-comp'</span>, &#123;</span><br><span class=\"line\">  data: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      foo: <span class=\"string\">'bar'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// In a .vue file</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  data () &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      foo: <span class=\"string\">'bar'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// It's OK to use an object directly in a root</span></span><br><span class=\"line\"><span class=\"comment\">// Vue instance, since only a single instance</span></span><br><span class=\"line\"><span class=\"comment\">// will ever exist.</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    foo: <span class=\"string\">'bar'</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n</div>\n<h3 id=\"Prop-definitions-essential\"><a href=\"#Prop-definitions-essential\" class=\"headerlink\" title=\"Prop definitions essential\"></a>Prop definitions <sup data-p=\"a\">essential</sup></h3><p><strong>Prop definitions should be as detailed as possible.</strong></p>\n<p>In committed code, prop definitions should always be as detailed as possible, specifying at least type(s).</p>\n\n<details>\n<summary>\n  <h4>Detailed Explanation</h4>\n</summary>\n\n<p>Detailed <a href=\"https://vuejs.org/v2/guide/components.html#Prop-Validation\">prop definitions</a> have two advantages:</p>\n<ul>\n<li>They document the API of the component, so that it’s easy to see how the component is meant to be used.</li>\n<li>In development, Vue will warn you if a component is ever provided incorrectly formatted props, helping you catch potential sources of error.</li>\n</ul>\n</details>\n<div class=\"style-example example-bad\">\n<h4 id=\"Bad-2\"><a href=\"#Bad-2\" class=\"headerlink\" title=\"Bad\"></a>Bad</h4><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// This is only OK when prototyping</span></span><br><span class=\"line\">props: [<span class=\"string\">'status'</span>]</span><br></pre></td></tr></table></figure>\n</div>\n<div class=\"style-example example-good\">\n<h4 id=\"Good-2\"><a href=\"#Good-2\" class=\"headerlink\" title=\"Good\"></a>Good</h4><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">props: &#123;</span><br><span class=\"line\">  status: <span class=\"built_in\">String</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Even better!</span></span><br><span class=\"line\">props: &#123;</span><br><span class=\"line\">  status: &#123;</span><br><span class=\"line\">    type: <span class=\"built_in\">String</span>,</span><br><span class=\"line\">    required: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    validator: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> [</span><br><span class=\"line\">        <span class=\"string\">'syncing'</span>,</span><br><span class=\"line\">        <span class=\"string\">'synced'</span>,</span><br><span class=\"line\">        <span class=\"string\">'version-conflict'</span>,</span><br><span class=\"line\">        <span class=\"string\">'error'</span></span><br><span class=\"line\">      ].indexOf(value) !== <span class=\"number\">-1</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</div>\n<h3 id=\"Keyed-v-for-essential\"><a href=\"#Keyed-v-for-essential\" class=\"headerlink\" title=\"Keyed v-for essential\"></a>Keyed <code>v-for</code> <sup data-p=\"a\">essential</sup></h3><p><strong>Always use <code>key</code> with <code>v-for</code>.</strong></p>\n<p><code>key</code> with <code>v-for</code> is <em>always</em> required on components, in order to maintain internal component state down the subtree. Even for elements though, it’s a good practice to maintain predictable behavior, such as <a href=\"https://bost.ocks.org/mike/constancy/\" target=\"_blank\" rel=\"noopener\">object constancy</a> in animations.</p>\n\n<details>\n<summary>\n  <h4>Detailed Explanation</h4>\n</summary>\n\n<p>Let’s say you have a list of todos:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">data: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    todos: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        id: <span class=\"number\">1</span>,</span><br><span class=\"line\">        text: <span class=\"string\">'Learn to use v-for'</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        id: <span class=\"number\">2</span>,</span><br><span class=\"line\">        text: <span class=\"string\">'Learn to use key'</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Then you sort them alphabetically. When updating the DOM, Vue will optimize rendering to perform the cheapest DOM mutations possible. That might mean deleting the first todo element, then adding it again at the end of the list.</p>\n<p>The problem is, there are cases where it’s important not to delete elements that will remain in the DOM. For example, you may want to use <code>&lt;transition-group&gt;</code> to animate list sorting, or maintain focus if the rendered element is an <code>&lt;input&gt;</code>. In these cases, adding a unique key for each item (e.g. <code>:key=&quot;todo.id&quot;</code>) will tell Vue how to behave more predictably.</p>\n<p>In our experience, it’s better to <em>always</em> add a unique key, so that you and your team simply never have to worry about these edge cases. Then in the rare, performance-critical scenarios where object constancy isn’t necessary, you can make a conscious exception.</p>\n</details>\n<div class=\"style-example example-bad\">\n<h4 id=\"Bad-3\"><a href=\"#Bad-3\" class=\"headerlink\" title=\"Bad\"></a>Bad</h4><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"todo in todos\"</span>&gt;</span></span><br><span class=\"line\">    &#123;&#123; todo.text &#125;&#125;</span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</div>\n<div class=\"style-example example-good\">\n<h4 id=\"Good-3\"><a href=\"#Good-3\" class=\"headerlink\" title=\"Good\"></a>Good</h4><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">v-for</span>=<span class=\"string\">\"todo in todos\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">:key</span>=<span class=\"string\">\"todo.id\"</span></span></span><br><span class=\"line\"><span class=\"tag\">  &gt;</span></span><br><span class=\"line\">    &#123;&#123; todo.text &#125;&#125;</span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</div>\n<h3 id=\"Avoid-v-if-with-v-for-essential\"><a href=\"#Avoid-v-if-with-v-for-essential\" class=\"headerlink\" title=\"Avoid v-if with v-for essential\"></a>Avoid <code>v-if</code> with <code>v-for</code> <sup data-p=\"a\">essential</sup></h3><p><strong>Never use <code>v-if</code> on the same element as <code>v-for</code>.</strong></p>\n<p>There are two common cases where this can be tempting:</p>\n<ul>\n<li><p>To filter items in a list (e.g. <code>v-for=&quot;user in users&quot; v-if=&quot;user.isActive&quot;</code>). In these cases, replace <code>users</code> with a new computed property that returns your filtered list (e.g. <code>activeUsers</code>).</p>\n</li>\n<li><p>To avoid rendering a list if it should be hidden (e.g. <code>v-for=&quot;user in users&quot; v-if=&quot;shouldShowUsers&quot;</code>). In these cases, move the <code>v-if</code> to a container element (e.g. <code>ul</code>, <code>ol</code>).</p>\n</li>\n</ul>\n\n<details>\n<summary>\n  <h4>Detailed Explanation</h4>\n</summary>\n\n<p>When Vue processes directives, <code>v-for</code> has a higher priority than <code>v-if</code>, so that this template:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">v-for</span>=<span class=\"string\">\"user in users\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">v-if</span>=<span class=\"string\">\"user.isActive\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">:key</span>=<span class=\"string\">\"user.id\"</span></span></span><br><span class=\"line\"><span class=\"tag\">  &gt;</span></span><br><span class=\"line\">    &#123;&#123; user.name &#125;&#125;</span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>Will be evaluated similar to:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">this</span>.users.map(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">user</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (user.isActive) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> user.name</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>So even if we only render elements for a small fraction of users, we have to iterate over the entire list every time we re-render, whether or not the set of active users has changed.</p>\n<p>By iterating over a computed property instead, like this:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">computed: &#123;</span><br><span class=\"line\">  activeUsers: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.users.filter(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">user</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> user.isActive</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">v-for</span>=<span class=\"string\">\"user in activeUsers\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">:key</span>=<span class=\"string\">\"user.id\"</span></span></span><br><span class=\"line\"><span class=\"tag\">  &gt;</span></span><br><span class=\"line\">    &#123;&#123; user.name &#125;&#125;</span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>We get the following benefits:</p>\n<ul>\n<li>The filtered list will <em>only</em> be re-evaluated if there are relevant changes to the <code>users</code> array, making filtering much more efficient.</li>\n<li>Using <code>v-for=&quot;user in activeUsers&quot;</code>, we <em>only</em> iterate over active users during render, making rendering much more efficient.</li>\n<li>Logic is now decoupled from the presentation layer, making maintenance (change/extension of logic) much easier.</li>\n</ul>\n<p>We get similar benefits from updating:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">v-for</span>=<span class=\"string\">\"user in users\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">v-if</span>=<span class=\"string\">\"shouldShowUsers\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">:key</span>=<span class=\"string\">\"user.id\"</span></span></span><br><span class=\"line\"><span class=\"tag\">  &gt;</span></span><br><span class=\"line\">    &#123;&#123; user.name &#125;&#125;</span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>to:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">v-if</span>=<span class=\"string\">\"shouldShowUsers\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">v-for</span>=<span class=\"string\">\"user in users\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">:key</span>=<span class=\"string\">\"user.id\"</span></span></span><br><span class=\"line\"><span class=\"tag\">  &gt;</span></span><br><span class=\"line\">    &#123;&#123; user.name &#125;&#125;</span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>By moving the <code>v-if</code> to a container element, we’re no longer checking <code>shouldShowUsers</code> for <em>every</em> user in the list. Instead, we check it once and don’t even evaluate the <code>v-for</code> if <code>shouldShowUsers</code> is false.</p>\n</details>\n<div class=\"style-example example-bad\">\n<h4 id=\"Bad-4\"><a href=\"#Bad-4\" class=\"headerlink\" title=\"Bad\"></a>Bad</h4><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">v-for</span>=<span class=\"string\">\"user in users\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">v-if</span>=<span class=\"string\">\"user.isActive\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">:key</span>=<span class=\"string\">\"user.id\"</span></span></span><br><span class=\"line\"><span class=\"tag\">  &gt;</span></span><br><span class=\"line\">    &#123;&#123; user.name &#125;&#125;</span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">v-for</span>=<span class=\"string\">\"user in users\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">v-if</span>=<span class=\"string\">\"shouldShowUsers\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">:key</span>=<span class=\"string\">\"user.id\"</span></span></span><br><span class=\"line\"><span class=\"tag\">  &gt;</span></span><br><span class=\"line\">    &#123;&#123; user.name &#125;&#125;</span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</div>\n<div class=\"style-example example-good\">\n<h4 id=\"Good-4\"><a href=\"#Good-4\" class=\"headerlink\" title=\"Good\"></a>Good</h4><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">v-for</span>=<span class=\"string\">\"user in activeUsers\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">:key</span>=<span class=\"string\">\"user.id\"</span></span></span><br><span class=\"line\"><span class=\"tag\">  &gt;</span></span><br><span class=\"line\">    &#123;&#123; user.name &#125;&#125;</span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">v-if</span>=<span class=\"string\">\"shouldShowUsers\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">v-for</span>=<span class=\"string\">\"user in users\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">:key</span>=<span class=\"string\">\"user.id\"</span></span></span><br><span class=\"line\"><span class=\"tag\">  &gt;</span></span><br><span class=\"line\">    &#123;&#123; user.name &#125;&#125;</span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</div>\n<h3 id=\"Component-style-scoping-essential\"><a href=\"#Component-style-scoping-essential\" class=\"headerlink\" title=\"Component style scoping essential\"></a>Component style scoping <sup data-p=\"a\">essential</sup></h3><p><strong>For applications, styles in a top-level <code>App</code> component and in layout components may be global, but all other components should always be scoped.</strong></p>\n<p>This is only relevant for <a href=\"../guide/single-file-components.html\">single-file components</a>. It does <em>not</em> require that the <a href=\"https://vue-loader.vuejs.org/en/features/scoped-css.html\" target=\"_blank\" rel=\"noopener\"><code>scoped</code> attribute</a> be used. Scoping could be through <a href=\"https://vue-loader.vuejs.org/en/features/css-modules.html\" target=\"_blank\" rel=\"noopener\">CSS modules</a>, a class-based strategy such as <a href=\"http://getbem.com/\" target=\"_blank\" rel=\"noopener\">BEM</a>, or another library/convention.</p>\n<p><strong>Component libraries, however, should prefer a class-based strategy instead of using the <code>scoped</code> attribute.</strong></p>\n<p>This makes overriding internal styles easier, with human-readable class names that don’t have too high specificity, but are still very unlikely to result in a conflict.</p>\n\n<details>\n<summary>\n  <h4>Detailed Explanation</h4>\n</summary>\n\n<p>If you are developing a large project, working with other developers, or sometimes include 3rd-party HTML/CSS (e.g. from Auth0), consistent scoping will ensure that your styles only apply to the components they are meant for.</p>\n<p>Beyond the <code>scoped</code> attribute, using unique class names can help ensure that 3rd-party CSS does not apply to your own HTML. For example, many projects use the <code>button</code>, <code>btn</code>, or <code>icon</code> class names, so even if not using a strategy such as BEM, adding an app-specific and/or component-specific prefix (e.g. <code>ButtonClose-icon</code>) can provide some protection.</p>\n</details>\n<div class=\"style-example example-bad\">\n<h4 id=\"Bad-5\"><a href=\"#Bad-5\" class=\"headerlink\" title=\"Bad\"></a>Bad</h4><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">class</span>=<span class=\"string\">\"btn btn-close\"</span>&gt;</span>X<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"css\"><span class=\"selector-class\">.btn-close</span> &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">  background-color: red;</span></span><br><span class=\"line\"><span class=\"undefined\">&#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</div>\n<div class=\"style-example example-good\">\n<h4 id=\"Good-5\"><a href=\"#Good-5\" class=\"headerlink\" title=\"Good\"></a>Good</h4><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">class</span>=<span class=\"string\">\"button button-close\"</span>&gt;</span>X<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- Using the `scoped` attribute --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">scoped</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"css\"><span class=\"selector-class\">.button</span> &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">  border: none;</span></span><br><span class=\"line\"><span class=\"undefined\">  border-radius: 2px;</span></span><br><span class=\"line\"><span class=\"undefined\">&#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"css\"><span class=\"selector-class\">.button-close</span> &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">  background-color: red;</span></span><br><span class=\"line\"><span class=\"undefined\">&#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">:class</span>=<span class=\"string\">\"[$style.button, $style.buttonClose]\"</span>&gt;</span>X<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- Using CSS modules --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">module</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"css\"><span class=\"selector-class\">.button</span> &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">  border: none;</span></span><br><span class=\"line\"><span class=\"undefined\">  border-radius: 2px;</span></span><br><span class=\"line\"><span class=\"undefined\">&#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"css\"><span class=\"selector-class\">.buttonClose</span> &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">  background-color: red;</span></span><br><span class=\"line\"><span class=\"undefined\">&#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">class</span>=<span class=\"string\">\"c-Button c-Button--close\"</span>&gt;</span>X<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- Using the BEM convention --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"css\"><span class=\"selector-class\">.c-Button</span> &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">  border: none;</span></span><br><span class=\"line\"><span class=\"undefined\">  border-radius: 2px;</span></span><br><span class=\"line\"><span class=\"undefined\">&#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"css\"><span class=\"selector-class\">.c-Button--close</span> &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">  background-color: red;</span></span><br><span class=\"line\"><span class=\"undefined\">&#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</div>\n<h3 id=\"Private-property-names-essential\"><a href=\"#Private-property-names-essential\" class=\"headerlink\" title=\"Private property names essential\"></a>Private property names <sup data-p=\"a\">essential</sup></h3><p><strong>Always use the <code>$_</code> prefix for custom private properties in a plugin, mixin, etc. Then to avoid conflicts with code by other authors, also include a named scope (e.g. <code>$_yourPluginName_</code>).</strong></p>\n\n<details>\n<summary>\n  <h4>Detailed Explanation</h4>\n</summary>\n\n<p>Vue uses the <code>_</code> prefix to define its own private properties, so using the same prefix (e.g. <code>_update</code>) risks overwriting an instance property. Even if you check and Vue is not currently using a particular property name, there is no guarantee a conflict won’t arise in a later version.</p>\n<p>As for the <code>$</code> prefix, its purpose within the Vue ecosystem is special instance properties that are exposed to the user, so using it for <em>private</em> properties would not be appropriate.</p>\n<p>Instead, we recommend combining the two prefixes into <code>$_</code>, as a convention for user-defined private properties that guarantee no conflicts with Vue.</p>\n</details>\n<div class=\"style-example example-bad\">\n<h4 id=\"Bad-6\"><a href=\"#Bad-6\" class=\"headerlink\" title=\"Bad\"></a>Bad</h4><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> myGreatMixin = &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    update: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">// ...</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> myGreatMixin = &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    _update: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">// ...</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> myGreatMixin = &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    $update: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">// ...</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> myGreatMixin = &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    $_update: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">// ...</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</div>\n<div class=\"style-example example-good\">\n<h4 id=\"Good-6\"><a href=\"#Good-6\" class=\"headerlink\" title=\"Good\"></a>Good</h4><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> myGreatMixin = &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    $_myGreatMixin_update: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">// ...</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</div>\n<h2 id=\"Priority-B-Rules-Strongly-Recommended-Improving-Readability\"><a href=\"#Priority-B-Rules-Strongly-Recommended-Improving-Readability\" class=\"headerlink\" title=\"Priority B Rules: Strongly Recommended (Improving Readability)\"></a>Priority B Rules: Strongly Recommended (Improving Readability)</h2><h3 id=\"Component-files-strongly-recommended\"><a href=\"#Component-files-strongly-recommended\" class=\"headerlink\" title=\"Component files strongly recommended\"></a>Component files <sup data-p=\"b\">strongly recommended</sup></h3><p><strong>Whenever a build system is available to concatenate files, each component should be in its own file.</strong></p>\n<p>This helps you to more quickly find a component when you need to edit it or review how to use it.</p>\n<div class=\"style-example example-bad\">\n<h4 id=\"Bad-7\"><a href=\"#Bad-7\" class=\"headerlink\" title=\"Bad\"></a>Bad</h4><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">Vue.component(<span class=\"string\">'TodoList'</span>, &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">Vue.component(<span class=\"string\">'TodoItem'</span>, &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n</div>\n<div class=\"style-example example-good\">\n<h4 id=\"Good-7\"><a href=\"#Good-7\" class=\"headerlink\" title=\"Good\"></a>Good</h4><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">components/</span><br><span class=\"line\">|- TodoList.js</span><br><span class=\"line\">|- TodoItem.js</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">components/</span><br><span class=\"line\">|- TodoList.vue</span><br><span class=\"line\">|- TodoItem.vue</span><br></pre></td></tr></table></figure>\n</div>\n<h3 id=\"Single-file-component-filename-casing-strongly-recommended\"><a href=\"#Single-file-component-filename-casing-strongly-recommended\" class=\"headerlink\" title=\"Single-file component filename casing strongly recommended\"></a>Single-file component filename casing <sup data-p=\"b\">strongly recommended</sup></h3><p><strong>Filenames of <a href=\"../guide/single-file-components.html\">single-file components</a> should either be always PascalCase or always kebab-case.</strong></p>\n<p>PascalCase works best with autocompletion in code editors, as it’s consistent with how we reference components in JS(X) and templates, wherever possible. However, mixed case filenames can sometimes create issues on case-insensitive file systems, which is why kebab-case is also perfectly acceptable.</p>\n<div class=\"style-example example-bad\">\n<h4 id=\"Bad-8\"><a href=\"#Bad-8\" class=\"headerlink\" title=\"Bad\"></a>Bad</h4><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">components/</span><br><span class=\"line\">|- mycomponent.vue</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">components/</span><br><span class=\"line\">|- myComponent.vue</span><br></pre></td></tr></table></figure>\n</div>\n<div class=\"style-example example-good\">\n<h4 id=\"Good-8\"><a href=\"#Good-8\" class=\"headerlink\" title=\"Good\"></a>Good</h4><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">components/</span><br><span class=\"line\">|- MyComponent.vue</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">components/</span><br><span class=\"line\">|- my-component.vue</span><br></pre></td></tr></table></figure>\n</div>\n<h3 id=\"Base-component-names-strongly-recommended\"><a href=\"#Base-component-names-strongly-recommended\" class=\"headerlink\" title=\"Base component names strongly recommended\"></a>Base component names <sup data-p=\"b\">strongly recommended</sup></h3><p><strong>Base components (a.k.a. presentational, dumb, or pure components) that apply app-specific styling and conventions should all begin with a specific prefix, such as <code>Base</code>, <code>App</code>, or <code>V</code>.</strong></p>\n\n<details>\n<summary>\n  <h4>Detailed Explanation</h4>\n</summary>\n\n<p>These components lay the foundation for consistent styling and behavior in your application. They may <strong>only</strong> contain:</p>\n<ul>\n<li>HTML elements,</li>\n<li>other base components, and</li>\n<li>3rd-party UI components.</li>\n</ul>\n<p>But they’ll <strong>never</strong> contain global state (e.g. from a Vuex store).</p>\n<p>Their names often include the name of an element they wrap (e.g. <code>BaseButton</code>, <code>BaseTable</code>), unless no element exists for their specific purpose (e.g. <code>BaseIcon</code>). If you build similar components for a more specific context, they will almost always consume these components (e.g. <code>BaseButton</code> may be used in <code>ButtonSubmit</code>).</p>\n<p>Some advantages of this convention:</p>\n<ul>\n<li><p>When organized alphabetically in editors, your app’s base components are all listed together, making them easier to identify.</p>\n</li>\n<li><p>Since component names should always be multi-word, this convention prevents you from having to choose an arbitrary prefix for simple component wrappers (e.g. <code>MyButton</code>, <code>VueButton</code>).</p>\n</li>\n<li><p>Since these components are so frequently used, you may want to simply make them global instead of importing them everywhere. A prefix makes this possible with Webpack:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> requireComponent = <span class=\"built_in\">require</span>.context(<span class=\"string\">\"./src\"</span>, <span class=\"literal\">true</span>, /^Base[A-Z]/)</span><br><span class=\"line\">requireComponent.keys().forEach(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">fileName</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> baseComponentConfig = requireComponent(fileName)</span><br><span class=\"line\">  baseComponentConfig = baseComponentConfig.default || baseComponentConfig</span><br><span class=\"line\">  <span class=\"keyword\">var</span> baseComponentName = baseComponentConfig.name || (</span><br><span class=\"line\">    fileName</span><br><span class=\"line\">      .replace(<span class=\"regexp\">/^.+\\//</span>, <span class=\"string\">''</span>)</span><br><span class=\"line\">      .replace(<span class=\"regexp\">/\\.\\w+$/</span>, <span class=\"string\">''</span>)</span><br><span class=\"line\">  )</span><br><span class=\"line\">  Vue.component(baseComponentName, baseComponentConfig)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</details>\n<div class=\"style-example example-bad\">\n<h4 id=\"Bad-9\"><a href=\"#Bad-9\" class=\"headerlink\" title=\"Bad\"></a>Bad</h4><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">components/</span><br><span class=\"line\">|- MyButton.vue</span><br><span class=\"line\">|- VueTable.vue</span><br><span class=\"line\">|- Icon.vue</span><br></pre></td></tr></table></figure>\n</div>\n<div class=\"style-example example-good\">\n<h4 id=\"Good-9\"><a href=\"#Good-9\" class=\"headerlink\" title=\"Good\"></a>Good</h4><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">components/</span><br><span class=\"line\">|- BaseButton.vue</span><br><span class=\"line\">|- BaseTable.vue</span><br><span class=\"line\">|- BaseIcon.vue</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">components/</span><br><span class=\"line\">|- AppButton.vue</span><br><span class=\"line\">|- AppTable.vue</span><br><span class=\"line\">|- AppIcon.vue</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">components/</span><br><span class=\"line\">|- VButton.vue</span><br><span class=\"line\">|- VTable.vue</span><br><span class=\"line\">|- VIcon.vue</span><br></pre></td></tr></table></figure>\n</div>\n<h3 id=\"Single-instance-component-names-strongly-recommended\"><a href=\"#Single-instance-component-names-strongly-recommended\" class=\"headerlink\" title=\"Single-instance component names strongly recommended\"></a>Single-instance component names <sup data-p=\"b\">strongly recommended</sup></h3><p><strong>Components that should only ever have a single active instance should begin with the <code>The</code> prefix, to denote that there can be only one.</strong></p>\n<p>This does not mean the component is only used in a single page, but it will only be used once <em>per page</em>. These components never accept any props, since they are specific to your app, not their context within your app. If you find the need to add props, it’s a good indication that this is actually a reusable component that is only used once per page <em>for now</em>.</p>\n<div class=\"style-example example-bad\">\n<h4 id=\"Bad-10\"><a href=\"#Bad-10\" class=\"headerlink\" title=\"Bad\"></a>Bad</h4><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">components/</span><br><span class=\"line\">|- Heading.vue</span><br><span class=\"line\">|- MySidebar.vue</span><br></pre></td></tr></table></figure>\n</div>\n<div class=\"style-example example-good\">\n<h4 id=\"Good-10\"><a href=\"#Good-10\" class=\"headerlink\" title=\"Good\"></a>Good</h4><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">components/</span><br><span class=\"line\">|- TheHeading.vue</span><br><span class=\"line\">|- TheSidebar.vue</span><br></pre></td></tr></table></figure>\n</div>\n<h3 id=\"Tightly-coupled-component-names-strongly-recommended\"><a href=\"#Tightly-coupled-component-names-strongly-recommended\" class=\"headerlink\" title=\"Tightly coupled component names strongly recommended\"></a>Tightly coupled component names <sup data-p=\"b\">strongly recommended</sup></h3><p><strong>Child components that are tightly coupled with their parent should include the parent component name as a prefix.</strong></p>\n<p>If a component only makes sense in the context of a single parent component, that relationship should be evident in its name. Since editors typically organize files alphabetically, this also keeps these related files next to each other.</p>\n\n<details>\n<summary>\n  <h4>Detailed Explanation</h4>\n</summary>\n\n<p>You might be tempted to solve this problem by nesting child components in directories named after their parent. For example:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">components/</span><br><span class=\"line\">|- TodoList/</span><br><span class=\"line\">   |- Item/</span><br><span class=\"line\">      |- index.vue</span><br><span class=\"line\">      |- Button.vue</span><br><span class=\"line\">   |- index.vue</span><br></pre></td></tr></table></figure>\n<p>or:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">components/</span><br><span class=\"line\">|- TodoList/</span><br><span class=\"line\">   |- Item/</span><br><span class=\"line\">      |- Button.vue</span><br><span class=\"line\">   |- Item.vue</span><br><span class=\"line\">|- TodoList.vue</span><br></pre></td></tr></table></figure>\n<p>This isn’t recommended, as it results in:</p>\n<ul>\n<li>Many files with similar names, making rapid file switching in code editors more difficult.</li>\n<li>Many nested sub-directories, which increases the time it takes to browse components in an editor’s sidebar.</li>\n</ul>\n</details>\n<div class=\"style-example example-bad\">\n<h4 id=\"Bad-11\"><a href=\"#Bad-11\" class=\"headerlink\" title=\"Bad\"></a>Bad</h4><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">components/</span><br><span class=\"line\">|- TodoList.vue</span><br><span class=\"line\">|- TodoItem.vue</span><br><span class=\"line\">|- TodoButton.vue</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">components/</span><br><span class=\"line\">|- SearchSidebar.vue</span><br><span class=\"line\">|- NavigationForSearchSidebar.vue</span><br></pre></td></tr></table></figure>\n</div>\n<div class=\"style-example example-good\">\n<h4 id=\"Good-11\"><a href=\"#Good-11\" class=\"headerlink\" title=\"Good\"></a>Good</h4><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">components/</span><br><span class=\"line\">|- TodoList.vue</span><br><span class=\"line\">|- TodoListItem.vue</span><br><span class=\"line\">|- TodoListItemButton.vue</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">components/</span><br><span class=\"line\">|- SearchSidebar.vue</span><br><span class=\"line\">|- SearchSidebarNavigation.vue</span><br></pre></td></tr></table></figure>\n</div>\n<h3 id=\"Order-of-words-in-component-names-strongly-recommended\"><a href=\"#Order-of-words-in-component-names-strongly-recommended\" class=\"headerlink\" title=\"Order of words in component names strongly recommended\"></a>Order of words in component names <sup data-p=\"b\">strongly recommended</sup></h3><p><strong>Component names should start with the highest-level (often most general) words and end with descriptive modifying words.</strong></p>\n\n<details>\n<summary>\n  <h4>Detailed Explanation</h4>\n</summary>\n\n<p>You may be wondering:</p>\n<blockquote>\n<p>“Why would we force component names to use less natural language?”</p>\n</blockquote>\n<p>In natural English, adjectives and other descriptors do typically appear before the nouns, while exceptions require connector words. For example:</p>\n<ul>\n<li>Coffee <em>with</em> milk</li>\n<li>Soup <em>of the</em> day</li>\n<li>Visitor <em>to the</em> museum</li>\n</ul>\n<p>You can definitely include these connector words in component names if you’d like, but the order is still important.</p>\n<p>Also note that <strong>what’s considered “highest-level” will be contextual to your app</strong>. For example, imagine an app with a search form. It may include components like this one:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">components/</span><br><span class=\"line\">|- ClearSearchButton.vue</span><br><span class=\"line\">|- ExcludeFromSearchInput.vue</span><br><span class=\"line\">|- LaunchOnStartupCheckbox.vue</span><br><span class=\"line\">|- RunSearchButton.vue</span><br><span class=\"line\">|- SearchInput.vue</span><br><span class=\"line\">|- TermsCheckbox.vue</span><br></pre></td></tr></table></figure>\n<p>As you might notice, it’s quite difficult to see which components are specific to the search. Now let’s rename the components according to the rule:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">components/</span><br><span class=\"line\">|- SearchButtonClear.vue</span><br><span class=\"line\">|- SearchButtonRun.vue</span><br><span class=\"line\">|- SearchInputExcludeGlob.vue</span><br><span class=\"line\">|- SearchInputQuery.vue</span><br><span class=\"line\">|- SettingsCheckboxLaunchOnStartup.vue</span><br><span class=\"line\">|- SettingsCheckboxTerms.vue</span><br></pre></td></tr></table></figure>\n<p>Since editors typically organize files alphabetically, all the important relationships between components are now evident at a glance.</p>\n<p>You might be tempted to solve this problem differently, nesting all the search components under a “search” directory, then all the settings components under a “settings” directory. We only recommend considering this approach in very large apps (e.g. 100+ components), for these reasons:</p>\n<ul>\n<li>It generally takes more time to navigate through nested sub-directories, than scrolling through a single <code>components</code> directory.</li>\n<li>Name conflicts (e.g. multiple <code>ButtonDelete.vue</code> components) make it more difficult to quickly navigate to a specific component in a code editor.</li>\n<li>Refactoring becomes more difficult, because find-and-replace often isn’t sufficient to update relative references to a moved component.</li>\n</ul>\n</details>\n<div class=\"style-example example-bad\">\n<h4 id=\"Bad-12\"><a href=\"#Bad-12\" class=\"headerlink\" title=\"Bad\"></a>Bad</h4><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">components/</span><br><span class=\"line\">|- ClearSearchButton.vue</span><br><span class=\"line\">|- ExcludeFromSearchInput.vue</span><br><span class=\"line\">|- LaunchOnStartupCheckbox.vue</span><br><span class=\"line\">|- RunSearchButton.vue</span><br><span class=\"line\">|- SearchInput.vue</span><br><span class=\"line\">|- TermsCheckbox.vue</span><br></pre></td></tr></table></figure>\n</div>\n<div class=\"style-example example-good\">\n<h4 id=\"Good-12\"><a href=\"#Good-12\" class=\"headerlink\" title=\"Good\"></a>Good</h4><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">components/</span><br><span class=\"line\">|- SearchButtonClear.vue</span><br><span class=\"line\">|- SearchButtonRun.vue</span><br><span class=\"line\">|- SearchInputQuery.vue</span><br><span class=\"line\">|- SearchInputExcludeGlob.vue</span><br><span class=\"line\">|- SettingsCheckboxTerms.vue</span><br><span class=\"line\">|- SettingsCheckboxLaunchOnStartup.vue</span><br></pre></td></tr></table></figure>\n</div>\n<h3 id=\"Self-closing-components-strongly-recommended\"><a href=\"#Self-closing-components-strongly-recommended\" class=\"headerlink\" title=\"Self-closing components strongly recommended\"></a>Self-closing components <sup data-p=\"b\">strongly recommended</sup></h3><p><strong>Components with no content should be self-closing in <a href=\"../guide/single-file-components.html\">single-file components</a>, string templates, and <a href=\"../guide/render-function.html#JSX\">JSX</a> - but never in DOM templates.</strong></p>\n<p>Components that self-close communicate that they not only have no content, but are <strong>meant</strong> to have no content. It’s the difference between a blank page in a book and one labeled “This page intentionally left blank.” Your code is also cleaner without the unnecessary closing tag.</p>\n<p>Unfortunately, HTML doesn’t allow custom elements to be self-closing - only <a href=\"https://www.w3.org/TR/html/syntax.html#void-elements\" target=\"_blank\" rel=\"noopener\">official “void” elements</a>. That’s why the strategy is only possible when Vue’s template compiler can reach the template before the DOM, then serve the DOM spec-compliant HTML.</p>\n<div class=\"style-example example-bad\">\n<h4 id=\"Bad-13\"><a href=\"#Bad-13\" class=\"headerlink\" title=\"Bad\"></a>Bad</h4><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- In single-file components, string templates, and JSX --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">MyComponent</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">MyComponent</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- In DOM templates --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">my-component</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n</div>\n<div class=\"style-example example-good\">\n<h4 id=\"Good-13\"><a href=\"#Good-13\" class=\"headerlink\" title=\"Good\"></a>Good</h4><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- In single-file components, string templates, and JSX --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">MyComponent</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- In DOM templates --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">my-component</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">my-component</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</div>\n<h3 id=\"Component-name-casing-in-templates-strongly-recommended\"><a href=\"#Component-name-casing-in-templates-strongly-recommended\" class=\"headerlink\" title=\"Component name casing in templates strongly recommended\"></a>Component name casing in templates <sup data-p=\"b\">strongly recommended</sup></h3><p><strong>In most projects, component names should always be PascalCase in <a href=\"../guide/single-file-components.html\">single-file components</a> and string templates - but kebab-case in DOM templates.</strong></p>\n<p>PascalCase has a few advantages over kebab-case:</p>\n<ul>\n<li>Editors can autocomplete component names in templates, because PascalCase is also used in JavaScript.</li>\n<li><code>&lt;MyComponent&gt;</code> is more visually distinct from a single-word HTML element than <code>&lt;my-component&gt;</code>, because there are two character differences (the two capitals), rather than just one (a hyphen).</li>\n<li>If you use any non-Vue custom elements in your templates, such as a web component, PascalCase ensures that your Vue components remain distinctly visible.</li>\n</ul>\n<p>Unfortunately, due to HTML’s case insensitivity, DOM templates must still use kebab-case.</p>\n<p>Also note that if you’ve already invested heavily in kebab-case, consistency with HTML conventions and being able to use the same casing across all your projects may be more important than the advantages listed above. In those cases, <strong>using kebab-case everywhere is also acceptable.</strong></p>\n<div class=\"style-example example-bad\">\n<h4 id=\"Bad-14\"><a href=\"#Bad-14\" class=\"headerlink\" title=\"Bad\"></a>Bad</h4><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- In single-file components and string templates --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">mycomponent</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- In single-file components and string templates --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">myComponent</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- In DOM templates --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">MyComponent</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">MyComponent</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</div>\n<div class=\"style-example example-good\">\n<h4 id=\"Good-14\"><a href=\"#Good-14\" class=\"headerlink\" title=\"Good\"></a>Good</h4><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- In single-file components and string templates --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">MyComponent</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- In DOM templates --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">my-component</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">my-component</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>OR</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- Everywhere --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">my-component</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">my-component</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</div>\n<h3 id=\"Component-name-casing-in-JS-JSX-strongly-recommended\"><a href=\"#Component-name-casing-in-JS-JSX-strongly-recommended\" class=\"headerlink\" title=\"Component name casing in JS/JSX strongly recommended\"></a>Component name casing in JS/JSX <sup data-p=\"b\">strongly recommended</sup></h3><p><strong>Component names in JS/<a href=\"../guide/render-function.html#JSX\">JSX</a> should always be PascalCase, though they may be kebab-case inside strings for simpler applications that only use global component registration through <code>Vue.component</code>.</strong></p>\n\n<details>\n<summary>\n  <h4>Detailed Explanation</h4>\n</summary>\n\n<p>In JavaScript, PascalCase is the convention for classes and prototype constructors - essentially, anything that can have distinct instances. Vue components also have instances, so it makes sense to also use PascalCase. As an added benefit, using PascalCase within JSX (and templates) allows readers of the code to more easily distinguish between components and HTML elements.</p>\n<p>However, for applications that use <strong>only</strong> global component definitions via <code>Vue.component</code>, we recommend kebab-case instead. The reasons are:</p>\n<ul>\n<li>It’s rare that global components are ever referenced in JavaScript, so following a convention for JavaScript makes less sense.</li>\n<li>These applications always include many in-DOM templates, where <a href=\"#Component-name-casing-in-templates-strongly-recommended\">kebab-case <strong>must</strong> be used</a>.</li>\n</ul>\n</details>\n<div class=\"style-example example-bad\">\n<h4 id=\"Bad-15\"><a href=\"#Bad-15\" class=\"headerlink\" title=\"Bad\"></a>Bad</h4><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">Vue.component(<span class=\"string\">'myComponent'</span>, &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> myComponent <span class=\"keyword\">from</span> <span class=\"string\">'./MyComponent.vue'</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  name: <span class=\"string\">'myComponent'</span>,</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  name: <span class=\"string\">'my-component'</span>,</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</div>\n<div class=\"style-example example-good\">\n<h4 id=\"Good-15\"><a href=\"#Good-15\" class=\"headerlink\" title=\"Good\"></a>Good</h4><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">Vue.component(<span class=\"string\">'MyComponent'</span>, &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">Vue.component(<span class=\"string\">'my-component'</span>, &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> MyComponent <span class=\"keyword\">from</span> <span class=\"string\">'./MyComponent.vue'</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  name: <span class=\"string\">'MyComponent'</span>,</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</div>\n<h3 id=\"Full-word-component-names-strongly-recommended\"><a href=\"#Full-word-component-names-strongly-recommended\" class=\"headerlink\" title=\"Full-word component names strongly recommended\"></a>Full-word component names <sup data-p=\"b\">strongly recommended</sup></h3><p><strong>Component names should prefer full words over abbreviations.</strong></p>\n<p>The autocompletion in editors make the cost of writing longer names very low, while the clarity they provide is invaluable. Uncommon abbreviations, in particular, should always be avoided.</p>\n<div class=\"style-example example-bad\">\n<h4 id=\"Bad-16\"><a href=\"#Bad-16\" class=\"headerlink\" title=\"Bad\"></a>Bad</h4><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">components/</span><br><span class=\"line\">|- SdSettings.vue</span><br><span class=\"line\">|- UProfOpts.vue</span><br></pre></td></tr></table></figure>\n</div>\n<div class=\"style-example example-good\">\n<h4 id=\"Good-16\"><a href=\"#Good-16\" class=\"headerlink\" title=\"Good\"></a>Good</h4><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">components/</span><br><span class=\"line\">|- StudentDashboardSettings.vue</span><br><span class=\"line\">|- UserProfileOptions.vue</span><br></pre></td></tr></table></figure>\n</div>\n<h3 id=\"Prop-name-casing-strongly-recommended\"><a href=\"#Prop-name-casing-strongly-recommended\" class=\"headerlink\" title=\"Prop name casing strongly recommended\"></a>Prop name casing <sup data-p=\"b\">strongly recommended</sup></h3><p><strong>Prop names should always use camelCase during declaration, but kebab-case in templates and <a href=\"../guide/render-function.html#JSX\">JSX</a>.</strong></p>\n<p>We’re simply following the conventions of each language. Within JavaScript, camelCase is more natural. Within HTML, kebab-case is.</p>\n<div class=\"style-example example-bad\">\n<h4 id=\"Bad-17\"><a href=\"#Bad-17\" class=\"headerlink\" title=\"Bad\"></a>Bad</h4><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">props: &#123;</span><br><span class=\"line\">  <span class=\"string\">'greeting-text'</span>: <span class=\"built_in\">String</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">WelcomeMessage</span> <span class=\"attr\">greetingText</span>=<span class=\"string\">\"hi\"</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n</div>\n<div class=\"style-example example-good\">\n<h4 id=\"Good-17\"><a href=\"#Good-17\" class=\"headerlink\" title=\"Good\"></a>Good</h4><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">props: &#123;</span><br><span class=\"line\">  greetingText: <span class=\"built_in\">String</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">WelcomeMessage</span> <span class=\"attr\">greeting-text</span>=<span class=\"string\">\"hi\"</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n</div>\n<h3 id=\"Multi-attribute-elements-strongly-recommended\"><a href=\"#Multi-attribute-elements-strongly-recommended\" class=\"headerlink\" title=\"Multi-attribute elements strongly recommended\"></a>Multi-attribute elements <sup data-p=\"b\">strongly recommended</sup></h3><p><strong>Elements with multiple attributes should span multiple lines, with one attribute per line.</strong></p>\n<p>In JavaScript, splitting objects with multiple properties over multiple lines is widely considered a good convention, because it’s much easier to read. Our templates and <a href=\"../guide/render-function.html#JSX\">JSX</a> deserve the same consideration.</p>\n<div class=\"style-example example-bad\">\n<h4 id=\"Bad-18\"><a href=\"#Bad-18\" class=\"headerlink\" title=\"Bad\"></a>Bad</h4><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://vuejs.org/images/logo.png\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"Vue Logo\"</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">MyComponent</span> <span class=\"attr\">foo</span>=<span class=\"string\">\"a\"</span> <span class=\"attr\">bar</span>=<span class=\"string\">\"b\"</span> <span class=\"attr\">baz</span>=<span class=\"string\">\"c\"</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n</div>\n<div class=\"style-example example-good\">\n<h4 id=\"Good-18\"><a href=\"#Good-18\" class=\"headerlink\" title=\"Good\"></a>Good</h4><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">src</span>=<span class=\"string\">\"https://vuejs.org/images/logo.png\"</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">alt</span>=<span class=\"string\">\"Vue Logo\"</span></span></span><br><span class=\"line\"><span class=\"tag\">&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">MyComponent</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">foo</span>=<span class=\"string\">\"a\"</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">bar</span>=<span class=\"string\">\"b\"</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">baz</span>=<span class=\"string\">\"c\"</span></span></span><br><span class=\"line\"><span class=\"tag\">/&gt;</span></span><br></pre></td></tr></table></figure>\n</div>\n<h3 id=\"Simple-expressions-in-templates-strongly-recommended\"><a href=\"#Simple-expressions-in-templates-strongly-recommended\" class=\"headerlink\" title=\"Simple expressions in templates strongly recommended\"></a>Simple expressions in templates <sup data-p=\"b\">strongly recommended</sup></h3><p><strong>Component templates should only include simple expressions, with more complex expressions refactored into computed properties or methods.</strong></p>\n<p>Complex expressions in your templates make them less declarative. We should strive to describe <em>what</em> should appear, not <em>how</em> we’re computing that value. Computed properties and methods also allow the code to be reused.</p>\n<div class=\"style-example example-bad\">\n<h4 id=\"Bad-19\"><a href=\"#Bad-19\" class=\"headerlink\" title=\"Bad\"></a>Bad</h4><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;&#123;</span><br><span class=\"line\">  fullName.split(' ').map(function (word) &#123;</span><br><span class=\"line\">    return word[0].toUpperCase() + word.slice(1)</span><br><span class=\"line\">  &#125;).join(' ')</span><br><span class=\"line\">&#125;&#125;</span><br></pre></td></tr></table></figure>\n</div>\n<div class=\"style-example example-good\">\n<h4 id=\"Good-19\"><a href=\"#Good-19\" class=\"headerlink\" title=\"Good\"></a>Good</h4><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- In a template --&gt;</span></span><br><span class=\"line\">&#123;&#123; normalizedFullName &#125;&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// The complex expression has been moved to a computed property</span></span><br><span class=\"line\">computed: &#123;</span><br><span class=\"line\">  normalizedFullName: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.fullName.split(<span class=\"string\">' '</span>).map(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">word</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> word[<span class=\"number\">0</span>].toUpperCase() + word.slice(<span class=\"number\">1</span>)</span><br><span class=\"line\">    &#125;).join(<span class=\"string\">' '</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</div>\n<h3 id=\"Simple-computed-properties-strongly-recommended\"><a href=\"#Simple-computed-properties-strongly-recommended\" class=\"headerlink\" title=\"Simple computed properties strongly recommended\"></a>Simple computed properties <sup data-p=\"b\">strongly recommended</sup></h3><p><strong>Complex computed properties should be split into as many simpler properties as possible.</strong></p>\n\n<details>\n<summary>\n  <h4>Detailed Explanation</h4>\n</summary>\n\n<p>Simpler, well-named computed properties are:</p>\n<ul>\n<li><p><strong>Easier to test</strong></p>\n<p>When each computed property contains only a very simple expression, with very few dependencies, it’s much easier to write tests confirming that it works correctly.</p>\n</li>\n<li><p><strong>Easier to read</strong></p>\n<p>Simplifying computed properties forces you to give each value a descriptive name, even if it’s not reused. This makes it much easier for other developers (and future you) to focus in on the code they care about and figure out what’s going on.</p>\n</li>\n<li><p><strong>More adaptable to changing requirements</strong></p>\n<p>Any value that can be named might be useful to the view. For example, we might decide to display a message telling the user how much money they saved. We might also decide to calculate sales tax, but perhaps display it separately, rather than as part of the final price.</p>\n<p>Small, focused computed properties make fewer assumptions about how information will be used, so require less refactoring as requirements change.</p>\n</li>\n</ul>\n</details>\n<div class=\"style-example example-bad\">\n<h4 id=\"Bad-20\"><a href=\"#Bad-20\" class=\"headerlink\" title=\"Bad\"></a>Bad</h4><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">computed: &#123;</span><br><span class=\"line\">  price: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> basePrice = <span class=\"keyword\">this</span>.manufactureCost / (<span class=\"number\">1</span> - <span class=\"keyword\">this</span>.profitMargin)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      basePrice -</span><br><span class=\"line\">      basePrice * (<span class=\"keyword\">this</span>.discountPercent || <span class=\"number\">0</span>)</span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</div>\n<div class=\"style-example example-good\">\n<h4 id=\"Good-20\"><a href=\"#Good-20\" class=\"headerlink\" title=\"Good\"></a>Good</h4><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">computed: &#123;</span><br><span class=\"line\">  basePrice: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.manufactureCost / (<span class=\"number\">1</span> - <span class=\"keyword\">this</span>.profitMargin)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  discount: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.basePrice * (<span class=\"keyword\">this</span>.discountPercent || <span class=\"number\">0</span>)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  finalPrice: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.basePrice - <span class=\"keyword\">this</span>.discount</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</div>\n<h3 id=\"Quoted-attribute-values-strongly-recommended\"><a href=\"#Quoted-attribute-values-strongly-recommended\" class=\"headerlink\" title=\"Quoted attribute values strongly recommended\"></a>Quoted attribute values <sup data-p=\"b\">strongly recommended</sup></h3><p><strong>Non-empty HTML attribute values should always be inside quotes (single or double, whichever is not used in JS).</strong></p>\n<p>While attribute values without any spaces are not required to have quotes in HTML, this practice often leads to <em>avoiding</em> spaces, making attribute values less readable.</p>\n<div class=\"style-example example-bad\">\n<h4 id=\"Bad-21\"><a href=\"#Bad-21\" class=\"headerlink\" title=\"Bad\"></a>Bad</h4><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">text</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">AppSidebar</span> <span class=\"attr\">:style</span>=<span class=\"string\">&#123;width:sidebarWidth+</span>'<span class=\"attr\">px</span>'&#125;&gt;</span></span><br></pre></td></tr></table></figure>\n</div>\n<div class=\"style-example example-good\">\n<h4 id=\"Good-21\"><a href=\"#Good-21\" class=\"headerlink\" title=\"Good\"></a>Good</h4><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">AppSidebar</span> <span class=\"attr\">:style</span>=<span class=\"string\">\"&#123; width: sidebarWidth + 'px' &#125;\"</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</div>\n<h3 id=\"Directive-shorthands-strongly-recommended\"><a href=\"#Directive-shorthands-strongly-recommended\" class=\"headerlink\" title=\"Directive shorthands strongly recommended\"></a>Directive shorthands <sup data-p=\"b\">strongly recommended</sup></h3><p><strong>Directive shorthands (<code>:</code> for <code>v-bind:</code> and <code>@</code> for <code>v-on:</code>) should be used always or never.</strong></p>\n<div class=\"style-example example-bad\">\n<h4 id=\"Bad-22\"><a href=\"#Bad-22\" class=\"headerlink\" title=\"Bad\"></a>Bad</h4><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">v-bind:value</span>=<span class=\"string\">\"newTodoText\"</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">:placeholder</span>=<span class=\"string\">\"newTodoInstructions\"</span></span></span><br><span class=\"line\"><span class=\"tag\">&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">v-on:input</span>=<span class=\"string\">\"onInput\"</span></span></span><br><span class=\"line\"><span class=\"tag\">  @<span class=\"attr\">focus</span>=<span class=\"string\">\"onFocus\"</span></span></span><br><span class=\"line\"><span class=\"tag\">&gt;</span></span><br></pre></td></tr></table></figure>\n</div>\n<div class=\"style-example example-good\">\n<h4 id=\"Good-22\"><a href=\"#Good-22\" class=\"headerlink\" title=\"Good\"></a>Good</h4><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">:value</span>=<span class=\"string\">\"newTodoText\"</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">:placeholder</span>=<span class=\"string\">\"newTodoInstructions\"</span></span></span><br><span class=\"line\"><span class=\"tag\">&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">v-bind:value</span>=<span class=\"string\">\"newTodoText\"</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">v-bind:placeholder</span>=<span class=\"string\">\"newTodoInstructions\"</span></span></span><br><span class=\"line\"><span class=\"tag\">&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span></span></span><br><span class=\"line\"><span class=\"tag\">  @<span class=\"attr\">input</span>=<span class=\"string\">\"onInput\"</span></span></span><br><span class=\"line\"><span class=\"tag\">  @<span class=\"attr\">focus</span>=<span class=\"string\">\"onFocus\"</span></span></span><br><span class=\"line\"><span class=\"tag\">&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">v-on:input</span>=<span class=\"string\">\"onInput\"</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">v-on:focus</span>=<span class=\"string\">\"onFocus\"</span></span></span><br><span class=\"line\"><span class=\"tag\">&gt;</span></span><br></pre></td></tr></table></figure>\n</div>\n<h2 id=\"Priority-C-Rules-Recommended-Minimizing-Arbitrary-Choices-and-Cognitive-Overhead\"><a href=\"#Priority-C-Rules-Recommended-Minimizing-Arbitrary-Choices-and-Cognitive-Overhead\" class=\"headerlink\" title=\"Priority C Rules: Recommended (Minimizing Arbitrary Choices and Cognitive Overhead)\"></a>Priority C Rules: Recommended (Minimizing Arbitrary Choices and Cognitive Overhead)</h2><h3 id=\"Component-instance-options-order-recommended\"><a href=\"#Component-instance-options-order-recommended\" class=\"headerlink\" title=\"Component/instance options order recommended\"></a>Component/instance options order <sup data-p=\"c\">recommended</sup></h3><p><strong>Component/instance options should be ordered consistently.</strong></p>\n<p>This is the default order we recommend for component options. They’re split into categories, so you’ll know where to add new properties from plugins.</p>\n<ol>\n<li><p><strong>Side Effects</strong> (triggers effects outside the component)</p>\n<ul>\n<li><code>el</code></li>\n</ul>\n</li>\n<li><p><strong>Global Awareness</strong> (requires knowledge beyond the component)</p>\n<ul>\n<li><code>name</code></li>\n<li><code>parent</code></li>\n</ul>\n</li>\n<li><p><strong>Component Type</strong> (changes the type of the component)</p>\n<ul>\n<li><code>functional</code></li>\n</ul>\n</li>\n<li><p><strong>Template Modifiers</strong> (changes the way templates are compiled)</p>\n<ul>\n<li><code>delimiters</code></li>\n<li><code>comments</code></li>\n</ul>\n</li>\n<li><p><strong>Template Dependencies</strong> (assets used in the template)</p>\n<ul>\n<li><code>components</code></li>\n<li><code>directives</code></li>\n<li><code>filters</code></li>\n</ul>\n</li>\n<li><p><strong>Composition</strong> (merges properties into the options)</p>\n<ul>\n<li><code>extends</code></li>\n<li><code>mixins</code></li>\n</ul>\n</li>\n<li><p><strong>Interface</strong> (the interface to the component)</p>\n<ul>\n<li><code>inheritAttrs</code></li>\n<li><code>model</code></li>\n<li><code>props</code>/<code>propsData</code></li>\n</ul>\n</li>\n<li><p><strong>Local State</strong> (local reactive properties)</p>\n<ul>\n<li><code>data</code></li>\n<li><code>computed</code></li>\n</ul>\n</li>\n<li><p><strong>Events</strong> (callbacks triggered by reactive events)</p>\n<ul>\n<li><code>watch</code></li>\n<li>Lifecycle Events (in the order they are called)<ul>\n<li><code>beforeCreate</code></li>\n<li><code>created</code></li>\n<li><code>beforeMount</code></li>\n<li><code>mounted</code></li>\n<li><code>beforeUpdate</code></li>\n<li><code>updated</code></li>\n<li><code>activated</code></li>\n<li><code>deactivated</code></li>\n<li><code>beforeDestroy</code></li>\n<li><code>destroyed</code></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p><strong>Non-Reactive Properties</strong> (instance properties independent of the reactivity system)</p>\n<ul>\n<li><code>methods</code></li>\n</ul>\n</li>\n<li><p><strong>Rendering</strong> (the declarative description of the component output)</p>\n<ul>\n<li><code>template</code>/<code>render</code></li>\n<li><code>renderError</code></li>\n</ul>\n</li>\n</ol>\n<h3 id=\"Element-attribute-order-recommended\"><a href=\"#Element-attribute-order-recommended\" class=\"headerlink\" title=\"Element attribute order recommended\"></a>Element attribute order <sup data-p=\"c\">recommended</sup></h3><p><strong>The attributes of elements (including components) should be ordered consistently.</strong></p>\n<p>This is the default order we recommend for component options. They’re split into categories, so you’ll know where to add custom attributes and directives.</p>\n<ol>\n<li><p><strong>Definition</strong> (provides the component options)</p>\n<ul>\n<li><code>is</code></li>\n</ul>\n</li>\n<li><p><strong>List Rendering</strong> (creates multiple variations of the same element)</p>\n<ul>\n<li><code>v-for</code></li>\n</ul>\n</li>\n<li><p><strong>Conditionals</strong> (whether the element is rendered/shown)</p>\n<ul>\n<li><code>v-if</code></li>\n<li><code>v-else-if</code></li>\n<li><code>v-else</code></li>\n<li><code>v-show</code></li>\n<li><code>v-cloak</code></li>\n</ul>\n</li>\n<li><p><strong>Render Modifiers</strong> (changes the way the element renders)</p>\n<ul>\n<li><code>v-pre</code></li>\n<li><code>v-once</code></li>\n</ul>\n</li>\n<li><p><strong>Global Awareness</strong> (requires knowledge beyond the component)</p>\n<ul>\n<li><code>id</code></li>\n</ul>\n</li>\n<li><p><strong>Unique Attributes</strong> (attributes that require unique values)</p>\n<ul>\n<li><code>ref</code></li>\n<li><code>key</code></li>\n<li><code>slot</code></li>\n</ul>\n</li>\n<li><p><strong>Two-Way Binding</strong> (combining binding and events)</p>\n<ul>\n<li><code>v-model</code></li>\n</ul>\n</li>\n<li><p><strong>Other Attributes</strong> (all unspecified bound &amp; unbound attributes)</p>\n</li>\n<li><p><strong>Events</strong> (component event listeners)</p>\n<ul>\n<li><code>v-on</code></li>\n</ul>\n</li>\n<li><p><strong>Content</strong> (overrides the content of the element)</p>\n<ul>\n<li><code>v-html</code></li>\n<li><code>v-text</code></li>\n</ul>\n</li>\n</ol>\n<h3 id=\"Empty-lines-in-component-instance-options-recommended\"><a href=\"#Empty-lines-in-component-instance-options-recommended\" class=\"headerlink\" title=\"Empty lines in component/instance options recommended\"></a>Empty lines in component/instance options <sup data-p=\"c\">recommended</sup></h3><p><strong>You may want to add one empty line between multi-line properties, particularly if the options can no longer fit on your screen without scrolling.</strong></p>\n<p>When components begin to feel cramped or difficult to read, adding spaces between multi-line properties can make them easier to skim again. In some editors, such as Vim, formatting options like this can also make them easier to navigate with the keyboard.</p>\n<div class=\"style-example example-good\">\n<h4 id=\"Good-23\"><a href=\"#Good-23\" class=\"headerlink\" title=\"Good\"></a>Good</h4><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">props: &#123;</span><br><span class=\"line\">  value: &#123;</span><br><span class=\"line\">    type: <span class=\"built_in\">String</span>,</span><br><span class=\"line\">    required: <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  focused: &#123;</span><br><span class=\"line\">    type: <span class=\"built_in\">Boolean</span>,</span><br><span class=\"line\">    <span class=\"keyword\">default</span>: <span class=\"literal\">false</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  label: <span class=\"built_in\">String</span>,</span><br><span class=\"line\">  icon: <span class=\"built_in\">String</span></span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">computed: &#123;</span><br><span class=\"line\">  formattedValue: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  inputClasses: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// No spaces are also fine, as long as the component</span></span><br><span class=\"line\"><span class=\"comment\">// is still easy to read and navigate.</span></span><br><span class=\"line\">props: &#123;</span><br><span class=\"line\">  value: &#123;</span><br><span class=\"line\">    type: <span class=\"built_in\">String</span>,</span><br><span class=\"line\">    required: <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  focused: &#123;</span><br><span class=\"line\">    type: <span class=\"built_in\">Boolean</span>,</span><br><span class=\"line\">    <span class=\"keyword\">default</span>: <span class=\"literal\">false</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  label: <span class=\"built_in\">String</span>,</span><br><span class=\"line\">  icon: <span class=\"built_in\">String</span></span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">computed: &#123;</span><br><span class=\"line\">  formattedValue: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  inputClasses: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</div>\n<h3 id=\"Single-file-component-top-level-element-order-recommended\"><a href=\"#Single-file-component-top-level-element-order-recommended\" class=\"headerlink\" title=\"Single-file component top-level element order recommended\"></a>Single-file component top-level element order <sup data-p=\"c\">recommended</sup></h3><p><strong><a href=\"../guide/single-file-components.html\">Single-file components</a> should always order <code>&lt;script&gt;</code>, <code>&lt;template&gt;</code>, and <code>&lt;style&gt;</code> tags consistently, with <code>&lt;style&gt;</code> last, because at least one of the other two is always necessary.</strong></p>\n<div class=\"style-example example-bad\">\n<h4 id=\"Bad-23\"><a href=\"#Bad-23\" class=\"headerlink\" title=\"Bad\"></a>Bad</h4><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"css\"><span class=\"comment\">/* ... */</span></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"><span class=\"comment\">/* ... */</span></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span>...<span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- ComponentA.vue --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"><span class=\"comment\">/* ... */</span></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span>...<span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"css\"><span class=\"comment\">/* ... */</span></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- ComponentB.vue --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span>...<span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"><span class=\"comment\">/* ... */</span></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"css\"><span class=\"comment\">/* ... */</span></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</div>\n<div class=\"style-example example-good\">\n<h4 id=\"Good-24\"><a href=\"#Good-24\" class=\"headerlink\" title=\"Good\"></a>Good</h4><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- ComponentA.vue --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"><span class=\"comment\">/* ... */</span></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span>...<span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"css\"><span class=\"comment\">/* ... */</span></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- ComponentB.vue --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"><span class=\"comment\">/* ... */</span></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span>...<span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"css\"><span class=\"comment\">/* ... */</span></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- ComponentA.vue --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span>...<span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"><span class=\"comment\">/* ... */</span></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"css\"><span class=\"comment\">/* ... */</span></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- ComponentB.vue --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span>...<span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"><span class=\"comment\">/* ... */</span></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"css\"><span class=\"comment\">/* ... */</span></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</div>\n<h2 id=\"Priority-D-Rules-Use-with-Caution-Potentially-Dangerous-Patterns\"><a href=\"#Priority-D-Rules-Use-with-Caution-Potentially-Dangerous-Patterns\" class=\"headerlink\" title=\"Priority D Rules: Use with Caution (Potentially Dangerous Patterns)\"></a>Priority D Rules: Use with Caution (Potentially Dangerous Patterns)</h2><h3 id=\"v-if-v-if-else-v-else-without-key-use-with-caution\"><a href=\"#v-if-v-if-else-v-else-without-key-use-with-caution\" class=\"headerlink\" title=\"v-if/v-if-else/v-else without key use with caution\"></a><code>v-if</code>/<code>v-if-else</code>/<code>v-else</code> without <code>key</code> <sup data-p=\"d\">use with caution</sup></h3><p><strong>It’s usually best to use <code>key</code> with <code>v-if</code> + <code>v-else</code>, if they are the same element type (e.g. both <code>&lt;div&gt;</code> elements).</strong></p>\n<p>By default, Vue updates the DOM as efficiently as possible. That means when switching between elements of the same type, it simply patches the existing element, rather than removing it and adding a new one in its place. This can have <a href=\"https://jsfiddle.net/chrisvfritz/bh8fLeds/\" target=\"_blank\" rel=\"noopener\">unintended side effects</a> if these elements should not actually be considered the same.</p>\n<div class=\"style-example example-bad\">\n<h4 id=\"Bad-24\"><a href=\"#Bad-24\" class=\"headerlink\" title=\"Bad\"></a>Bad</h4><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-if</span>=<span class=\"string\">\"error\"</span>&gt;</span></span><br><span class=\"line\">  Error: &#123;&#123; error &#125;&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-else</span>&gt;</span></span><br><span class=\"line\">  &#123;&#123; results &#125;&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</div>\n<div class=\"style-example example-good\">\n<h4 id=\"Good-25\"><a href=\"#Good-25\" class=\"headerlink\" title=\"Good\"></a>Good</h4><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">v-if</span>=<span class=\"string\">\"error\"</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">key</span>=<span class=\"string\">\"search-status\"</span></span></span><br><span class=\"line\"><span class=\"tag\">&gt;</span></span><br><span class=\"line\">  Error: &#123;&#123; error &#125;&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">v-else</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">key</span>=<span class=\"string\">\"search-results\"</span></span></span><br><span class=\"line\"><span class=\"tag\">&gt;</span></span><br><span class=\"line\">  &#123;&#123; results &#125;&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">v-if</span>=<span class=\"string\">\"error\"</span>&gt;</span></span><br><span class=\"line\">  Error: &#123;&#123; error &#125;&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-else</span>&gt;</span></span><br><span class=\"line\">  &#123;&#123; results &#125;&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</div>\n<h3 id=\"Element-selectors-with-scoped-use-with-caution\"><a href=\"#Element-selectors-with-scoped-use-with-caution\" class=\"headerlink\" title=\"Element selectors with scoped use with caution\"></a>Element selectors with <code>scoped</code> <sup data-p=\"d\">use with caution</sup></h3><p><strong>Element selectors should be avoided with <code>scoped</code>.</strong></p>\n<p>Prefer class selectors over element selectors in <code>scoped</code> styles, because large numbers of element selectors are slow.</p>\n\n<details>\n<summary>\n  <h4>Detailed Explanation</h4>\n</summary>\n\n<p>To scope styles, Vue adds a unique attribute to component elements, such as <code>data-v-f3f3eg9</code>. Then selectors are modified so that only matching elements with this attribute are selected (e.g. <code>button[data-v-f3f3eg9]</code>).</p>\n<p>The problem is that large numbers of <a href=\"http://stevesouders.com/efws/css-selectors/csscreate.php?n=1000&amp;sel=a%5Bhref%5D&amp;body=background%3A+%23CFD&amp;ne=1000\" target=\"_blank\" rel=\"noopener\">element-attribute selectors</a> (e.g. <code>button[data-v-f3f3eg9]</code>) will be considerably slower than <a href=\"http://stevesouders.com/efws/css-selectors/csscreate.php?n=1000&amp;sel=.class%5Bhref%5D&amp;body=background%3A+%23CFD&amp;ne=1000\" target=\"_blank\" rel=\"noopener\">class-attribute selectors</a> (e.g. <code>.btn-close[data-v-f3f3eg9]</code>), so class selectors should be preferred whenever possible.</p>\n</details>\n<div class=\"style-example example-bad\">\n<h4 id=\"Bad-25\"><a href=\"#Bad-25\" class=\"headerlink\" title=\"Bad\"></a>Bad</h4><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span>&gt;</span>X<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">scoped</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">button &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">  background-color: red;</span></span><br><span class=\"line\"><span class=\"undefined\">&#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</div>\n<div class=\"style-example example-good\">\n<h4 id=\"Good-26\"><a href=\"#Good-26\" class=\"headerlink\" title=\"Good\"></a>Good</h4><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">class</span>=<span class=\"string\">\"btn btn-close\"</span>&gt;</span>X<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">scoped</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"css\"><span class=\"selector-class\">.btn-close</span> &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">  background-color: red;</span></span><br><span class=\"line\"><span class=\"undefined\">&#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</div>\n<h3 id=\"Implicit-parent-child-communication-use-with-caution\"><a href=\"#Implicit-parent-child-communication-use-with-caution\" class=\"headerlink\" title=\"Implicit parent-child communication use with caution\"></a>Implicit parent-child communication <sup data-p=\"d\">use with caution</sup></h3><p><strong>Props and events should be preferred for parent-child component communication, instead of <code>this.$parent</code> or mutating props.</strong></p>\n<p>An ideal Vue application is props down, events up. Sticking to this convention makes your components much easier to understand. However, there are edge cases where prop mutation or <code>this.$parent</code> can simplify two components that are already deeply coupled.</p>\n<p>The problem is, there are also many <em>simple</em> cases where these patterns may offer convenience. Beware: do not be seduced into trading simplicity (being able to understand the flow of your state) for short-term convenience (writing less code).</p>\n<div class=\"style-example example-bad\">\n<h4 id=\"Bad-26\"><a href=\"#Bad-26\" class=\"headerlink\" title=\"Bad\"></a>Bad</h4><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">Vue.component(<span class=\"string\">'TodoItem'</span>, &#123;</span><br><span class=\"line\">  props: &#123;</span><br><span class=\"line\">    todo: &#123;</span><br><span class=\"line\">      type: <span class=\"built_in\">Object</span>,</span><br><span class=\"line\">      required: <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  template: <span class=\"string\">'&lt;input v-model=\"todo.text\"&gt;'</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">Vue.component(<span class=\"string\">'TodoItem'</span>, &#123;</span><br><span class=\"line\">  props: &#123;</span><br><span class=\"line\">    todo: &#123;</span><br><span class=\"line\">      type: <span class=\"built_in\">Object</span>,</span><br><span class=\"line\">      required: <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    removeTodo () &#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> vm = <span class=\"keyword\">this</span></span><br><span class=\"line\">      vm.$parent.todos = vm.$parent.todos.filter(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">todo</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> todo.id !== vm.todo.id</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  template: <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">    &lt;span&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &#123;&#123; todo.text &#125;&#125;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;button @click=\"removeTodo\"&gt;</span></span><br><span class=\"line\"><span class=\"string\">        X</span></span><br><span class=\"line\"><span class=\"string\">      &lt;/button&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;/span&gt;</span></span><br><span class=\"line\"><span class=\"string\">  `</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n</div>\n<div class=\"style-example example-good\">\n<h4 id=\"Good-27\"><a href=\"#Good-27\" class=\"headerlink\" title=\"Good\"></a>Good</h4><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">Vue.component(<span class=\"string\">'TodoItem'</span>, &#123;</span><br><span class=\"line\">  props: &#123;</span><br><span class=\"line\">    todo: &#123;</span><br><span class=\"line\">      type: <span class=\"built_in\">Object</span>,</span><br><span class=\"line\">      required: <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  template: <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">    &lt;input</span></span><br><span class=\"line\"><span class=\"string\">      :value=\"todo.text\"</span></span><br><span class=\"line\"><span class=\"string\">      @input=\"$emit('input', $event.target.value)\"</span></span><br><span class=\"line\"><span class=\"string\">    &gt;</span></span><br><span class=\"line\"><span class=\"string\">  `</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">Vue.component(<span class=\"string\">'TodoItem'</span>, &#123;</span><br><span class=\"line\">  props: &#123;</span><br><span class=\"line\">    todo: &#123;</span><br><span class=\"line\">      type: <span class=\"built_in\">Object</span>,</span><br><span class=\"line\">      required: <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  template: <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">    &lt;span&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &#123;&#123; todo.text &#125;&#125;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;button @click=\"$emit('delete')\"&gt;</span></span><br><span class=\"line\"><span class=\"string\">        X</span></span><br><span class=\"line\"><span class=\"string\">      &lt;/button&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;/span&gt;</span></span><br><span class=\"line\"><span class=\"string\">  `</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n</div>\n<h3 id=\"Non-flux-state-management-use-with-caution\"><a href=\"#Non-flux-state-management-use-with-caution\" class=\"headerlink\" title=\"Non-flux state management use with caution\"></a>Non-flux state management <sup data-p=\"d\">use with caution</sup></h3><p><strong><a href=\"https://github.com/vuejs/vuex\" target=\"_blank\" rel=\"noopener\">Vuex</a> should be preferred for global state management, instead of <code>this.$root</code> or a global event bus.</strong></p>\n<p>Managing state on <code>this.$root</code> and/or using a <a href=\"https://vuejs.org/v2/guide/migration.html#dispatch-and-broadcast-replaced\">global event bus</a> can be convenient for very simple cases, but are not appropriate for most applications. Vuex offers not only a central place to manage state, but also tools for organizing, tracking, and debugging state changes.</p>\n\n<div class=\"style-example example-bad\">\n<h4 id=\"Bad-27\"><a href=\"#Bad-27\" class=\"headerlink\" title=\"Bad\"></a>Bad</h4><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// main.js</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    todos: []</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  created: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.$on(<span class=\"string\">'remove-todo'</span>, <span class=\"keyword\">this</span>.removeTodo)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    removeTodo: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">todo</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> todoIdToRemove = todo.id</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.todos = <span class=\"keyword\">this</span>.todos.filter(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">todo</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> todo.id !== todoIdToRemove</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n</div>\n<div class=\"style-example example-good\">\n<h4 id=\"Good-28\"><a href=\"#Good-28\" class=\"headerlink\" title=\"Good\"></a>Good</h4><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// store/modules/todos.js</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  state: &#123;</span><br><span class=\"line\">    list: []</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  mutations: &#123;</span><br><span class=\"line\">    REMOVE_TODO (state, todoId) &#123;</span><br><span class=\"line\">      state.list = state.list.filter(<span class=\"function\"><span class=\"params\">todo</span> =&gt;</span> todo.id !== todoId)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  actions: &#123;</span><br><span class=\"line\">    removeTodo (&#123; commit, state &#125;, todo) &#123;</span><br><span class=\"line\">      commit(<span class=\"string\">'REMOVE_TODO'</span>, todo.id)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- TodoItem.vue --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">    &#123;&#123; todo.text &#125;&#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">\"removeTodo(todo)\"</span>&gt;</span></span><br><span class=\"line\">      X</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">import</span> &#123; mapActions &#125; <span class=\"keyword\">from</span> <span class=\"string\">'vuex'</span></span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">  props: &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">    todo: &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      type: <span class=\"built_in\">Object</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">      required: <span class=\"literal\">true</span></span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">  &#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">  methods: mapActions([<span class=\"string\">'removeTodo'</span>])</span></span><br><span class=\"line\"><span class=\"undefined\">&#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</div>\n\n<script>\n(function () {\n  var enforcementTypes = {\n    none: '<span title=\"There is unfortunately no way to automatically enforce this rule.\">self-discipline</span>',\n    runtime: 'runtime error',\n    linter: '<a href=\"https://github.com/vuejs/eslint-plugin-vue#eslint-plugin-vue\" target=\"_blank\">plugin:vue/recommended</a>'\n  }\n  Vue.component('sg-enforcement', {\n    template: '\\\n      <span>\\\n        <strong>Enforcement</strong>:\\\n        <span class=\"style-rule-tag\" v-html=\"humanType\"/>\\\n      </span>\\\n    ',\n    props: {\n      type: {\n        type: String,\n        required: true,\n        validate: function (value) {\n          Object.keys(enforcementTypes).indexOf(value) !== -1\n        }\n      }\n    },\n    computed: {\n      humanType: function () {\n        return enforcementTypes[this.type]\n      }\n    }\n  })\n\n  // new Vue({\n  //  el: '#main'\n  // })\n})()\n</script>\n\n","site":{"data":{}},"excerpt":"","more":"<p>This is the official style guide for Vue-specific code. If you use Vue in a project, it’s a great reference to avoid errors, bikeshedding, and anti-patterns. However, we don’t believe that any style guide is ideal for all teams or projects, so mindful deviations are encouraged based on past experience, the surrounding tech stack, and personal values.</p>\n<p>For the most part, we also avoid suggestions about JavaScript or HTML in general. We don’t mind whether you use semicolons or trailing commas. We don’t mind whether your HTML uses single-quotes or double-quotes for attribute values. Some exceptions will exist however, where we’ve found that a particular pattern is helpful in the context of Vue.</p>\n<blockquote>\n<p><strong>Soon, we’ll also provide tips for enforcement.</strong> Sometimes you’ll simply have to be disciplined, but wherever possible, we’ll try to show you how to use ESLint and other automated processes to make enforcement simpler.</p>\n</blockquote>\n<p>Finally, we’ve split rules into four categories:</p>\n<h2 id=\"Rule-Categories\"><a href=\"#Rule-Categories\" class=\"headerlink\" title=\"Rule Categories\"></a>Rule Categories</h2><h3 id=\"Priority-A-Essential\"><a href=\"#Priority-A-Essential\" class=\"headerlink\" title=\"Priority A: Essential\"></a>Priority A: Essential</h3><p>These rules help prevent errors, so learn and abide by them at all costs. Exceptions may exist, but should be very rare and only be made by those with expert knowledge of both JavaScript and Vue.</p>\n<h3 id=\"Priority-B-Strongly-Recommended\"><a href=\"#Priority-B-Strongly-Recommended\" class=\"headerlink\" title=\"Priority B: Strongly Recommended\"></a>Priority B: Strongly Recommended</h3><p>These rules have been found to improve readability and/or developer experience in most projects. Your code will still run if you violate them, but violations should be rare and well-justified.</p>\n<h3 id=\"Priority-C-Recommended\"><a href=\"#Priority-C-Recommended\" class=\"headerlink\" title=\"Priority C: Recommended\"></a>Priority C: Recommended</h3><p>Where multiple, equally good options exist, an arbitrary choice can be made to ensure consistency. In these rules, we describe each acceptable option and suggest a default choice. That means you can feel free to make a different choice in your own codebase, as long as you’re consistent and have a good reason. Please do have a good reason though! By adapting to the community standard, you will:</p>\n<ol>\n<li>train your brain to more easily parse most of the community code you encounter</li>\n<li>be able to copy and paste most community code examples without modification</li>\n<li>often find new hires are already accustomed to your preferred coding style, at least in regards to Vue</li>\n</ol>\n<h3 id=\"Priority-D-Use-with-Caution\"><a href=\"#Priority-D-Use-with-Caution\" class=\"headerlink\" title=\"Priority D: Use with Caution\"></a>Priority D: Use with Caution</h3><p>Some features of Vue exist to accommodate rare edge cases or smoother migrations from a legacy code base. When overused however, they can make your code more difficult to maintain or even become a source of bugs. These rules shine a light on potentially risky features, describing when and why they should be avoided.</p>\n<h2 id=\"Priority-A-Rules-Essential-Error-Prevention\"><a href=\"#Priority-A-Rules-Essential-Error-Prevention\" class=\"headerlink\" title=\"Priority A Rules: Essential (Error Prevention)\"></a>Priority A Rules: Essential (Error Prevention)</h2><h3 id=\"Multi-word-component-names-essential\"><a href=\"#Multi-word-component-names-essential\" class=\"headerlink\" title=\"Multi-word component names essential\"></a>Multi-word component names <sup data-p=\"a\">essential</sup></h3><p><strong>Component names should always be multi-word, except for root <code>App</code> components.</strong></p>\n<p>This <a href=\"http://w3c.github.io/webcomponents/spec/custom/#valid-custom-element-name\" target=\"_blank\" rel=\"noopener\">prevents conflicts</a> with existing and future HTML elements, since all HTML elements are a single word.</p>\n<div class=\"style-example example-bad\">\n<h4 id=\"Bad\"><a href=\"#Bad\" class=\"headerlink\" title=\"Bad\"></a>Bad</h4><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">Vue.component(<span class=\"string\">'todo'</span>, &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  name: <span class=\"string\">'Todo'</span>,</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</div>\n<div class=\"style-example example-good\">\n<h4 id=\"Good\"><a href=\"#Good\" class=\"headerlink\" title=\"Good\"></a>Good</h4><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">Vue.component(<span class=\"string\">'todo-item'</span>, &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  name: <span class=\"string\">'TodoItem'</span>,</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</div>\n<h3 id=\"Component-data-essential\"><a href=\"#Component-data-essential\" class=\"headerlink\" title=\"Component data essential\"></a>Component data <sup data-p=\"a\">essential</sup></h3><p><strong>Component <code>data</code> must be a function.</strong></p>\n<p>When using the <code>data</code> property on a component (i.e. anywhere except on <code>new Vue</code>), the value must be a function that returns an object.</p>\n\n<details>\n<summary>\n  <h4>Detailed Explanation</h4>\n</summary>\n\n<p>When the value of <code>data</code> is an object, it’s shared across all instances of a component. Imagine, for example, a <code>TodoList</code> component with this data:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">data: &#123;</span><br><span class=\"line\">  listTitle: <span class=\"string\">''</span>,</span><br><span class=\"line\">  todos: []</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>We might want to reuse this component, allowing users to maintain multiple lists (e.g. for shopping, wishlists, daily chores, etc). There’s a problem though. Since every instance of the component references the same data object, changing the title of one list will also change the title of every other list. The same is true for adding/editing/deleting a todo.</p>\n<p>Instead, we want each component instance to only manage its own data. For that to happen, each instance must generate a unique data object. In JavaScript, this can be accomplished by returning the object in a function:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">data: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    listTitle: <span class=\"string\">''</span>,</span><br><span class=\"line\">    todos: []</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</details>\n<div class=\"style-example example-bad\">\n<h4 id=\"Bad-1\"><a href=\"#Bad-1\" class=\"headerlink\" title=\"Bad\"></a>Bad</h4><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">Vue.component(<span class=\"string\">'some-comp'</span>, &#123;</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    foo: <span class=\"string\">'bar'</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    foo: <span class=\"string\">'bar'</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</div>\n<div class=\"style-example example-good\">\n<h4 id=\"Good-1\"><a href=\"#Good-1\" class=\"headerlink\" title=\"Good\"></a>Good</h4><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">Vue.component(<span class=\"string\">'some-comp'</span>, &#123;</span><br><span class=\"line\">  data: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      foo: <span class=\"string\">'bar'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// In a .vue file</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  data () &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      foo: <span class=\"string\">'bar'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// It's OK to use an object directly in a root</span></span><br><span class=\"line\"><span class=\"comment\">// Vue instance, since only a single instance</span></span><br><span class=\"line\"><span class=\"comment\">// will ever exist.</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    foo: <span class=\"string\">'bar'</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n</div>\n<h3 id=\"Prop-definitions-essential\"><a href=\"#Prop-definitions-essential\" class=\"headerlink\" title=\"Prop definitions essential\"></a>Prop definitions <sup data-p=\"a\">essential</sup></h3><p><strong>Prop definitions should be as detailed as possible.</strong></p>\n<p>In committed code, prop definitions should always be as detailed as possible, specifying at least type(s).</p>\n\n<details>\n<summary>\n  <h4>Detailed Explanation</h4>\n</summary>\n\n<p>Detailed <a href=\"https://vuejs.org/v2/guide/components.html#Prop-Validation\">prop definitions</a> have two advantages:</p>\n<ul>\n<li>They document the API of the component, so that it’s easy to see how the component is meant to be used.</li>\n<li>In development, Vue will warn you if a component is ever provided incorrectly formatted props, helping you catch potential sources of error.</li>\n</ul>\n</details>\n<div class=\"style-example example-bad\">\n<h4 id=\"Bad-2\"><a href=\"#Bad-2\" class=\"headerlink\" title=\"Bad\"></a>Bad</h4><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// This is only OK when prototyping</span></span><br><span class=\"line\">props: [<span class=\"string\">'status'</span>]</span><br></pre></td></tr></table></figure>\n</div>\n<div class=\"style-example example-good\">\n<h4 id=\"Good-2\"><a href=\"#Good-2\" class=\"headerlink\" title=\"Good\"></a>Good</h4><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">props: &#123;</span><br><span class=\"line\">  status: <span class=\"built_in\">String</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Even better!</span></span><br><span class=\"line\">props: &#123;</span><br><span class=\"line\">  status: &#123;</span><br><span class=\"line\">    type: <span class=\"built_in\">String</span>,</span><br><span class=\"line\">    required: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    validator: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> [</span><br><span class=\"line\">        <span class=\"string\">'syncing'</span>,</span><br><span class=\"line\">        <span class=\"string\">'synced'</span>,</span><br><span class=\"line\">        <span class=\"string\">'version-conflict'</span>,</span><br><span class=\"line\">        <span class=\"string\">'error'</span></span><br><span class=\"line\">      ].indexOf(value) !== <span class=\"number\">-1</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</div>\n<h3 id=\"Keyed-v-for-essential\"><a href=\"#Keyed-v-for-essential\" class=\"headerlink\" title=\"Keyed v-for essential\"></a>Keyed <code>v-for</code> <sup data-p=\"a\">essential</sup></h3><p><strong>Always use <code>key</code> with <code>v-for</code>.</strong></p>\n<p><code>key</code> with <code>v-for</code> is <em>always</em> required on components, in order to maintain internal component state down the subtree. Even for elements though, it’s a good practice to maintain predictable behavior, such as <a href=\"https://bost.ocks.org/mike/constancy/\" target=\"_blank\" rel=\"noopener\">object constancy</a> in animations.</p>\n\n<details>\n<summary>\n  <h4>Detailed Explanation</h4>\n</summary>\n\n<p>Let’s say you have a list of todos:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">data: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    todos: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        id: <span class=\"number\">1</span>,</span><br><span class=\"line\">        text: <span class=\"string\">'Learn to use v-for'</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        id: <span class=\"number\">2</span>,</span><br><span class=\"line\">        text: <span class=\"string\">'Learn to use key'</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Then you sort them alphabetically. When updating the DOM, Vue will optimize rendering to perform the cheapest DOM mutations possible. That might mean deleting the first todo element, then adding it again at the end of the list.</p>\n<p>The problem is, there are cases where it’s important not to delete elements that will remain in the DOM. For example, you may want to use <code>&lt;transition-group&gt;</code> to animate list sorting, or maintain focus if the rendered element is an <code>&lt;input&gt;</code>. In these cases, adding a unique key for each item (e.g. <code>:key=&quot;todo.id&quot;</code>) will tell Vue how to behave more predictably.</p>\n<p>In our experience, it’s better to <em>always</em> add a unique key, so that you and your team simply never have to worry about these edge cases. Then in the rare, performance-critical scenarios where object constancy isn’t necessary, you can make a conscious exception.</p>\n</details>\n<div class=\"style-example example-bad\">\n<h4 id=\"Bad-3\"><a href=\"#Bad-3\" class=\"headerlink\" title=\"Bad\"></a>Bad</h4><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"todo in todos\"</span>&gt;</span></span><br><span class=\"line\">    &#123;&#123; todo.text &#125;&#125;</span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</div>\n<div class=\"style-example example-good\">\n<h4 id=\"Good-3\"><a href=\"#Good-3\" class=\"headerlink\" title=\"Good\"></a>Good</h4><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">v-for</span>=<span class=\"string\">\"todo in todos\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">:key</span>=<span class=\"string\">\"todo.id\"</span></span></span><br><span class=\"line\"><span class=\"tag\">  &gt;</span></span><br><span class=\"line\">    &#123;&#123; todo.text &#125;&#125;</span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</div>\n<h3 id=\"Avoid-v-if-with-v-for-essential\"><a href=\"#Avoid-v-if-with-v-for-essential\" class=\"headerlink\" title=\"Avoid v-if with v-for essential\"></a>Avoid <code>v-if</code> with <code>v-for</code> <sup data-p=\"a\">essential</sup></h3><p><strong>Never use <code>v-if</code> on the same element as <code>v-for</code>.</strong></p>\n<p>There are two common cases where this can be tempting:</p>\n<ul>\n<li><p>To filter items in a list (e.g. <code>v-for=&quot;user in users&quot; v-if=&quot;user.isActive&quot;</code>). In these cases, replace <code>users</code> with a new computed property that returns your filtered list (e.g. <code>activeUsers</code>).</p>\n</li>\n<li><p>To avoid rendering a list if it should be hidden (e.g. <code>v-for=&quot;user in users&quot; v-if=&quot;shouldShowUsers&quot;</code>). In these cases, move the <code>v-if</code> to a container element (e.g. <code>ul</code>, <code>ol</code>).</p>\n</li>\n</ul>\n\n<details>\n<summary>\n  <h4>Detailed Explanation</h4>\n</summary>\n\n<p>When Vue processes directives, <code>v-for</code> has a higher priority than <code>v-if</code>, so that this template:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">v-for</span>=<span class=\"string\">\"user in users\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">v-if</span>=<span class=\"string\">\"user.isActive\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">:key</span>=<span class=\"string\">\"user.id\"</span></span></span><br><span class=\"line\"><span class=\"tag\">  &gt;</span></span><br><span class=\"line\">    &#123;&#123; user.name &#125;&#125;</span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>Will be evaluated similar to:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">this</span>.users.map(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">user</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (user.isActive) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> user.name</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>So even if we only render elements for a small fraction of users, we have to iterate over the entire list every time we re-render, whether or not the set of active users has changed.</p>\n<p>By iterating over a computed property instead, like this:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">computed: &#123;</span><br><span class=\"line\">  activeUsers: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.users.filter(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">user</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> user.isActive</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">v-for</span>=<span class=\"string\">\"user in activeUsers\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">:key</span>=<span class=\"string\">\"user.id\"</span></span></span><br><span class=\"line\"><span class=\"tag\">  &gt;</span></span><br><span class=\"line\">    &#123;&#123; user.name &#125;&#125;</span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>We get the following benefits:</p>\n<ul>\n<li>The filtered list will <em>only</em> be re-evaluated if there are relevant changes to the <code>users</code> array, making filtering much more efficient.</li>\n<li>Using <code>v-for=&quot;user in activeUsers&quot;</code>, we <em>only</em> iterate over active users during render, making rendering much more efficient.</li>\n<li>Logic is now decoupled from the presentation layer, making maintenance (change/extension of logic) much easier.</li>\n</ul>\n<p>We get similar benefits from updating:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">v-for</span>=<span class=\"string\">\"user in users\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">v-if</span>=<span class=\"string\">\"shouldShowUsers\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">:key</span>=<span class=\"string\">\"user.id\"</span></span></span><br><span class=\"line\"><span class=\"tag\">  &gt;</span></span><br><span class=\"line\">    &#123;&#123; user.name &#125;&#125;</span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>to:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">v-if</span>=<span class=\"string\">\"shouldShowUsers\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">v-for</span>=<span class=\"string\">\"user in users\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">:key</span>=<span class=\"string\">\"user.id\"</span></span></span><br><span class=\"line\"><span class=\"tag\">  &gt;</span></span><br><span class=\"line\">    &#123;&#123; user.name &#125;&#125;</span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>By moving the <code>v-if</code> to a container element, we’re no longer checking <code>shouldShowUsers</code> for <em>every</em> user in the list. Instead, we check it once and don’t even evaluate the <code>v-for</code> if <code>shouldShowUsers</code> is false.</p>\n</details>\n<div class=\"style-example example-bad\">\n<h4 id=\"Bad-4\"><a href=\"#Bad-4\" class=\"headerlink\" title=\"Bad\"></a>Bad</h4><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">v-for</span>=<span class=\"string\">\"user in users\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">v-if</span>=<span class=\"string\">\"user.isActive\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">:key</span>=<span class=\"string\">\"user.id\"</span></span></span><br><span class=\"line\"><span class=\"tag\">  &gt;</span></span><br><span class=\"line\">    &#123;&#123; user.name &#125;&#125;</span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">v-for</span>=<span class=\"string\">\"user in users\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">v-if</span>=<span class=\"string\">\"shouldShowUsers\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">:key</span>=<span class=\"string\">\"user.id\"</span></span></span><br><span class=\"line\"><span class=\"tag\">  &gt;</span></span><br><span class=\"line\">    &#123;&#123; user.name &#125;&#125;</span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</div>\n<div class=\"style-example example-good\">\n<h4 id=\"Good-4\"><a href=\"#Good-4\" class=\"headerlink\" title=\"Good\"></a>Good</h4><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">v-for</span>=<span class=\"string\">\"user in activeUsers\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">:key</span>=<span class=\"string\">\"user.id\"</span></span></span><br><span class=\"line\"><span class=\"tag\">  &gt;</span></span><br><span class=\"line\">    &#123;&#123; user.name &#125;&#125;</span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">v-if</span>=<span class=\"string\">\"shouldShowUsers\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">v-for</span>=<span class=\"string\">\"user in users\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">:key</span>=<span class=\"string\">\"user.id\"</span></span></span><br><span class=\"line\"><span class=\"tag\">  &gt;</span></span><br><span class=\"line\">    &#123;&#123; user.name &#125;&#125;</span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</div>\n<h3 id=\"Component-style-scoping-essential\"><a href=\"#Component-style-scoping-essential\" class=\"headerlink\" title=\"Component style scoping essential\"></a>Component style scoping <sup data-p=\"a\">essential</sup></h3><p><strong>For applications, styles in a top-level <code>App</code> component and in layout components may be global, but all other components should always be scoped.</strong></p>\n<p>This is only relevant for <a href=\"../guide/single-file-components.html\">single-file components</a>. It does <em>not</em> require that the <a href=\"https://vue-loader.vuejs.org/en/features/scoped-css.html\" target=\"_blank\" rel=\"noopener\"><code>scoped</code> attribute</a> be used. Scoping could be through <a href=\"https://vue-loader.vuejs.org/en/features/css-modules.html\" target=\"_blank\" rel=\"noopener\">CSS modules</a>, a class-based strategy such as <a href=\"http://getbem.com/\" target=\"_blank\" rel=\"noopener\">BEM</a>, or another library/convention.</p>\n<p><strong>Component libraries, however, should prefer a class-based strategy instead of using the <code>scoped</code> attribute.</strong></p>\n<p>This makes overriding internal styles easier, with human-readable class names that don’t have too high specificity, but are still very unlikely to result in a conflict.</p>\n\n<details>\n<summary>\n  <h4>Detailed Explanation</h4>\n</summary>\n\n<p>If you are developing a large project, working with other developers, or sometimes include 3rd-party HTML/CSS (e.g. from Auth0), consistent scoping will ensure that your styles only apply to the components they are meant for.</p>\n<p>Beyond the <code>scoped</code> attribute, using unique class names can help ensure that 3rd-party CSS does not apply to your own HTML. For example, many projects use the <code>button</code>, <code>btn</code>, or <code>icon</code> class names, so even if not using a strategy such as BEM, adding an app-specific and/or component-specific prefix (e.g. <code>ButtonClose-icon</code>) can provide some protection.</p>\n</details>\n<div class=\"style-example example-bad\">\n<h4 id=\"Bad-5\"><a href=\"#Bad-5\" class=\"headerlink\" title=\"Bad\"></a>Bad</h4><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">class</span>=<span class=\"string\">\"btn btn-close\"</span>&gt;</span>X<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"css\"><span class=\"selector-class\">.btn-close</span> &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">  background-color: red;</span></span><br><span class=\"line\"><span class=\"undefined\">&#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</div>\n<div class=\"style-example example-good\">\n<h4 id=\"Good-5\"><a href=\"#Good-5\" class=\"headerlink\" title=\"Good\"></a>Good</h4><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">class</span>=<span class=\"string\">\"button button-close\"</span>&gt;</span>X<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- Using the `scoped` attribute --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">scoped</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"css\"><span class=\"selector-class\">.button</span> &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">  border: none;</span></span><br><span class=\"line\"><span class=\"undefined\">  border-radius: 2px;</span></span><br><span class=\"line\"><span class=\"undefined\">&#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"css\"><span class=\"selector-class\">.button-close</span> &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">  background-color: red;</span></span><br><span class=\"line\"><span class=\"undefined\">&#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">:class</span>=<span class=\"string\">\"[$style.button, $style.buttonClose]\"</span>&gt;</span>X<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- Using CSS modules --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">module</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"css\"><span class=\"selector-class\">.button</span> &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">  border: none;</span></span><br><span class=\"line\"><span class=\"undefined\">  border-radius: 2px;</span></span><br><span class=\"line\"><span class=\"undefined\">&#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"css\"><span class=\"selector-class\">.buttonClose</span> &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">  background-color: red;</span></span><br><span class=\"line\"><span class=\"undefined\">&#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">class</span>=<span class=\"string\">\"c-Button c-Button--close\"</span>&gt;</span>X<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- Using the BEM convention --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"css\"><span class=\"selector-class\">.c-Button</span> &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">  border: none;</span></span><br><span class=\"line\"><span class=\"undefined\">  border-radius: 2px;</span></span><br><span class=\"line\"><span class=\"undefined\">&#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"css\"><span class=\"selector-class\">.c-Button--close</span> &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">  background-color: red;</span></span><br><span class=\"line\"><span class=\"undefined\">&#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</div>\n<h3 id=\"Private-property-names-essential\"><a href=\"#Private-property-names-essential\" class=\"headerlink\" title=\"Private property names essential\"></a>Private property names <sup data-p=\"a\">essential</sup></h3><p><strong>Always use the <code>$_</code> prefix for custom private properties in a plugin, mixin, etc. Then to avoid conflicts with code by other authors, also include a named scope (e.g. <code>$_yourPluginName_</code>).</strong></p>\n\n<details>\n<summary>\n  <h4>Detailed Explanation</h4>\n</summary>\n\n<p>Vue uses the <code>_</code> prefix to define its own private properties, so using the same prefix (e.g. <code>_update</code>) risks overwriting an instance property. Even if you check and Vue is not currently using a particular property name, there is no guarantee a conflict won’t arise in a later version.</p>\n<p>As for the <code>$</code> prefix, its purpose within the Vue ecosystem is special instance properties that are exposed to the user, so using it for <em>private</em> properties would not be appropriate.</p>\n<p>Instead, we recommend combining the two prefixes into <code>$_</code>, as a convention for user-defined private properties that guarantee no conflicts with Vue.</p>\n</details>\n<div class=\"style-example example-bad\">\n<h4 id=\"Bad-6\"><a href=\"#Bad-6\" class=\"headerlink\" title=\"Bad\"></a>Bad</h4><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> myGreatMixin = &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    update: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">// ...</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> myGreatMixin = &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    _update: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">// ...</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> myGreatMixin = &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    $update: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">// ...</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> myGreatMixin = &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    $_update: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">// ...</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</div>\n<div class=\"style-example example-good\">\n<h4 id=\"Good-6\"><a href=\"#Good-6\" class=\"headerlink\" title=\"Good\"></a>Good</h4><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> myGreatMixin = &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    $_myGreatMixin_update: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">// ...</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</div>\n<h2 id=\"Priority-B-Rules-Strongly-Recommended-Improving-Readability\"><a href=\"#Priority-B-Rules-Strongly-Recommended-Improving-Readability\" class=\"headerlink\" title=\"Priority B Rules: Strongly Recommended (Improving Readability)\"></a>Priority B Rules: Strongly Recommended (Improving Readability)</h2><h3 id=\"Component-files-strongly-recommended\"><a href=\"#Component-files-strongly-recommended\" class=\"headerlink\" title=\"Component files strongly recommended\"></a>Component files <sup data-p=\"b\">strongly recommended</sup></h3><p><strong>Whenever a build system is available to concatenate files, each component should be in its own file.</strong></p>\n<p>This helps you to more quickly find a component when you need to edit it or review how to use it.</p>\n<div class=\"style-example example-bad\">\n<h4 id=\"Bad-7\"><a href=\"#Bad-7\" class=\"headerlink\" title=\"Bad\"></a>Bad</h4><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">Vue.component(<span class=\"string\">'TodoList'</span>, &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">Vue.component(<span class=\"string\">'TodoItem'</span>, &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n</div>\n<div class=\"style-example example-good\">\n<h4 id=\"Good-7\"><a href=\"#Good-7\" class=\"headerlink\" title=\"Good\"></a>Good</h4><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">components/</span><br><span class=\"line\">|- TodoList.js</span><br><span class=\"line\">|- TodoItem.js</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">components/</span><br><span class=\"line\">|- TodoList.vue</span><br><span class=\"line\">|- TodoItem.vue</span><br></pre></td></tr></table></figure>\n</div>\n<h3 id=\"Single-file-component-filename-casing-strongly-recommended\"><a href=\"#Single-file-component-filename-casing-strongly-recommended\" class=\"headerlink\" title=\"Single-file component filename casing strongly recommended\"></a>Single-file component filename casing <sup data-p=\"b\">strongly recommended</sup></h3><p><strong>Filenames of <a href=\"../guide/single-file-components.html\">single-file components</a> should either be always PascalCase or always kebab-case.</strong></p>\n<p>PascalCase works best with autocompletion in code editors, as it’s consistent with how we reference components in JS(X) and templates, wherever possible. However, mixed case filenames can sometimes create issues on case-insensitive file systems, which is why kebab-case is also perfectly acceptable.</p>\n<div class=\"style-example example-bad\">\n<h4 id=\"Bad-8\"><a href=\"#Bad-8\" class=\"headerlink\" title=\"Bad\"></a>Bad</h4><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">components/</span><br><span class=\"line\">|- mycomponent.vue</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">components/</span><br><span class=\"line\">|- myComponent.vue</span><br></pre></td></tr></table></figure>\n</div>\n<div class=\"style-example example-good\">\n<h4 id=\"Good-8\"><a href=\"#Good-8\" class=\"headerlink\" title=\"Good\"></a>Good</h4><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">components/</span><br><span class=\"line\">|- MyComponent.vue</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">components/</span><br><span class=\"line\">|- my-component.vue</span><br></pre></td></tr></table></figure>\n</div>\n<h3 id=\"Base-component-names-strongly-recommended\"><a href=\"#Base-component-names-strongly-recommended\" class=\"headerlink\" title=\"Base component names strongly recommended\"></a>Base component names <sup data-p=\"b\">strongly recommended</sup></h3><p><strong>Base components (a.k.a. presentational, dumb, or pure components) that apply app-specific styling and conventions should all begin with a specific prefix, such as <code>Base</code>, <code>App</code>, or <code>V</code>.</strong></p>\n\n<details>\n<summary>\n  <h4>Detailed Explanation</h4>\n</summary>\n\n<p>These components lay the foundation for consistent styling and behavior in your application. They may <strong>only</strong> contain:</p>\n<ul>\n<li>HTML elements,</li>\n<li>other base components, and</li>\n<li>3rd-party UI components.</li>\n</ul>\n<p>But they’ll <strong>never</strong> contain global state (e.g. from a Vuex store).</p>\n<p>Their names often include the name of an element they wrap (e.g. <code>BaseButton</code>, <code>BaseTable</code>), unless no element exists for their specific purpose (e.g. <code>BaseIcon</code>). If you build similar components for a more specific context, they will almost always consume these components (e.g. <code>BaseButton</code> may be used in <code>ButtonSubmit</code>).</p>\n<p>Some advantages of this convention:</p>\n<ul>\n<li><p>When organized alphabetically in editors, your app’s base components are all listed together, making them easier to identify.</p>\n</li>\n<li><p>Since component names should always be multi-word, this convention prevents you from having to choose an arbitrary prefix for simple component wrappers (e.g. <code>MyButton</code>, <code>VueButton</code>).</p>\n</li>\n<li><p>Since these components are so frequently used, you may want to simply make them global instead of importing them everywhere. A prefix makes this possible with Webpack:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> requireComponent = <span class=\"built_in\">require</span>.context(<span class=\"string\">\"./src\"</span>, <span class=\"literal\">true</span>, /^Base[A-Z]/)</span><br><span class=\"line\">requireComponent.keys().forEach(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">fileName</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> baseComponentConfig = requireComponent(fileName)</span><br><span class=\"line\">  baseComponentConfig = baseComponentConfig.default || baseComponentConfig</span><br><span class=\"line\">  <span class=\"keyword\">var</span> baseComponentName = baseComponentConfig.name || (</span><br><span class=\"line\">    fileName</span><br><span class=\"line\">      .replace(<span class=\"regexp\">/^.+\\//</span>, <span class=\"string\">''</span>)</span><br><span class=\"line\">      .replace(<span class=\"regexp\">/\\.\\w+$/</span>, <span class=\"string\">''</span>)</span><br><span class=\"line\">  )</span><br><span class=\"line\">  Vue.component(baseComponentName, baseComponentConfig)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</details>\n<div class=\"style-example example-bad\">\n<h4 id=\"Bad-9\"><a href=\"#Bad-9\" class=\"headerlink\" title=\"Bad\"></a>Bad</h4><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">components/</span><br><span class=\"line\">|- MyButton.vue</span><br><span class=\"line\">|- VueTable.vue</span><br><span class=\"line\">|- Icon.vue</span><br></pre></td></tr></table></figure>\n</div>\n<div class=\"style-example example-good\">\n<h4 id=\"Good-9\"><a href=\"#Good-9\" class=\"headerlink\" title=\"Good\"></a>Good</h4><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">components/</span><br><span class=\"line\">|- BaseButton.vue</span><br><span class=\"line\">|- BaseTable.vue</span><br><span class=\"line\">|- BaseIcon.vue</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">components/</span><br><span class=\"line\">|- AppButton.vue</span><br><span class=\"line\">|- AppTable.vue</span><br><span class=\"line\">|- AppIcon.vue</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">components/</span><br><span class=\"line\">|- VButton.vue</span><br><span class=\"line\">|- VTable.vue</span><br><span class=\"line\">|- VIcon.vue</span><br></pre></td></tr></table></figure>\n</div>\n<h3 id=\"Single-instance-component-names-strongly-recommended\"><a href=\"#Single-instance-component-names-strongly-recommended\" class=\"headerlink\" title=\"Single-instance component names strongly recommended\"></a>Single-instance component names <sup data-p=\"b\">strongly recommended</sup></h3><p><strong>Components that should only ever have a single active instance should begin with the <code>The</code> prefix, to denote that there can be only one.</strong></p>\n<p>This does not mean the component is only used in a single page, but it will only be used once <em>per page</em>. These components never accept any props, since they are specific to your app, not their context within your app. If you find the need to add props, it’s a good indication that this is actually a reusable component that is only used once per page <em>for now</em>.</p>\n<div class=\"style-example example-bad\">\n<h4 id=\"Bad-10\"><a href=\"#Bad-10\" class=\"headerlink\" title=\"Bad\"></a>Bad</h4><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">components/</span><br><span class=\"line\">|- Heading.vue</span><br><span class=\"line\">|- MySidebar.vue</span><br></pre></td></tr></table></figure>\n</div>\n<div class=\"style-example example-good\">\n<h4 id=\"Good-10\"><a href=\"#Good-10\" class=\"headerlink\" title=\"Good\"></a>Good</h4><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">components/</span><br><span class=\"line\">|- TheHeading.vue</span><br><span class=\"line\">|- TheSidebar.vue</span><br></pre></td></tr></table></figure>\n</div>\n<h3 id=\"Tightly-coupled-component-names-strongly-recommended\"><a href=\"#Tightly-coupled-component-names-strongly-recommended\" class=\"headerlink\" title=\"Tightly coupled component names strongly recommended\"></a>Tightly coupled component names <sup data-p=\"b\">strongly recommended</sup></h3><p><strong>Child components that are tightly coupled with their parent should include the parent component name as a prefix.</strong></p>\n<p>If a component only makes sense in the context of a single parent component, that relationship should be evident in its name. Since editors typically organize files alphabetically, this also keeps these related files next to each other.</p>\n\n<details>\n<summary>\n  <h4>Detailed Explanation</h4>\n</summary>\n\n<p>You might be tempted to solve this problem by nesting child components in directories named after their parent. For example:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">components/</span><br><span class=\"line\">|- TodoList/</span><br><span class=\"line\">   |- Item/</span><br><span class=\"line\">      |- index.vue</span><br><span class=\"line\">      |- Button.vue</span><br><span class=\"line\">   |- index.vue</span><br></pre></td></tr></table></figure>\n<p>or:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">components/</span><br><span class=\"line\">|- TodoList/</span><br><span class=\"line\">   |- Item/</span><br><span class=\"line\">      |- Button.vue</span><br><span class=\"line\">   |- Item.vue</span><br><span class=\"line\">|- TodoList.vue</span><br></pre></td></tr></table></figure>\n<p>This isn’t recommended, as it results in:</p>\n<ul>\n<li>Many files with similar names, making rapid file switching in code editors more difficult.</li>\n<li>Many nested sub-directories, which increases the time it takes to browse components in an editor’s sidebar.</li>\n</ul>\n</details>\n<div class=\"style-example example-bad\">\n<h4 id=\"Bad-11\"><a href=\"#Bad-11\" class=\"headerlink\" title=\"Bad\"></a>Bad</h4><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">components/</span><br><span class=\"line\">|- TodoList.vue</span><br><span class=\"line\">|- TodoItem.vue</span><br><span class=\"line\">|- TodoButton.vue</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">components/</span><br><span class=\"line\">|- SearchSidebar.vue</span><br><span class=\"line\">|- NavigationForSearchSidebar.vue</span><br></pre></td></tr></table></figure>\n</div>\n<div class=\"style-example example-good\">\n<h4 id=\"Good-11\"><a href=\"#Good-11\" class=\"headerlink\" title=\"Good\"></a>Good</h4><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">components/</span><br><span class=\"line\">|- TodoList.vue</span><br><span class=\"line\">|- TodoListItem.vue</span><br><span class=\"line\">|- TodoListItemButton.vue</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">components/</span><br><span class=\"line\">|- SearchSidebar.vue</span><br><span class=\"line\">|- SearchSidebarNavigation.vue</span><br></pre></td></tr></table></figure>\n</div>\n<h3 id=\"Order-of-words-in-component-names-strongly-recommended\"><a href=\"#Order-of-words-in-component-names-strongly-recommended\" class=\"headerlink\" title=\"Order of words in component names strongly recommended\"></a>Order of words in component names <sup data-p=\"b\">strongly recommended</sup></h3><p><strong>Component names should start with the highest-level (often most general) words and end with descriptive modifying words.</strong></p>\n\n<details>\n<summary>\n  <h4>Detailed Explanation</h4>\n</summary>\n\n<p>You may be wondering:</p>\n<blockquote>\n<p>“Why would we force component names to use less natural language?”</p>\n</blockquote>\n<p>In natural English, adjectives and other descriptors do typically appear before the nouns, while exceptions require connector words. For example:</p>\n<ul>\n<li>Coffee <em>with</em> milk</li>\n<li>Soup <em>of the</em> day</li>\n<li>Visitor <em>to the</em> museum</li>\n</ul>\n<p>You can definitely include these connector words in component names if you’d like, but the order is still important.</p>\n<p>Also note that <strong>what’s considered “highest-level” will be contextual to your app</strong>. For example, imagine an app with a search form. It may include components like this one:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">components/</span><br><span class=\"line\">|- ClearSearchButton.vue</span><br><span class=\"line\">|- ExcludeFromSearchInput.vue</span><br><span class=\"line\">|- LaunchOnStartupCheckbox.vue</span><br><span class=\"line\">|- RunSearchButton.vue</span><br><span class=\"line\">|- SearchInput.vue</span><br><span class=\"line\">|- TermsCheckbox.vue</span><br></pre></td></tr></table></figure>\n<p>As you might notice, it’s quite difficult to see which components are specific to the search. Now let’s rename the components according to the rule:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">components/</span><br><span class=\"line\">|- SearchButtonClear.vue</span><br><span class=\"line\">|- SearchButtonRun.vue</span><br><span class=\"line\">|- SearchInputExcludeGlob.vue</span><br><span class=\"line\">|- SearchInputQuery.vue</span><br><span class=\"line\">|- SettingsCheckboxLaunchOnStartup.vue</span><br><span class=\"line\">|- SettingsCheckboxTerms.vue</span><br></pre></td></tr></table></figure>\n<p>Since editors typically organize files alphabetically, all the important relationships between components are now evident at a glance.</p>\n<p>You might be tempted to solve this problem differently, nesting all the search components under a “search” directory, then all the settings components under a “settings” directory. We only recommend considering this approach in very large apps (e.g. 100+ components), for these reasons:</p>\n<ul>\n<li>It generally takes more time to navigate through nested sub-directories, than scrolling through a single <code>components</code> directory.</li>\n<li>Name conflicts (e.g. multiple <code>ButtonDelete.vue</code> components) make it more difficult to quickly navigate to a specific component in a code editor.</li>\n<li>Refactoring becomes more difficult, because find-and-replace often isn’t sufficient to update relative references to a moved component.</li>\n</ul>\n</details>\n<div class=\"style-example example-bad\">\n<h4 id=\"Bad-12\"><a href=\"#Bad-12\" class=\"headerlink\" title=\"Bad\"></a>Bad</h4><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">components/</span><br><span class=\"line\">|- ClearSearchButton.vue</span><br><span class=\"line\">|- ExcludeFromSearchInput.vue</span><br><span class=\"line\">|- LaunchOnStartupCheckbox.vue</span><br><span class=\"line\">|- RunSearchButton.vue</span><br><span class=\"line\">|- SearchInput.vue</span><br><span class=\"line\">|- TermsCheckbox.vue</span><br></pre></td></tr></table></figure>\n</div>\n<div class=\"style-example example-good\">\n<h4 id=\"Good-12\"><a href=\"#Good-12\" class=\"headerlink\" title=\"Good\"></a>Good</h4><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">components/</span><br><span class=\"line\">|- SearchButtonClear.vue</span><br><span class=\"line\">|- SearchButtonRun.vue</span><br><span class=\"line\">|- SearchInputQuery.vue</span><br><span class=\"line\">|- SearchInputExcludeGlob.vue</span><br><span class=\"line\">|- SettingsCheckboxTerms.vue</span><br><span class=\"line\">|- SettingsCheckboxLaunchOnStartup.vue</span><br></pre></td></tr></table></figure>\n</div>\n<h3 id=\"Self-closing-components-strongly-recommended\"><a href=\"#Self-closing-components-strongly-recommended\" class=\"headerlink\" title=\"Self-closing components strongly recommended\"></a>Self-closing components <sup data-p=\"b\">strongly recommended</sup></h3><p><strong>Components with no content should be self-closing in <a href=\"../guide/single-file-components.html\">single-file components</a>, string templates, and <a href=\"../guide/render-function.html#JSX\">JSX</a> - but never in DOM templates.</strong></p>\n<p>Components that self-close communicate that they not only have no content, but are <strong>meant</strong> to have no content. It’s the difference between a blank page in a book and one labeled “This page intentionally left blank.” Your code is also cleaner without the unnecessary closing tag.</p>\n<p>Unfortunately, HTML doesn’t allow custom elements to be self-closing - only <a href=\"https://www.w3.org/TR/html/syntax.html#void-elements\" target=\"_blank\" rel=\"noopener\">official “void” elements</a>. That’s why the strategy is only possible when Vue’s template compiler can reach the template before the DOM, then serve the DOM spec-compliant HTML.</p>\n<div class=\"style-example example-bad\">\n<h4 id=\"Bad-13\"><a href=\"#Bad-13\" class=\"headerlink\" title=\"Bad\"></a>Bad</h4><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- In single-file components, string templates, and JSX --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">MyComponent</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">MyComponent</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- In DOM templates --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">my-component</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n</div>\n<div class=\"style-example example-good\">\n<h4 id=\"Good-13\"><a href=\"#Good-13\" class=\"headerlink\" title=\"Good\"></a>Good</h4><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- In single-file components, string templates, and JSX --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">MyComponent</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- In DOM templates --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">my-component</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">my-component</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</div>\n<h3 id=\"Component-name-casing-in-templates-strongly-recommended\"><a href=\"#Component-name-casing-in-templates-strongly-recommended\" class=\"headerlink\" title=\"Component name casing in templates strongly recommended\"></a>Component name casing in templates <sup data-p=\"b\">strongly recommended</sup></h3><p><strong>In most projects, component names should always be PascalCase in <a href=\"../guide/single-file-components.html\">single-file components</a> and string templates - but kebab-case in DOM templates.</strong></p>\n<p>PascalCase has a few advantages over kebab-case:</p>\n<ul>\n<li>Editors can autocomplete component names in templates, because PascalCase is also used in JavaScript.</li>\n<li><code>&lt;MyComponent&gt;</code> is more visually distinct from a single-word HTML element than <code>&lt;my-component&gt;</code>, because there are two character differences (the two capitals), rather than just one (a hyphen).</li>\n<li>If you use any non-Vue custom elements in your templates, such as a web component, PascalCase ensures that your Vue components remain distinctly visible.</li>\n</ul>\n<p>Unfortunately, due to HTML’s case insensitivity, DOM templates must still use kebab-case.</p>\n<p>Also note that if you’ve already invested heavily in kebab-case, consistency with HTML conventions and being able to use the same casing across all your projects may be more important than the advantages listed above. In those cases, <strong>using kebab-case everywhere is also acceptable.</strong></p>\n<div class=\"style-example example-bad\">\n<h4 id=\"Bad-14\"><a href=\"#Bad-14\" class=\"headerlink\" title=\"Bad\"></a>Bad</h4><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- In single-file components and string templates --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">mycomponent</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- In single-file components and string templates --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">myComponent</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- In DOM templates --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">MyComponent</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">MyComponent</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</div>\n<div class=\"style-example example-good\">\n<h4 id=\"Good-14\"><a href=\"#Good-14\" class=\"headerlink\" title=\"Good\"></a>Good</h4><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- In single-file components and string templates --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">MyComponent</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- In DOM templates --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">my-component</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">my-component</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>OR</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- Everywhere --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">my-component</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">my-component</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</div>\n<h3 id=\"Component-name-casing-in-JS-JSX-strongly-recommended\"><a href=\"#Component-name-casing-in-JS-JSX-strongly-recommended\" class=\"headerlink\" title=\"Component name casing in JS/JSX strongly recommended\"></a>Component name casing in JS/JSX <sup data-p=\"b\">strongly recommended</sup></h3><p><strong>Component names in JS/<a href=\"../guide/render-function.html#JSX\">JSX</a> should always be PascalCase, though they may be kebab-case inside strings for simpler applications that only use global component registration through <code>Vue.component</code>.</strong></p>\n\n<details>\n<summary>\n  <h4>Detailed Explanation</h4>\n</summary>\n\n<p>In JavaScript, PascalCase is the convention for classes and prototype constructors - essentially, anything that can have distinct instances. Vue components also have instances, so it makes sense to also use PascalCase. As an added benefit, using PascalCase within JSX (and templates) allows readers of the code to more easily distinguish between components and HTML elements.</p>\n<p>However, for applications that use <strong>only</strong> global component definitions via <code>Vue.component</code>, we recommend kebab-case instead. The reasons are:</p>\n<ul>\n<li>It’s rare that global components are ever referenced in JavaScript, so following a convention for JavaScript makes less sense.</li>\n<li>These applications always include many in-DOM templates, where <a href=\"#Component-name-casing-in-templates-strongly-recommended\">kebab-case <strong>must</strong> be used</a>.</li>\n</ul>\n</details>\n<div class=\"style-example example-bad\">\n<h4 id=\"Bad-15\"><a href=\"#Bad-15\" class=\"headerlink\" title=\"Bad\"></a>Bad</h4><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">Vue.component(<span class=\"string\">'myComponent'</span>, &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> myComponent <span class=\"keyword\">from</span> <span class=\"string\">'./MyComponent.vue'</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  name: <span class=\"string\">'myComponent'</span>,</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  name: <span class=\"string\">'my-component'</span>,</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</div>\n<div class=\"style-example example-good\">\n<h4 id=\"Good-15\"><a href=\"#Good-15\" class=\"headerlink\" title=\"Good\"></a>Good</h4><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">Vue.component(<span class=\"string\">'MyComponent'</span>, &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">Vue.component(<span class=\"string\">'my-component'</span>, &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> MyComponent <span class=\"keyword\">from</span> <span class=\"string\">'./MyComponent.vue'</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  name: <span class=\"string\">'MyComponent'</span>,</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</div>\n<h3 id=\"Full-word-component-names-strongly-recommended\"><a href=\"#Full-word-component-names-strongly-recommended\" class=\"headerlink\" title=\"Full-word component names strongly recommended\"></a>Full-word component names <sup data-p=\"b\">strongly recommended</sup></h3><p><strong>Component names should prefer full words over abbreviations.</strong></p>\n<p>The autocompletion in editors make the cost of writing longer names very low, while the clarity they provide is invaluable. Uncommon abbreviations, in particular, should always be avoided.</p>\n<div class=\"style-example example-bad\">\n<h4 id=\"Bad-16\"><a href=\"#Bad-16\" class=\"headerlink\" title=\"Bad\"></a>Bad</h4><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">components/</span><br><span class=\"line\">|- SdSettings.vue</span><br><span class=\"line\">|- UProfOpts.vue</span><br></pre></td></tr></table></figure>\n</div>\n<div class=\"style-example example-good\">\n<h4 id=\"Good-16\"><a href=\"#Good-16\" class=\"headerlink\" title=\"Good\"></a>Good</h4><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">components/</span><br><span class=\"line\">|- StudentDashboardSettings.vue</span><br><span class=\"line\">|- UserProfileOptions.vue</span><br></pre></td></tr></table></figure>\n</div>\n<h3 id=\"Prop-name-casing-strongly-recommended\"><a href=\"#Prop-name-casing-strongly-recommended\" class=\"headerlink\" title=\"Prop name casing strongly recommended\"></a>Prop name casing <sup data-p=\"b\">strongly recommended</sup></h3><p><strong>Prop names should always use camelCase during declaration, but kebab-case in templates and <a href=\"../guide/render-function.html#JSX\">JSX</a>.</strong></p>\n<p>We’re simply following the conventions of each language. Within JavaScript, camelCase is more natural. Within HTML, kebab-case is.</p>\n<div class=\"style-example example-bad\">\n<h4 id=\"Bad-17\"><a href=\"#Bad-17\" class=\"headerlink\" title=\"Bad\"></a>Bad</h4><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">props: &#123;</span><br><span class=\"line\">  <span class=\"string\">'greeting-text'</span>: <span class=\"built_in\">String</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">WelcomeMessage</span> <span class=\"attr\">greetingText</span>=<span class=\"string\">\"hi\"</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n</div>\n<div class=\"style-example example-good\">\n<h4 id=\"Good-17\"><a href=\"#Good-17\" class=\"headerlink\" title=\"Good\"></a>Good</h4><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">props: &#123;</span><br><span class=\"line\">  greetingText: <span class=\"built_in\">String</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">WelcomeMessage</span> <span class=\"attr\">greeting-text</span>=<span class=\"string\">\"hi\"</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n</div>\n<h3 id=\"Multi-attribute-elements-strongly-recommended\"><a href=\"#Multi-attribute-elements-strongly-recommended\" class=\"headerlink\" title=\"Multi-attribute elements strongly recommended\"></a>Multi-attribute elements <sup data-p=\"b\">strongly recommended</sup></h3><p><strong>Elements with multiple attributes should span multiple lines, with one attribute per line.</strong></p>\n<p>In JavaScript, splitting objects with multiple properties over multiple lines is widely considered a good convention, because it’s much easier to read. Our templates and <a href=\"../guide/render-function.html#JSX\">JSX</a> deserve the same consideration.</p>\n<div class=\"style-example example-bad\">\n<h4 id=\"Bad-18\"><a href=\"#Bad-18\" class=\"headerlink\" title=\"Bad\"></a>Bad</h4><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://vuejs.org/images/logo.png\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"Vue Logo\"</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">MyComponent</span> <span class=\"attr\">foo</span>=<span class=\"string\">\"a\"</span> <span class=\"attr\">bar</span>=<span class=\"string\">\"b\"</span> <span class=\"attr\">baz</span>=<span class=\"string\">\"c\"</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n</div>\n<div class=\"style-example example-good\">\n<h4 id=\"Good-18\"><a href=\"#Good-18\" class=\"headerlink\" title=\"Good\"></a>Good</h4><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">src</span>=<span class=\"string\">\"https://vuejs.org/images/logo.png\"</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">alt</span>=<span class=\"string\">\"Vue Logo\"</span></span></span><br><span class=\"line\"><span class=\"tag\">&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">MyComponent</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">foo</span>=<span class=\"string\">\"a\"</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">bar</span>=<span class=\"string\">\"b\"</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">baz</span>=<span class=\"string\">\"c\"</span></span></span><br><span class=\"line\"><span class=\"tag\">/&gt;</span></span><br></pre></td></tr></table></figure>\n</div>\n<h3 id=\"Simple-expressions-in-templates-strongly-recommended\"><a href=\"#Simple-expressions-in-templates-strongly-recommended\" class=\"headerlink\" title=\"Simple expressions in templates strongly recommended\"></a>Simple expressions in templates <sup data-p=\"b\">strongly recommended</sup></h3><p><strong>Component templates should only include simple expressions, with more complex expressions refactored into computed properties or methods.</strong></p>\n<p>Complex expressions in your templates make them less declarative. We should strive to describe <em>what</em> should appear, not <em>how</em> we’re computing that value. Computed properties and methods also allow the code to be reused.</p>\n<div class=\"style-example example-bad\">\n<h4 id=\"Bad-19\"><a href=\"#Bad-19\" class=\"headerlink\" title=\"Bad\"></a>Bad</h4><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;&#123;</span><br><span class=\"line\">  fullName.split(' ').map(function (word) &#123;</span><br><span class=\"line\">    return word[0].toUpperCase() + word.slice(1)</span><br><span class=\"line\">  &#125;).join(' ')</span><br><span class=\"line\">&#125;&#125;</span><br></pre></td></tr></table></figure>\n</div>\n<div class=\"style-example example-good\">\n<h4 id=\"Good-19\"><a href=\"#Good-19\" class=\"headerlink\" title=\"Good\"></a>Good</h4><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- In a template --&gt;</span></span><br><span class=\"line\">&#123;&#123; normalizedFullName &#125;&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// The complex expression has been moved to a computed property</span></span><br><span class=\"line\">computed: &#123;</span><br><span class=\"line\">  normalizedFullName: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.fullName.split(<span class=\"string\">' '</span>).map(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">word</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> word[<span class=\"number\">0</span>].toUpperCase() + word.slice(<span class=\"number\">1</span>)</span><br><span class=\"line\">    &#125;).join(<span class=\"string\">' '</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</div>\n<h3 id=\"Simple-computed-properties-strongly-recommended\"><a href=\"#Simple-computed-properties-strongly-recommended\" class=\"headerlink\" title=\"Simple computed properties strongly recommended\"></a>Simple computed properties <sup data-p=\"b\">strongly recommended</sup></h3><p><strong>Complex computed properties should be split into as many simpler properties as possible.</strong></p>\n\n<details>\n<summary>\n  <h4>Detailed Explanation</h4>\n</summary>\n\n<p>Simpler, well-named computed properties are:</p>\n<ul>\n<li><p><strong>Easier to test</strong></p>\n<p>When each computed property contains only a very simple expression, with very few dependencies, it’s much easier to write tests confirming that it works correctly.</p>\n</li>\n<li><p><strong>Easier to read</strong></p>\n<p>Simplifying computed properties forces you to give each value a descriptive name, even if it’s not reused. This makes it much easier for other developers (and future you) to focus in on the code they care about and figure out what’s going on.</p>\n</li>\n<li><p><strong>More adaptable to changing requirements</strong></p>\n<p>Any value that can be named might be useful to the view. For example, we might decide to display a message telling the user how much money they saved. We might also decide to calculate sales tax, but perhaps display it separately, rather than as part of the final price.</p>\n<p>Small, focused computed properties make fewer assumptions about how information will be used, so require less refactoring as requirements change.</p>\n</li>\n</ul>\n</details>\n<div class=\"style-example example-bad\">\n<h4 id=\"Bad-20\"><a href=\"#Bad-20\" class=\"headerlink\" title=\"Bad\"></a>Bad</h4><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">computed: &#123;</span><br><span class=\"line\">  price: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> basePrice = <span class=\"keyword\">this</span>.manufactureCost / (<span class=\"number\">1</span> - <span class=\"keyword\">this</span>.profitMargin)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      basePrice -</span><br><span class=\"line\">      basePrice * (<span class=\"keyword\">this</span>.discountPercent || <span class=\"number\">0</span>)</span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</div>\n<div class=\"style-example example-good\">\n<h4 id=\"Good-20\"><a href=\"#Good-20\" class=\"headerlink\" title=\"Good\"></a>Good</h4><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">computed: &#123;</span><br><span class=\"line\">  basePrice: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.manufactureCost / (<span class=\"number\">1</span> - <span class=\"keyword\">this</span>.profitMargin)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  discount: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.basePrice * (<span class=\"keyword\">this</span>.discountPercent || <span class=\"number\">0</span>)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  finalPrice: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.basePrice - <span class=\"keyword\">this</span>.discount</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</div>\n<h3 id=\"Quoted-attribute-values-strongly-recommended\"><a href=\"#Quoted-attribute-values-strongly-recommended\" class=\"headerlink\" title=\"Quoted attribute values strongly recommended\"></a>Quoted attribute values <sup data-p=\"b\">strongly recommended</sup></h3><p><strong>Non-empty HTML attribute values should always be inside quotes (single or double, whichever is not used in JS).</strong></p>\n<p>While attribute values without any spaces are not required to have quotes in HTML, this practice often leads to <em>avoiding</em> spaces, making attribute values less readable.</p>\n<div class=\"style-example example-bad\">\n<h4 id=\"Bad-21\"><a href=\"#Bad-21\" class=\"headerlink\" title=\"Bad\"></a>Bad</h4><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">text</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">AppSidebar</span> <span class=\"attr\">:style</span>=<span class=\"string\">&#123;width:sidebarWidth+</span>'<span class=\"attr\">px</span>'&#125;&gt;</span></span><br></pre></td></tr></table></figure>\n</div>\n<div class=\"style-example example-good\">\n<h4 id=\"Good-21\"><a href=\"#Good-21\" class=\"headerlink\" title=\"Good\"></a>Good</h4><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">AppSidebar</span> <span class=\"attr\">:style</span>=<span class=\"string\">\"&#123; width: sidebarWidth + 'px' &#125;\"</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</div>\n<h3 id=\"Directive-shorthands-strongly-recommended\"><a href=\"#Directive-shorthands-strongly-recommended\" class=\"headerlink\" title=\"Directive shorthands strongly recommended\"></a>Directive shorthands <sup data-p=\"b\">strongly recommended</sup></h3><p><strong>Directive shorthands (<code>:</code> for <code>v-bind:</code> and <code>@</code> for <code>v-on:</code>) should be used always or never.</strong></p>\n<div class=\"style-example example-bad\">\n<h4 id=\"Bad-22\"><a href=\"#Bad-22\" class=\"headerlink\" title=\"Bad\"></a>Bad</h4><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">v-bind:value</span>=<span class=\"string\">\"newTodoText\"</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">:placeholder</span>=<span class=\"string\">\"newTodoInstructions\"</span></span></span><br><span class=\"line\"><span class=\"tag\">&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">v-on:input</span>=<span class=\"string\">\"onInput\"</span></span></span><br><span class=\"line\"><span class=\"tag\">  @<span class=\"attr\">focus</span>=<span class=\"string\">\"onFocus\"</span></span></span><br><span class=\"line\"><span class=\"tag\">&gt;</span></span><br></pre></td></tr></table></figure>\n</div>\n<div class=\"style-example example-good\">\n<h4 id=\"Good-22\"><a href=\"#Good-22\" class=\"headerlink\" title=\"Good\"></a>Good</h4><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">:value</span>=<span class=\"string\">\"newTodoText\"</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">:placeholder</span>=<span class=\"string\">\"newTodoInstructions\"</span></span></span><br><span class=\"line\"><span class=\"tag\">&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">v-bind:value</span>=<span class=\"string\">\"newTodoText\"</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">v-bind:placeholder</span>=<span class=\"string\">\"newTodoInstructions\"</span></span></span><br><span class=\"line\"><span class=\"tag\">&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span></span></span><br><span class=\"line\"><span class=\"tag\">  @<span class=\"attr\">input</span>=<span class=\"string\">\"onInput\"</span></span></span><br><span class=\"line\"><span class=\"tag\">  @<span class=\"attr\">focus</span>=<span class=\"string\">\"onFocus\"</span></span></span><br><span class=\"line\"><span class=\"tag\">&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">v-on:input</span>=<span class=\"string\">\"onInput\"</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">v-on:focus</span>=<span class=\"string\">\"onFocus\"</span></span></span><br><span class=\"line\"><span class=\"tag\">&gt;</span></span><br></pre></td></tr></table></figure>\n</div>\n<h2 id=\"Priority-C-Rules-Recommended-Minimizing-Arbitrary-Choices-and-Cognitive-Overhead\"><a href=\"#Priority-C-Rules-Recommended-Minimizing-Arbitrary-Choices-and-Cognitive-Overhead\" class=\"headerlink\" title=\"Priority C Rules: Recommended (Minimizing Arbitrary Choices and Cognitive Overhead)\"></a>Priority C Rules: Recommended (Minimizing Arbitrary Choices and Cognitive Overhead)</h2><h3 id=\"Component-instance-options-order-recommended\"><a href=\"#Component-instance-options-order-recommended\" class=\"headerlink\" title=\"Component/instance options order recommended\"></a>Component/instance options order <sup data-p=\"c\">recommended</sup></h3><p><strong>Component/instance options should be ordered consistently.</strong></p>\n<p>This is the default order we recommend for component options. They’re split into categories, so you’ll know where to add new properties from plugins.</p>\n<ol>\n<li><p><strong>Side Effects</strong> (triggers effects outside the component)</p>\n<ul>\n<li><code>el</code></li>\n</ul>\n</li>\n<li><p><strong>Global Awareness</strong> (requires knowledge beyond the component)</p>\n<ul>\n<li><code>name</code></li>\n<li><code>parent</code></li>\n</ul>\n</li>\n<li><p><strong>Component Type</strong> (changes the type of the component)</p>\n<ul>\n<li><code>functional</code></li>\n</ul>\n</li>\n<li><p><strong>Template Modifiers</strong> (changes the way templates are compiled)</p>\n<ul>\n<li><code>delimiters</code></li>\n<li><code>comments</code></li>\n</ul>\n</li>\n<li><p><strong>Template Dependencies</strong> (assets used in the template)</p>\n<ul>\n<li><code>components</code></li>\n<li><code>directives</code></li>\n<li><code>filters</code></li>\n</ul>\n</li>\n<li><p><strong>Composition</strong> (merges properties into the options)</p>\n<ul>\n<li><code>extends</code></li>\n<li><code>mixins</code></li>\n</ul>\n</li>\n<li><p><strong>Interface</strong> (the interface to the component)</p>\n<ul>\n<li><code>inheritAttrs</code></li>\n<li><code>model</code></li>\n<li><code>props</code>/<code>propsData</code></li>\n</ul>\n</li>\n<li><p><strong>Local State</strong> (local reactive properties)</p>\n<ul>\n<li><code>data</code></li>\n<li><code>computed</code></li>\n</ul>\n</li>\n<li><p><strong>Events</strong> (callbacks triggered by reactive events)</p>\n<ul>\n<li><code>watch</code></li>\n<li>Lifecycle Events (in the order they are called)<ul>\n<li><code>beforeCreate</code></li>\n<li><code>created</code></li>\n<li><code>beforeMount</code></li>\n<li><code>mounted</code></li>\n<li><code>beforeUpdate</code></li>\n<li><code>updated</code></li>\n<li><code>activated</code></li>\n<li><code>deactivated</code></li>\n<li><code>beforeDestroy</code></li>\n<li><code>destroyed</code></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p><strong>Non-Reactive Properties</strong> (instance properties independent of the reactivity system)</p>\n<ul>\n<li><code>methods</code></li>\n</ul>\n</li>\n<li><p><strong>Rendering</strong> (the declarative description of the component output)</p>\n<ul>\n<li><code>template</code>/<code>render</code></li>\n<li><code>renderError</code></li>\n</ul>\n</li>\n</ol>\n<h3 id=\"Element-attribute-order-recommended\"><a href=\"#Element-attribute-order-recommended\" class=\"headerlink\" title=\"Element attribute order recommended\"></a>Element attribute order <sup data-p=\"c\">recommended</sup></h3><p><strong>The attributes of elements (including components) should be ordered consistently.</strong></p>\n<p>This is the default order we recommend for component options. They’re split into categories, so you’ll know where to add custom attributes and directives.</p>\n<ol>\n<li><p><strong>Definition</strong> (provides the component options)</p>\n<ul>\n<li><code>is</code></li>\n</ul>\n</li>\n<li><p><strong>List Rendering</strong> (creates multiple variations of the same element)</p>\n<ul>\n<li><code>v-for</code></li>\n</ul>\n</li>\n<li><p><strong>Conditionals</strong> (whether the element is rendered/shown)</p>\n<ul>\n<li><code>v-if</code></li>\n<li><code>v-else-if</code></li>\n<li><code>v-else</code></li>\n<li><code>v-show</code></li>\n<li><code>v-cloak</code></li>\n</ul>\n</li>\n<li><p><strong>Render Modifiers</strong> (changes the way the element renders)</p>\n<ul>\n<li><code>v-pre</code></li>\n<li><code>v-once</code></li>\n</ul>\n</li>\n<li><p><strong>Global Awareness</strong> (requires knowledge beyond the component)</p>\n<ul>\n<li><code>id</code></li>\n</ul>\n</li>\n<li><p><strong>Unique Attributes</strong> (attributes that require unique values)</p>\n<ul>\n<li><code>ref</code></li>\n<li><code>key</code></li>\n<li><code>slot</code></li>\n</ul>\n</li>\n<li><p><strong>Two-Way Binding</strong> (combining binding and events)</p>\n<ul>\n<li><code>v-model</code></li>\n</ul>\n</li>\n<li><p><strong>Other Attributes</strong> (all unspecified bound &amp; unbound attributes)</p>\n</li>\n<li><p><strong>Events</strong> (component event listeners)</p>\n<ul>\n<li><code>v-on</code></li>\n</ul>\n</li>\n<li><p><strong>Content</strong> (overrides the content of the element)</p>\n<ul>\n<li><code>v-html</code></li>\n<li><code>v-text</code></li>\n</ul>\n</li>\n</ol>\n<h3 id=\"Empty-lines-in-component-instance-options-recommended\"><a href=\"#Empty-lines-in-component-instance-options-recommended\" class=\"headerlink\" title=\"Empty lines in component/instance options recommended\"></a>Empty lines in component/instance options <sup data-p=\"c\">recommended</sup></h3><p><strong>You may want to add one empty line between multi-line properties, particularly if the options can no longer fit on your screen without scrolling.</strong></p>\n<p>When components begin to feel cramped or difficult to read, adding spaces between multi-line properties can make them easier to skim again. In some editors, such as Vim, formatting options like this can also make them easier to navigate with the keyboard.</p>\n<div class=\"style-example example-good\">\n<h4 id=\"Good-23\"><a href=\"#Good-23\" class=\"headerlink\" title=\"Good\"></a>Good</h4><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">props: &#123;</span><br><span class=\"line\">  value: &#123;</span><br><span class=\"line\">    type: <span class=\"built_in\">String</span>,</span><br><span class=\"line\">    required: <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  focused: &#123;</span><br><span class=\"line\">    type: <span class=\"built_in\">Boolean</span>,</span><br><span class=\"line\">    <span class=\"keyword\">default</span>: <span class=\"literal\">false</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  label: <span class=\"built_in\">String</span>,</span><br><span class=\"line\">  icon: <span class=\"built_in\">String</span></span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">computed: &#123;</span><br><span class=\"line\">  formattedValue: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  inputClasses: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// No spaces are also fine, as long as the component</span></span><br><span class=\"line\"><span class=\"comment\">// is still easy to read and navigate.</span></span><br><span class=\"line\">props: &#123;</span><br><span class=\"line\">  value: &#123;</span><br><span class=\"line\">    type: <span class=\"built_in\">String</span>,</span><br><span class=\"line\">    required: <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  focused: &#123;</span><br><span class=\"line\">    type: <span class=\"built_in\">Boolean</span>,</span><br><span class=\"line\">    <span class=\"keyword\">default</span>: <span class=\"literal\">false</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  label: <span class=\"built_in\">String</span>,</span><br><span class=\"line\">  icon: <span class=\"built_in\">String</span></span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">computed: &#123;</span><br><span class=\"line\">  formattedValue: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  inputClasses: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</div>\n<h3 id=\"Single-file-component-top-level-element-order-recommended\"><a href=\"#Single-file-component-top-level-element-order-recommended\" class=\"headerlink\" title=\"Single-file component top-level element order recommended\"></a>Single-file component top-level element order <sup data-p=\"c\">recommended</sup></h3><p><strong><a href=\"../guide/single-file-components.html\">Single-file components</a> should always order <code>&lt;script&gt;</code>, <code>&lt;template&gt;</code>, and <code>&lt;style&gt;</code> tags consistently, with <code>&lt;style&gt;</code> last, because at least one of the other two is always necessary.</strong></p>\n<div class=\"style-example example-bad\">\n<h4 id=\"Bad-23\"><a href=\"#Bad-23\" class=\"headerlink\" title=\"Bad\"></a>Bad</h4><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"css\"><span class=\"comment\">/* ... */</span></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"><span class=\"comment\">/* ... */</span></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span>...<span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- ComponentA.vue --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"><span class=\"comment\">/* ... */</span></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span>...<span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"css\"><span class=\"comment\">/* ... */</span></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- ComponentB.vue --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span>...<span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"><span class=\"comment\">/* ... */</span></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"css\"><span class=\"comment\">/* ... */</span></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</div>\n<div class=\"style-example example-good\">\n<h4 id=\"Good-24\"><a href=\"#Good-24\" class=\"headerlink\" title=\"Good\"></a>Good</h4><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- ComponentA.vue --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"><span class=\"comment\">/* ... */</span></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span>...<span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"css\"><span class=\"comment\">/* ... */</span></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- ComponentB.vue --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"><span class=\"comment\">/* ... */</span></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span>...<span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"css\"><span class=\"comment\">/* ... */</span></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- ComponentA.vue --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span>...<span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"><span class=\"comment\">/* ... */</span></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"css\"><span class=\"comment\">/* ... */</span></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- ComponentB.vue --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span>...<span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"><span class=\"comment\">/* ... */</span></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"css\"><span class=\"comment\">/* ... */</span></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</div>\n<h2 id=\"Priority-D-Rules-Use-with-Caution-Potentially-Dangerous-Patterns\"><a href=\"#Priority-D-Rules-Use-with-Caution-Potentially-Dangerous-Patterns\" class=\"headerlink\" title=\"Priority D Rules: Use with Caution (Potentially Dangerous Patterns)\"></a>Priority D Rules: Use with Caution (Potentially Dangerous Patterns)</h2><h3 id=\"v-if-v-if-else-v-else-without-key-use-with-caution\"><a href=\"#v-if-v-if-else-v-else-without-key-use-with-caution\" class=\"headerlink\" title=\"v-if/v-if-else/v-else without key use with caution\"></a><code>v-if</code>/<code>v-if-else</code>/<code>v-else</code> without <code>key</code> <sup data-p=\"d\">use with caution</sup></h3><p><strong>It’s usually best to use <code>key</code> with <code>v-if</code> + <code>v-else</code>, if they are the same element type (e.g. both <code>&lt;div&gt;</code> elements).</strong></p>\n<p>By default, Vue updates the DOM as efficiently as possible. That means when switching between elements of the same type, it simply patches the existing element, rather than removing it and adding a new one in its place. This can have <a href=\"https://jsfiddle.net/chrisvfritz/bh8fLeds/\" target=\"_blank\" rel=\"noopener\">unintended side effects</a> if these elements should not actually be considered the same.</p>\n<div class=\"style-example example-bad\">\n<h4 id=\"Bad-24\"><a href=\"#Bad-24\" class=\"headerlink\" title=\"Bad\"></a>Bad</h4><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-if</span>=<span class=\"string\">\"error\"</span>&gt;</span></span><br><span class=\"line\">  Error: &#123;&#123; error &#125;&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-else</span>&gt;</span></span><br><span class=\"line\">  &#123;&#123; results &#125;&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</div>\n<div class=\"style-example example-good\">\n<h4 id=\"Good-25\"><a href=\"#Good-25\" class=\"headerlink\" title=\"Good\"></a>Good</h4><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">v-if</span>=<span class=\"string\">\"error\"</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">key</span>=<span class=\"string\">\"search-status\"</span></span></span><br><span class=\"line\"><span class=\"tag\">&gt;</span></span><br><span class=\"line\">  Error: &#123;&#123; error &#125;&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">v-else</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">key</span>=<span class=\"string\">\"search-results\"</span></span></span><br><span class=\"line\"><span class=\"tag\">&gt;</span></span><br><span class=\"line\">  &#123;&#123; results &#125;&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">v-if</span>=<span class=\"string\">\"error\"</span>&gt;</span></span><br><span class=\"line\">  Error: &#123;&#123; error &#125;&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-else</span>&gt;</span></span><br><span class=\"line\">  &#123;&#123; results &#125;&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</div>\n<h3 id=\"Element-selectors-with-scoped-use-with-caution\"><a href=\"#Element-selectors-with-scoped-use-with-caution\" class=\"headerlink\" title=\"Element selectors with scoped use with caution\"></a>Element selectors with <code>scoped</code> <sup data-p=\"d\">use with caution</sup></h3><p><strong>Element selectors should be avoided with <code>scoped</code>.</strong></p>\n<p>Prefer class selectors over element selectors in <code>scoped</code> styles, because large numbers of element selectors are slow.</p>\n\n<details>\n<summary>\n  <h4>Detailed Explanation</h4>\n</summary>\n\n<p>To scope styles, Vue adds a unique attribute to component elements, such as <code>data-v-f3f3eg9</code>. Then selectors are modified so that only matching elements with this attribute are selected (e.g. <code>button[data-v-f3f3eg9]</code>).</p>\n<p>The problem is that large numbers of <a href=\"http://stevesouders.com/efws/css-selectors/csscreate.php?n=1000&amp;sel=a%5Bhref%5D&amp;body=background%3A+%23CFD&amp;ne=1000\" target=\"_blank\" rel=\"noopener\">element-attribute selectors</a> (e.g. <code>button[data-v-f3f3eg9]</code>) will be considerably slower than <a href=\"http://stevesouders.com/efws/css-selectors/csscreate.php?n=1000&amp;sel=.class%5Bhref%5D&amp;body=background%3A+%23CFD&amp;ne=1000\" target=\"_blank\" rel=\"noopener\">class-attribute selectors</a> (e.g. <code>.btn-close[data-v-f3f3eg9]</code>), so class selectors should be preferred whenever possible.</p>\n</details>\n<div class=\"style-example example-bad\">\n<h4 id=\"Bad-25\"><a href=\"#Bad-25\" class=\"headerlink\" title=\"Bad\"></a>Bad</h4><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span>&gt;</span>X<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">scoped</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">button &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">  background-color: red;</span></span><br><span class=\"line\"><span class=\"undefined\">&#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</div>\n<div class=\"style-example example-good\">\n<h4 id=\"Good-26\"><a href=\"#Good-26\" class=\"headerlink\" title=\"Good\"></a>Good</h4><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">class</span>=<span class=\"string\">\"btn btn-close\"</span>&gt;</span>X<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">scoped</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"css\"><span class=\"selector-class\">.btn-close</span> &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">  background-color: red;</span></span><br><span class=\"line\"><span class=\"undefined\">&#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</div>\n<h3 id=\"Implicit-parent-child-communication-use-with-caution\"><a href=\"#Implicit-parent-child-communication-use-with-caution\" class=\"headerlink\" title=\"Implicit parent-child communication use with caution\"></a>Implicit parent-child communication <sup data-p=\"d\">use with caution</sup></h3><p><strong>Props and events should be preferred for parent-child component communication, instead of <code>this.$parent</code> or mutating props.</strong></p>\n<p>An ideal Vue application is props down, events up. Sticking to this convention makes your components much easier to understand. However, there are edge cases where prop mutation or <code>this.$parent</code> can simplify two components that are already deeply coupled.</p>\n<p>The problem is, there are also many <em>simple</em> cases where these patterns may offer convenience. Beware: do not be seduced into trading simplicity (being able to understand the flow of your state) for short-term convenience (writing less code).</p>\n<div class=\"style-example example-bad\">\n<h4 id=\"Bad-26\"><a href=\"#Bad-26\" class=\"headerlink\" title=\"Bad\"></a>Bad</h4><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">Vue.component(<span class=\"string\">'TodoItem'</span>, &#123;</span><br><span class=\"line\">  props: &#123;</span><br><span class=\"line\">    todo: &#123;</span><br><span class=\"line\">      type: <span class=\"built_in\">Object</span>,</span><br><span class=\"line\">      required: <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  template: <span class=\"string\">'&lt;input v-model=\"todo.text\"&gt;'</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">Vue.component(<span class=\"string\">'TodoItem'</span>, &#123;</span><br><span class=\"line\">  props: &#123;</span><br><span class=\"line\">    todo: &#123;</span><br><span class=\"line\">      type: <span class=\"built_in\">Object</span>,</span><br><span class=\"line\">      required: <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    removeTodo () &#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> vm = <span class=\"keyword\">this</span></span><br><span class=\"line\">      vm.$parent.todos = vm.$parent.todos.filter(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">todo</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> todo.id !== vm.todo.id</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  template: <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">    &lt;span&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &#123;&#123; todo.text &#125;&#125;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;button @click=\"removeTodo\"&gt;</span></span><br><span class=\"line\"><span class=\"string\">        X</span></span><br><span class=\"line\"><span class=\"string\">      &lt;/button&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;/span&gt;</span></span><br><span class=\"line\"><span class=\"string\">  `</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n</div>\n<div class=\"style-example example-good\">\n<h4 id=\"Good-27\"><a href=\"#Good-27\" class=\"headerlink\" title=\"Good\"></a>Good</h4><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">Vue.component(<span class=\"string\">'TodoItem'</span>, &#123;</span><br><span class=\"line\">  props: &#123;</span><br><span class=\"line\">    todo: &#123;</span><br><span class=\"line\">      type: <span class=\"built_in\">Object</span>,</span><br><span class=\"line\">      required: <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  template: <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">    &lt;input</span></span><br><span class=\"line\"><span class=\"string\">      :value=\"todo.text\"</span></span><br><span class=\"line\"><span class=\"string\">      @input=\"$emit('input', $event.target.value)\"</span></span><br><span class=\"line\"><span class=\"string\">    &gt;</span></span><br><span class=\"line\"><span class=\"string\">  `</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">Vue.component(<span class=\"string\">'TodoItem'</span>, &#123;</span><br><span class=\"line\">  props: &#123;</span><br><span class=\"line\">    todo: &#123;</span><br><span class=\"line\">      type: <span class=\"built_in\">Object</span>,</span><br><span class=\"line\">      required: <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  template: <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">    &lt;span&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &#123;&#123; todo.text &#125;&#125;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;button @click=\"$emit('delete')\"&gt;</span></span><br><span class=\"line\"><span class=\"string\">        X</span></span><br><span class=\"line\"><span class=\"string\">      &lt;/button&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;/span&gt;</span></span><br><span class=\"line\"><span class=\"string\">  `</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n</div>\n<h3 id=\"Non-flux-state-management-use-with-caution\"><a href=\"#Non-flux-state-management-use-with-caution\" class=\"headerlink\" title=\"Non-flux state management use with caution\"></a>Non-flux state management <sup data-p=\"d\">use with caution</sup></h3><p><strong><a href=\"https://github.com/vuejs/vuex\" target=\"_blank\" rel=\"noopener\">Vuex</a> should be preferred for global state management, instead of <code>this.$root</code> or a global event bus.</strong></p>\n<p>Managing state on <code>this.$root</code> and/or using a <a href=\"https://vuejs.org/v2/guide/migration.html#dispatch-and-broadcast-replaced\">global event bus</a> can be convenient for very simple cases, but are not appropriate for most applications. Vuex offers not only a central place to manage state, but also tools for organizing, tracking, and debugging state changes.</p>\n\n<div class=\"style-example example-bad\">\n<h4 id=\"Bad-27\"><a href=\"#Bad-27\" class=\"headerlink\" title=\"Bad\"></a>Bad</h4><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// main.js</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    todos: []</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  created: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.$on(<span class=\"string\">'remove-todo'</span>, <span class=\"keyword\">this</span>.removeTodo)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    removeTodo: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">todo</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> todoIdToRemove = todo.id</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.todos = <span class=\"keyword\">this</span>.todos.filter(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">todo</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> todo.id !== todoIdToRemove</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n</div>\n<div class=\"style-example example-good\">\n<h4 id=\"Good-28\"><a href=\"#Good-28\" class=\"headerlink\" title=\"Good\"></a>Good</h4><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// store/modules/todos.js</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  state: &#123;</span><br><span class=\"line\">    list: []</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  mutations: &#123;</span><br><span class=\"line\">    REMOVE_TODO (state, todoId) &#123;</span><br><span class=\"line\">      state.list = state.list.filter(<span class=\"function\"><span class=\"params\">todo</span> =&gt;</span> todo.id !== todoId)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  actions: &#123;</span><br><span class=\"line\">    removeTodo (&#123; commit, state &#125;, todo) &#123;</span><br><span class=\"line\">      commit(<span class=\"string\">'REMOVE_TODO'</span>, todo.id)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- TodoItem.vue --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">    &#123;&#123; todo.text &#125;&#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">\"removeTodo(todo)\"</span>&gt;</span></span><br><span class=\"line\">      X</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">import</span> &#123; mapActions &#125; <span class=\"keyword\">from</span> <span class=\"string\">'vuex'</span></span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">  props: &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">    todo: &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      type: <span class=\"built_in\">Object</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">      required: <span class=\"literal\">true</span></span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">  &#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">  methods: mapActions([<span class=\"string\">'removeTodo'</span>])</span></span><br><span class=\"line\"><span class=\"undefined\">&#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</div>\n\n<script>\n(function () {\n  var enforcementTypes = {\n    none: '<span title=\"There is unfortunately no way to automatically enforce this rule.\">self-discipline</span>',\n    runtime: 'runtime error',\n    linter: '<a href=\"https://github.com/vuejs/eslint-plugin-vue#eslint-plugin-vue\" target=\"_blank\">plugin:vue/recommended</a>'\n  }\n  Vue.component('sg-enforcement', {\n    template: '\\\n      <span>\\\n        <strong>Enforcement</strong>:\\\n        <span class=\"style-rule-tag\" v-html=\"humanType\"/>\\\n      </span>\\\n    ',\n    props: {\n      type: {\n        type: String,\n        required: true,\n        validate: function (value) {\n          Object.keys(enforcementTypes).indexOf(value) !== -1\n        }\n      }\n    },\n    computed: {\n      humanType: function () {\n        return enforcementTypes[this.type]\n      }\n    }\n  })\n\n  // new Vue({\n  //  el: '#main'\n  // })\n})()\n</script>\n\n"},{"title":"API","type":"api","_content":"\n## Global Config\n\n`Vue.config` is an object containing Vue's global configurations. You can modify its properties listed below before bootstrapping your application:\n\n### silent\n\n- **Type:** `boolean`\n\n- **Default:** `false`\n\n- **Usage:**\n\n  ``` js\n  Vue.config.silent = true\n  ```\n\n  Suppress all Vue logs and warnings.\n\n### optionMergeStrategies\n\n- **Type:** `{ [key: string]: Function }`\n\n- **Default:** `{}`\n\n- **Usage:**\n\n  ``` js\n  Vue.config.optionMergeStrategies._my_option = function (parent, child, vm) {\n    return child + 1\n  }\n\n  const Profile = Vue.extend({\n    _my_option: 1\n  })\n\n  // Profile.options._my_option = 2\n  ```\n\n  Define custom merging strategies for options.\n\n  The merge strategy receives the value of that option defined on the parent and child instances as the first and second arguments, respectively. The context Vue instance is passed as the third argument.\n\n- **See also:** [Custom Option Merging Strategies](../guide/mixins.html#Custom-Option-Merge-Strategies)\n\n### devtools\n\n- **Type:** `boolean`\n\n- **Default:** `true` (`false` in production builds)\n\n- **Usage:**\n\n  ``` js\n  // make sure to set this synchronously immediately after loading Vue\n  Vue.config.devtools = true\n  ```\n\n  Configure whether to allow [vue-devtools](https://github.com/vuejs/vue-devtools) inspection. This option's default value is `true` in development builds and `false` in production builds. You can set it to `true` to enable inspection for production builds.\n\n### errorHandler\n\n- **Type:** `Function`\n\n- **Default:** `undefined`\n\n- **Usage:**\n\n  ``` js\n  Vue.config.errorHandler = function (err, vm, info) {\n    // handle error\n    // `info` is a Vue-specific error info, e.g. which lifecycle hook\n    // the error was found in. Only available in 2.2.0+\n  }\n  ```\n\n  Assign a handler for uncaught errors during component render function and watchers. The handler gets called with the error and the Vue instance.\n\n  > In 2.2.0+, this hook also captures errors in component lifecycle hooks. Also, when this hook is `undefined`, captured errors will be logged with `console.error` instead of crashing the app.\n\n  > In 2.4.0+ this hook also captures errors thrown inside Vue custom event handlers.\n\n  > Error tracking services [Sentry](https://sentry.io/for/vue/) and [Bugsnag](https://docs.bugsnag.com/platforms/browsers/vue/) provide official integrations using this option.\n\n### warnHandler\n\n> New in 2.4.0+\n\n- **Type:** `Function`\n\n- **Default:** `undefined`\n\n- **Usage:**\n\n  ``` js\n  Vue.config.warnHandler = function (msg, vm, trace) {\n    // `trace` is the component hierarchy trace\n  }\n  ```\n\n  Assign a custom handler for runtime Vue warnings. Note this only works during development and is ignored in production.\n\n### ignoredElements\n\n- **Type:** `Array<string | RegExp>`\n\n- **Default:** `[]`\n\n- **Usage:**\n\n  ``` js\n  Vue.config.ignoredElements = [\n    'my-custom-web-component',\n    'another-web-component',\n    // Use a `RegExp` to ignore all elements that start with \"ion-\"\n    // 2.5+ only\n    /^ion-/\n  ]\n  ```\n\n  Make Vue ignore custom elements defined outside of Vue (e.g., using the Web Components APIs). Otherwise, it will throw a warning about an `Unknown custom element`, assuming that you forgot to register a global component or misspelled a component name.\n\n### keyCodes\n\n- **Type:** `{ [key: string]: number | Array<number> }`\n\n- **Default:** `{}`\n\n- **Usage:**\n\n  ``` js\n  Vue.config.keyCodes = {\n    v: 86,\n    f1: 112,\n    // camelCase won`t work\n    mediaPlayPause: 179,\n    // instead you can use kebab-case with double quotation marks\n    \"media-play-pause\": 179,\n    up: [38, 87]\n  }\n  ```\n\n  ```html\n  <input type=\"text\" @keyup.media-play-pause=\"method\">\n  ```\n\n  Define custom key alias(es) for `v-on`.\n\n### performance\n\n> New in 2.2.0+\n\n- **Type:** `boolean`\n\n- **Default:** `false (from 2.2.3+)`\n\n- **Usage**:\n\n  Set this to `true` to enable component init, compile, render and patch performance tracing in the browser devtool performance/timeline panel. Only works in development mode and in browsers that support the [performance.mark](https://developer.mozilla.org/en-US/docs/Web/API/Performance/mark) API.\n\n### productionTip\n\n> New in 2.2.0+\n\n- **Type:** `boolean`\n\n- **Default:** `true`\n\n- **Usage**:\n\n  Set this to `false` to prevent the production tip on Vue startup.\n\n## Global API\n\n### Vue.extend( options )\n\n- **Arguments:**\n  - `{Object} options`\n\n- **Usage:**\n\n  Create a \"subclass\" of the base Vue constructor. The argument should be an object containing component options.\n\n  The special case to note here is the `data` option - it must be a function when used with `Vue.extend()`.\n\n  ``` html\n  <div id=\"mount-point\"></div>\n  ```\n\n  ``` js\n  // create constructor\n  var Profile = Vue.extend({\n    template: '<p>{{firstName}} {{lastName}} aka {{alias}}</p>',\n    data: function () {\n      return {\n        firstName: 'Walter',\n        lastName: 'White',\n        alias: 'Heisenberg'\n      }\n    }\n  })\n  // create an instance of Profile and mount it on an element\n  new Profile().$mount('#mount-point')\n  ```\n\n  Will result in:\n\n  ``` html\n  <p>Walter White aka Heisenberg</p>\n  ```\n\n- **See also:** [Components](../guide/components.html)\n\n### Vue.nextTick( [callback, context] )\n\n- **Arguments:**\n  - `{Function} [callback]`\n  - `{Object} [context]`\n\n- **Usage:**\n\n  Defer the callback to be executed after the next DOM update cycle. Use it immediately after you've changed some data to wait for the DOM update.\n\n  ``` js\n  // modify data\n  vm.msg = 'Hello'\n  // DOM not updated yet\n  Vue.nextTick(function () {\n    // DOM updated\n  })\n\n  // usage as a promise (2.1.0+, see note below)\n  Vue.nextTick()\n    .then(function () {\n      // DOM updated\n    })\n  ```\n\n  > New in 2.1.0+: returns a Promise if no callback is provided and Promise is supported in the execution environment. Please note that Vue does not come with a Promise polyfill, so if you target browsers that don't support Promises natively (looking at you, IE), you will have to provide a polyfill yourself.\n\n- **See also:** [Async Update Queue](../guide/reactivity.html#Async-Update-Queue)\n\n### Vue.set( target, key, value )\n\n- **Arguments:**\n  - `{Object | Array} target`\n  - `{string | number} key`\n  - `{any} value`\n\n- **Returns:** the set value.\n\n- **Usage:**\n\n  Adds a property to a reactive object, ensuring the new property is also reactive, so triggers view updates. This must be used to add new properties to reactive objects, as Vue cannot detect normal property additions (e.g. `this.myObject.newProperty = 'hi'`).\n\n  <p class=\"tip\">The target object cannot be a Vue instance, or the root data object of a Vue instance.</p>\n\n- **See also:** [Reactivity in Depth](../guide/reactivity.html)\n\n### Vue.delete( target, key )\n\n- **Arguments:**\n  - `{Object | Array} target`\n  - `{string | number} key/index`\n\n  > Only in 2.2.0+: Also works with Array + index.\n\n- **Usage:**\n\n  Delete a property on an object. If the object is reactive, ensure the deletion triggers view updates. This is primarily used to get around the limitation that Vue cannot detect property deletions, but you should rarely need to use it.\n\n  <p class=\"tip\">The target object cannot be a Vue instance, or the root data object of a Vue instance.</p>\n\n- **See also:** [Reactivity in Depth](../guide/reactivity.html)\n\n### Vue.directive( id, [definition] )\n\n- **Arguments:**\n  - `{string} id`\n  - `{Function | Object} [definition]`\n\n- **Usage:**\n\n  Register or retrieve a global directive.\n\n  ``` js\n  // register\n  Vue.directive('my-directive', {\n    bind: function () {},\n    inserted: function () {},\n    update: function () {},\n    componentUpdated: function () {},\n    unbind: function () {}\n  })\n\n  // register (function directive)\n  Vue.directive('my-directive', function () {\n    // this will be called as `bind` and `update`\n  })\n\n  // getter, return the directive definition if registered\n  var myDirective = Vue.directive('my-directive')\n  ```\n\n- **See also:** [Custom Directives](../guide/custom-directive.html)\n\n### Vue.filter( id, [definition] )\n\n- **Arguments:**\n  - `{string} id`\n  - `{Function} [definition]`\n\n- **Usage:**\n\n  Register or retrieve a global filter.\n\n  ``` js\n  // register\n  Vue.filter('my-filter', function (value) {\n    // return processed value\n  })\n\n  // getter, return the filter if registered\n  var myFilter = Vue.filter('my-filter')\n  ```\n\n- **See also:** [Filters](../guide/filters.html)\n\n### Vue.component( id, [definition] )\n\n- **Arguments:**\n  - `{string} id`\n  - `{Function | Object} [definition]`\n\n- **Usage:**\n\n  Register or retrieve a global component. Registration also automatically sets the component's `name` with the given `id`.\n\n  ``` js\n  // register an extended constructor\n  Vue.component('my-component', Vue.extend({ /* ... */ }))\n\n  // register an options object (automatically call Vue.extend)\n  Vue.component('my-component', { /* ... */ })\n\n  // retrieve a registered component (always return constructor)\n  var MyComponent = Vue.component('my-component')\n  ```\n\n- **See also:** [Components](../guide/components.html)\n\n### Vue.use( plugin )\n\n- **Arguments:**\n  - `{Object | Function} plugin`\n\n- **Usage:**\n\n  Install a Vue.js plugin. If the plugin is an Object, it must expose an `install` method. If it is a function itself, it will be treated as the install method. The install method will be called with Vue as the argument.\n\n  When this method is called on the same plugin multiple times, the plugin will be installed only once.\n\n- **See also:** [Plugins](../guide/plugins.html)\n\n### Vue.mixin( mixin )\n\n- **Arguments:**\n  - `{Object} mixin`\n\n- **Usage:**\n\n  Apply a mixin globally, which affects every Vue instance created afterwards. This can be used by plugin authors to inject custom behavior into components. **Not recommended in application code**.\n\n- **See also:** [Global Mixin](../guide/mixins.html#Global-Mixin)\n\n### Vue.compile( template )\n\n- **Arguments:**\n  - `{string} template`\n\n- **Usage:**\n\n  Compiles a template string into a render function. **Only available in the full build.**\n\n  ``` js\n  var res = Vue.compile('<div><span>{{ msg }}</span></div>')\n\n  new Vue({\n    data: {\n      msg: 'hello'\n    },\n    render: res.render,\n    staticRenderFns: res.staticRenderFns\n  })\n  ```\n\n- **See also:** [Render Functions](../guide/render-function.html)\n\n### Vue.version\n\n- **Details**: Provides the installed version of Vue as a string. This is especially useful for community plugins and components, where you might use different strategies for different versions.\n\n- **Usage**:\n\n  ```js\n  var version = Number(Vue.version.split('.')[0])\n\n  if (version === 2) {\n    // Vue v2.x.x\n  } else if (version === 1) {\n    // Vue v1.x.x\n  } else {\n    // Unsupported versions of Vue\n  }\n  ```\n\n## Options / Data\n\n### data\n\n- **Type:** `Object | Function`\n\n- **Restriction:** Only accepts `Function` when used in a component definition.\n\n- **Details:**\n\n  The data object for the Vue instance. Vue will recursively convert its properties into getter/setters to make it \"reactive\". **The object must be plain**: native objects such as browser API objects and prototype properties are ignored. A rule of thumb is that data should just be data - it is not recommended to observe objects with their own stateful behavior.\n\n  Once observed, you can no longer add reactive properties to the root data object. It is therefore recommended to declare all root-level reactive properties upfront, before creating the instance.\n\n  After the instance is created, the original data object can be accessed as `vm.$data`. The Vue instance also proxies all the properties found on the data object, so `vm.a` will be equivalent to `vm.$data.a`.\n\n  Properties that start with `_` or `$` will **not** be proxied on the Vue instance because they may conflict with Vue's internal properties and API methods. You will have to access them as `vm.$data._property`.\n\n  When defining a **component**, `data` must be declared as a function that returns the initial data object, because there will be many instances created using the same definition. If we use a plain object for `data`, that same object will be **shared by reference** across all instances created! By providing a `data` function, every time a new instance is created we can call it to return a fresh copy of the initial data.\n\n  If required, a deep clone of the original object can be obtained by passing `vm.$data` through `JSON.parse(JSON.stringify(...))`.\n\n- **Example:**\n\n  ``` js\n  var data = { a: 1 }\n\n  // direct instance creation\n  var vm = new Vue({\n    data: data\n  })\n  vm.a // => 1\n  vm.$data === data // => true\n\n  // must use function when in Vue.extend()\n  var Component = Vue.extend({\n    data: function () {\n      return { a: 1 }\n    }\n  })\n  ```\n\n  Note that if you use an arrow function with the `data` property, `this` won't be the component's instance, but you can still access the instance as the function's first argument:\n\n  ```js\n  data: vm => ({ a: vm.myProp })\n  ```\n\n- **See also:** [Reactivity in Depth](../guide/reactivity.html)\n\n### props\n\n- **Type:** `Array<string> | Object`\n\n- **Details:**\n\n  A list/hash of attributes that are exposed to accept data from the parent component. It has an Array-based simple syntax and an alternative Object-based syntax that allows advanced configurations such as type checking, custom validation and default values.\n\n- **Example:**\n\n  ``` js\n  // simple syntax\n  Vue.component('props-demo-simple', {\n    props: ['size', 'myMessage']\n  })\n\n  // object syntax with validation\n  Vue.component('props-demo-advanced', {\n    props: {\n      // type check\n      height: Number,\n      // type check plus other validations\n      age: {\n        type: Number,\n        default: 0,\n        required: true,\n        validator: function (value) {\n          return value >= 0\n        }\n      }\n    }\n  })\n  ```\n\n- **See also:** [Props](../guide/components.html#Props)\n\n### propsData\n\n- **Type:** `{ [key: string]: any }`\n\n- **Restriction:** only respected in instance creation via `new`.\n\n- **Details:**\n\n  Pass props to an instance during its creation. This is primarily intended to make unit testing easier.\n\n- **Example:**\n\n  ``` js\n  var Comp = Vue.extend({\n    props: ['msg'],\n    template: '<div>{{ msg }}</div>'\n  })\n\n  var vm = new Comp({\n    propsData: {\n      msg: 'hello'\n    }\n  })\n  ```\n\n### computed\n\n- **Type:** `{ [key: string]: Function | { get: Function, set: Function } }`\n\n- **Details:**\n\n  Computed properties to be mixed into the Vue instance. All getters and setters have their `this` context automatically bound to the Vue instance.\n\n  Note that if you use an arrow function with a computed property, `this` won't be the component's instance, but you can still access the instance as the function's first argument:\n\n  ```js\n  computed: {\n    aDouble: vm => vm.a * 2\n  }\n  ```\n\n  Computed properties are cached, and only re-computed on reactive dependency changes. Note that if a certain dependency is out of the instance's scope (i.e. not reactive), the computed property will __not__ be updated.\n\n- **Example:**\n\n  ```js\n  var vm = new Vue({\n    data: { a: 1 },\n    computed: {\n      // get only\n      aDouble: function () {\n        return this.a * 2\n      },\n      // both get and set\n      aPlus: {\n        get: function () {\n          return this.a + 1\n        },\n        set: function (v) {\n          this.a = v - 1\n        }\n      }\n    }\n  })\n  vm.aPlus   // => 2\n  vm.aPlus = 3\n  vm.a       // => 2\n  vm.aDouble // => 4\n  ```\n\n- **See also:** [Computed Properties](../guide/computed.html)\n\n### methods\n\n- **Type:** `{ [key: string]: Function }`\n\n- **Details:**\n\n  Methods to be mixed into the Vue instance. You can access these methods directly on the VM instance, or use them in directive expressions. All methods will have their `this` context automatically bound to the Vue instance.\n\n  <p class=\"tip\">Note that __you should not use an arrow function to define a method__ (e.g. `plus: () => this.a++`). The reason is arrow functions bind the parent context, so `this` will not be the Vue instance as you expect and `this.a` will be undefined.</p>\n\n- **Example:**\n\n  ```js\n  var vm = new Vue({\n    data: { a: 1 },\n    methods: {\n      plus: function () {\n        this.a++\n      }\n    }\n  })\n  vm.plus()\n  vm.a // 2\n  ```\n\n- **See also:** [Event Handling](../guide/events.html)\n\n### watch\n\n- **Type:** `{ [key: string]: string | Function | Object | Array}`\n\n- **Details:**\n\n  An object where keys are expressions to watch and values are the corresponding callbacks. The value can also be a string of a method name, or an Object that contains additional options. The Vue instance will call `$watch()` for each entry in the object at instantiation.\n\n- **Example:**\n\n  ``` js\n  var vm = new Vue({\n    data: {\n      a: 1,\n      b: 2,\n      c: 3,\n      d: 4,\n      e: {\n        f: {\n          g: 5\n        }\n      }\n    },\n    watch: {\n      a: function (val, oldVal) {\n        console.log('new: %s, old: %s', val, oldVal)\n      },\n      // string method name\n      b: 'someMethod',\n      // deep watcher\n      c: {\n        handler: function (val, oldVal) { /* ... */ },\n        deep: true\n      },\n      // the callback will be called immediately after the start of the observation\n      d: {\n        handler: function (val, oldVal) { /* ... */ },\n        immediate: true\n      },\n      e: [\n        function handle1 (val, oldVal) { /* ... */ },\n        function handle2 (val, oldVal) { /* ... */ }\n      ],\n      // watch vm.e.f's value: {g: 5}\n      'e.f': function (val, oldVal) { /* ... */ }\n    }\n  })\n  vm.a = 2 // => new: 2, old: 1\n  ```\n\n  <p class=\"tip\">Note that __you should not use an arrow function to define a watcher__ (e.g. `searchQuery: newValue => this.updateAutocomplete(newValue)`). The reason is arrow functions bind the parent context, so `this` will not be the Vue instance as you expect and `this.updateAutocomplete` will be undefined.</p>\n\n- **See also:** [Instance Methods / Data - vm.$watch](#vm-watch)\n\n## Options / DOM\n\n### el\n\n- **Type:** `string | HTMLElement`\n\n- **Restriction:** only respected in instance creation via `new`.\n\n- **Details:**\n\n  Provide the Vue instance an existing DOM element to mount on. It can be a CSS selector string or an actual HTMLElement.\n\n  After the instance is mounted, the resolved element will be accessible as `vm.$el`.\n\n  If this option is available at instantiation, the instance will immediately enter compilation; otherwise, the user will have to explicitly call `vm.$mount()` to manually start the compilation.\n\n  <p class=\"tip\">The provided element merely serves as a mounting point. Unlike in Vue 1.x, the mounted element will be replaced with Vue-generated DOM in all cases. It is therefore not recommended to mount the root instance to `<html>` or `<body>`.</p>\n\n  <p class=\"tip\">If neither `render` function nor `template` option is present, the in-DOM HTML of the mounting DOM element will be extracted as the template. In this case, Runtime + Compiler build of Vue should be used.</p>\n\n- **See also:**\n  - [Lifecycle Diagram](../guide/instance.html#Lifecycle-Diagram)\n  - [Runtime + Compiler vs. Runtime-only](../guide/installation.html#Runtime-Compiler-vs-Runtime-only)\n\n### template\n\n- **Type:** `string`\n\n- **Details:**\n\n  A string template to be used as the markup for the Vue instance. The template will **replace** the mounted element. Any existing markup inside the mounted element will be ignored, unless content distribution slots are present in the template.\n\n  If the string starts with `#` it will be used as a querySelector and use the selected element's innerHTML as the template string. This allows the use of the common `<script type=\"x-template\">` trick to include templates.\n\n  <p class=\"tip\">From a security perspective, you should only use Vue templates that you can trust. Never use user-generated content as your template.</p>\n\n  <p class=\"tip\">If render function is present in the Vue option, the template will be ignored.</p>\n\n- **See also:**\n  - [Lifecycle Diagram](../guide/instance.html#Lifecycle-Diagram)\n  - [Content Distribution with Slots](../guide/components.html#Content-Distribution-with-Slots)\n\n### render\n\n  - **Type:** `(createElement: () => VNode) => VNode`\n\n  - **Details:**\n\n    An alternative to string templates allowing you to leverage the full programmatic power of JavaScript. The render function receives a `createElement` method as it's first argument used to create `VNode`s.\n\n    If the component is a functional component, the render function also receives an extra argument `context`, which provides access to contextual data since functional components are instance-less.\n\n    <p class=\"tip\">The `render` function has priority over the render function compiled from `template` option or in-DOM HTML template of the mounting element which is specified by the `el` option.</p>\n\n  - **See also:** [Render Functions](../guide/render-function.html)\n\n### renderError\n\n> New in 2.2.0+\n\n  - **Type:** `(createElement: () => VNode, error: Error) => VNode`\n\n  - **Details:**\n\n    **Only works in development mode.**\n\n    Provide an alternative render output when the default `render` function encounters an error. The error will be passed to `renderError` as the second argument. This is particularly useful when used together with hot-reload.\n\n  - **Example:**\n\n    ``` js\n    new Vue({\n      render (h) {\n        throw new Error('oops')\n      },\n      renderError (h, err) {\n        return h('pre', { style: { color: 'red' }}, err.stack)\n      }\n    }).$mount('#app')\n    ```\n\n  - **See also:** [Render Functions](../guide/render-function.html)\n\n## Options / Lifecycle Hooks\n\n<p class=\"tip\">All lifecycle hooks automatically have their `this` context bound to the instance, so that you can access data, computed properties, and methods. This means __you should not use an arrow function to define a lifecycle method__ (e.g. `created: () => this.fetchTodos()`). The reason is arrow functions bind the parent context, so `this` will not be the Vue instance as you expect and `this.fetchTodos` will be undefined.</p>\n\n### beforeCreate\n\n- **Type:** `Function`\n\n- **Details:**\n\n  Called synchronously immediately after the instance has been initialized, before data observation and event/watcher setup.\n\n- **See also:** [Lifecycle Diagram](../guide/instance.html#Lifecycle-Diagram)\n\n### created\n\n- **Type:** `Function`\n\n- **Details:**\n\n  Called synchronously after the instance is created. At this stage, the instance has finished processing the options which means the following have been set up: data observation, computed properties, methods, watch/event callbacks. However, the mounting phase has not been started, and the `$el` property will not be available yet.\n\n- **See also:** [Lifecycle Diagram](../guide/instance.html#Lifecycle-Diagram)\n\n### beforeMount\n\n- **Type:** `Function`\n\n- **Details:**\n\n  Called right before the mounting begins: the `render` function is about to be called for the first time.\n\n  **This hook is not called during server-side rendering.**\n\n- **See also:** [Lifecycle Diagram](../guide/instance.html#Lifecycle-Diagram)\n\n### mounted\n\n- **Type:** `Function`\n\n- **Details:**\n\n  Called after the instance has been mounted, where `el` is replaced by the newly created `vm.$el`. If the root instance is mounted to an in-document element, `vm.$el` will also be in-document when `mounted` is called.\n\n  Note that `mounted` does **not** guarantee that all child components have also been mounted. If you want to wait until the entire view has been rendered, you can use [vm.$nextTick](#vm-nextTick) inside of `mounted`:\n\n  ``` js\n  mounted: function () {\n    this.$nextTick(function () {\n      // Code that will run only after the\n      // entire view has been rendered\n    })\n  }\n  ```\n\n  **This hook is not called during server-side rendering.**\n\n- **See also:** [Lifecycle Diagram](../guide/instance.html#Lifecycle-Diagram)\n\n### beforeUpdate\n\n- **Type:** `Function`\n\n- **Details:**\n\n  Called when data changes, before the DOM is patched. This is a good place to access the existing DOM before an update, e.g. to remove manually added event listeners.\n\n  **This hook is not called during server-side rendering, because only the initial render is performed server-side.**\n\n- **See also:** [Lifecycle Diagram](../guide/instance.html#Lifecycle-Diagram)\n\n### updated\n\n- **Type:** `Function`\n\n- **Details:**\n\n  Called after a data change causes the virtual DOM to be re-rendered and patched.\n\n  The component's DOM will have been updated when this hook is called, so you can perform DOM-dependent operations here. However, in most cases you should avoid changing state inside the hook. To react to state changes, it's usually better to use a [computed property](#computed) or [watcher](#watch) instead.\n\n  Note that `updated` does **not** guarantee that all child components have also been re-rendered. If you want to wait until the entire view has been re-rendered, you can use [vm.$nextTick](#vm-nextTick) inside of `updated`:\n\n  ``` js\n  updated: function () {\n    this.$nextTick(function () {\n      // Code that will run only after the\n      // entire view has been re-rendered\n    })\n  }\n  ```\n\n  **This hook is not called during server-side rendering.**\n\n- **See also:** [Lifecycle Diagram](../guide/instance.html#Lifecycle-Diagram)\n\n### activated\n\n- **Type:** `Function`\n\n- **Details:**\n\n  Called when a kept-alive component is activated.\n\n  **This hook is not called during server-side rendering.**\n\n- **See also:**\n  - [Built-in Components - keep-alive](#keep-alive)\n  - [Dynamic Components - keep-alive](../guide/components.html#keep-alive)\n\n### deactivated\n\n- **Type:** `Function`\n\n- **Details:**\n\n  Called when a kept-alive component is deactivated.\n\n  **This hook is not called during server-side rendering.**\n\n- **See also:**\n  - [Built-in Components - keep-alive](#keep-alive)\n  - [Dynamic Components - keep-alive](../guide/components.html#keep-alive)\n\n### beforeDestroy\n\n- **Type:** `Function`\n\n- **Details:**\n\n  Called right before a Vue instance is destroyed. At this stage the instance is still fully functional.\n\n  **This hook is not called during server-side rendering.**\n\n- **See also:** [Lifecycle Diagram](../guide/instance.html#Lifecycle-Diagram)\n\n### destroyed\n\n- **Type:** `Function`\n\n- **Details:**\n\n  Called after a Vue instance has been destroyed. When this hook is called, all directives of the Vue instance have been unbound, all event listeners have been removed, and all child Vue instances have also been destroyed.\n\n  **This hook is not called during server-side rendering.**\n\n- **See also:** [Lifecycle Diagram](../guide/instance.html#Lifecycle-Diagram)\n\n### errorCaptured\n\n> New in 2.5.0+\n\n- **Type:** `(err: Error, vm: Component, info: string) => ?boolean`\n\n- **Details:**\n\n  Called when an error from any descendent component is captured. The hook receives three arguments: the error, the component instance that triggered the error, and a string containing information on where the error was captured. The hook can return `false` to stop the error from propagating further.\n\n  <p class=\"tip\">You can modify component state in this hook. However, it is important to have conditionals in your template or render function that short circuits other content when an error has been captured; otherwise the component will be thrown into an infinite render loop.</p>\n\n  **Error Propagation Rules**\n\n  - By default, all errors are still sent to the global `config.errorHandler` if it is defined, so that these errors can still be reported to an analytics service in a single place.\n\n  - If multiple `errorCaptured` hooks exist on a component's inheritance chain or parent chain, all of them will be invoked on the same error.\n\n  - If the `errorCaptured` hook itself throws an error, both this error and the original captured error are sent to the global `config.errorHandler`.\n\n  - An `errorCaptured` hook can return `false` to prevent the error from propagating further. This is essentially saying \"this error has been handled and should be ignored.\" It will prevent any additional `errorCaptured` hooks or the global `config.errorHandler` from being invoked for this error.\n\n## Options / Assets\n\n### directives\n\n- **Type:** `Object`\n\n- **Details:**\n\n  A hash of directives to be made available to the Vue instance.\n\n- **See also:** [Custom Directives](../guide/custom-directive.html)\n\n### filters\n\n- **Type:** `Object`\n\n- **Details:**\n\n  A hash of filters to be made available to the Vue instance.\n\n- **See also:** [`Vue.filter`](#Vue-filter)\n\n### components\n\n- **Type:** `Object`\n\n- **Details:**\n\n  A hash of components to be made available to the Vue instance.\n\n- **See also:** [Components](../guide/components.html)\n\n## Options / Composition\n\n### parent\n\n- **Type:** `Vue instance`\n\n- **Details:**\n\n  Specify the parent instance for the instance to be created. Establishes a parent-child relationship between the two. The parent will be accessible as `this.$parent` for the child, and the child will be pushed into the parent's `$children` array.\n\n  <p class=\"tip\">Use `$parent` and `$children` sparingly - they mostly serve as an escape-hatch. Prefer using props and events for parent-child communication.</p>\n\n### mixins\n\n- **Type:** `Array<Object>`\n\n- **Details:**\n\n  The `mixins` option accepts an array of mixin objects. These mixin objects can contain instance options like normal instance objects, and they will be merged against the eventual options using the same option merging logic in `Vue.extend()`. e.g. If your mixin contains a created hook and the component itself also has one, both functions will be called.\n\n  Mixin hooks are called in the order they are provided, and called before the component's own hooks.\n\n- **Example:**\n\n  ``` js\n  var mixin = {\n    created: function () { console.log(1) }\n  }\n  var vm = new Vue({\n    created: function () { console.log(2) },\n    mixins: [mixin]\n  })\n  // => 1\n  // => 2\n  ```\n\n- **See also:** [Mixins](../guide/mixins.html)\n\n### extends\n\n- **Type:** `Object | Function`\n\n- **Details:**\n\n  Allows declaratively extending another component (could be either a plain options object or a constructor) without having to use `Vue.extend`. This is primarily intended to make it easier to extend between single file components.\n\n  This is similar to `mixins`.\n\n- **Example:**\n\n  ``` js\n  var CompA = { ... }\n\n  // extend CompA without having to call `Vue.extend` on either\n  var CompB = {\n    extends: CompA,\n    ...\n  }\n  ```\n\n### provide / inject\n\n> New in 2.2.0+\n\n- **Type:**\n  - **provide:** `Object | () => Object`\n  - **inject:** `Array<string> | { [key: string]: string | Symbol | Object }`\n\n- **Details:**\n\n  <p class=\"tip\">`provide` and `inject` are primarily provided for advanced plugin / component library use cases. It is NOT recommended to use them in generic application code.</p>\n\n  This pair of options are used together to allow an ancestor component to serve as a dependency injector for all its descendants, regardless of how deep the component hierarchy is, as long as they are in the same parent chain. If you are familiar with React, this is very similar to React's context feature.\n\n  The `provide` option should be an object or a function that returns an object. This object contains the properties that are available for injection into its descendants. You can use ES2015 Symbols as keys in this object, but only in environments that natively support `Symbol` and `Reflect.ownKeys`.\n\n  The `inject` option should be either:\n  - an array of strings, or\n  - an object where the keys are the local binding name and the value is either:\n    - the key (string or Symbol) to search for in available injections, or\n    - an object where:\n      - the `from` property is the key (string or Symbol) to search for in available injections, and\n      - the `default` property is used as fallback value\n\n  > Note: the `provide` and `inject` bindings are NOT reactive. This is intentional. However, if you pass down an observed object, properties on that object do remain reactive.\n\n- **Example:**\n\n  ``` js\n  // parent component providing 'foo'\n  var Provider = {\n    provide: {\n      foo: 'bar'\n    },\n    // ...\n  }\n\n  // child component injecting 'foo'\n  var Child = {\n    inject: ['foo'],\n    created () {\n      console.log(this.foo) // => \"bar\"\n    }\n    // ...\n  }\n  ```\n\n  With ES2015 Symbols, function `provide` and object `inject`:\n  ``` js\n  const s = Symbol()\n\n  const Provider = {\n    provide () {\n      return {\n        [s]: 'foo'\n      }\n    }\n  }\n\n  const Child = {\n    inject: { s },\n    // ...\n  }\n  ```\n\n  > The next 2 examples work with Vue 2.2.1+. Below that version, injected values were resolved after the `props` and the `data` initialization.\n\n  Using an injected value as the default for a prop:\n  ```js\n  const Child = {\n    inject: ['foo'],\n    props: {\n      bar: {\n        default () {\n          return this.foo\n        }\n      }\n    }\n  }\n  ```\n\n  Using an injected value as data entry:\n  ```js\n  const Child = {\n    inject: ['foo'],\n    data () {\n      return {\n        bar: this.foo\n      }\n    }\n  }\n  ```\n\n  > In 2.5.0+ injections can be optional with default value:\n\n  ``` js\n  const Child = {\n    inject: {\n      foo: { default: 'foo' }\n    }\n  }\n  ```\n\n  If it needs to be injected from a property with a different name, use `from` to denote the source property:\n\n  ``` js\n  const Child = {\n    inject: {\n      foo: {\n        from: 'bar',\n        default: 'foo'\n      }\n    }\n  }\n  ```\n\n  Similar to prop defaults, you need to use a factory function for non primitive values:\n\n  ``` js\n  const Child = {\n    inject: {\n      foo: {\n        from: 'bar',\n        default: () => [1, 2, 3]\n      }\n    }\n  }\n  ```\n\n## Options / Misc\n\n### name\n\n- **Type:** `string`\n\n- **Restriction:** only respected when used as a component option.\n\n- **Details:**\n\n  Allow the component to recursively invoke itself in its template. Note that when a component is registered globally with `Vue.component()`, the global ID is automatically set as its name.\n\n  Another benefit of specifying a `name` option is debugging. Named components result in more helpful warning messages. Also, when inspecting an app in the [vue-devtools](https://github.com/vuejs/vue-devtools), unnamed components will show up as `<AnonymousComponent>`, which isn't very informative. By providing the `name` option, you will get a much more informative component tree.\n\n### delimiters\n\n- **Type:** `Array<string>`\n\n- **Default:** `{% raw %}[\"{{\", \"}}\"]{% endraw %}`\n\n- **Restrictions:** This option is only available in the full build, with in-browser compilation.\n\n- **Details:**\n\n  Change the plain text interpolation delimiters.\n\n- **Example:**\n\n  ``` js\n  new Vue({\n    delimiters: ['${', '}']\n  })\n\n  // Delimiters changed to ES6 template string style\n  ```\n\n### functional\n\n- **Type:** `boolean`\n\n- **Details:**\n\n  Causes a component to be stateless (no `data`) and instanceless (no `this` context). They are only a `render` function that returns virtual nodes making them much cheaper to render.\n\n- **See also:** [Functional Components](../guide/render-function.html#Functional-Components)\n\n### model\n\n> New in 2.2.0\n\n- **Type:** `{ prop?: string, event?: string }`\n\n- **Details:**\n\n  Allows a custom component to customize the prop and event used when it's used with `v-model`. By default, `v-model` on a component uses `value` as the prop and `input` as the event, but some input types such as checkboxes and radio buttons may want to use the `value` prop for a different purpose. Using the `model` option can avoid the conflict in such cases.\n\n- **Example:**\n\n  ``` js\n  Vue.component('my-checkbox', {\n    model: {\n      prop: 'checked',\n      event: 'change'\n    },\n    props: {\n      // this allows using the `value` prop for a different purpose\n      value: String,\n      // use `checked` as the prop which take the place of `value`\n      checked: {\n        type: Number,\n        default: 0\n      }\n    },\n    // ...\n  })\n  ```\n\n  ``` html\n  <my-checkbox v-model=\"foo\" value=\"some value\"></my-checkbox>\n  ```\n\n  The above will be equivalent to:\n\n  ``` html\n  <my-checkbox\n    :checked=\"foo\"\n    @change=\"val => { foo = val }\"\n    value=\"some value\">\n  </my-checkbox>\n  ```\n\n### inheritAttrs\n\n> New in 2.4.0+\n\n- **Type:** `boolean`\n\n- **Default:** `true`\n\n- **Details:**\n\n  By default, parent scope attribute bindings that are not recognized as props will \"fallthrough\" and be applied to the root element of the child component as normal HTML attributes. When authoring a component that wraps a target element or another component, this may not always be the desired behavior. By setting `inheritAttrs` to `false`, this default behavior can be disabled. The attributes are available via the `$attrs` instance property (also new in 2.4) and can be explicitly bound to a non-root element using `v-bind`.\n\n  Note: this option does **not** affect `class` and `style` bindings.\n\n### comments\n\n> New in 2.4.0+\n\n- **Type:** `boolean`\n\n- **Default:** `false`\n\n- **Restrictions:** This option is only available in the full build, with in-browser compilation.\n\n- **Details:**\n\n  When set to `true`, will preserve and render HTML comments found in templates. The default behavior is discarding them.\n\n## Instance Properties\n\n### vm.$data\n\n- **Type:** `Object`\n\n- **Details:**\n\n  The data object that the Vue instance is observing. The Vue instance proxies access to the properties on its data object.\n\n- **See also:** [Options / Data - data](#data)\n\n### vm.$props\n\n> New in 2.2.0+\n\n- **Type:** `Object`\n\n- **Details:**\n\n  An object representing the current props a component has received. The Vue instance proxies access to the properties on its props object.\n\n### vm.$el\n\n- **Type:** `HTMLElement`\n\n- **Read only**\n\n- **Details:**\n\n  The root DOM element that the Vue instance is managing.\n\n### vm.$options\n\n- **Type:** `Object`\n\n- **Read only**\n\n- **Details:**\n\n  The instantiation options used for the current Vue instance. This is useful when you want to include custom properties in the options:\n\n  ``` js\n  new Vue({\n    customOption: 'foo',\n    created: function () {\n      console.log(this.$options.customOption) // => 'foo'\n    }\n  })\n  ```\n\n### vm.$parent\n\n- **Type:** `Vue instance`\n\n- **Read only**\n\n- **Details:**\n\n  The parent instance, if the current instance has one.\n\n### vm.$root\n\n- **Type:** `Vue instance`\n\n- **Read only**\n\n- **Details:**\n\n  The root Vue instance of the current component tree. If the current instance has no parents this value will be itself.\n\n### vm.$children\n\n- **Type:** `Array<Vue instance>`\n\n- **Read only**\n\n- **Details:**\n\n  The direct child components of the current instance. **Note there's no order guarantee for `$children`, and it is not reactive.** If you find yourself trying to use `$children` for data binding, consider using an Array and `v-for` to generate child components, and use the Array as the source of truth.\n\n### vm.$slots\n\n- **Type:** `{ [name: string]: ?Array<VNode> }`\n\n- **Read only**\n\n- **Details:**\n\n  Used to programmatically access content [distributed by slots](../guide/components.html#Content-Distribution-with-Slots). Each [named slot](../guide/components.html#Named-Slots) has its own corresponding property (e.g. the contents of `slot=\"foo\"` will be found at `vm.$slots.foo`). The `default` property contains any nodes not included in a named slot.\n\n  Accessing `vm.$slots` is most useful when writing a component with a [render function](../guide/render-function.html).\n\n- **Example:**\n\n  ```html\n  <blog-post>\n    <h1 slot=\"header\">\n      About Me\n    </h1>\n\n    <p>Here's some page content, which will be included in vm.$slots.default, because it's not inside a named slot.</p>\n\n    <p slot=\"footer\">\n      Copyright 2016 Evan You\n    </p>\n\n    <p>If I have some content down here, it will also be included in vm.$slots.default.</p>.\n  </blog-post>\n  ```\n\n  ```js\n  Vue.component('blog-post', {\n    render: function (createElement) {\n      var header = this.$slots.header\n      var body   = this.$slots.default\n      var footer = this.$slots.footer\n      return createElement('div', [\n        createElement('header', header),\n        createElement('main', body),\n        createElement('footer', footer)\n      ])\n    }\n  })\n  ```\n\n- **See also:**\n  - [`<slot>` Component](#slot-1)\n  - [Content Distribution with Slots](../guide/components.html#Content-Distribution-with-Slots)\n  - [Render Functions - Slots](../guide/render-function.html#Slots)\n\n### vm.$scopedSlots\n\n> New in 2.1.0+\n\n- **Type:** `{ [name: string]: props => VNode | Array<VNode> }`\n\n- **Read only**\n\n- **Details:**\n\n  Used to programmatically access [scoped slots](../guide/components.html#Scoped-Slots). For each slot, including the `default` one, the object contains a corresponding function that returns VNodes.\n\n  Accessing `vm.$scopedSlots` is most useful when writing a component with a [render function](../guide/render-function.html).\n\n- **See also:**\n  - [`<slot>` Component](#slot-1)\n  - [Scoped Slots](../guide/components.html#Scoped-Slots)\n  - [Render Functions - Slots](../guide/render-function.html#Slots)\n\n### vm.$refs\n\n- **Type:** `Object`\n\n- **Read only**\n\n- **Details:**\n\n  An object of DOM elements and component instances, registered with [`ref` attributes](#ref).\n\n- **See also:**\n  - [Child Component Refs](../guide/components.html#Child-Component-Refs)\n  - [Special Attributes - ref](#ref)\n\n### vm.$isServer\n\n- **Type:** `boolean`\n\n- **Read only**\n\n- **Details:**\n\n  Whether the current Vue instance is running on the server.\n\n- **See also:** [Server-Side Rendering](../guide/ssr.html)\n\n### vm.$attrs\n\n- **Type:** `{ [key: string]: string }`\n\n- **Read only**\n\n- **Details:**\n\n  Contains parent-scope attribute bindings (except for `class` and `style`) that are not recognized (and extracted) as props. When a component doesn't have any declared props, this essentially contains all parent-scope bindings (except for `class` and `style`), and can be passed down to an inner component via `v-bind=\"$attrs\"` - useful when creating higher-order components.\n\n### vm.$listeners\n\n- **Type:** `{ [key: string]: Function | Array<Function> }`\n\n- **Read only**\n\n- **Details:**\n\n  Contains parent-scope `v-on` event listeners (without `.native` modifiers). This can be passed down to an inner component via `v-on=\"$listeners\"` - useful when creating transparent wrapper components.\n\n## Instance Methods / Data\n\n### vm.$watch( expOrFn, callback, [options] )\n\n- **Arguments:**\n  - `{string | Function} expOrFn`\n  - `{Function | Object} callback`\n  - `{Object} [options]`\n    - `{boolean} deep`\n    - `{boolean} immediate`\n\n- **Returns:** `{Function} unwatch`\n\n- **Usage:**\n\n  Watch an expression or a computed function on the Vue instance for changes. The callback gets called with the new value and the old value. The expression only accepts dot-delimited paths. For more complex expressions, use a function instead.\n\n<p class=\"tip\">Note: when mutating (rather than replacing) an Object or an Array, the old value will be the same as new value because they reference the same Object/Array. Vue doesn't keep a copy of the pre-mutate value.</p>\n\n- **Example:**\n\n  ``` js\n  // keypath\n  vm.$watch('a.b.c', function (newVal, oldVal) {\n    // do something\n  })\n\n  // function\n  vm.$watch(\n    function () {\n      return this.a + this.b\n    },\n    function (newVal, oldVal) {\n      // do something\n    }\n  )\n  ```\n\n  `vm.$watch` returns an unwatch function that stops firing the callback:\n\n  ``` js\n  var unwatch = vm.$watch('a', cb)\n  // later, teardown the watcher\n  unwatch()\n  ```\n\n- **Option: deep**\n\n  To also detect nested value changes inside Objects, you need to pass in `deep: true` in the options argument. Note that you don't need to do so to listen for Array mutations.\n\n  ``` js\n  vm.$watch('someObject', callback, {\n    deep: true\n  })\n  vm.someObject.nestedValue = 123\n  // callback is fired\n  ```\n\n- **Option: immediate**\n\n  Passing in `immediate: true` in the option will trigger the callback immediately with the current value of the expression:\n\n  ``` js\n  vm.$watch('a', callback, {\n    immediate: true\n  })\n  // `callback` is fired immediately with current value of `a`\n  ```\n\n### vm.$set( target, key, value )\n\n- **Arguments:**\n  - `{Object | Array} target`\n  - `{string | number} key`\n  - `{any} value`\n\n- **Returns:** the set value.\n\n- **Usage:**\n\n  This is the **alias** of the global `Vue.set`.\n\n- **See also:** [Vue.set](#Vue-set)\n\n### vm.$delete( target, key )\n\n- **Arguments:**\n  - `{Object | Array} target`\n  - `{string | number} key`\n\n- **Usage:**\n\n  This is the **alias** of the global `Vue.delete`.\n\n- **See also:** [Vue.delete](#Vue-delete)\n\n## Instance Methods / Events\n\n### vm.$on( event, callback )\n\n- **Arguments:**\n  - `{string | Array<string>} event` (array only supported in 2.2.0+)\n  - `{Function} callback`\n\n- **Usage:**\n\n  Listen for a custom event on the current vm. Events can be triggered by `vm.$emit`. The callback will receive all the additional arguments passed into these event-triggering methods.\n\n- **Example:**\n\n  ``` js\n  vm.$on('test', function (msg) {\n    console.log(msg)\n  })\n  vm.$emit('test', 'hi')\n  // => \"hi\"\n  ```\n\n### vm.$once( event, callback )\n\n- **Arguments:**\n  - `{string} event`\n  - `{Function} callback`\n\n- **Usage:**\n\n  Listen for a custom event, but only once. The listener will be removed once it triggers for the first time.\n\n### vm.$off( [event, callback] )\n\n- **Arguments:**\n  - `{string | Array<string>} event` (array only supported in 2.2.2+)\n  - `{Function} [callback]`\n\n- **Usage:**\n\n  Remove custom event listener(s).\n\n  - If no arguments are provided, remove all event listeners;\n\n  - If only the event is provided, remove all listeners for that event;\n\n  - If both event and callback are given, remove the listener for that specific callback only.\n\n### vm.$emit( eventName, [...args] )\n\n- **Arguments:**\n  - `{string} eventName`\n  - `[...args]`\n\n  Trigger an event on the current instance. Any additional arguments will be passed into the listener's callback function.\n\n- **Examples:**\n\n  Using `$emit` with only an event name:\n\n  ```js\n  Vue.component('welcome-button', {\n    template: `\n      <button v-on:click=\"$emit('welcome')\">\n        Click me to be welcomed\n      </button>\n    `\n  })\n  ```\n  ```html\n  <div id=\"emit-example-simple\">\n    <welcome-button v-on:welcome=\"sayHi\"></welcome-button>\n  </div>\n  ```\n  ```js\n  new Vue({\n    el: '#emit-example-simple',\n    methods: {\n      sayHi: function () {\n        alert('Hi!')\n      }\n    }\n  })\n  ```\n  {% raw %}\n  <div id=\"emit-example-simple\" class=\"demo\">\n    <welcome-button v-on:welcome=\"sayHi\"></welcome-button>\n  </div>\n  <script>\n    Vue.component('welcome-button', {\n      template: `\n        <button v-on:click=\"$emit('welcome')\">\n          Click me to be welcomed\n        </button>\n      `\n    })\n    new Vue({\n      el: '#emit-example-simple',\n      methods: {\n        sayHi: function () {\n          alert('Hi!')\n        }\n      }\n    })\n  </script>\n  {% endraw %}\n\n  Using `$emit` with additional arguments:\n\n  ```js\n  Vue.component('magic-eight-ball', {\n    data: function () {\n      return {\n        possibleAdvice: ['Yes', 'No', 'Maybe']\n      }\n    },\n    methods: {\n      giveAdvice: function () {\n        var randomAdviceIndex = Math.floor(Math.random() * this.possibleAdvice.length)\n        this.$emit('give-advice', this.possibleAdvice[randomAdviceIndex])\n      }\n    },\n    template: `\n      <button v-on:click=\"giveAdvice\">\n        Click me for advice\n      </button>\n    `\n  })\n  ```\n\n  ```html\n  <div id=\"emit-example-argument\">\n    <magic-eight-ball v-on:give-advice=\"showAdvice\"></magic-eight-ball>\n  </div>\n  ```\n\n  ```js\n  new Vue({\n    el: '#emit-example-argument',\n    methods: {\n      showAdvice: function (advice) {\n        alert(advice)\n      }\n    }\n  })\n  ```\n\n  {% raw %}\n  <div id=\"emit-example-argument\" class=\"demo\">\n    <magic-eight-ball v-on:give-advice=\"showAdvice\"></magic-eight-ball>\n  </div>\n  <script>\n    Vue.component('magic-eight-ball', {\n      data: function () {\n        return {\n          possibleAdvice: ['Yes', 'No', 'Maybe']\n        }\n      },\n      methods: {\n        giveAdvice: function () {\n          var randomAdviceIndex = Math.floor(Math.random() * this.possibleAdvice.length)\n          this.$emit('give-advice', this.possibleAdvice[randomAdviceIndex])\n        }\n      },\n      template: `\n        <button v-on:click=\"giveAdvice\">\n          Click me for advice\n        </button>\n      `\n    })\n    new Vue({\n      el: '#emit-example-argument',\n      methods: {\n        showAdvice: function (advice) {\n          alert(advice)\n        }\n      }\n    })\n  </script>\n  {% endraw %}\n\n## Instance Methods / Lifecycle\n\n### vm.$mount( [elementOrSelector] )\n\n- **Arguments:**\n  - `{Element | string} [elementOrSelector]`\n  - `{boolean} [hydrating]`\n\n- **Returns:** `vm` - the instance itself\n\n- **Usage:**\n\n  If a Vue instance didn't receive the `el` option at instantiation, it will be in \"unmounted\" state, without an associated DOM element. `vm.$mount()` can be used to manually start the mounting of an unmounted Vue instance.\n\n  If `elementOrSelector` argument is not provided, the template will be rendered as an off-document element, and you will have to use native DOM API to insert it into the document yourself.\n\n  The method returns the instance itself so you can chain other instance methods after it.\n\n- **Example:**\n\n  ``` js\n  var MyComponent = Vue.extend({\n    template: '<div>Hello!</div>'\n  })\n\n  // create and mount to #app (will replace #app)\n  new MyComponent().$mount('#app')\n\n  // the above is the same as:\n  new MyComponent({ el: '#app' })\n\n  // or, render off-document and append afterwards:\n  var component = new MyComponent().$mount()\n  document.getElementById('app').appendChild(component.$el)\n  ```\n\n- **See also:**\n  - [Lifecycle Diagram](../guide/instance.html#Lifecycle-Diagram)\n  - [Server-Side Rendering](../guide/ssr.html)\n\n### vm.$forceUpdate()\n\n- **Usage:**\n\n  Force the Vue instance to re-render. Note it does not affect all child components, only the instance itself and child components with inserted slot content.\n\n### vm.$nextTick( [callback] )\n\n- **Arguments:**\n  - `{Function} [callback]`\n\n- **Usage:**\n\n  Defer the callback to be executed after the next DOM update cycle. Use it immediately after you've changed some data to wait for the DOM update. This is the same as the global `Vue.nextTick`, except that the callback's `this` context is automatically bound to the instance calling this method.\n\n  > New in 2.1.0+: returns a Promise if no callback is provided and Promise is supported in the execution environment. Please note that Vue does not come with a Promise polyfill, so if you target browsers that don't support Promises natively (looking at you, IE), you will have to provide a polyfill yourself.\n\n- **Example:**\n\n  ``` js\n  new Vue({\n    // ...\n    methods: {\n      // ...\n      example: function () {\n        // modify data\n        this.message = 'changed'\n        // DOM is not updated yet\n        this.$nextTick(function () {\n          // DOM is now updated\n          // `this` is bound to the current instance\n          this.doSomethingElse()\n        })\n      }\n    }\n  })\n  ```\n\n- **See also:**\n  - [Vue.nextTick](#Vue-nextTick)\n  - [Async Update Queue](../guide/reactivity.html#Async-Update-Queue)\n\n### vm.$destroy()\n\n- **Usage:**\n\n  Completely destroy a vm. Clean up its connections with other existing vms, unbind all its directives, turn off all event listeners.\n\n  Triggers the `beforeDestroy` and `destroyed` hooks.\n\n  <p class=\"tip\">In normal use cases you shouldn't have to call this method yourself. Prefer controlling the lifecycle of child components in a data-driven fashion using `v-if` and `v-for`.</p>\n\n- **See also:** [Lifecycle Diagram](../guide/instance.html#Lifecycle-Diagram)\n\n## Directives\n\n### v-text\n\n- **Expects:** `string`\n\n- **Details:**\n\n  Updates the element's `textContent`. If you need to update the part of `textContent`, you should use `{% raw %}{{ Mustache }}{% endraw %}` interpolations.\n\n- **Example:**\n\n  ```html\n  <span v-text=\"msg\"></span>\n  <!-- same as -->\n  <span>{{msg}}</span>\n  ```\n\n- **See also:** [Data Binding Syntax - Interpolations](../guide/syntax.html#Text)\n\n### v-html\n\n- **Expects:** `string`\n\n- **Details:**\n\n  Updates the element's `innerHTML`. **Note that the contents are inserted as plain HTML - they will not be compiled as Vue templates**. If you find yourself trying to compose templates using `v-html`, try to rethink the solution by using components instead.\n\n  <p class=\"tip\">Dynamically rendering arbitrary HTML on your website can be very dangerous because it can easily lead to [XSS attacks](https://en.wikipedia.org/wiki/Cross-site_scripting). Only use `v-html` on trusted content and **never** on user-provided content.</p>\n\n  <p class=\"tip\">In [single-file components](../guide/single-file-components.html), `scoped` styles will not apply to content inside `v-html`, because that HTML is not processed by Vue's template compiler. If you want to target `v-html` content with scoped CSS, you can instead use [CSS modules](https://vue-loader.vuejs.org/en/features/css-modules.html) or an additional, global `<style>` element with a manual scoping strategy such as BEM.</p>\n\n- **Example:**\n\n  ```html\n  <div v-html=\"html\"></div>\n  ```\n\n- **See also:** [Data Binding Syntax - Interpolations](../guide/syntax.html#Raw-HTML)\n\n### v-show\n\n- **Expects:** `any`\n\n- **Usage:**\n\n  Toggles the element's `display` CSS property based on the truthy-ness of the expression value.\n\n  This directive triggers transitions when its condition changes.\n\n- **See also:** [Conditional Rendering - v-show](../guide/conditional.html#v-show)\n\n### v-if\n\n- **Expects:** `any`\n\n- **Usage:**\n\n  Conditionally render the element based on the truthy-ness of the expression value. The element and its contained directives / components are destroyed and re-constructed during toggles. If the element is a `<template>` element, its content will be extracted as the conditional block.\n\n  This directive triggers transitions when its condition changes.\n\n  <p class=\"tip\">When used together with v-if, v-for has a higher priority than v-if. See the <a href=\"../guide/list.html#v-for-with-v-if\">list rendering guide</a> for details.</p>\n\n- **See also:** [Conditional Rendering - v-if](../guide/conditional.html)\n\n### v-else\n\n- **Does not expect expression**\n\n- **Restriction:** previous sibling element must have `v-if` or `v-else-if`.\n\n- **Usage:**\n\n  Denote the \"else block\" for `v-if` or a `v-if`/`v-else-if` chain.\n\n  ```html\n  <div v-if=\"Math.random() > 0.5\">\n    Now you see me\n  </div>\n  <div v-else>\n    Now you don't\n  </div>\n  ```\n\n- **See also:** [Conditional Rendering - v-else](../guide/conditional.html#v-else)\n\n### v-else-if\n\n> New in 2.1.0+\n\n- **Expects:** `any`\n\n- **Restriction:** previous sibling element must have `v-if` or `v-else-if`.\n\n- **Usage:**\n\n  Denote the \"else if block\" for `v-if`. Can be chained.\n\n  ```html\n  <div v-if=\"type === 'A'\">\n    A\n  </div>\n  <div v-else-if=\"type === 'B'\">\n    B\n  </div>\n  <div v-else-if=\"type === 'C'\">\n    C\n  </div>\n  <div v-else>\n    Not A/B/C\n  </div>\n  ```\n\n- **See also:** [Conditional Rendering - v-else-if](../guide/conditional.html#v-else-if)\n\n### v-for\n\n- **Expects:** `Array | Object | number | string`\n\n- **Usage:**\n\n  Render the element or template block multiple times based on the source data. The directive's value must use the special syntax `alias in expression` to provide an alias for the current element being iterated on:\n\n  ``` html\n  <div v-for=\"item in items\">\n    {{ item.text }}\n  </div>\n  ```\n\n  Alternatively, you can also specify an alias for the index (or the key if used on an Object):\n\n  ``` html\n  <div v-for=\"(item, index) in items\"></div>\n  <div v-for=\"(val, key) in object\"></div>\n  <div v-for=\"(val, key, index) in object\"></div>\n  ```\n\n  The default behavior of `v-for` will try to patch the elements in-place without moving them. To force it to reorder elements, you need to provide an ordering hint with the `key` special attribute:\n\n  ``` html\n  <div v-for=\"item in items\" :key=\"item.id\">\n    {{ item.text }}\n  </div>\n  ```\n\n  <p class=\"tip\">When used together with v-if, v-for has a higher priority than v-if. See the <a href=\"../guide/list.html#v-for-with-v-if\">list rendering guide</a> for details.</p>\n\n  The detailed usage for `v-for` is explained in the guide section linked below.\n\n- **See also:**\n  - [List Rendering](../guide/list.html)\n  - [key](../guide/list.html#key)\n\n### v-on\n\n- **Shorthand:** `@`\n\n- **Expects:** `Function | Inline Statement | Object`\n\n- **Argument:** `event`\n\n- **Modifiers:**\n  - `.stop` - call `event.stopPropagation()`.\n  - `.prevent` - call `event.preventDefault()`.\n  - `.capture` - add event listener in capture mode.\n  - `.self` - only trigger handler if event was dispatched from this element.\n  - `.{keyCode | keyAlias}` - only trigger handler on certain keys.\n  - `.native` - listen for a native event on the root element of component.\n  - `.once` - trigger handler at most once.\n  - `.left` - (2.2.0+) only trigger handler for left button mouse events.\n  - `.right` - (2.2.0+) only trigger handler for right button mouse events.\n  - `.middle` - (2.2.0+) only trigger handler for middle button mouse events.\n  - `.passive` - (2.3.0+) attaches a DOM event with `{ passive: true }`.\n\n- **Usage:**\n\n  Attaches an event listener to the element. The event type is denoted by the argument. The expression can be a method name, an inline statement, or omitted if there are modifiers present.\n\n  When used on a normal element, it listens to [**native DOM events**](https://developer.mozilla.org/en-US/docs/Web/Events) only. When used on a custom element component, it listens to **custom events** emitted on that child component.\n\n  When listening to native DOM events, the method receives the native event as the only argument. If using inline statement, the statement has access to the special `$event` property: `v-on:click=\"handle('ok', $event)\"`.\n\n  Starting in 2.4.0+, `v-on` also supports binding to an object of event/listener pairs without an argument. Note when using the object syntax, it does not support any modifiers.\n\n- **Example:**\n\n  ```html\n  <!-- method handler -->\n  <button v-on:click=\"doThis\"></button>\n\n  <!-- inline statement -->\n  <button v-on:click=\"doThat('hello', $event)\"></button>\n\n  <!-- shorthand -->\n  <button @click=\"doThis\"></button>\n\n  <!-- stop propagation -->\n  <button @click.stop=\"doThis\"></button>\n\n  <!-- prevent default -->\n  <button @click.prevent=\"doThis\"></button>\n\n  <!-- prevent default without expression -->\n  <form @submit.prevent></form>\n\n  <!-- chain modifiers -->\n  <button @click.stop.prevent=\"doThis\"></button>\n\n  <!-- key modifier using keyAlias -->\n  <input @keyup.enter=\"onEnter\">\n\n  <!-- key modifier using keyCode -->\n  <input @keyup.13=\"onEnter\">\n\n  <!-- the click event will be triggered at most once -->\n  <button v-on:click.once=\"doThis\"></button>\n\n  <!-- object syntax (2.4.0+) -->\n  <button v-on=\"{ mousedown: doThis, mouseup: doThat }\"></button>\n  ```\n\n  Listening to custom events on a child component (the handler is called when \"my-event\" is emitted on the child):\n\n  ```html\n  <my-component @my-event=\"handleThis\"></my-component>\n\n  <!-- inline statement -->\n  <my-component @my-event=\"handleThis(123, $event)\"></my-component>\n\n  <!-- native event on component -->\n  <my-component @click.native=\"onClick\"></my-component>\n  ```\n\n- **See also:**\n  - [Event Handling](../guide/events.html)\n  - [Components - Custom Events](../guide/components.html#Custom-Events)\n\n### v-bind\n\n- **Shorthand:** `:`\n\n- **Expects:** `any (with argument) | Object (without argument)`\n\n- **Argument:** `attrOrProp (optional)`\n\n- **Modifiers:**\n  - `.prop` - Bind as a DOM property instead of an attribute ([what's the difference?](https://stackoverflow.com/questions/6003819/properties-and-attributes-in-html#answer-6004028)). If the tag is a component then `.prop` will set the property on the component's `$el`.\n  - `.camel` - (2.1.0+) transform the kebab-case attribute name into camelCase.\n  - `.sync` - (2.3.0+) a syntax sugar that expands into a `v-on` handler for updating the bound value.\n\n- **Usage:**\n\n  Dynamically bind one or more attributes, or a component prop to an expression.\n\n  When used to bind the `class` or `style` attribute, it supports additional value types such as Array or Objects. See linked guide section below for more details.\n\n  When used for prop binding, the prop must be properly declared in the child component.\n\n  When used without an argument, can be used to bind an object containing attribute name-value pairs. Note in this mode `class` and `style` does not support Array or Objects.\n\n- **Example:**\n\n  ```html\n  <!-- bind an attribute -->\n  <img v-bind:src=\"imageSrc\">\n\n  <!-- shorthand -->\n  <img :src=\"imageSrc\">\n\n  <!-- with inline string concatenation -->\n  <img :src=\"'/path/to/images/' + fileName\">\n\n  <!-- class binding -->\n  <div :class=\"{ red: isRed }\"></div>\n  <div :class=\"[classA, classB]\"></div>\n  <div :class=\"[classA, { classB: isB, classC: isC }]\">\n\n  <!-- style binding -->\n  <div :style=\"{ fontSize: size + 'px' }\"></div>\n  <div :style=\"[styleObjectA, styleObjectB]\"></div>\n\n  <!-- binding an object of attributes -->\n  <div v-bind=\"{ id: someProp, 'other-attr': otherProp }\"></div>\n\n  <!-- DOM attribute binding with prop modifier -->\n  <div v-bind:text-content.prop=\"text\"></div>\n\n  <!-- prop binding. \"prop\" must be declared in my-component. -->\n  <my-component :prop=\"someThing\"></my-component>\n\n  <!-- pass down parent props in common with a child component -->\n  <child-component v-bind=\"$props\"></child-component>\n\n  <!-- XLink -->\n  <svg><a :xlink:special=\"foo\"></a></svg>\n  ```\n\n  The `.camel` modifier allows camelizing a `v-bind` attribute name when using in-DOM templates, e.g. the SVG `viewBox` attribute:\n\n  ``` html\n  <svg :view-box.camel=\"viewBox\"></svg>\n  ```\n\n  `.camel` is not needed if you are using string templates, or compiling with `vue-loader`/`vueify`.\n\n- **See also:**\n  - [Class and Style Bindings](../guide/class-and-style.html)\n  - [Components - Props](../guide/components.html#Props)\n  - [Components - `.sync` Modifier](../guide/components.html#sync-Modifier)\n\n### v-model\n\n- **Expects:** varies based on value of form inputs element or output of components\n\n- **Limited to:**\n  - `<input>`\n  - `<select>`\n  - `<textarea>`\n  - components\n\n- **Modifiers:**\n  - [`.lazy`](../guide/forms.html#lazy) - listen to `change` events instead of `input`\n  - [`.number`](../guide/forms.html#number) - cast input string to numbers\n  - [`.trim`](../guide/forms.html#trim) - trim input\n\n- **Usage:**\n\n  Create a two-way binding on a form input element or a component. For detailed usage and other notes, see the Guide section linked below.\n\n- **See also:**\n  - [Form Input Bindings](../guide/forms.html)\n  - [Components - Form Input Components using Custom Events](../guide/components.html#Form-Input-Components-using-Custom-Events)\n\n### v-pre\n\n- **Does not expect expression**\n\n- **Usage:**\n\n  Skip compilation for this element and all its children. You can use this for displaying raw mustache tags. Skipping large numbers of nodes with no directives on them can also speed up compilation.\n\n- **Example:**\n\n  ```html\n  <span v-pre>{{ this will not be compiled }}</span>\n   ```\n\n### v-cloak\n\n- **Does not expect expression**\n\n- **Usage:**\n\n  This directive will remain on the element until the associated Vue instance finishes compilation. Combined with CSS rules such as `[v-cloak] { display: none }`, this directive can be used to hide un-compiled mustache bindings until the Vue instance is ready.\n\n- **Example:**\n\n  ```css\n  [v-cloak] {\n    display: none;\n  }\n  ```\n\n  ```html\n  <div v-cloak>\n    {{ message }}\n  </div>\n  ```\n\n  The `<div>` will not be visible until the compilation is done.\n\n### v-once\n\n- **Does not expect expression**\n\n- **Details:**\n\n  Render the element and component **once** only. On subsequent re-renders, the element/component and all its children will be treated as static content and skipped. This can be used to optimize update performance.\n\n  ```html\n  <!-- single element -->\n  <span v-once>This will never change: {{msg}}</span>\n  <!-- the element have children -->\n  <div v-once>\n    <h1>comment</h1>\n    <p>{{msg}}</p>\n  </div>\n  <!-- component -->\n  <my-component v-once :comment=\"msg\"></my-component>\n  <!-- `v-for` directive -->\n  <ul>\n    <li v-for=\"i in list\" v-once>{{i}}</li>\n  </ul>\n  ```\n\n- **See also:**\n  - [Data Binding Syntax - interpolations](../guide/syntax.html#Text)\n  - [Components - Cheap Static Components with `v-once`](../guide/components.html#Cheap-Static-Components-with-v-once)\n\n## Special Attributes\n\n### key\n\n- **Expects:** `number | string`\n\n  The `key` special attribute is primarily used as a hint for Vue's virtual DOM algorithm to identify VNodes when diffing the new list of nodes against the old list. Without keys, Vue uses an algorithm that minimizes element movement and tries to patch/reuse elements of the same type in-place as much as possible. With keys, it will reorder elements based on the order change of keys, and elements with keys that are no longer present will always be removed/destroyed.\n\n  Children of the same common parent must have **unique keys**. Duplicate keys will cause render errors.\n\n  The most common use case is combined with `v-for`:\n\n  ``` html\n  <ul>\n    <li v-for=\"item in items\" :key=\"item.id\">...</li>\n  </ul>\n  ```\n\n  It can also be used to force replacement of an element/component instead of reusing it. This can be useful when you want to:\n\n  - Properly trigger lifecycle hooks of a component\n  - Trigger transitions\n\n  For example:\n\n  ``` html\n  <transition>\n    <span :key=\"text\">{{ text }}</span>\n  </transition>\n  ```\n\n  When `text` changes, the `<span>` will always be replaced instead of patched, so a transition will be triggered.\n\n### ref\n\n- **Expects:** `string`\n\n  `ref` is used to register a reference to an element or a child component. The reference will be registered under the parent component's `$refs` object. If used on a plain DOM element, the reference will be that element; if used on a child component, the reference will be component instance:\n\n  ``` html\n  <!-- vm.$refs.p will be the DOM node -->\n  <p ref=\"p\">hello</p>\n\n  <!-- vm.$refs.child will be the child component instance -->\n  <child-component ref=\"child\"></child-component>\n  ```\n\n  When used on elements/components with `v-for`, the registered reference will be an Array containing DOM nodes or component instances.\n\n  An important note about the ref registration timing: because the refs themselves are created as a result of the render function, you cannot access them on the initial render - they don't exist yet! `$refs` is also non-reactive, therefore you should not attempt to use it in templates for data-binding.\n\n- **See also:** [Child Component Refs](../guide/components.html#Child-Component-Refs)\n\n### slot\n\n- **Expects:** `string`\n\n  Used on content inserted into child components to indicate which named slot the content belongs to.\n\n  For detailed usage, see the guide section linked below.\n\n- **See also:** [Named Slots](../guide/components.html#Named-Slots)\n\n### slot-scope\n\n> New in 2.5.0+\n\n- **Expects:** `function argument expression`\n\n- **Usage:**\n\n  Used to denote an element or component as a scoped slot. The attribute's value should be a valid JavaScript expression that can appear in the argument position of a function signature. This means in supported environments you can also use ES2015 destructuring in the expression. Serves as a replacement for [`scope`](#scope-replaced) in 2.5.0+.\n\n  This attribute does not support dynamic binding.\n\n- **See also:** [Scoped Slots](../guide/components.html#Scoped-Slots)\n\n### scope <sup>replaced</sup>\n\nUsed to denote a `<template>` element as a scoped slot, which is replaced by [`slot-scope`](#slot-scope) in 2.5.0+.\n\n- **Usage:**\n\n  Same as [`slot-scope`](#slot-scope) except that `scope` can only be used on `<template>` elements.\n\n### is\n\n- **Expects:** `string | Object (component’s options object)`\n\n  Used for [dynamic components](../guide/components.html#Dynamic-Components) and to work around [limitations of in-DOM templates](../guide/components.html#DOM-Template-Parsing-Caveats).\n\n  For example:\n\n  ``` html\n  <!-- component changes when currentView changes -->\n  <component v-bind:is=\"currentView\"></component>\n\n  <!-- necessary because `<my-row>` would be invalid inside -->\n  <!-- a `<table>` element and so would be hoisted out      -->\n  <table>\n    <tr is=\"my-row\"></tr>\n  </table>\n  ```\n\n  For detailed usage, follow the links in the description above.\n\n- **See also:**\n  - [Dynamic Components](../guide/components.html#Dynamic-Components)\n  - [DOM Template Parsing Caveats](../guide/components.html#DOM-Template-Parsing-Caveats)\n\n## Built-In Components\n\n### component\n\n- **Props:**\n  - `is` - string | ComponentDefinition | ComponentConstructor\n  - `inline-template` - boolean\n\n- **Usage:**\n\n  A \"meta component\" for rendering dynamic components. The actual component to render is determined by the `is` prop:\n\n  ```html\n  <!-- a dynamic component controlled by -->\n  <!-- the `componentId` property on the vm -->\n  <component :is=\"componentId\"></component>\n\n  <!-- can also render registered component or component passed as prop -->\n  <component :is=\"$options.components.child\"></component>\n  ```\n\n- **See also:** [Dynamic Components](../guide/components.html#Dynamic-Components)\n\n### transition\n\n- **Props:**\n  - `name` - string, Used to automatically generate transition CSS class names. e.g. `name: 'fade'` will auto expand to `.fade-enter`, `.fade-enter-active`, etc. Defaults to `\"v\"`.\n  - `appear` - boolean, Whether to apply transition on initial render. Defaults to `false`.\n  - `css` - boolean, Whether to apply CSS transition classes. Defaults to `true`. If set to `false`, will only trigger JavaScript hooks registered via component events.\n  - `type` - string, Specify the type of transition events to wait for to determine transition end timing. Available values are `\"transition\"` and `\"animation\"`. By default, it will automatically detect the type that has a longer duration.\n  - `mode` - string, Controls the timing sequence of leaving/entering transitions. Available modes are `\"out-in\"` and `\"in-out\"`; defaults to simultaneous.\n  - `enter-class` - string\n  - `leave-class` - string\n  - `appear-class` - string\n  - `enter-to-class` - string\n  - `leave-to-class` - string\n  - `appear-to-class` - string\n  - `enter-active-class` - string\n  - `leave-active-class` - string\n  - `appear-active-class` - string\n\n- **Events:**\n  - `before-enter`\n  - `before-leave`\n  - `before-appear`\n  - `enter`\n  - `leave`\n  - `appear`\n  - `after-enter`\n  - `after-leave`\n  - `after-appear`\n  - `enter-cancelled`\n  - `leave-cancelled` (`v-show` only)\n  - `appear-cancelled`\n\n- **Usage:**\n\n  `<transition>` serve as transition effects for **single** element/component. The `<transition>` only applies the transition behavior to the wrapped content inside; it doesn't render an extra DOM element, or show up in the inspected component hierarchy.\n\n  ```html\n  <!-- simple element -->\n  <transition>\n    <div v-if=\"ok\">toggled content</div>\n  </transition>\n\n  <!-- dynamic component -->\n  <transition name=\"fade\" mode=\"out-in\" appear>\n    <component :is=\"view\"></component>\n  </transition>\n\n  <!-- event hooking -->\n  <div id=\"transition-demo\">\n    <transition @after-enter=\"transitionComplete\">\n      <div v-show=\"ok\">toggled content</div>\n    </transition>\n  </div>\n  ```\n\n  ``` js\n  new Vue({\n    ...\n    methods: {\n      transitionComplete: function (el) {\n        // for passed 'el' that DOM element as the argument, something ...\n      }\n    }\n    ...\n  }).$mount('#transition-demo')\n  ```\n\n- **See also:** [Transitions: Entering, Leaving, and Lists](../guide/transitions.html)\n\n### transition-group\n\n- **Props:**\n  - `tag` - string, defaults to `span`.\n  - `move-class` - overwrite CSS class applied during moving transition.\n  - exposes the same props as `<transition>` except `mode`.\n\n- **Events:**\n  - exposes the same events as `<transition>`.\n\n- **Usage:**\n\n  `<transition-group>` serve as transition effects for **multiple** elements/components. The `<transition-group>` renders a real DOM element. By default it renders a `<span>`, and you can configure what element is should render via the `tag` attribute.\n\n  Note every child in a `<transition-group>` must be **uniquely keyed** for the animations to work properly.\n\n  `<transition-group>` supports moving transitions via CSS transform. When a child's position on screen has changed after an updated, it will get applied a moving CSS class (auto generated from the `name` attribute or configured with the `move-class` attribute). If the CSS `transform` property is \"transition-able\" when the moving class is applied, the element will be smoothly animated to its destination using the [FLIP technique](https://aerotwist.com/blog/flip-your-animations/).\n\n  ```html\n  <transition-group tag=\"ul\" name=\"slide\">\n    <li v-for=\"item in items\" :key=\"item.id\">\n      {{ item.text }}\n    </li>\n  </transition-group>\n  ```\n\n- **See also:** [Transitions: Entering, Leaving, and Lists](../guide/transitions.html)\n\n### keep-alive\n\n- **Props:**\n  - `include` - string or RegExp or Array. Only components matched by this will be cached.\n  - `exclude` - string or RegExp or Array. Any component matched by this will not be cached.\n\n- **Usage:**\n\n  When wrapped around a dynamic component, `<keep-alive>` caches the inactive component instances without destroying them. Similar to `<transition>`, `<keep-alive>` is an abstract component: it doesn't render a DOM element itself, and doesn't show up in the component parent chain.\n\n  When a component is toggled inside `<keep-alive>`, its `activated` and `deactivated` lifecycle hooks will be invoked accordingly.\n\n  > In 2.2.0+ and above, `activated` and `deactivated` will fire for all nested components inside a `<keep-alive>` tree.\n\n  Primarily used with preserve component state or avoid re-rendering.\n\n  ```html\n  <!-- basic -->\n  <keep-alive>\n    <component :is=\"view\"></component>\n  </keep-alive>\n\n  <!-- multiple conditional children -->\n  <keep-alive>\n    <comp-a v-if=\"a > 1\"></comp-a>\n    <comp-b v-else></comp-b>\n  </keep-alive>\n\n  <!-- used together with `<transition>` -->\n  <transition>\n    <keep-alive>\n      <component :is=\"view\"></component>\n    </keep-alive>\n  </transition>\n  ```\n\n  Note, `<keep-alive>` is designed for the case where it has one direct child component that is being toggled. It does not work if you have `v-for` inside it. When there are multiple conditional children, as above, `<keep-alive>` requires that only one child is rendered at a time.\n\n- **`include` and `exclude`**\n\n  > New in 2.1.0+\n\n  The `include` and `exclude` props allow components to be conditionally cached. Both props can be a comma-delimited string, a RegExp or an Array:\n\n  ``` html\n  <!-- comma-delimited string -->\n  <keep-alive include=\"a,b\">\n    <component :is=\"view\"></component>\n  </keep-alive>\n\n  <!-- regex (use `v-bind`) -->\n  <keep-alive :include=\"/a|b/\">\n    <component :is=\"view\"></component>\n  </keep-alive>\n\n  <!-- Array (use `v-bind`) -->\n  <keep-alive :include=\"['a', 'b']\">\n    <component :is=\"view\"></component>\n  </keep-alive>\n  ```\n\n  The match is first checked on the component's own `name` option, then its local registration name (the key in the parent's `components` option) if the `name` option is not available. Anonymous components cannot be matched against.\n\n  <p class=\"tip\">`<keep-alive>` does not work with functional components because they do not have instances to be cached.</p>\n\n- **See also:** [Dynamic Components - keep-alive](../guide/components.html#keep-alive)\n\n### slot\n\n- **Props:**\n  - `name` - string, Used for named slot.\n\n- **Usage:**\n\n  `<slot>` serve as content distribution outlets in component templates. `<slot>` itself will be replaced.\n\n  For detailed usage, see the guide section linked below.\n\n- **See also:** [Content Distribution with Slots](../guide/components.html#Content-Distribution-with-Slots)\n\n## VNode Interface\n\n- Please refer to the [VNode class declaration](https://github.com/vuejs/vue/blob/dev/src/core/vdom/vnode.js).\n\n## Server-Side Rendering\n\n- Please refer to the [vue-server-renderer package documentation](https://github.com/vuejs/vue/tree/dev/packages/vue-server-renderer).\n","source":"v2/api/index.md","raw":"---\ntitle: API\ntype: api\n---\n\n## Global Config\n\n`Vue.config` is an object containing Vue's global configurations. You can modify its properties listed below before bootstrapping your application:\n\n### silent\n\n- **Type:** `boolean`\n\n- **Default:** `false`\n\n- **Usage:**\n\n  ``` js\n  Vue.config.silent = true\n  ```\n\n  Suppress all Vue logs and warnings.\n\n### optionMergeStrategies\n\n- **Type:** `{ [key: string]: Function }`\n\n- **Default:** `{}`\n\n- **Usage:**\n\n  ``` js\n  Vue.config.optionMergeStrategies._my_option = function (parent, child, vm) {\n    return child + 1\n  }\n\n  const Profile = Vue.extend({\n    _my_option: 1\n  })\n\n  // Profile.options._my_option = 2\n  ```\n\n  Define custom merging strategies for options.\n\n  The merge strategy receives the value of that option defined on the parent and child instances as the first and second arguments, respectively. The context Vue instance is passed as the third argument.\n\n- **See also:** [Custom Option Merging Strategies](../guide/mixins.html#Custom-Option-Merge-Strategies)\n\n### devtools\n\n- **Type:** `boolean`\n\n- **Default:** `true` (`false` in production builds)\n\n- **Usage:**\n\n  ``` js\n  // make sure to set this synchronously immediately after loading Vue\n  Vue.config.devtools = true\n  ```\n\n  Configure whether to allow [vue-devtools](https://github.com/vuejs/vue-devtools) inspection. This option's default value is `true` in development builds and `false` in production builds. You can set it to `true` to enable inspection for production builds.\n\n### errorHandler\n\n- **Type:** `Function`\n\n- **Default:** `undefined`\n\n- **Usage:**\n\n  ``` js\n  Vue.config.errorHandler = function (err, vm, info) {\n    // handle error\n    // `info` is a Vue-specific error info, e.g. which lifecycle hook\n    // the error was found in. Only available in 2.2.0+\n  }\n  ```\n\n  Assign a handler for uncaught errors during component render function and watchers. The handler gets called with the error and the Vue instance.\n\n  > In 2.2.0+, this hook also captures errors in component lifecycle hooks. Also, when this hook is `undefined`, captured errors will be logged with `console.error` instead of crashing the app.\n\n  > In 2.4.0+ this hook also captures errors thrown inside Vue custom event handlers.\n\n  > Error tracking services [Sentry](https://sentry.io/for/vue/) and [Bugsnag](https://docs.bugsnag.com/platforms/browsers/vue/) provide official integrations using this option.\n\n### warnHandler\n\n> New in 2.4.0+\n\n- **Type:** `Function`\n\n- **Default:** `undefined`\n\n- **Usage:**\n\n  ``` js\n  Vue.config.warnHandler = function (msg, vm, trace) {\n    // `trace` is the component hierarchy trace\n  }\n  ```\n\n  Assign a custom handler for runtime Vue warnings. Note this only works during development and is ignored in production.\n\n### ignoredElements\n\n- **Type:** `Array<string | RegExp>`\n\n- **Default:** `[]`\n\n- **Usage:**\n\n  ``` js\n  Vue.config.ignoredElements = [\n    'my-custom-web-component',\n    'another-web-component',\n    // Use a `RegExp` to ignore all elements that start with \"ion-\"\n    // 2.5+ only\n    /^ion-/\n  ]\n  ```\n\n  Make Vue ignore custom elements defined outside of Vue (e.g., using the Web Components APIs). Otherwise, it will throw a warning about an `Unknown custom element`, assuming that you forgot to register a global component or misspelled a component name.\n\n### keyCodes\n\n- **Type:** `{ [key: string]: number | Array<number> }`\n\n- **Default:** `{}`\n\n- **Usage:**\n\n  ``` js\n  Vue.config.keyCodes = {\n    v: 86,\n    f1: 112,\n    // camelCase won`t work\n    mediaPlayPause: 179,\n    // instead you can use kebab-case with double quotation marks\n    \"media-play-pause\": 179,\n    up: [38, 87]\n  }\n  ```\n\n  ```html\n  <input type=\"text\" @keyup.media-play-pause=\"method\">\n  ```\n\n  Define custom key alias(es) for `v-on`.\n\n### performance\n\n> New in 2.2.0+\n\n- **Type:** `boolean`\n\n- **Default:** `false (from 2.2.3+)`\n\n- **Usage**:\n\n  Set this to `true` to enable component init, compile, render and patch performance tracing in the browser devtool performance/timeline panel. Only works in development mode and in browsers that support the [performance.mark](https://developer.mozilla.org/en-US/docs/Web/API/Performance/mark) API.\n\n### productionTip\n\n> New in 2.2.0+\n\n- **Type:** `boolean`\n\n- **Default:** `true`\n\n- **Usage**:\n\n  Set this to `false` to prevent the production tip on Vue startup.\n\n## Global API\n\n### Vue.extend( options )\n\n- **Arguments:**\n  - `{Object} options`\n\n- **Usage:**\n\n  Create a \"subclass\" of the base Vue constructor. The argument should be an object containing component options.\n\n  The special case to note here is the `data` option - it must be a function when used with `Vue.extend()`.\n\n  ``` html\n  <div id=\"mount-point\"></div>\n  ```\n\n  ``` js\n  // create constructor\n  var Profile = Vue.extend({\n    template: '<p>{{firstName}} {{lastName}} aka {{alias}}</p>',\n    data: function () {\n      return {\n        firstName: 'Walter',\n        lastName: 'White',\n        alias: 'Heisenberg'\n      }\n    }\n  })\n  // create an instance of Profile and mount it on an element\n  new Profile().$mount('#mount-point')\n  ```\n\n  Will result in:\n\n  ``` html\n  <p>Walter White aka Heisenberg</p>\n  ```\n\n- **See also:** [Components](../guide/components.html)\n\n### Vue.nextTick( [callback, context] )\n\n- **Arguments:**\n  - `{Function} [callback]`\n  - `{Object} [context]`\n\n- **Usage:**\n\n  Defer the callback to be executed after the next DOM update cycle. Use it immediately after you've changed some data to wait for the DOM update.\n\n  ``` js\n  // modify data\n  vm.msg = 'Hello'\n  // DOM not updated yet\n  Vue.nextTick(function () {\n    // DOM updated\n  })\n\n  // usage as a promise (2.1.0+, see note below)\n  Vue.nextTick()\n    .then(function () {\n      // DOM updated\n    })\n  ```\n\n  > New in 2.1.0+: returns a Promise if no callback is provided and Promise is supported in the execution environment. Please note that Vue does not come with a Promise polyfill, so if you target browsers that don't support Promises natively (looking at you, IE), you will have to provide a polyfill yourself.\n\n- **See also:** [Async Update Queue](../guide/reactivity.html#Async-Update-Queue)\n\n### Vue.set( target, key, value )\n\n- **Arguments:**\n  - `{Object | Array} target`\n  - `{string | number} key`\n  - `{any} value`\n\n- **Returns:** the set value.\n\n- **Usage:**\n\n  Adds a property to a reactive object, ensuring the new property is also reactive, so triggers view updates. This must be used to add new properties to reactive objects, as Vue cannot detect normal property additions (e.g. `this.myObject.newProperty = 'hi'`).\n\n  <p class=\"tip\">The target object cannot be a Vue instance, or the root data object of a Vue instance.</p>\n\n- **See also:** [Reactivity in Depth](../guide/reactivity.html)\n\n### Vue.delete( target, key )\n\n- **Arguments:**\n  - `{Object | Array} target`\n  - `{string | number} key/index`\n\n  > Only in 2.2.0+: Also works with Array + index.\n\n- **Usage:**\n\n  Delete a property on an object. If the object is reactive, ensure the deletion triggers view updates. This is primarily used to get around the limitation that Vue cannot detect property deletions, but you should rarely need to use it.\n\n  <p class=\"tip\">The target object cannot be a Vue instance, or the root data object of a Vue instance.</p>\n\n- **See also:** [Reactivity in Depth](../guide/reactivity.html)\n\n### Vue.directive( id, [definition] )\n\n- **Arguments:**\n  - `{string} id`\n  - `{Function | Object} [definition]`\n\n- **Usage:**\n\n  Register or retrieve a global directive.\n\n  ``` js\n  // register\n  Vue.directive('my-directive', {\n    bind: function () {},\n    inserted: function () {},\n    update: function () {},\n    componentUpdated: function () {},\n    unbind: function () {}\n  })\n\n  // register (function directive)\n  Vue.directive('my-directive', function () {\n    // this will be called as `bind` and `update`\n  })\n\n  // getter, return the directive definition if registered\n  var myDirective = Vue.directive('my-directive')\n  ```\n\n- **See also:** [Custom Directives](../guide/custom-directive.html)\n\n### Vue.filter( id, [definition] )\n\n- **Arguments:**\n  - `{string} id`\n  - `{Function} [definition]`\n\n- **Usage:**\n\n  Register or retrieve a global filter.\n\n  ``` js\n  // register\n  Vue.filter('my-filter', function (value) {\n    // return processed value\n  })\n\n  // getter, return the filter if registered\n  var myFilter = Vue.filter('my-filter')\n  ```\n\n- **See also:** [Filters](../guide/filters.html)\n\n### Vue.component( id, [definition] )\n\n- **Arguments:**\n  - `{string} id`\n  - `{Function | Object} [definition]`\n\n- **Usage:**\n\n  Register or retrieve a global component. Registration also automatically sets the component's `name` with the given `id`.\n\n  ``` js\n  // register an extended constructor\n  Vue.component('my-component', Vue.extend({ /* ... */ }))\n\n  // register an options object (automatically call Vue.extend)\n  Vue.component('my-component', { /* ... */ })\n\n  // retrieve a registered component (always return constructor)\n  var MyComponent = Vue.component('my-component')\n  ```\n\n- **See also:** [Components](../guide/components.html)\n\n### Vue.use( plugin )\n\n- **Arguments:**\n  - `{Object | Function} plugin`\n\n- **Usage:**\n\n  Install a Vue.js plugin. If the plugin is an Object, it must expose an `install` method. If it is a function itself, it will be treated as the install method. The install method will be called with Vue as the argument.\n\n  When this method is called on the same plugin multiple times, the plugin will be installed only once.\n\n- **See also:** [Plugins](../guide/plugins.html)\n\n### Vue.mixin( mixin )\n\n- **Arguments:**\n  - `{Object} mixin`\n\n- **Usage:**\n\n  Apply a mixin globally, which affects every Vue instance created afterwards. This can be used by plugin authors to inject custom behavior into components. **Not recommended in application code**.\n\n- **See also:** [Global Mixin](../guide/mixins.html#Global-Mixin)\n\n### Vue.compile( template )\n\n- **Arguments:**\n  - `{string} template`\n\n- **Usage:**\n\n  Compiles a template string into a render function. **Only available in the full build.**\n\n  ``` js\n  var res = Vue.compile('<div><span>{{ msg }}</span></div>')\n\n  new Vue({\n    data: {\n      msg: 'hello'\n    },\n    render: res.render,\n    staticRenderFns: res.staticRenderFns\n  })\n  ```\n\n- **See also:** [Render Functions](../guide/render-function.html)\n\n### Vue.version\n\n- **Details**: Provides the installed version of Vue as a string. This is especially useful for community plugins and components, where you might use different strategies for different versions.\n\n- **Usage**:\n\n  ```js\n  var version = Number(Vue.version.split('.')[0])\n\n  if (version === 2) {\n    // Vue v2.x.x\n  } else if (version === 1) {\n    // Vue v1.x.x\n  } else {\n    // Unsupported versions of Vue\n  }\n  ```\n\n## Options / Data\n\n### data\n\n- **Type:** `Object | Function`\n\n- **Restriction:** Only accepts `Function` when used in a component definition.\n\n- **Details:**\n\n  The data object for the Vue instance. Vue will recursively convert its properties into getter/setters to make it \"reactive\". **The object must be plain**: native objects such as browser API objects and prototype properties are ignored. A rule of thumb is that data should just be data - it is not recommended to observe objects with their own stateful behavior.\n\n  Once observed, you can no longer add reactive properties to the root data object. It is therefore recommended to declare all root-level reactive properties upfront, before creating the instance.\n\n  After the instance is created, the original data object can be accessed as `vm.$data`. The Vue instance also proxies all the properties found on the data object, so `vm.a` will be equivalent to `vm.$data.a`.\n\n  Properties that start with `_` or `$` will **not** be proxied on the Vue instance because they may conflict with Vue's internal properties and API methods. You will have to access them as `vm.$data._property`.\n\n  When defining a **component**, `data` must be declared as a function that returns the initial data object, because there will be many instances created using the same definition. If we use a plain object for `data`, that same object will be **shared by reference** across all instances created! By providing a `data` function, every time a new instance is created we can call it to return a fresh copy of the initial data.\n\n  If required, a deep clone of the original object can be obtained by passing `vm.$data` through `JSON.parse(JSON.stringify(...))`.\n\n- **Example:**\n\n  ``` js\n  var data = { a: 1 }\n\n  // direct instance creation\n  var vm = new Vue({\n    data: data\n  })\n  vm.a // => 1\n  vm.$data === data // => true\n\n  // must use function when in Vue.extend()\n  var Component = Vue.extend({\n    data: function () {\n      return { a: 1 }\n    }\n  })\n  ```\n\n  Note that if you use an arrow function with the `data` property, `this` won't be the component's instance, but you can still access the instance as the function's first argument:\n\n  ```js\n  data: vm => ({ a: vm.myProp })\n  ```\n\n- **See also:** [Reactivity in Depth](../guide/reactivity.html)\n\n### props\n\n- **Type:** `Array<string> | Object`\n\n- **Details:**\n\n  A list/hash of attributes that are exposed to accept data from the parent component. It has an Array-based simple syntax and an alternative Object-based syntax that allows advanced configurations such as type checking, custom validation and default values.\n\n- **Example:**\n\n  ``` js\n  // simple syntax\n  Vue.component('props-demo-simple', {\n    props: ['size', 'myMessage']\n  })\n\n  // object syntax with validation\n  Vue.component('props-demo-advanced', {\n    props: {\n      // type check\n      height: Number,\n      // type check plus other validations\n      age: {\n        type: Number,\n        default: 0,\n        required: true,\n        validator: function (value) {\n          return value >= 0\n        }\n      }\n    }\n  })\n  ```\n\n- **See also:** [Props](../guide/components.html#Props)\n\n### propsData\n\n- **Type:** `{ [key: string]: any }`\n\n- **Restriction:** only respected in instance creation via `new`.\n\n- **Details:**\n\n  Pass props to an instance during its creation. This is primarily intended to make unit testing easier.\n\n- **Example:**\n\n  ``` js\n  var Comp = Vue.extend({\n    props: ['msg'],\n    template: '<div>{{ msg }}</div>'\n  })\n\n  var vm = new Comp({\n    propsData: {\n      msg: 'hello'\n    }\n  })\n  ```\n\n### computed\n\n- **Type:** `{ [key: string]: Function | { get: Function, set: Function } }`\n\n- **Details:**\n\n  Computed properties to be mixed into the Vue instance. All getters and setters have their `this` context automatically bound to the Vue instance.\n\n  Note that if you use an arrow function with a computed property, `this` won't be the component's instance, but you can still access the instance as the function's first argument:\n\n  ```js\n  computed: {\n    aDouble: vm => vm.a * 2\n  }\n  ```\n\n  Computed properties are cached, and only re-computed on reactive dependency changes. Note that if a certain dependency is out of the instance's scope (i.e. not reactive), the computed property will __not__ be updated.\n\n- **Example:**\n\n  ```js\n  var vm = new Vue({\n    data: { a: 1 },\n    computed: {\n      // get only\n      aDouble: function () {\n        return this.a * 2\n      },\n      // both get and set\n      aPlus: {\n        get: function () {\n          return this.a + 1\n        },\n        set: function (v) {\n          this.a = v - 1\n        }\n      }\n    }\n  })\n  vm.aPlus   // => 2\n  vm.aPlus = 3\n  vm.a       // => 2\n  vm.aDouble // => 4\n  ```\n\n- **See also:** [Computed Properties](../guide/computed.html)\n\n### methods\n\n- **Type:** `{ [key: string]: Function }`\n\n- **Details:**\n\n  Methods to be mixed into the Vue instance. You can access these methods directly on the VM instance, or use them in directive expressions. All methods will have their `this` context automatically bound to the Vue instance.\n\n  <p class=\"tip\">Note that __you should not use an arrow function to define a method__ (e.g. `plus: () => this.a++`). The reason is arrow functions bind the parent context, so `this` will not be the Vue instance as you expect and `this.a` will be undefined.</p>\n\n- **Example:**\n\n  ```js\n  var vm = new Vue({\n    data: { a: 1 },\n    methods: {\n      plus: function () {\n        this.a++\n      }\n    }\n  })\n  vm.plus()\n  vm.a // 2\n  ```\n\n- **See also:** [Event Handling](../guide/events.html)\n\n### watch\n\n- **Type:** `{ [key: string]: string | Function | Object | Array}`\n\n- **Details:**\n\n  An object where keys are expressions to watch and values are the corresponding callbacks. The value can also be a string of a method name, or an Object that contains additional options. The Vue instance will call `$watch()` for each entry in the object at instantiation.\n\n- **Example:**\n\n  ``` js\n  var vm = new Vue({\n    data: {\n      a: 1,\n      b: 2,\n      c: 3,\n      d: 4,\n      e: {\n        f: {\n          g: 5\n        }\n      }\n    },\n    watch: {\n      a: function (val, oldVal) {\n        console.log('new: %s, old: %s', val, oldVal)\n      },\n      // string method name\n      b: 'someMethod',\n      // deep watcher\n      c: {\n        handler: function (val, oldVal) { /* ... */ },\n        deep: true\n      },\n      // the callback will be called immediately after the start of the observation\n      d: {\n        handler: function (val, oldVal) { /* ... */ },\n        immediate: true\n      },\n      e: [\n        function handle1 (val, oldVal) { /* ... */ },\n        function handle2 (val, oldVal) { /* ... */ }\n      ],\n      // watch vm.e.f's value: {g: 5}\n      'e.f': function (val, oldVal) { /* ... */ }\n    }\n  })\n  vm.a = 2 // => new: 2, old: 1\n  ```\n\n  <p class=\"tip\">Note that __you should not use an arrow function to define a watcher__ (e.g. `searchQuery: newValue => this.updateAutocomplete(newValue)`). The reason is arrow functions bind the parent context, so `this` will not be the Vue instance as you expect and `this.updateAutocomplete` will be undefined.</p>\n\n- **See also:** [Instance Methods / Data - vm.$watch](#vm-watch)\n\n## Options / DOM\n\n### el\n\n- **Type:** `string | HTMLElement`\n\n- **Restriction:** only respected in instance creation via `new`.\n\n- **Details:**\n\n  Provide the Vue instance an existing DOM element to mount on. It can be a CSS selector string or an actual HTMLElement.\n\n  After the instance is mounted, the resolved element will be accessible as `vm.$el`.\n\n  If this option is available at instantiation, the instance will immediately enter compilation; otherwise, the user will have to explicitly call `vm.$mount()` to manually start the compilation.\n\n  <p class=\"tip\">The provided element merely serves as a mounting point. Unlike in Vue 1.x, the mounted element will be replaced with Vue-generated DOM in all cases. It is therefore not recommended to mount the root instance to `<html>` or `<body>`.</p>\n\n  <p class=\"tip\">If neither `render` function nor `template` option is present, the in-DOM HTML of the mounting DOM element will be extracted as the template. In this case, Runtime + Compiler build of Vue should be used.</p>\n\n- **See also:**\n  - [Lifecycle Diagram](../guide/instance.html#Lifecycle-Diagram)\n  - [Runtime + Compiler vs. Runtime-only](../guide/installation.html#Runtime-Compiler-vs-Runtime-only)\n\n### template\n\n- **Type:** `string`\n\n- **Details:**\n\n  A string template to be used as the markup for the Vue instance. The template will **replace** the mounted element. Any existing markup inside the mounted element will be ignored, unless content distribution slots are present in the template.\n\n  If the string starts with `#` it will be used as a querySelector and use the selected element's innerHTML as the template string. This allows the use of the common `<script type=\"x-template\">` trick to include templates.\n\n  <p class=\"tip\">From a security perspective, you should only use Vue templates that you can trust. Never use user-generated content as your template.</p>\n\n  <p class=\"tip\">If render function is present in the Vue option, the template will be ignored.</p>\n\n- **See also:**\n  - [Lifecycle Diagram](../guide/instance.html#Lifecycle-Diagram)\n  - [Content Distribution with Slots](../guide/components.html#Content-Distribution-with-Slots)\n\n### render\n\n  - **Type:** `(createElement: () => VNode) => VNode`\n\n  - **Details:**\n\n    An alternative to string templates allowing you to leverage the full programmatic power of JavaScript. The render function receives a `createElement` method as it's first argument used to create `VNode`s.\n\n    If the component is a functional component, the render function also receives an extra argument `context`, which provides access to contextual data since functional components are instance-less.\n\n    <p class=\"tip\">The `render` function has priority over the render function compiled from `template` option or in-DOM HTML template of the mounting element which is specified by the `el` option.</p>\n\n  - **See also:** [Render Functions](../guide/render-function.html)\n\n### renderError\n\n> New in 2.2.0+\n\n  - **Type:** `(createElement: () => VNode, error: Error) => VNode`\n\n  - **Details:**\n\n    **Only works in development mode.**\n\n    Provide an alternative render output when the default `render` function encounters an error. The error will be passed to `renderError` as the second argument. This is particularly useful when used together with hot-reload.\n\n  - **Example:**\n\n    ``` js\n    new Vue({\n      render (h) {\n        throw new Error('oops')\n      },\n      renderError (h, err) {\n        return h('pre', { style: { color: 'red' }}, err.stack)\n      }\n    }).$mount('#app')\n    ```\n\n  - **See also:** [Render Functions](../guide/render-function.html)\n\n## Options / Lifecycle Hooks\n\n<p class=\"tip\">All lifecycle hooks automatically have their `this` context bound to the instance, so that you can access data, computed properties, and methods. This means __you should not use an arrow function to define a lifecycle method__ (e.g. `created: () => this.fetchTodos()`). The reason is arrow functions bind the parent context, so `this` will not be the Vue instance as you expect and `this.fetchTodos` will be undefined.</p>\n\n### beforeCreate\n\n- **Type:** `Function`\n\n- **Details:**\n\n  Called synchronously immediately after the instance has been initialized, before data observation and event/watcher setup.\n\n- **See also:** [Lifecycle Diagram](../guide/instance.html#Lifecycle-Diagram)\n\n### created\n\n- **Type:** `Function`\n\n- **Details:**\n\n  Called synchronously after the instance is created. At this stage, the instance has finished processing the options which means the following have been set up: data observation, computed properties, methods, watch/event callbacks. However, the mounting phase has not been started, and the `$el` property will not be available yet.\n\n- **See also:** [Lifecycle Diagram](../guide/instance.html#Lifecycle-Diagram)\n\n### beforeMount\n\n- **Type:** `Function`\n\n- **Details:**\n\n  Called right before the mounting begins: the `render` function is about to be called for the first time.\n\n  **This hook is not called during server-side rendering.**\n\n- **See also:** [Lifecycle Diagram](../guide/instance.html#Lifecycle-Diagram)\n\n### mounted\n\n- **Type:** `Function`\n\n- **Details:**\n\n  Called after the instance has been mounted, where `el` is replaced by the newly created `vm.$el`. If the root instance is mounted to an in-document element, `vm.$el` will also be in-document when `mounted` is called.\n\n  Note that `mounted` does **not** guarantee that all child components have also been mounted. If you want to wait until the entire view has been rendered, you can use [vm.$nextTick](#vm-nextTick) inside of `mounted`:\n\n  ``` js\n  mounted: function () {\n    this.$nextTick(function () {\n      // Code that will run only after the\n      // entire view has been rendered\n    })\n  }\n  ```\n\n  **This hook is not called during server-side rendering.**\n\n- **See also:** [Lifecycle Diagram](../guide/instance.html#Lifecycle-Diagram)\n\n### beforeUpdate\n\n- **Type:** `Function`\n\n- **Details:**\n\n  Called when data changes, before the DOM is patched. This is a good place to access the existing DOM before an update, e.g. to remove manually added event listeners.\n\n  **This hook is not called during server-side rendering, because only the initial render is performed server-side.**\n\n- **See also:** [Lifecycle Diagram](../guide/instance.html#Lifecycle-Diagram)\n\n### updated\n\n- **Type:** `Function`\n\n- **Details:**\n\n  Called after a data change causes the virtual DOM to be re-rendered and patched.\n\n  The component's DOM will have been updated when this hook is called, so you can perform DOM-dependent operations here. However, in most cases you should avoid changing state inside the hook. To react to state changes, it's usually better to use a [computed property](#computed) or [watcher](#watch) instead.\n\n  Note that `updated` does **not** guarantee that all child components have also been re-rendered. If you want to wait until the entire view has been re-rendered, you can use [vm.$nextTick](#vm-nextTick) inside of `updated`:\n\n  ``` js\n  updated: function () {\n    this.$nextTick(function () {\n      // Code that will run only after the\n      // entire view has been re-rendered\n    })\n  }\n  ```\n\n  **This hook is not called during server-side rendering.**\n\n- **See also:** [Lifecycle Diagram](../guide/instance.html#Lifecycle-Diagram)\n\n### activated\n\n- **Type:** `Function`\n\n- **Details:**\n\n  Called when a kept-alive component is activated.\n\n  **This hook is not called during server-side rendering.**\n\n- **See also:**\n  - [Built-in Components - keep-alive](#keep-alive)\n  - [Dynamic Components - keep-alive](../guide/components.html#keep-alive)\n\n### deactivated\n\n- **Type:** `Function`\n\n- **Details:**\n\n  Called when a kept-alive component is deactivated.\n\n  **This hook is not called during server-side rendering.**\n\n- **See also:**\n  - [Built-in Components - keep-alive](#keep-alive)\n  - [Dynamic Components - keep-alive](../guide/components.html#keep-alive)\n\n### beforeDestroy\n\n- **Type:** `Function`\n\n- **Details:**\n\n  Called right before a Vue instance is destroyed. At this stage the instance is still fully functional.\n\n  **This hook is not called during server-side rendering.**\n\n- **See also:** [Lifecycle Diagram](../guide/instance.html#Lifecycle-Diagram)\n\n### destroyed\n\n- **Type:** `Function`\n\n- **Details:**\n\n  Called after a Vue instance has been destroyed. When this hook is called, all directives of the Vue instance have been unbound, all event listeners have been removed, and all child Vue instances have also been destroyed.\n\n  **This hook is not called during server-side rendering.**\n\n- **See also:** [Lifecycle Diagram](../guide/instance.html#Lifecycle-Diagram)\n\n### errorCaptured\n\n> New in 2.5.0+\n\n- **Type:** `(err: Error, vm: Component, info: string) => ?boolean`\n\n- **Details:**\n\n  Called when an error from any descendent component is captured. The hook receives three arguments: the error, the component instance that triggered the error, and a string containing information on where the error was captured. The hook can return `false` to stop the error from propagating further.\n\n  <p class=\"tip\">You can modify component state in this hook. However, it is important to have conditionals in your template or render function that short circuits other content when an error has been captured; otherwise the component will be thrown into an infinite render loop.</p>\n\n  **Error Propagation Rules**\n\n  - By default, all errors are still sent to the global `config.errorHandler` if it is defined, so that these errors can still be reported to an analytics service in a single place.\n\n  - If multiple `errorCaptured` hooks exist on a component's inheritance chain or parent chain, all of them will be invoked on the same error.\n\n  - If the `errorCaptured` hook itself throws an error, both this error and the original captured error are sent to the global `config.errorHandler`.\n\n  - An `errorCaptured` hook can return `false` to prevent the error from propagating further. This is essentially saying \"this error has been handled and should be ignored.\" It will prevent any additional `errorCaptured` hooks or the global `config.errorHandler` from being invoked for this error.\n\n## Options / Assets\n\n### directives\n\n- **Type:** `Object`\n\n- **Details:**\n\n  A hash of directives to be made available to the Vue instance.\n\n- **See also:** [Custom Directives](../guide/custom-directive.html)\n\n### filters\n\n- **Type:** `Object`\n\n- **Details:**\n\n  A hash of filters to be made available to the Vue instance.\n\n- **See also:** [`Vue.filter`](#Vue-filter)\n\n### components\n\n- **Type:** `Object`\n\n- **Details:**\n\n  A hash of components to be made available to the Vue instance.\n\n- **See also:** [Components](../guide/components.html)\n\n## Options / Composition\n\n### parent\n\n- **Type:** `Vue instance`\n\n- **Details:**\n\n  Specify the parent instance for the instance to be created. Establishes a parent-child relationship between the two. The parent will be accessible as `this.$parent` for the child, and the child will be pushed into the parent's `$children` array.\n\n  <p class=\"tip\">Use `$parent` and `$children` sparingly - they mostly serve as an escape-hatch. Prefer using props and events for parent-child communication.</p>\n\n### mixins\n\n- **Type:** `Array<Object>`\n\n- **Details:**\n\n  The `mixins` option accepts an array of mixin objects. These mixin objects can contain instance options like normal instance objects, and they will be merged against the eventual options using the same option merging logic in `Vue.extend()`. e.g. If your mixin contains a created hook and the component itself also has one, both functions will be called.\n\n  Mixin hooks are called in the order they are provided, and called before the component's own hooks.\n\n- **Example:**\n\n  ``` js\n  var mixin = {\n    created: function () { console.log(1) }\n  }\n  var vm = new Vue({\n    created: function () { console.log(2) },\n    mixins: [mixin]\n  })\n  // => 1\n  // => 2\n  ```\n\n- **See also:** [Mixins](../guide/mixins.html)\n\n### extends\n\n- **Type:** `Object | Function`\n\n- **Details:**\n\n  Allows declaratively extending another component (could be either a plain options object or a constructor) without having to use `Vue.extend`. This is primarily intended to make it easier to extend between single file components.\n\n  This is similar to `mixins`.\n\n- **Example:**\n\n  ``` js\n  var CompA = { ... }\n\n  // extend CompA without having to call `Vue.extend` on either\n  var CompB = {\n    extends: CompA,\n    ...\n  }\n  ```\n\n### provide / inject\n\n> New in 2.2.0+\n\n- **Type:**\n  - **provide:** `Object | () => Object`\n  - **inject:** `Array<string> | { [key: string]: string | Symbol | Object }`\n\n- **Details:**\n\n  <p class=\"tip\">`provide` and `inject` are primarily provided for advanced plugin / component library use cases. It is NOT recommended to use them in generic application code.</p>\n\n  This pair of options are used together to allow an ancestor component to serve as a dependency injector for all its descendants, regardless of how deep the component hierarchy is, as long as they are in the same parent chain. If you are familiar with React, this is very similar to React's context feature.\n\n  The `provide` option should be an object or a function that returns an object. This object contains the properties that are available for injection into its descendants. You can use ES2015 Symbols as keys in this object, but only in environments that natively support `Symbol` and `Reflect.ownKeys`.\n\n  The `inject` option should be either:\n  - an array of strings, or\n  - an object where the keys are the local binding name and the value is either:\n    - the key (string or Symbol) to search for in available injections, or\n    - an object where:\n      - the `from` property is the key (string or Symbol) to search for in available injections, and\n      - the `default` property is used as fallback value\n\n  > Note: the `provide` and `inject` bindings are NOT reactive. This is intentional. However, if you pass down an observed object, properties on that object do remain reactive.\n\n- **Example:**\n\n  ``` js\n  // parent component providing 'foo'\n  var Provider = {\n    provide: {\n      foo: 'bar'\n    },\n    // ...\n  }\n\n  // child component injecting 'foo'\n  var Child = {\n    inject: ['foo'],\n    created () {\n      console.log(this.foo) // => \"bar\"\n    }\n    // ...\n  }\n  ```\n\n  With ES2015 Symbols, function `provide` and object `inject`:\n  ``` js\n  const s = Symbol()\n\n  const Provider = {\n    provide () {\n      return {\n        [s]: 'foo'\n      }\n    }\n  }\n\n  const Child = {\n    inject: { s },\n    // ...\n  }\n  ```\n\n  > The next 2 examples work with Vue 2.2.1+. Below that version, injected values were resolved after the `props` and the `data` initialization.\n\n  Using an injected value as the default for a prop:\n  ```js\n  const Child = {\n    inject: ['foo'],\n    props: {\n      bar: {\n        default () {\n          return this.foo\n        }\n      }\n    }\n  }\n  ```\n\n  Using an injected value as data entry:\n  ```js\n  const Child = {\n    inject: ['foo'],\n    data () {\n      return {\n        bar: this.foo\n      }\n    }\n  }\n  ```\n\n  > In 2.5.0+ injections can be optional with default value:\n\n  ``` js\n  const Child = {\n    inject: {\n      foo: { default: 'foo' }\n    }\n  }\n  ```\n\n  If it needs to be injected from a property with a different name, use `from` to denote the source property:\n\n  ``` js\n  const Child = {\n    inject: {\n      foo: {\n        from: 'bar',\n        default: 'foo'\n      }\n    }\n  }\n  ```\n\n  Similar to prop defaults, you need to use a factory function for non primitive values:\n\n  ``` js\n  const Child = {\n    inject: {\n      foo: {\n        from: 'bar',\n        default: () => [1, 2, 3]\n      }\n    }\n  }\n  ```\n\n## Options / Misc\n\n### name\n\n- **Type:** `string`\n\n- **Restriction:** only respected when used as a component option.\n\n- **Details:**\n\n  Allow the component to recursively invoke itself in its template. Note that when a component is registered globally with `Vue.component()`, the global ID is automatically set as its name.\n\n  Another benefit of specifying a `name` option is debugging. Named components result in more helpful warning messages. Also, when inspecting an app in the [vue-devtools](https://github.com/vuejs/vue-devtools), unnamed components will show up as `<AnonymousComponent>`, which isn't very informative. By providing the `name` option, you will get a much more informative component tree.\n\n### delimiters\n\n- **Type:** `Array<string>`\n\n- **Default:** `{% raw %}[\"{{\", \"}}\"]{% endraw %}`\n\n- **Restrictions:** This option is only available in the full build, with in-browser compilation.\n\n- **Details:**\n\n  Change the plain text interpolation delimiters.\n\n- **Example:**\n\n  ``` js\n  new Vue({\n    delimiters: ['${', '}']\n  })\n\n  // Delimiters changed to ES6 template string style\n  ```\n\n### functional\n\n- **Type:** `boolean`\n\n- **Details:**\n\n  Causes a component to be stateless (no `data`) and instanceless (no `this` context). They are only a `render` function that returns virtual nodes making them much cheaper to render.\n\n- **See also:** [Functional Components](../guide/render-function.html#Functional-Components)\n\n### model\n\n> New in 2.2.0\n\n- **Type:** `{ prop?: string, event?: string }`\n\n- **Details:**\n\n  Allows a custom component to customize the prop and event used when it's used with `v-model`. By default, `v-model` on a component uses `value` as the prop and `input` as the event, but some input types such as checkboxes and radio buttons may want to use the `value` prop for a different purpose. Using the `model` option can avoid the conflict in such cases.\n\n- **Example:**\n\n  ``` js\n  Vue.component('my-checkbox', {\n    model: {\n      prop: 'checked',\n      event: 'change'\n    },\n    props: {\n      // this allows using the `value` prop for a different purpose\n      value: String,\n      // use `checked` as the prop which take the place of `value`\n      checked: {\n        type: Number,\n        default: 0\n      }\n    },\n    // ...\n  })\n  ```\n\n  ``` html\n  <my-checkbox v-model=\"foo\" value=\"some value\"></my-checkbox>\n  ```\n\n  The above will be equivalent to:\n\n  ``` html\n  <my-checkbox\n    :checked=\"foo\"\n    @change=\"val => { foo = val }\"\n    value=\"some value\">\n  </my-checkbox>\n  ```\n\n### inheritAttrs\n\n> New in 2.4.0+\n\n- **Type:** `boolean`\n\n- **Default:** `true`\n\n- **Details:**\n\n  By default, parent scope attribute bindings that are not recognized as props will \"fallthrough\" and be applied to the root element of the child component as normal HTML attributes. When authoring a component that wraps a target element or another component, this may not always be the desired behavior. By setting `inheritAttrs` to `false`, this default behavior can be disabled. The attributes are available via the `$attrs` instance property (also new in 2.4) and can be explicitly bound to a non-root element using `v-bind`.\n\n  Note: this option does **not** affect `class` and `style` bindings.\n\n### comments\n\n> New in 2.4.0+\n\n- **Type:** `boolean`\n\n- **Default:** `false`\n\n- **Restrictions:** This option is only available in the full build, with in-browser compilation.\n\n- **Details:**\n\n  When set to `true`, will preserve and render HTML comments found in templates. The default behavior is discarding them.\n\n## Instance Properties\n\n### vm.$data\n\n- **Type:** `Object`\n\n- **Details:**\n\n  The data object that the Vue instance is observing. The Vue instance proxies access to the properties on its data object.\n\n- **See also:** [Options / Data - data](#data)\n\n### vm.$props\n\n> New in 2.2.0+\n\n- **Type:** `Object`\n\n- **Details:**\n\n  An object representing the current props a component has received. The Vue instance proxies access to the properties on its props object.\n\n### vm.$el\n\n- **Type:** `HTMLElement`\n\n- **Read only**\n\n- **Details:**\n\n  The root DOM element that the Vue instance is managing.\n\n### vm.$options\n\n- **Type:** `Object`\n\n- **Read only**\n\n- **Details:**\n\n  The instantiation options used for the current Vue instance. This is useful when you want to include custom properties in the options:\n\n  ``` js\n  new Vue({\n    customOption: 'foo',\n    created: function () {\n      console.log(this.$options.customOption) // => 'foo'\n    }\n  })\n  ```\n\n### vm.$parent\n\n- **Type:** `Vue instance`\n\n- **Read only**\n\n- **Details:**\n\n  The parent instance, if the current instance has one.\n\n### vm.$root\n\n- **Type:** `Vue instance`\n\n- **Read only**\n\n- **Details:**\n\n  The root Vue instance of the current component tree. If the current instance has no parents this value will be itself.\n\n### vm.$children\n\n- **Type:** `Array<Vue instance>`\n\n- **Read only**\n\n- **Details:**\n\n  The direct child components of the current instance. **Note there's no order guarantee for `$children`, and it is not reactive.** If you find yourself trying to use `$children` for data binding, consider using an Array and `v-for` to generate child components, and use the Array as the source of truth.\n\n### vm.$slots\n\n- **Type:** `{ [name: string]: ?Array<VNode> }`\n\n- **Read only**\n\n- **Details:**\n\n  Used to programmatically access content [distributed by slots](../guide/components.html#Content-Distribution-with-Slots). Each [named slot](../guide/components.html#Named-Slots) has its own corresponding property (e.g. the contents of `slot=\"foo\"` will be found at `vm.$slots.foo`). The `default` property contains any nodes not included in a named slot.\n\n  Accessing `vm.$slots` is most useful when writing a component with a [render function](../guide/render-function.html).\n\n- **Example:**\n\n  ```html\n  <blog-post>\n    <h1 slot=\"header\">\n      About Me\n    </h1>\n\n    <p>Here's some page content, which will be included in vm.$slots.default, because it's not inside a named slot.</p>\n\n    <p slot=\"footer\">\n      Copyright 2016 Evan You\n    </p>\n\n    <p>If I have some content down here, it will also be included in vm.$slots.default.</p>.\n  </blog-post>\n  ```\n\n  ```js\n  Vue.component('blog-post', {\n    render: function (createElement) {\n      var header = this.$slots.header\n      var body   = this.$slots.default\n      var footer = this.$slots.footer\n      return createElement('div', [\n        createElement('header', header),\n        createElement('main', body),\n        createElement('footer', footer)\n      ])\n    }\n  })\n  ```\n\n- **See also:**\n  - [`<slot>` Component](#slot-1)\n  - [Content Distribution with Slots](../guide/components.html#Content-Distribution-with-Slots)\n  - [Render Functions - Slots](../guide/render-function.html#Slots)\n\n### vm.$scopedSlots\n\n> New in 2.1.0+\n\n- **Type:** `{ [name: string]: props => VNode | Array<VNode> }`\n\n- **Read only**\n\n- **Details:**\n\n  Used to programmatically access [scoped slots](../guide/components.html#Scoped-Slots). For each slot, including the `default` one, the object contains a corresponding function that returns VNodes.\n\n  Accessing `vm.$scopedSlots` is most useful when writing a component with a [render function](../guide/render-function.html).\n\n- **See also:**\n  - [`<slot>` Component](#slot-1)\n  - [Scoped Slots](../guide/components.html#Scoped-Slots)\n  - [Render Functions - Slots](../guide/render-function.html#Slots)\n\n### vm.$refs\n\n- **Type:** `Object`\n\n- **Read only**\n\n- **Details:**\n\n  An object of DOM elements and component instances, registered with [`ref` attributes](#ref).\n\n- **See also:**\n  - [Child Component Refs](../guide/components.html#Child-Component-Refs)\n  - [Special Attributes - ref](#ref)\n\n### vm.$isServer\n\n- **Type:** `boolean`\n\n- **Read only**\n\n- **Details:**\n\n  Whether the current Vue instance is running on the server.\n\n- **See also:** [Server-Side Rendering](../guide/ssr.html)\n\n### vm.$attrs\n\n- **Type:** `{ [key: string]: string }`\n\n- **Read only**\n\n- **Details:**\n\n  Contains parent-scope attribute bindings (except for `class` and `style`) that are not recognized (and extracted) as props. When a component doesn't have any declared props, this essentially contains all parent-scope bindings (except for `class` and `style`), and can be passed down to an inner component via `v-bind=\"$attrs\"` - useful when creating higher-order components.\n\n### vm.$listeners\n\n- **Type:** `{ [key: string]: Function | Array<Function> }`\n\n- **Read only**\n\n- **Details:**\n\n  Contains parent-scope `v-on` event listeners (without `.native` modifiers). This can be passed down to an inner component via `v-on=\"$listeners\"` - useful when creating transparent wrapper components.\n\n## Instance Methods / Data\n\n### vm.$watch( expOrFn, callback, [options] )\n\n- **Arguments:**\n  - `{string | Function} expOrFn`\n  - `{Function | Object} callback`\n  - `{Object} [options]`\n    - `{boolean} deep`\n    - `{boolean} immediate`\n\n- **Returns:** `{Function} unwatch`\n\n- **Usage:**\n\n  Watch an expression or a computed function on the Vue instance for changes. The callback gets called with the new value and the old value. The expression only accepts dot-delimited paths. For more complex expressions, use a function instead.\n\n<p class=\"tip\">Note: when mutating (rather than replacing) an Object or an Array, the old value will be the same as new value because they reference the same Object/Array. Vue doesn't keep a copy of the pre-mutate value.</p>\n\n- **Example:**\n\n  ``` js\n  // keypath\n  vm.$watch('a.b.c', function (newVal, oldVal) {\n    // do something\n  })\n\n  // function\n  vm.$watch(\n    function () {\n      return this.a + this.b\n    },\n    function (newVal, oldVal) {\n      // do something\n    }\n  )\n  ```\n\n  `vm.$watch` returns an unwatch function that stops firing the callback:\n\n  ``` js\n  var unwatch = vm.$watch('a', cb)\n  // later, teardown the watcher\n  unwatch()\n  ```\n\n- **Option: deep**\n\n  To also detect nested value changes inside Objects, you need to pass in `deep: true` in the options argument. Note that you don't need to do so to listen for Array mutations.\n\n  ``` js\n  vm.$watch('someObject', callback, {\n    deep: true\n  })\n  vm.someObject.nestedValue = 123\n  // callback is fired\n  ```\n\n- **Option: immediate**\n\n  Passing in `immediate: true` in the option will trigger the callback immediately with the current value of the expression:\n\n  ``` js\n  vm.$watch('a', callback, {\n    immediate: true\n  })\n  // `callback` is fired immediately with current value of `a`\n  ```\n\n### vm.$set( target, key, value )\n\n- **Arguments:**\n  - `{Object | Array} target`\n  - `{string | number} key`\n  - `{any} value`\n\n- **Returns:** the set value.\n\n- **Usage:**\n\n  This is the **alias** of the global `Vue.set`.\n\n- **See also:** [Vue.set](#Vue-set)\n\n### vm.$delete( target, key )\n\n- **Arguments:**\n  - `{Object | Array} target`\n  - `{string | number} key`\n\n- **Usage:**\n\n  This is the **alias** of the global `Vue.delete`.\n\n- **See also:** [Vue.delete](#Vue-delete)\n\n## Instance Methods / Events\n\n### vm.$on( event, callback )\n\n- **Arguments:**\n  - `{string | Array<string>} event` (array only supported in 2.2.0+)\n  - `{Function} callback`\n\n- **Usage:**\n\n  Listen for a custom event on the current vm. Events can be triggered by `vm.$emit`. The callback will receive all the additional arguments passed into these event-triggering methods.\n\n- **Example:**\n\n  ``` js\n  vm.$on('test', function (msg) {\n    console.log(msg)\n  })\n  vm.$emit('test', 'hi')\n  // => \"hi\"\n  ```\n\n### vm.$once( event, callback )\n\n- **Arguments:**\n  - `{string} event`\n  - `{Function} callback`\n\n- **Usage:**\n\n  Listen for a custom event, but only once. The listener will be removed once it triggers for the first time.\n\n### vm.$off( [event, callback] )\n\n- **Arguments:**\n  - `{string | Array<string>} event` (array only supported in 2.2.2+)\n  - `{Function} [callback]`\n\n- **Usage:**\n\n  Remove custom event listener(s).\n\n  - If no arguments are provided, remove all event listeners;\n\n  - If only the event is provided, remove all listeners for that event;\n\n  - If both event and callback are given, remove the listener for that specific callback only.\n\n### vm.$emit( eventName, [...args] )\n\n- **Arguments:**\n  - `{string} eventName`\n  - `[...args]`\n\n  Trigger an event on the current instance. Any additional arguments will be passed into the listener's callback function.\n\n- **Examples:**\n\n  Using `$emit` with only an event name:\n\n  ```js\n  Vue.component('welcome-button', {\n    template: `\n      <button v-on:click=\"$emit('welcome')\">\n        Click me to be welcomed\n      </button>\n    `\n  })\n  ```\n  ```html\n  <div id=\"emit-example-simple\">\n    <welcome-button v-on:welcome=\"sayHi\"></welcome-button>\n  </div>\n  ```\n  ```js\n  new Vue({\n    el: '#emit-example-simple',\n    methods: {\n      sayHi: function () {\n        alert('Hi!')\n      }\n    }\n  })\n  ```\n  {% raw %}\n  <div id=\"emit-example-simple\" class=\"demo\">\n    <welcome-button v-on:welcome=\"sayHi\"></welcome-button>\n  </div>\n  <script>\n    Vue.component('welcome-button', {\n      template: `\n        <button v-on:click=\"$emit('welcome')\">\n          Click me to be welcomed\n        </button>\n      `\n    })\n    new Vue({\n      el: '#emit-example-simple',\n      methods: {\n        sayHi: function () {\n          alert('Hi!')\n        }\n      }\n    })\n  </script>\n  {% endraw %}\n\n  Using `$emit` with additional arguments:\n\n  ```js\n  Vue.component('magic-eight-ball', {\n    data: function () {\n      return {\n        possibleAdvice: ['Yes', 'No', 'Maybe']\n      }\n    },\n    methods: {\n      giveAdvice: function () {\n        var randomAdviceIndex = Math.floor(Math.random() * this.possibleAdvice.length)\n        this.$emit('give-advice', this.possibleAdvice[randomAdviceIndex])\n      }\n    },\n    template: `\n      <button v-on:click=\"giveAdvice\">\n        Click me for advice\n      </button>\n    `\n  })\n  ```\n\n  ```html\n  <div id=\"emit-example-argument\">\n    <magic-eight-ball v-on:give-advice=\"showAdvice\"></magic-eight-ball>\n  </div>\n  ```\n\n  ```js\n  new Vue({\n    el: '#emit-example-argument',\n    methods: {\n      showAdvice: function (advice) {\n        alert(advice)\n      }\n    }\n  })\n  ```\n\n  {% raw %}\n  <div id=\"emit-example-argument\" class=\"demo\">\n    <magic-eight-ball v-on:give-advice=\"showAdvice\"></magic-eight-ball>\n  </div>\n  <script>\n    Vue.component('magic-eight-ball', {\n      data: function () {\n        return {\n          possibleAdvice: ['Yes', 'No', 'Maybe']\n        }\n      },\n      methods: {\n        giveAdvice: function () {\n          var randomAdviceIndex = Math.floor(Math.random() * this.possibleAdvice.length)\n          this.$emit('give-advice', this.possibleAdvice[randomAdviceIndex])\n        }\n      },\n      template: `\n        <button v-on:click=\"giveAdvice\">\n          Click me for advice\n        </button>\n      `\n    })\n    new Vue({\n      el: '#emit-example-argument',\n      methods: {\n        showAdvice: function (advice) {\n          alert(advice)\n        }\n      }\n    })\n  </script>\n  {% endraw %}\n\n## Instance Methods / Lifecycle\n\n### vm.$mount( [elementOrSelector] )\n\n- **Arguments:**\n  - `{Element | string} [elementOrSelector]`\n  - `{boolean} [hydrating]`\n\n- **Returns:** `vm` - the instance itself\n\n- **Usage:**\n\n  If a Vue instance didn't receive the `el` option at instantiation, it will be in \"unmounted\" state, without an associated DOM element. `vm.$mount()` can be used to manually start the mounting of an unmounted Vue instance.\n\n  If `elementOrSelector` argument is not provided, the template will be rendered as an off-document element, and you will have to use native DOM API to insert it into the document yourself.\n\n  The method returns the instance itself so you can chain other instance methods after it.\n\n- **Example:**\n\n  ``` js\n  var MyComponent = Vue.extend({\n    template: '<div>Hello!</div>'\n  })\n\n  // create and mount to #app (will replace #app)\n  new MyComponent().$mount('#app')\n\n  // the above is the same as:\n  new MyComponent({ el: '#app' })\n\n  // or, render off-document and append afterwards:\n  var component = new MyComponent().$mount()\n  document.getElementById('app').appendChild(component.$el)\n  ```\n\n- **See also:**\n  - [Lifecycle Diagram](../guide/instance.html#Lifecycle-Diagram)\n  - [Server-Side Rendering](../guide/ssr.html)\n\n### vm.$forceUpdate()\n\n- **Usage:**\n\n  Force the Vue instance to re-render. Note it does not affect all child components, only the instance itself and child components with inserted slot content.\n\n### vm.$nextTick( [callback] )\n\n- **Arguments:**\n  - `{Function} [callback]`\n\n- **Usage:**\n\n  Defer the callback to be executed after the next DOM update cycle. Use it immediately after you've changed some data to wait for the DOM update. This is the same as the global `Vue.nextTick`, except that the callback's `this` context is automatically bound to the instance calling this method.\n\n  > New in 2.1.0+: returns a Promise if no callback is provided and Promise is supported in the execution environment. Please note that Vue does not come with a Promise polyfill, so if you target browsers that don't support Promises natively (looking at you, IE), you will have to provide a polyfill yourself.\n\n- **Example:**\n\n  ``` js\n  new Vue({\n    // ...\n    methods: {\n      // ...\n      example: function () {\n        // modify data\n        this.message = 'changed'\n        // DOM is not updated yet\n        this.$nextTick(function () {\n          // DOM is now updated\n          // `this` is bound to the current instance\n          this.doSomethingElse()\n        })\n      }\n    }\n  })\n  ```\n\n- **See also:**\n  - [Vue.nextTick](#Vue-nextTick)\n  - [Async Update Queue](../guide/reactivity.html#Async-Update-Queue)\n\n### vm.$destroy()\n\n- **Usage:**\n\n  Completely destroy a vm. Clean up its connections with other existing vms, unbind all its directives, turn off all event listeners.\n\n  Triggers the `beforeDestroy` and `destroyed` hooks.\n\n  <p class=\"tip\">In normal use cases you shouldn't have to call this method yourself. Prefer controlling the lifecycle of child components in a data-driven fashion using `v-if` and `v-for`.</p>\n\n- **See also:** [Lifecycle Diagram](../guide/instance.html#Lifecycle-Diagram)\n\n## Directives\n\n### v-text\n\n- **Expects:** `string`\n\n- **Details:**\n\n  Updates the element's `textContent`. If you need to update the part of `textContent`, you should use `{% raw %}{{ Mustache }}{% endraw %}` interpolations.\n\n- **Example:**\n\n  ```html\n  <span v-text=\"msg\"></span>\n  <!-- same as -->\n  <span>{{msg}}</span>\n  ```\n\n- **See also:** [Data Binding Syntax - Interpolations](../guide/syntax.html#Text)\n\n### v-html\n\n- **Expects:** `string`\n\n- **Details:**\n\n  Updates the element's `innerHTML`. **Note that the contents are inserted as plain HTML - they will not be compiled as Vue templates**. If you find yourself trying to compose templates using `v-html`, try to rethink the solution by using components instead.\n\n  <p class=\"tip\">Dynamically rendering arbitrary HTML on your website can be very dangerous because it can easily lead to [XSS attacks](https://en.wikipedia.org/wiki/Cross-site_scripting). Only use `v-html` on trusted content and **never** on user-provided content.</p>\n\n  <p class=\"tip\">In [single-file components](../guide/single-file-components.html), `scoped` styles will not apply to content inside `v-html`, because that HTML is not processed by Vue's template compiler. If you want to target `v-html` content with scoped CSS, you can instead use [CSS modules](https://vue-loader.vuejs.org/en/features/css-modules.html) or an additional, global `<style>` element with a manual scoping strategy such as BEM.</p>\n\n- **Example:**\n\n  ```html\n  <div v-html=\"html\"></div>\n  ```\n\n- **See also:** [Data Binding Syntax - Interpolations](../guide/syntax.html#Raw-HTML)\n\n### v-show\n\n- **Expects:** `any`\n\n- **Usage:**\n\n  Toggles the element's `display` CSS property based on the truthy-ness of the expression value.\n\n  This directive triggers transitions when its condition changes.\n\n- **See also:** [Conditional Rendering - v-show](../guide/conditional.html#v-show)\n\n### v-if\n\n- **Expects:** `any`\n\n- **Usage:**\n\n  Conditionally render the element based on the truthy-ness of the expression value. The element and its contained directives / components are destroyed and re-constructed during toggles. If the element is a `<template>` element, its content will be extracted as the conditional block.\n\n  This directive triggers transitions when its condition changes.\n\n  <p class=\"tip\">When used together with v-if, v-for has a higher priority than v-if. See the <a href=\"../guide/list.html#v-for-with-v-if\">list rendering guide</a> for details.</p>\n\n- **See also:** [Conditional Rendering - v-if](../guide/conditional.html)\n\n### v-else\n\n- **Does not expect expression**\n\n- **Restriction:** previous sibling element must have `v-if` or `v-else-if`.\n\n- **Usage:**\n\n  Denote the \"else block\" for `v-if` or a `v-if`/`v-else-if` chain.\n\n  ```html\n  <div v-if=\"Math.random() > 0.5\">\n    Now you see me\n  </div>\n  <div v-else>\n    Now you don't\n  </div>\n  ```\n\n- **See also:** [Conditional Rendering - v-else](../guide/conditional.html#v-else)\n\n### v-else-if\n\n> New in 2.1.0+\n\n- **Expects:** `any`\n\n- **Restriction:** previous sibling element must have `v-if` or `v-else-if`.\n\n- **Usage:**\n\n  Denote the \"else if block\" for `v-if`. Can be chained.\n\n  ```html\n  <div v-if=\"type === 'A'\">\n    A\n  </div>\n  <div v-else-if=\"type === 'B'\">\n    B\n  </div>\n  <div v-else-if=\"type === 'C'\">\n    C\n  </div>\n  <div v-else>\n    Not A/B/C\n  </div>\n  ```\n\n- **See also:** [Conditional Rendering - v-else-if](../guide/conditional.html#v-else-if)\n\n### v-for\n\n- **Expects:** `Array | Object | number | string`\n\n- **Usage:**\n\n  Render the element or template block multiple times based on the source data. The directive's value must use the special syntax `alias in expression` to provide an alias for the current element being iterated on:\n\n  ``` html\n  <div v-for=\"item in items\">\n    {{ item.text }}\n  </div>\n  ```\n\n  Alternatively, you can also specify an alias for the index (or the key if used on an Object):\n\n  ``` html\n  <div v-for=\"(item, index) in items\"></div>\n  <div v-for=\"(val, key) in object\"></div>\n  <div v-for=\"(val, key, index) in object\"></div>\n  ```\n\n  The default behavior of `v-for` will try to patch the elements in-place without moving them. To force it to reorder elements, you need to provide an ordering hint with the `key` special attribute:\n\n  ``` html\n  <div v-for=\"item in items\" :key=\"item.id\">\n    {{ item.text }}\n  </div>\n  ```\n\n  <p class=\"tip\">When used together with v-if, v-for has a higher priority than v-if. See the <a href=\"../guide/list.html#v-for-with-v-if\">list rendering guide</a> for details.</p>\n\n  The detailed usage for `v-for` is explained in the guide section linked below.\n\n- **See also:**\n  - [List Rendering](../guide/list.html)\n  - [key](../guide/list.html#key)\n\n### v-on\n\n- **Shorthand:** `@`\n\n- **Expects:** `Function | Inline Statement | Object`\n\n- **Argument:** `event`\n\n- **Modifiers:**\n  - `.stop` - call `event.stopPropagation()`.\n  - `.prevent` - call `event.preventDefault()`.\n  - `.capture` - add event listener in capture mode.\n  - `.self` - only trigger handler if event was dispatched from this element.\n  - `.{keyCode | keyAlias}` - only trigger handler on certain keys.\n  - `.native` - listen for a native event on the root element of component.\n  - `.once` - trigger handler at most once.\n  - `.left` - (2.2.0+) only trigger handler for left button mouse events.\n  - `.right` - (2.2.0+) only trigger handler for right button mouse events.\n  - `.middle` - (2.2.0+) only trigger handler for middle button mouse events.\n  - `.passive` - (2.3.0+) attaches a DOM event with `{ passive: true }`.\n\n- **Usage:**\n\n  Attaches an event listener to the element. The event type is denoted by the argument. The expression can be a method name, an inline statement, or omitted if there are modifiers present.\n\n  When used on a normal element, it listens to [**native DOM events**](https://developer.mozilla.org/en-US/docs/Web/Events) only. When used on a custom element component, it listens to **custom events** emitted on that child component.\n\n  When listening to native DOM events, the method receives the native event as the only argument. If using inline statement, the statement has access to the special `$event` property: `v-on:click=\"handle('ok', $event)\"`.\n\n  Starting in 2.4.0+, `v-on` also supports binding to an object of event/listener pairs without an argument. Note when using the object syntax, it does not support any modifiers.\n\n- **Example:**\n\n  ```html\n  <!-- method handler -->\n  <button v-on:click=\"doThis\"></button>\n\n  <!-- inline statement -->\n  <button v-on:click=\"doThat('hello', $event)\"></button>\n\n  <!-- shorthand -->\n  <button @click=\"doThis\"></button>\n\n  <!-- stop propagation -->\n  <button @click.stop=\"doThis\"></button>\n\n  <!-- prevent default -->\n  <button @click.prevent=\"doThis\"></button>\n\n  <!-- prevent default without expression -->\n  <form @submit.prevent></form>\n\n  <!-- chain modifiers -->\n  <button @click.stop.prevent=\"doThis\"></button>\n\n  <!-- key modifier using keyAlias -->\n  <input @keyup.enter=\"onEnter\">\n\n  <!-- key modifier using keyCode -->\n  <input @keyup.13=\"onEnter\">\n\n  <!-- the click event will be triggered at most once -->\n  <button v-on:click.once=\"doThis\"></button>\n\n  <!-- object syntax (2.4.0+) -->\n  <button v-on=\"{ mousedown: doThis, mouseup: doThat }\"></button>\n  ```\n\n  Listening to custom events on a child component (the handler is called when \"my-event\" is emitted on the child):\n\n  ```html\n  <my-component @my-event=\"handleThis\"></my-component>\n\n  <!-- inline statement -->\n  <my-component @my-event=\"handleThis(123, $event)\"></my-component>\n\n  <!-- native event on component -->\n  <my-component @click.native=\"onClick\"></my-component>\n  ```\n\n- **See also:**\n  - [Event Handling](../guide/events.html)\n  - [Components - Custom Events](../guide/components.html#Custom-Events)\n\n### v-bind\n\n- **Shorthand:** `:`\n\n- **Expects:** `any (with argument) | Object (without argument)`\n\n- **Argument:** `attrOrProp (optional)`\n\n- **Modifiers:**\n  - `.prop` - Bind as a DOM property instead of an attribute ([what's the difference?](https://stackoverflow.com/questions/6003819/properties-and-attributes-in-html#answer-6004028)). If the tag is a component then `.prop` will set the property on the component's `$el`.\n  - `.camel` - (2.1.0+) transform the kebab-case attribute name into camelCase.\n  - `.sync` - (2.3.0+) a syntax sugar that expands into a `v-on` handler for updating the bound value.\n\n- **Usage:**\n\n  Dynamically bind one or more attributes, or a component prop to an expression.\n\n  When used to bind the `class` or `style` attribute, it supports additional value types such as Array or Objects. See linked guide section below for more details.\n\n  When used for prop binding, the prop must be properly declared in the child component.\n\n  When used without an argument, can be used to bind an object containing attribute name-value pairs. Note in this mode `class` and `style` does not support Array or Objects.\n\n- **Example:**\n\n  ```html\n  <!-- bind an attribute -->\n  <img v-bind:src=\"imageSrc\">\n\n  <!-- shorthand -->\n  <img :src=\"imageSrc\">\n\n  <!-- with inline string concatenation -->\n  <img :src=\"'/path/to/images/' + fileName\">\n\n  <!-- class binding -->\n  <div :class=\"{ red: isRed }\"></div>\n  <div :class=\"[classA, classB]\"></div>\n  <div :class=\"[classA, { classB: isB, classC: isC }]\">\n\n  <!-- style binding -->\n  <div :style=\"{ fontSize: size + 'px' }\"></div>\n  <div :style=\"[styleObjectA, styleObjectB]\"></div>\n\n  <!-- binding an object of attributes -->\n  <div v-bind=\"{ id: someProp, 'other-attr': otherProp }\"></div>\n\n  <!-- DOM attribute binding with prop modifier -->\n  <div v-bind:text-content.prop=\"text\"></div>\n\n  <!-- prop binding. \"prop\" must be declared in my-component. -->\n  <my-component :prop=\"someThing\"></my-component>\n\n  <!-- pass down parent props in common with a child component -->\n  <child-component v-bind=\"$props\"></child-component>\n\n  <!-- XLink -->\n  <svg><a :xlink:special=\"foo\"></a></svg>\n  ```\n\n  The `.camel` modifier allows camelizing a `v-bind` attribute name when using in-DOM templates, e.g. the SVG `viewBox` attribute:\n\n  ``` html\n  <svg :view-box.camel=\"viewBox\"></svg>\n  ```\n\n  `.camel` is not needed if you are using string templates, or compiling with `vue-loader`/`vueify`.\n\n- **See also:**\n  - [Class and Style Bindings](../guide/class-and-style.html)\n  - [Components - Props](../guide/components.html#Props)\n  - [Components - `.sync` Modifier](../guide/components.html#sync-Modifier)\n\n### v-model\n\n- **Expects:** varies based on value of form inputs element or output of components\n\n- **Limited to:**\n  - `<input>`\n  - `<select>`\n  - `<textarea>`\n  - components\n\n- **Modifiers:**\n  - [`.lazy`](../guide/forms.html#lazy) - listen to `change` events instead of `input`\n  - [`.number`](../guide/forms.html#number) - cast input string to numbers\n  - [`.trim`](../guide/forms.html#trim) - trim input\n\n- **Usage:**\n\n  Create a two-way binding on a form input element or a component. For detailed usage and other notes, see the Guide section linked below.\n\n- **See also:**\n  - [Form Input Bindings](../guide/forms.html)\n  - [Components - Form Input Components using Custom Events](../guide/components.html#Form-Input-Components-using-Custom-Events)\n\n### v-pre\n\n- **Does not expect expression**\n\n- **Usage:**\n\n  Skip compilation for this element and all its children. You can use this for displaying raw mustache tags. Skipping large numbers of nodes with no directives on them can also speed up compilation.\n\n- **Example:**\n\n  ```html\n  <span v-pre>{{ this will not be compiled }}</span>\n   ```\n\n### v-cloak\n\n- **Does not expect expression**\n\n- **Usage:**\n\n  This directive will remain on the element until the associated Vue instance finishes compilation. Combined with CSS rules such as `[v-cloak] { display: none }`, this directive can be used to hide un-compiled mustache bindings until the Vue instance is ready.\n\n- **Example:**\n\n  ```css\n  [v-cloak] {\n    display: none;\n  }\n  ```\n\n  ```html\n  <div v-cloak>\n    {{ message }}\n  </div>\n  ```\n\n  The `<div>` will not be visible until the compilation is done.\n\n### v-once\n\n- **Does not expect expression**\n\n- **Details:**\n\n  Render the element and component **once** only. On subsequent re-renders, the element/component and all its children will be treated as static content and skipped. This can be used to optimize update performance.\n\n  ```html\n  <!-- single element -->\n  <span v-once>This will never change: {{msg}}</span>\n  <!-- the element have children -->\n  <div v-once>\n    <h1>comment</h1>\n    <p>{{msg}}</p>\n  </div>\n  <!-- component -->\n  <my-component v-once :comment=\"msg\"></my-component>\n  <!-- `v-for` directive -->\n  <ul>\n    <li v-for=\"i in list\" v-once>{{i}}</li>\n  </ul>\n  ```\n\n- **See also:**\n  - [Data Binding Syntax - interpolations](../guide/syntax.html#Text)\n  - [Components - Cheap Static Components with `v-once`](../guide/components.html#Cheap-Static-Components-with-v-once)\n\n## Special Attributes\n\n### key\n\n- **Expects:** `number | string`\n\n  The `key` special attribute is primarily used as a hint for Vue's virtual DOM algorithm to identify VNodes when diffing the new list of nodes against the old list. Without keys, Vue uses an algorithm that minimizes element movement and tries to patch/reuse elements of the same type in-place as much as possible. With keys, it will reorder elements based on the order change of keys, and elements with keys that are no longer present will always be removed/destroyed.\n\n  Children of the same common parent must have **unique keys**. Duplicate keys will cause render errors.\n\n  The most common use case is combined with `v-for`:\n\n  ``` html\n  <ul>\n    <li v-for=\"item in items\" :key=\"item.id\">...</li>\n  </ul>\n  ```\n\n  It can also be used to force replacement of an element/component instead of reusing it. This can be useful when you want to:\n\n  - Properly trigger lifecycle hooks of a component\n  - Trigger transitions\n\n  For example:\n\n  ``` html\n  <transition>\n    <span :key=\"text\">{{ text }}</span>\n  </transition>\n  ```\n\n  When `text` changes, the `<span>` will always be replaced instead of patched, so a transition will be triggered.\n\n### ref\n\n- **Expects:** `string`\n\n  `ref` is used to register a reference to an element or a child component. The reference will be registered under the parent component's `$refs` object. If used on a plain DOM element, the reference will be that element; if used on a child component, the reference will be component instance:\n\n  ``` html\n  <!-- vm.$refs.p will be the DOM node -->\n  <p ref=\"p\">hello</p>\n\n  <!-- vm.$refs.child will be the child component instance -->\n  <child-component ref=\"child\"></child-component>\n  ```\n\n  When used on elements/components with `v-for`, the registered reference will be an Array containing DOM nodes or component instances.\n\n  An important note about the ref registration timing: because the refs themselves are created as a result of the render function, you cannot access them on the initial render - they don't exist yet! `$refs` is also non-reactive, therefore you should not attempt to use it in templates for data-binding.\n\n- **See also:** [Child Component Refs](../guide/components.html#Child-Component-Refs)\n\n### slot\n\n- **Expects:** `string`\n\n  Used on content inserted into child components to indicate which named slot the content belongs to.\n\n  For detailed usage, see the guide section linked below.\n\n- **See also:** [Named Slots](../guide/components.html#Named-Slots)\n\n### slot-scope\n\n> New in 2.5.0+\n\n- **Expects:** `function argument expression`\n\n- **Usage:**\n\n  Used to denote an element or component as a scoped slot. The attribute's value should be a valid JavaScript expression that can appear in the argument position of a function signature. This means in supported environments you can also use ES2015 destructuring in the expression. Serves as a replacement for [`scope`](#scope-replaced) in 2.5.0+.\n\n  This attribute does not support dynamic binding.\n\n- **See also:** [Scoped Slots](../guide/components.html#Scoped-Slots)\n\n### scope <sup>replaced</sup>\n\nUsed to denote a `<template>` element as a scoped slot, which is replaced by [`slot-scope`](#slot-scope) in 2.5.0+.\n\n- **Usage:**\n\n  Same as [`slot-scope`](#slot-scope) except that `scope` can only be used on `<template>` elements.\n\n### is\n\n- **Expects:** `string | Object (component’s options object)`\n\n  Used for [dynamic components](../guide/components.html#Dynamic-Components) and to work around [limitations of in-DOM templates](../guide/components.html#DOM-Template-Parsing-Caveats).\n\n  For example:\n\n  ``` html\n  <!-- component changes when currentView changes -->\n  <component v-bind:is=\"currentView\"></component>\n\n  <!-- necessary because `<my-row>` would be invalid inside -->\n  <!-- a `<table>` element and so would be hoisted out      -->\n  <table>\n    <tr is=\"my-row\"></tr>\n  </table>\n  ```\n\n  For detailed usage, follow the links in the description above.\n\n- **See also:**\n  - [Dynamic Components](../guide/components.html#Dynamic-Components)\n  - [DOM Template Parsing Caveats](../guide/components.html#DOM-Template-Parsing-Caveats)\n\n## Built-In Components\n\n### component\n\n- **Props:**\n  - `is` - string | ComponentDefinition | ComponentConstructor\n  - `inline-template` - boolean\n\n- **Usage:**\n\n  A \"meta component\" for rendering dynamic components. The actual component to render is determined by the `is` prop:\n\n  ```html\n  <!-- a dynamic component controlled by -->\n  <!-- the `componentId` property on the vm -->\n  <component :is=\"componentId\"></component>\n\n  <!-- can also render registered component or component passed as prop -->\n  <component :is=\"$options.components.child\"></component>\n  ```\n\n- **See also:** [Dynamic Components](../guide/components.html#Dynamic-Components)\n\n### transition\n\n- **Props:**\n  - `name` - string, Used to automatically generate transition CSS class names. e.g. `name: 'fade'` will auto expand to `.fade-enter`, `.fade-enter-active`, etc. Defaults to `\"v\"`.\n  - `appear` - boolean, Whether to apply transition on initial render. Defaults to `false`.\n  - `css` - boolean, Whether to apply CSS transition classes. Defaults to `true`. If set to `false`, will only trigger JavaScript hooks registered via component events.\n  - `type` - string, Specify the type of transition events to wait for to determine transition end timing. Available values are `\"transition\"` and `\"animation\"`. By default, it will automatically detect the type that has a longer duration.\n  - `mode` - string, Controls the timing sequence of leaving/entering transitions. Available modes are `\"out-in\"` and `\"in-out\"`; defaults to simultaneous.\n  - `enter-class` - string\n  - `leave-class` - string\n  - `appear-class` - string\n  - `enter-to-class` - string\n  - `leave-to-class` - string\n  - `appear-to-class` - string\n  - `enter-active-class` - string\n  - `leave-active-class` - string\n  - `appear-active-class` - string\n\n- **Events:**\n  - `before-enter`\n  - `before-leave`\n  - `before-appear`\n  - `enter`\n  - `leave`\n  - `appear`\n  - `after-enter`\n  - `after-leave`\n  - `after-appear`\n  - `enter-cancelled`\n  - `leave-cancelled` (`v-show` only)\n  - `appear-cancelled`\n\n- **Usage:**\n\n  `<transition>` serve as transition effects for **single** element/component. The `<transition>` only applies the transition behavior to the wrapped content inside; it doesn't render an extra DOM element, or show up in the inspected component hierarchy.\n\n  ```html\n  <!-- simple element -->\n  <transition>\n    <div v-if=\"ok\">toggled content</div>\n  </transition>\n\n  <!-- dynamic component -->\n  <transition name=\"fade\" mode=\"out-in\" appear>\n    <component :is=\"view\"></component>\n  </transition>\n\n  <!-- event hooking -->\n  <div id=\"transition-demo\">\n    <transition @after-enter=\"transitionComplete\">\n      <div v-show=\"ok\">toggled content</div>\n    </transition>\n  </div>\n  ```\n\n  ``` js\n  new Vue({\n    ...\n    methods: {\n      transitionComplete: function (el) {\n        // for passed 'el' that DOM element as the argument, something ...\n      }\n    }\n    ...\n  }).$mount('#transition-demo')\n  ```\n\n- **See also:** [Transitions: Entering, Leaving, and Lists](../guide/transitions.html)\n\n### transition-group\n\n- **Props:**\n  - `tag` - string, defaults to `span`.\n  - `move-class` - overwrite CSS class applied during moving transition.\n  - exposes the same props as `<transition>` except `mode`.\n\n- **Events:**\n  - exposes the same events as `<transition>`.\n\n- **Usage:**\n\n  `<transition-group>` serve as transition effects for **multiple** elements/components. The `<transition-group>` renders a real DOM element. By default it renders a `<span>`, and you can configure what element is should render via the `tag` attribute.\n\n  Note every child in a `<transition-group>` must be **uniquely keyed** for the animations to work properly.\n\n  `<transition-group>` supports moving transitions via CSS transform. When a child's position on screen has changed after an updated, it will get applied a moving CSS class (auto generated from the `name` attribute or configured with the `move-class` attribute). If the CSS `transform` property is \"transition-able\" when the moving class is applied, the element will be smoothly animated to its destination using the [FLIP technique](https://aerotwist.com/blog/flip-your-animations/).\n\n  ```html\n  <transition-group tag=\"ul\" name=\"slide\">\n    <li v-for=\"item in items\" :key=\"item.id\">\n      {{ item.text }}\n    </li>\n  </transition-group>\n  ```\n\n- **See also:** [Transitions: Entering, Leaving, and Lists](../guide/transitions.html)\n\n### keep-alive\n\n- **Props:**\n  - `include` - string or RegExp or Array. Only components matched by this will be cached.\n  - `exclude` - string or RegExp or Array. Any component matched by this will not be cached.\n\n- **Usage:**\n\n  When wrapped around a dynamic component, `<keep-alive>` caches the inactive component instances without destroying them. Similar to `<transition>`, `<keep-alive>` is an abstract component: it doesn't render a DOM element itself, and doesn't show up in the component parent chain.\n\n  When a component is toggled inside `<keep-alive>`, its `activated` and `deactivated` lifecycle hooks will be invoked accordingly.\n\n  > In 2.2.0+ and above, `activated` and `deactivated` will fire for all nested components inside a `<keep-alive>` tree.\n\n  Primarily used with preserve component state or avoid re-rendering.\n\n  ```html\n  <!-- basic -->\n  <keep-alive>\n    <component :is=\"view\"></component>\n  </keep-alive>\n\n  <!-- multiple conditional children -->\n  <keep-alive>\n    <comp-a v-if=\"a > 1\"></comp-a>\n    <comp-b v-else></comp-b>\n  </keep-alive>\n\n  <!-- used together with `<transition>` -->\n  <transition>\n    <keep-alive>\n      <component :is=\"view\"></component>\n    </keep-alive>\n  </transition>\n  ```\n\n  Note, `<keep-alive>` is designed for the case where it has one direct child component that is being toggled. It does not work if you have `v-for` inside it. When there are multiple conditional children, as above, `<keep-alive>` requires that only one child is rendered at a time.\n\n- **`include` and `exclude`**\n\n  > New in 2.1.0+\n\n  The `include` and `exclude` props allow components to be conditionally cached. Both props can be a comma-delimited string, a RegExp or an Array:\n\n  ``` html\n  <!-- comma-delimited string -->\n  <keep-alive include=\"a,b\">\n    <component :is=\"view\"></component>\n  </keep-alive>\n\n  <!-- regex (use `v-bind`) -->\n  <keep-alive :include=\"/a|b/\">\n    <component :is=\"view\"></component>\n  </keep-alive>\n\n  <!-- Array (use `v-bind`) -->\n  <keep-alive :include=\"['a', 'b']\">\n    <component :is=\"view\"></component>\n  </keep-alive>\n  ```\n\n  The match is first checked on the component's own `name` option, then its local registration name (the key in the parent's `components` option) if the `name` option is not available. Anonymous components cannot be matched against.\n\n  <p class=\"tip\">`<keep-alive>` does not work with functional components because they do not have instances to be cached.</p>\n\n- **See also:** [Dynamic Components - keep-alive](../guide/components.html#keep-alive)\n\n### slot\n\n- **Props:**\n  - `name` - string, Used for named slot.\n\n- **Usage:**\n\n  `<slot>` serve as content distribution outlets in component templates. `<slot>` itself will be replaced.\n\n  For detailed usage, see the guide section linked below.\n\n- **See also:** [Content Distribution with Slots](../guide/components.html#Content-Distribution-with-Slots)\n\n## VNode Interface\n\n- Please refer to the [VNode class declaration](https://github.com/vuejs/vue/blob/dev/src/core/vdom/vnode.js).\n\n## Server-Side Rendering\n\n- Please refer to the [vue-server-renderer package documentation](https://github.com/vuejs/vue/tree/dev/packages/vue-server-renderer).\n","date":"2018-07-19T04:04:16.854Z","updated":"2018-07-19T04:04:16.854Z","path":"v2/api/index.html","comments":1,"layout":"page","_id":"cjk0zidp20018vkrtdkmrixey","content":"<h2 id=\"Global-Config\"><a href=\"#Global-Config\" class=\"headerlink\" title=\"Global Config\"></a>Global Config</h2><p><code>Vue.config</code> is an object containing Vue’s global configurations. You can modify its properties listed below before bootstrapping your application:</p>\n<h3 id=\"silent\"><a href=\"#silent\" class=\"headerlink\" title=\"silent\"></a>silent</h3><ul>\n<li><p><strong>Type:</strong> <code>boolean</code></p>\n</li>\n<li><p><strong>Default:</strong> <code>false</code></p>\n</li>\n<li><p><strong>Usage:</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">Vue.config.silent = <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<p>Suppress all Vue logs and warnings.</p>\n</li>\n</ul>\n<h3 id=\"optionMergeStrategies\"><a href=\"#optionMergeStrategies\" class=\"headerlink\" title=\"optionMergeStrategies\"></a>optionMergeStrategies</h3><ul>\n<li><p><strong>Type:</strong> <code>{ [key: string]: Function }</code></p>\n</li>\n<li><p><strong>Default:</strong> <code>{}</code></p>\n</li>\n<li><p><strong>Usage:</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">Vue.config.optionMergeStrategies._my_option = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">parent, child, vm</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> child + <span class=\"number\">1</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> Profile = Vue.extend(&#123;</span><br><span class=\"line\">  _my_option: <span class=\"number\">1</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Profile.options._my_option = 2</span></span><br></pre></td></tr></table></figure>\n<p>Define custom merging strategies for options.</p>\n<p>The merge strategy receives the value of that option defined on the parent and child instances as the first and second arguments, respectively. The context Vue instance is passed as the third argument.</p>\n</li>\n<li><p><strong>See also:</strong> <a href=\"../guide/mixins.html#Custom-Option-Merge-Strategies\">Custom Option Merging Strategies</a></p>\n</li>\n</ul>\n<h3 id=\"devtools\"><a href=\"#devtools\" class=\"headerlink\" title=\"devtools\"></a>devtools</h3><ul>\n<li><p><strong>Type:</strong> <code>boolean</code></p>\n</li>\n<li><p><strong>Default:</strong> <code>true</code> (<code>false</code> in production builds)</p>\n</li>\n<li><p><strong>Usage:</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// make sure to set this synchronously immediately after loading Vue</span></span><br><span class=\"line\">Vue.config.devtools = <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<p>Configure whether to allow <a href=\"https://github.com/vuejs/vue-devtools\" target=\"_blank\" rel=\"noopener\">vue-devtools</a> inspection. This option’s default value is <code>true</code> in development builds and <code>false</code> in production builds. You can set it to <code>true</code> to enable inspection for production builds.</p>\n</li>\n</ul>\n<h3 id=\"errorHandler\"><a href=\"#errorHandler\" class=\"headerlink\" title=\"errorHandler\"></a>errorHandler</h3><ul>\n<li><p><strong>Type:</strong> <code>Function</code></p>\n</li>\n<li><p><strong>Default:</strong> <code>undefined</code></p>\n</li>\n<li><p><strong>Usage:</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">Vue.config.errorHandler = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, vm, info</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// handle error</span></span><br><span class=\"line\">  <span class=\"comment\">// `info` is a Vue-specific error info, e.g. which lifecycle hook</span></span><br><span class=\"line\">  <span class=\"comment\">// the error was found in. Only available in 2.2.0+</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Assign a handler for uncaught errors during component render function and watchers. The handler gets called with the error and the Vue instance.</p>\n<blockquote>\n<p>In 2.2.0+, this hook also captures errors in component lifecycle hooks. Also, when this hook is <code>undefined</code>, captured errors will be logged with <code>console.error</code> instead of crashing the app.</p>\n</blockquote>\n<blockquote>\n<p>In 2.4.0+ this hook also captures errors thrown inside Vue custom event handlers.</p>\n</blockquote>\n<blockquote>\n<p>Error tracking services <a href=\"https://sentry.io/for/vue/\" target=\"_blank\" rel=\"noopener\">Sentry</a> and <a href=\"https://docs.bugsnag.com/platforms/browsers/vue/\" target=\"_blank\" rel=\"noopener\">Bugsnag</a> provide official integrations using this option.</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"warnHandler\"><a href=\"#warnHandler\" class=\"headerlink\" title=\"warnHandler\"></a>warnHandler</h3><blockquote>\n<p>New in 2.4.0+</p>\n</blockquote>\n<ul>\n<li><p><strong>Type:</strong> <code>Function</code></p>\n</li>\n<li><p><strong>Default:</strong> <code>undefined</code></p>\n</li>\n<li><p><strong>Usage:</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">Vue.config.warnHandler = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">msg, vm, trace</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// `trace` is the component hierarchy trace</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Assign a custom handler for runtime Vue warnings. Note this only works during development and is ignored in production.</p>\n</li>\n</ul>\n<h3 id=\"ignoredElements\"><a href=\"#ignoredElements\" class=\"headerlink\" title=\"ignoredElements\"></a>ignoredElements</h3><ul>\n<li><p><strong>Type:</strong> <code>Array&lt;string | RegExp&gt;</code></p>\n</li>\n<li><p><strong>Default:</strong> <code>[]</code></p>\n</li>\n<li><p><strong>Usage:</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">Vue.config.ignoredElements = [</span><br><span class=\"line\">  <span class=\"string\">'my-custom-web-component'</span>,</span><br><span class=\"line\">  <span class=\"string\">'another-web-component'</span>,</span><br><span class=\"line\">  <span class=\"comment\">// Use a `RegExp` to ignore all elements that start with \"ion-\"</span></span><br><span class=\"line\">  <span class=\"comment\">// 2.5+ only</span></span><br><span class=\"line\">  /^ion-<span class=\"regexp\">/</span></span><br><span class=\"line\"><span class=\"regexp\">]</span></span><br></pre></td></tr></table></figure>\n<p>Make Vue ignore custom elements defined outside of Vue (e.g., using the Web Components APIs). Otherwise, it will throw a warning about an <code>Unknown custom element</code>, assuming that you forgot to register a global component or misspelled a component name.</p>\n</li>\n</ul>\n<h3 id=\"keyCodes\"><a href=\"#keyCodes\" class=\"headerlink\" title=\"keyCodes\"></a>keyCodes</h3><ul>\n<li><p><strong>Type:</strong> <code>{ [key: string]: number | Array&lt;number&gt; }</code></p>\n</li>\n<li><p><strong>Default:</strong> <code>{}</code></p>\n</li>\n<li><p><strong>Usage:</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">Vue.config.keyCodes = &#123;</span><br><span class=\"line\">  v: <span class=\"number\">86</span>,</span><br><span class=\"line\">  f1: <span class=\"number\">112</span>,</span><br><span class=\"line\">  <span class=\"comment\">// camelCase won`t work</span></span><br><span class=\"line\">  mediaPlayPause: <span class=\"number\">179</span>,</span><br><span class=\"line\">  <span class=\"comment\">// instead you can use kebab-case with double quotation marks</span></span><br><span class=\"line\">  <span class=\"string\">\"media-play-pause\"</span>: <span class=\"number\">179</span>,</span><br><span class=\"line\">  up: [<span class=\"number\">38</span>, <span class=\"number\">87</span>]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> @<span class=\"attr\">keyup.media-play-pause</span>=<span class=\"string\">\"method\"</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>Define custom key alias(es) for <code>v-on</code>.</p>\n</li>\n</ul>\n<h3 id=\"performance\"><a href=\"#performance\" class=\"headerlink\" title=\"performance\"></a>performance</h3><blockquote>\n<p>New in 2.2.0+</p>\n</blockquote>\n<ul>\n<li><p><strong>Type:</strong> <code>boolean</code></p>\n</li>\n<li><p><strong>Default:</strong> <code>false (from 2.2.3+)</code></p>\n</li>\n<li><p><strong>Usage</strong>:</p>\n<p>Set this to <code>true</code> to enable component init, compile, render and patch performance tracing in the browser devtool performance/timeline panel. Only works in development mode and in browsers that support the <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Performance/mark\" target=\"_blank\" rel=\"noopener\">performance.mark</a> API.</p>\n</li>\n</ul>\n<h3 id=\"productionTip\"><a href=\"#productionTip\" class=\"headerlink\" title=\"productionTip\"></a>productionTip</h3><blockquote>\n<p>New in 2.2.0+</p>\n</blockquote>\n<ul>\n<li><p><strong>Type:</strong> <code>boolean</code></p>\n</li>\n<li><p><strong>Default:</strong> <code>true</code></p>\n</li>\n<li><p><strong>Usage</strong>:</p>\n<p>Set this to <code>false</code> to prevent the production tip on Vue startup.</p>\n</li>\n</ul>\n<h2 id=\"Global-API\"><a href=\"#Global-API\" class=\"headerlink\" title=\"Global API\"></a>Global API</h2><h3 id=\"Vue-extend-options\"><a href=\"#Vue-extend-options\" class=\"headerlink\" title=\"Vue.extend( options )\"></a>Vue.extend( options )</h3><ul>\n<li><p><strong>Arguments:</strong></p>\n<ul>\n<li><code>{Object} options</code></li>\n</ul>\n</li>\n<li><p><strong>Usage:</strong></p>\n<p>Create a “subclass” of the base Vue constructor. The argument should be an object containing component options.</p>\n<p>The special case to note here is the <code>data</code> option - it must be a function when used with <code>Vue.extend()</code>.</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"mount-point\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// create constructor</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> Profile = Vue.extend(&#123;</span><br><span class=\"line\">  template: <span class=\"string\">'&lt;p&gt;&#123;&#123;firstName&#125;&#125; &#123;&#123;lastName&#125;&#125; aka &#123;&#123;alias&#125;&#125;&lt;/p&gt;'</span>,</span><br><span class=\"line\">  data: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      firstName: <span class=\"string\">'Walter'</span>,</span><br><span class=\"line\">      lastName: <span class=\"string\">'White'</span>,</span><br><span class=\"line\">      alias: <span class=\"string\">'Heisenberg'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// create an instance of Profile and mount it on an element</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> Profile().$mount(<span class=\"string\">'#mount-point'</span>)</span><br></pre></td></tr></table></figure>\n<p>Will result in:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Walter White aka Heisenberg<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>See also:</strong> <a href=\"../guide/components.html\">Components</a></p>\n</li>\n</ul>\n<h3 id=\"Vue-nextTick-callback-context\"><a href=\"#Vue-nextTick-callback-context\" class=\"headerlink\" title=\"Vue.nextTick( [callback, context] )\"></a>Vue.nextTick( [callback, context] )</h3><ul>\n<li><p><strong>Arguments:</strong></p>\n<ul>\n<li><code>{Function} [callback]</code></li>\n<li><code>{Object} [context]</code></li>\n</ul>\n</li>\n<li><p><strong>Usage:</strong></p>\n<p>Defer the callback to be executed after the next DOM update cycle. Use it immediately after you’ve changed some data to wait for the DOM update.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// modify data</span></span><br><span class=\"line\">vm.msg = <span class=\"string\">'Hello'</span></span><br><span class=\"line\"><span class=\"comment\">// DOM not updated yet</span></span><br><span class=\"line\">Vue.nextTick(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// DOM updated</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// usage as a promise (2.1.0+, see note below)</span></span><br><span class=\"line\">Vue.nextTick()</span><br><span class=\"line\">  .then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// DOM updated</span></span><br><span class=\"line\">  &#125;)</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>New in 2.1.0+: returns a Promise if no callback is provided and Promise is supported in the execution environment. Please note that Vue does not come with a Promise polyfill, so if you target browsers that don’t support Promises natively (looking at you, IE), you will have to provide a polyfill yourself.</p>\n</blockquote>\n</li>\n<li><p><strong>See also:</strong> <a href=\"../guide/reactivity.html#Async-Update-Queue\">Async Update Queue</a></p>\n</li>\n</ul>\n<h3 id=\"Vue-set-target-key-value\"><a href=\"#Vue-set-target-key-value\" class=\"headerlink\" title=\"Vue.set( target, key, value )\"></a>Vue.set( target, key, value )</h3><ul>\n<li><p><strong>Arguments:</strong></p>\n<ul>\n<li><code>{Object | Array} target</code></li>\n<li><code>{string | number} key</code></li>\n<li><code>{any} value</code></li>\n</ul>\n</li>\n<li><p><strong>Returns:</strong> the set value.</p>\n</li>\n<li><p><strong>Usage:</strong></p>\n<p>Adds a property to a reactive object, ensuring the new property is also reactive, so triggers view updates. This must be used to add new properties to reactive objects, as Vue cannot detect normal property additions (e.g. <code>this.myObject.newProperty = &#39;hi&#39;</code>).</p>\n<p class=\"tip\">The target object cannot be a Vue instance, or the root data object of a Vue instance.</p>\n</li>\n<li><p><strong>See also:</strong> <a href=\"../guide/reactivity.html\">Reactivity in Depth</a></p>\n</li>\n</ul>\n<h3 id=\"Vue-delete-target-key\"><a href=\"#Vue-delete-target-key\" class=\"headerlink\" title=\"Vue.delete( target, key )\"></a>Vue.delete( target, key )</h3><ul>\n<li><p><strong>Arguments:</strong></p>\n<ul>\n<li><code>{Object | Array} target</code></li>\n<li><code>{string | number} key/index</code></li>\n</ul>\n<blockquote>\n<p>Only in 2.2.0+: Also works with Array + index.</p>\n</blockquote>\n</li>\n<li><p><strong>Usage:</strong></p>\n<p>Delete a property on an object. If the object is reactive, ensure the deletion triggers view updates. This is primarily used to get around the limitation that Vue cannot detect property deletions, but you should rarely need to use it.</p>\n<p class=\"tip\">The target object cannot be a Vue instance, or the root data object of a Vue instance.</p>\n</li>\n<li><p><strong>See also:</strong> <a href=\"../guide/reactivity.html\">Reactivity in Depth</a></p>\n</li>\n</ul>\n<h3 id=\"Vue-directive-id-definition\"><a href=\"#Vue-directive-id-definition\" class=\"headerlink\" title=\"Vue.directive( id, [definition] )\"></a>Vue.directive( id, [definition] )</h3><ul>\n<li><p><strong>Arguments:</strong></p>\n<ul>\n<li><code>{string} id</code></li>\n<li><code>{Function | Object} [definition]</code></li>\n</ul>\n</li>\n<li><p><strong>Usage:</strong></p>\n<p>Register or retrieve a global directive.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// register</span></span><br><span class=\"line\">Vue.directive(<span class=\"string\">'my-directive'</span>, &#123;</span><br><span class=\"line\">  bind: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;&#125;,</span><br><span class=\"line\">  inserted: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;&#125;,</span><br><span class=\"line\">  update: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;&#125;,</span><br><span class=\"line\">  componentUpdated: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;&#125;,</span><br><span class=\"line\">  unbind: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// register (function directive)</span></span><br><span class=\"line\">Vue.directive(<span class=\"string\">'my-directive'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// this will be called as `bind` and `update`</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// getter, return the directive definition if registered</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> myDirective = Vue.directive(<span class=\"string\">'my-directive'</span>)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>See also:</strong> <a href=\"../guide/custom-directive.html\">Custom Directives</a></p>\n</li>\n</ul>\n<h3 id=\"Vue-filter-id-definition\"><a href=\"#Vue-filter-id-definition\" class=\"headerlink\" title=\"Vue.filter( id, [definition] )\"></a>Vue.filter( id, [definition] )</h3><ul>\n<li><p><strong>Arguments:</strong></p>\n<ul>\n<li><code>{string} id</code></li>\n<li><code>{Function} [definition]</code></li>\n</ul>\n</li>\n<li><p><strong>Usage:</strong></p>\n<p>Register or retrieve a global filter.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// register</span></span><br><span class=\"line\">Vue.filter(<span class=\"string\">'my-filter'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// return processed value</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// getter, return the filter if registered</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> myFilter = Vue.filter(<span class=\"string\">'my-filter'</span>)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>See also:</strong> <a href=\"../guide/filters.html\">Filters</a></p>\n</li>\n</ul>\n<h3 id=\"Vue-component-id-definition\"><a href=\"#Vue-component-id-definition\" class=\"headerlink\" title=\"Vue.component( id, [definition] )\"></a>Vue.component( id, [definition] )</h3><ul>\n<li><p><strong>Arguments:</strong></p>\n<ul>\n<li><code>{string} id</code></li>\n<li><code>{Function | Object} [definition]</code></li>\n</ul>\n</li>\n<li><p><strong>Usage:</strong></p>\n<p>Register or retrieve a global component. Registration also automatically sets the component’s <code>name</code> with the given <code>id</code>.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// register an extended constructor</span></span><br><span class=\"line\">Vue.component(<span class=\"string\">'my-component'</span>, Vue.extend(&#123; <span class=\"comment\">/* ... */</span> &#125;))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// register an options object (automatically call Vue.extend)</span></span><br><span class=\"line\">Vue.component(<span class=\"string\">'my-component'</span>, &#123; <span class=\"comment\">/* ... */</span> &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// retrieve a registered component (always return constructor)</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> MyComponent = Vue.component(<span class=\"string\">'my-component'</span>)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>See also:</strong> <a href=\"../guide/components.html\">Components</a></p>\n</li>\n</ul>\n<h3 id=\"Vue-use-plugin\"><a href=\"#Vue-use-plugin\" class=\"headerlink\" title=\"Vue.use( plugin )\"></a>Vue.use( plugin )</h3><ul>\n<li><p><strong>Arguments:</strong></p>\n<ul>\n<li><code>{Object | Function} plugin</code></li>\n</ul>\n</li>\n<li><p><strong>Usage:</strong></p>\n<p>Install a Vue.js plugin. If the plugin is an Object, it must expose an <code>install</code> method. If it is a function itself, it will be treated as the install method. The install method will be called with Vue as the argument.</p>\n<p>When this method is called on the same plugin multiple times, the plugin will be installed only once.</p>\n</li>\n<li><p><strong>See also:</strong> <a href=\"../guide/plugins.html\">Plugins</a></p>\n</li>\n</ul>\n<h3 id=\"Vue-mixin-mixin\"><a href=\"#Vue-mixin-mixin\" class=\"headerlink\" title=\"Vue.mixin( mixin )\"></a>Vue.mixin( mixin )</h3><ul>\n<li><p><strong>Arguments:</strong></p>\n<ul>\n<li><code>{Object} mixin</code></li>\n</ul>\n</li>\n<li><p><strong>Usage:</strong></p>\n<p>Apply a mixin globally, which affects every Vue instance created afterwards. This can be used by plugin authors to inject custom behavior into components. <strong>Not recommended in application code</strong>.</p>\n</li>\n<li><p><strong>See also:</strong> <a href=\"../guide/mixins.html#Global-Mixin\">Global Mixin</a></p>\n</li>\n</ul>\n<h3 id=\"Vue-compile-template\"><a href=\"#Vue-compile-template\" class=\"headerlink\" title=\"Vue.compile( template )\"></a>Vue.compile( template )</h3><ul>\n<li><p><strong>Arguments:</strong></p>\n<ul>\n<li><code>{string} template</code></li>\n</ul>\n</li>\n<li><p><strong>Usage:</strong></p>\n<p>Compiles a template string into a render function. <strong>Only available in the full build.</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> res = Vue.compile(<span class=\"string\">'&lt;div&gt;&lt;span&gt;&#123;&#123; msg &#125;&#125;&lt;/span&gt;&lt;/div&gt;'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    msg: <span class=\"string\">'hello'</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  render: res.render,</span><br><span class=\"line\">  staticRenderFns: res.staticRenderFns</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>See also:</strong> <a href=\"../guide/render-function.html\">Render Functions</a></p>\n</li>\n</ul>\n<h3 id=\"Vue-version\"><a href=\"#Vue-version\" class=\"headerlink\" title=\"Vue.version\"></a>Vue.version</h3><ul>\n<li><p><strong>Details</strong>: Provides the installed version of Vue as a string. This is especially useful for community plugins and components, where you might use different strategies for different versions.</p>\n</li>\n<li><p><strong>Usage</strong>:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> version = <span class=\"built_in\">Number</span>(Vue.version.split(<span class=\"string\">'.'</span>)[<span class=\"number\">0</span>])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (version === <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// Vue v2.x.x</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (version === <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// Vue v1.x.x</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// Unsupported versions of Vue</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"Options-Data\"><a href=\"#Options-Data\" class=\"headerlink\" title=\"Options / Data\"></a>Options / Data</h2><h3 id=\"data\"><a href=\"#data\" class=\"headerlink\" title=\"data\"></a>data</h3><ul>\n<li><p><strong>Type:</strong> <code>Object | Function</code></p>\n</li>\n<li><p><strong>Restriction:</strong> Only accepts <code>Function</code> when used in a component definition.</p>\n</li>\n<li><p><strong>Details:</strong></p>\n<p>The data object for the Vue instance. Vue will recursively convert its properties into getter/setters to make it “reactive”. <strong>The object must be plain</strong>: native objects such as browser API objects and prototype properties are ignored. A rule of thumb is that data should just be data - it is not recommended to observe objects with their own stateful behavior.</p>\n<p>Once observed, you can no longer add reactive properties to the root data object. It is therefore recommended to declare all root-level reactive properties upfront, before creating the instance.</p>\n<p>After the instance is created, the original data object can be accessed as <code>vm.$data</code>. The Vue instance also proxies all the properties found on the data object, so <code>vm.a</code> will be equivalent to <code>vm.$data.a</code>.</p>\n<p>Properties that start with <code>_</code> or <code>$</code> will <strong>not</strong> be proxied on the Vue instance because they may conflict with Vue’s internal properties and API methods. You will have to access them as <code>vm.$data._property</code>.</p>\n<p>When defining a <strong>component</strong>, <code>data</code> must be declared as a function that returns the initial data object, because there will be many instances created using the same definition. If we use a plain object for <code>data</code>, that same object will be <strong>shared by reference</strong> across all instances created! By providing a <code>data</code> function, every time a new instance is created we can call it to return a fresh copy of the initial data.</p>\n<p>If required, a deep clone of the original object can be obtained by passing <code>vm.$data</code> through <code>JSON.parse(JSON.stringify(...))</code>.</p>\n</li>\n<li><p><strong>Example:</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> data = &#123; <span class=\"attr\">a</span>: <span class=\"number\">1</span> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// direct instance creation</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  data: data</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">vm.a <span class=\"comment\">// =&gt; 1</span></span><br><span class=\"line\">vm.$data === data <span class=\"comment\">// =&gt; true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// must use function when in Vue.extend()</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> Component = Vue.extend(&#123;</span><br><span class=\"line\">  data: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123; <span class=\"attr\">a</span>: <span class=\"number\">1</span> &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>Note that if you use an arrow function with the <code>data</code> property, <code>this</code> won’t be the component’s instance, but you can still access the instance as the function’s first argument:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">data: <span class=\"function\"><span class=\"params\">vm</span> =&gt;</span> (&#123; <span class=\"attr\">a</span>: vm.myProp &#125;)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>See also:</strong> <a href=\"../guide/reactivity.html\">Reactivity in Depth</a></p>\n</li>\n</ul>\n<h3 id=\"props\"><a href=\"#props\" class=\"headerlink\" title=\"props\"></a>props</h3><ul>\n<li><p><strong>Type:</strong> <code>Array&lt;string&gt; | Object</code></p>\n</li>\n<li><p><strong>Details:</strong></p>\n<p>A list/hash of attributes that are exposed to accept data from the parent component. It has an Array-based simple syntax and an alternative Object-based syntax that allows advanced configurations such as type checking, custom validation and default values.</p>\n</li>\n<li><p><strong>Example:</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// simple syntax</span></span><br><span class=\"line\">Vue.component(<span class=\"string\">'props-demo-simple'</span>, &#123;</span><br><span class=\"line\">  props: [<span class=\"string\">'size'</span>, <span class=\"string\">'myMessage'</span>]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// object syntax with validation</span></span><br><span class=\"line\">Vue.component(<span class=\"string\">'props-demo-advanced'</span>, &#123;</span><br><span class=\"line\">  props: &#123;</span><br><span class=\"line\">    <span class=\"comment\">// type check</span></span><br><span class=\"line\">    height: <span class=\"built_in\">Number</span>,</span><br><span class=\"line\">    <span class=\"comment\">// type check plus other validations</span></span><br><span class=\"line\">    age: &#123;</span><br><span class=\"line\">      type: <span class=\"built_in\">Number</span>,</span><br><span class=\"line\">      <span class=\"keyword\">default</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">      required: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      validator: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> value &gt;= <span class=\"number\">0</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>See also:</strong> <a href=\"../guide/components.html#Props\">Props</a></p>\n</li>\n</ul>\n<h3 id=\"propsData\"><a href=\"#propsData\" class=\"headerlink\" title=\"propsData\"></a>propsData</h3><ul>\n<li><p><strong>Type:</strong> <code>{ [key: string]: any }</code></p>\n</li>\n<li><p><strong>Restriction:</strong> only respected in instance creation via <code>new</code>.</p>\n</li>\n<li><p><strong>Details:</strong></p>\n<p>Pass props to an instance during its creation. This is primarily intended to make unit testing easier.</p>\n</li>\n<li><p><strong>Example:</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> Comp = Vue.extend(&#123;</span><br><span class=\"line\">  props: [<span class=\"string\">'msg'</span>],</span><br><span class=\"line\">  template: <span class=\"string\">'&lt;div&gt;&#123;&#123; msg &#125;&#125;&lt;/div&gt;'</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> Comp(&#123;</span><br><span class=\"line\">  propsData: &#123;</span><br><span class=\"line\">    msg: <span class=\"string\">'hello'</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"computed\"><a href=\"#computed\" class=\"headerlink\" title=\"computed\"></a>computed</h3><ul>\n<li><p><strong>Type:</strong> <code>{ [key: string]: Function | { get: Function, set: Function } }</code></p>\n</li>\n<li><p><strong>Details:</strong></p>\n<p>Computed properties to be mixed into the Vue instance. All getters and setters have their <code>this</code> context automatically bound to the Vue instance.</p>\n<p>Note that if you use an arrow function with a computed property, <code>this</code> won’t be the component’s instance, but you can still access the instance as the function’s first argument:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">computed: &#123;</span><br><span class=\"line\">  aDouble: <span class=\"function\"><span class=\"params\">vm</span> =&gt;</span> vm.a * <span class=\"number\">2</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Computed properties are cached, and only re-computed on reactive dependency changes. Note that if a certain dependency is out of the instance’s scope (i.e. not reactive), the computed property will <strong>not</strong> be updated.</p>\n</li>\n<li><p><strong>Example:</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  data: &#123; <span class=\"attr\">a</span>: <span class=\"number\">1</span> &#125;,</span><br><span class=\"line\">  computed: &#123;</span><br><span class=\"line\">    <span class=\"comment\">// get only</span></span><br><span class=\"line\">    aDouble: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.a * <span class=\"number\">2</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"comment\">// both get and set</span></span><br><span class=\"line\">    aPlus: &#123;</span><br><span class=\"line\">      get: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.a + <span class=\"number\">1</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      set: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">v</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.a = v - <span class=\"number\">1</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">vm.aPlus   <span class=\"comment\">// =&gt; 2</span></span><br><span class=\"line\">vm.aPlus = <span class=\"number\">3</span></span><br><span class=\"line\">vm.a       <span class=\"comment\">// =&gt; 2</span></span><br><span class=\"line\">vm.aDouble <span class=\"comment\">// =&gt; 4</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>See also:</strong> <a href=\"../guide/computed.html\">Computed Properties</a></p>\n</li>\n</ul>\n<h3 id=\"methods\"><a href=\"#methods\" class=\"headerlink\" title=\"methods\"></a>methods</h3><ul>\n<li><p><strong>Type:</strong> <code>{ [key: string]: Function }</code></p>\n</li>\n<li><p><strong>Details:</strong></p>\n<p>Methods to be mixed into the Vue instance. You can access these methods directly on the VM instance, or use them in directive expressions. All methods will have their <code>this</code> context automatically bound to the Vue instance.</p>\n<p class=\"tip\">Note that <strong>you should not use an arrow function to define a method</strong> (e.g. <code>plus: () =&gt; this.a++</code>). The reason is arrow functions bind the parent context, so <code>this</code> will not be the Vue instance as you expect and <code>this.a</code> will be undefined.</p>\n</li>\n<li><p><strong>Example:</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  data: &#123; <span class=\"attr\">a</span>: <span class=\"number\">1</span> &#125;,</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    plus: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.a++</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">vm.plus()</span><br><span class=\"line\">vm.a <span class=\"comment\">// 2</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>See also:</strong> <a href=\"../guide/events.html\">Event Handling</a></p>\n</li>\n</ul>\n<h3 id=\"watch\"><a href=\"#watch\" class=\"headerlink\" title=\"watch\"></a>watch</h3><ul>\n<li><p><strong>Type:</strong> <code>{ [key: string]: string | Function | Object | Array}</code></p>\n</li>\n<li><p><strong>Details:</strong></p>\n<p>An object where keys are expressions to watch and values are the corresponding callbacks. The value can also be a string of a method name, or an Object that contains additional options. The Vue instance will call <code>$watch()</code> for each entry in the object at instantiation.</p>\n</li>\n<li><p><strong>Example:</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    a: <span class=\"number\">1</span>,</span><br><span class=\"line\">    b: <span class=\"number\">2</span>,</span><br><span class=\"line\">    c: <span class=\"number\">3</span>,</span><br><span class=\"line\">    d: <span class=\"number\">4</span>,</span><br><span class=\"line\">    e: &#123;</span><br><span class=\"line\">      f: &#123;</span><br><span class=\"line\">        g: <span class=\"number\">5</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  watch: &#123;</span><br><span class=\"line\">    a: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">val, oldVal</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">'new: %s, old: %s'</span>, val, oldVal)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"comment\">// string method name</span></span><br><span class=\"line\">    b: <span class=\"string\">'someMethod'</span>,</span><br><span class=\"line\">    <span class=\"comment\">// deep watcher</span></span><br><span class=\"line\">    c: &#123;</span><br><span class=\"line\">      handler: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">val, oldVal</span>) </span>&#123; <span class=\"comment\">/* ... */</span> &#125;,</span><br><span class=\"line\">      deep: <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"comment\">// the callback will be called immediately after the start of the observation</span></span><br><span class=\"line\">    d: &#123;</span><br><span class=\"line\">      handler: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">val, oldVal</span>) </span>&#123; <span class=\"comment\">/* ... */</span> &#125;,</span><br><span class=\"line\">      immediate: <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    e: [</span><br><span class=\"line\">      <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">handle1</span> (<span class=\"params\">val, oldVal</span>) </span>&#123; <span class=\"comment\">/* ... */</span> &#125;,</span><br><span class=\"line\">      <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">handle2</span> (<span class=\"params\">val, oldVal</span>) </span>&#123; <span class=\"comment\">/* ... */</span> &#125;</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    <span class=\"comment\">// watch vm.e.f's value: &#123;g: 5&#125;</span></span><br><span class=\"line\">    <span class=\"string\">'e.f'</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">val, oldVal</span>) </span>&#123; <span class=\"comment\">/* ... */</span> &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">vm.a = <span class=\"number\">2</span> <span class=\"comment\">// =&gt; new: 2, old: 1</span></span><br></pre></td></tr></table></figure>\n<p class=\"tip\">Note that <strong>you should not use an arrow function to define a watcher</strong> (e.g. <code>searchQuery: newValue =&gt; this.updateAutocomplete(newValue)</code>). The reason is arrow functions bind the parent context, so <code>this</code> will not be the Vue instance as you expect and <code>this.updateAutocomplete</code> will be undefined.</p>\n</li>\n<li><p><strong>See also:</strong> <a href=\"#vm-watch\">Instance Methods / Data - vm.$watch</a></p>\n</li>\n</ul>\n<h2 id=\"Options-DOM\"><a href=\"#Options-DOM\" class=\"headerlink\" title=\"Options / DOM\"></a>Options / DOM</h2><h3 id=\"el\"><a href=\"#el\" class=\"headerlink\" title=\"el\"></a>el</h3><ul>\n<li><p><strong>Type:</strong> <code>string | HTMLElement</code></p>\n</li>\n<li><p><strong>Restriction:</strong> only respected in instance creation via <code>new</code>.</p>\n</li>\n<li><p><strong>Details:</strong></p>\n<p>Provide the Vue instance an existing DOM element to mount on. It can be a CSS selector string or an actual HTMLElement.</p>\n<p>After the instance is mounted, the resolved element will be accessible as <code>vm.$el</code>.</p>\n<p>If this option is available at instantiation, the instance will immediately enter compilation; otherwise, the user will have to explicitly call <code>vm.$mount()</code> to manually start the compilation.</p>\n<p class=\"tip\">The provided element merely serves as a mounting point. Unlike in Vue 1.x, the mounted element will be replaced with Vue-generated DOM in all cases. It is therefore not recommended to mount the root instance to <code>&lt;html&gt;</code> or <code>&lt;body&gt;</code>.</p>\n\n<p class=\"tip\">If neither <code>render</code> function nor <code>template</code> option is present, the in-DOM HTML of the mounting DOM element will be extracted as the template. In this case, Runtime + Compiler build of Vue should be used.</p>\n</li>\n<li><p><strong>See also:</strong></p>\n<ul>\n<li><a href=\"../guide/instance.html#Lifecycle-Diagram\">Lifecycle Diagram</a></li>\n<li><a href=\"../guide/installation.html#Runtime-Compiler-vs-Runtime-only\">Runtime + Compiler vs. Runtime-only</a></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"template\"><a href=\"#template\" class=\"headerlink\" title=\"template\"></a>template</h3><ul>\n<li><p><strong>Type:</strong> <code>string</code></p>\n</li>\n<li><p><strong>Details:</strong></p>\n<p>A string template to be used as the markup for the Vue instance. The template will <strong>replace</strong> the mounted element. Any existing markup inside the mounted element will be ignored, unless content distribution slots are present in the template.</p>\n<p>If the string starts with <code>#</code> it will be used as a querySelector and use the selected element’s innerHTML as the template string. This allows the use of the common <code>&lt;script type=&quot;x-template&quot;&gt;</code> trick to include templates.</p>\n<p class=\"tip\">From a security perspective, you should only use Vue templates that you can trust. Never use user-generated content as your template.</p>\n\n<p class=\"tip\">If render function is present in the Vue option, the template will be ignored.</p>\n</li>\n<li><p><strong>See also:</strong></p>\n<ul>\n<li><a href=\"../guide/instance.html#Lifecycle-Diagram\">Lifecycle Diagram</a></li>\n<li><a href=\"../guide/components.html#Content-Distribution-with-Slots\">Content Distribution with Slots</a></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"render\"><a href=\"#render\" class=\"headerlink\" title=\"render\"></a>render</h3><ul>\n<li><p><strong>Type:</strong> <code>(createElement: () =&gt; VNode) =&gt; VNode</code></p>\n</li>\n<li><p><strong>Details:</strong></p>\n<p>An alternative to string templates allowing you to leverage the full programmatic power of JavaScript. The render function receives a <code>createElement</code> method as it’s first argument used to create <code>VNode</code>s.</p>\n<p>If the component is a functional component, the render function also receives an extra argument <code>context</code>, which provides access to contextual data since functional components are instance-less.</p>\n<p class=\"tip\">The <code>render</code> function has priority over the render function compiled from <code>template</code> option or in-DOM HTML template of the mounting element which is specified by the <code>el</code> option.</p>\n</li>\n<li><p><strong>See also:</strong> <a href=\"../guide/render-function.html\">Render Functions</a></p>\n</li>\n</ul>\n<h3 id=\"renderError\"><a href=\"#renderError\" class=\"headerlink\" title=\"renderError\"></a>renderError</h3><blockquote>\n<p>New in 2.2.0+</p>\n</blockquote>\n<ul>\n<li><p><strong>Type:</strong> <code>(createElement: () =&gt; VNode, error: Error) =&gt; VNode</code></p>\n</li>\n<li><p><strong>Details:</strong></p>\n<p><strong>Only works in development mode.</strong></p>\n<p>Provide an alternative render output when the default <code>render</code> function encounters an error. The error will be passed to <code>renderError</code> as the second argument. This is particularly useful when used together with hot-reload.</p>\n</li>\n<li><p><strong>Example:</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  render (h) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'oops'</span>)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  renderError (h, err) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> h(<span class=\"string\">'pre'</span>, &#123; <span class=\"attr\">style</span>: &#123; <span class=\"attr\">color</span>: <span class=\"string\">'red'</span> &#125;&#125;, err.stack)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;).$mount(<span class=\"string\">'#app'</span>)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>See also:</strong> <a href=\"../guide/render-function.html\">Render Functions</a></p>\n</li>\n</ul>\n<h2 id=\"Options-Lifecycle-Hooks\"><a href=\"#Options-Lifecycle-Hooks\" class=\"headerlink\" title=\"Options / Lifecycle Hooks\"></a>Options / Lifecycle Hooks</h2><p class=\"tip\">All lifecycle hooks automatically have their <code>this</code> context bound to the instance, so that you can access data, computed properties, and methods. This means <strong>you should not use an arrow function to define a lifecycle method</strong> (e.g. <code>created: () =&gt; this.fetchTodos()</code>). The reason is arrow functions bind the parent context, so <code>this</code> will not be the Vue instance as you expect and <code>this.fetchTodos</code> will be undefined.</p>\n\n<h3 id=\"beforeCreate\"><a href=\"#beforeCreate\" class=\"headerlink\" title=\"beforeCreate\"></a>beforeCreate</h3><ul>\n<li><p><strong>Type:</strong> <code>Function</code></p>\n</li>\n<li><p><strong>Details:</strong></p>\n<p>Called synchronously immediately after the instance has been initialized, before data observation and event/watcher setup.</p>\n</li>\n<li><p><strong>See also:</strong> <a href=\"../guide/instance.html#Lifecycle-Diagram\">Lifecycle Diagram</a></p>\n</li>\n</ul>\n<h3 id=\"created\"><a href=\"#created\" class=\"headerlink\" title=\"created\"></a>created</h3><ul>\n<li><p><strong>Type:</strong> <code>Function</code></p>\n</li>\n<li><p><strong>Details:</strong></p>\n<p>Called synchronously after the instance is created. At this stage, the instance has finished processing the options which means the following have been set up: data observation, computed properties, methods, watch/event callbacks. However, the mounting phase has not been started, and the <code>$el</code> property will not be available yet.</p>\n</li>\n<li><p><strong>See also:</strong> <a href=\"../guide/instance.html#Lifecycle-Diagram\">Lifecycle Diagram</a></p>\n</li>\n</ul>\n<h3 id=\"beforeMount\"><a href=\"#beforeMount\" class=\"headerlink\" title=\"beforeMount\"></a>beforeMount</h3><ul>\n<li><p><strong>Type:</strong> <code>Function</code></p>\n</li>\n<li><p><strong>Details:</strong></p>\n<p>Called right before the mounting begins: the <code>render</code> function is about to be called for the first time.</p>\n<p><strong>This hook is not called during server-side rendering.</strong></p>\n</li>\n<li><p><strong>See also:</strong> <a href=\"../guide/instance.html#Lifecycle-Diagram\">Lifecycle Diagram</a></p>\n</li>\n</ul>\n<h3 id=\"mounted\"><a href=\"#mounted\" class=\"headerlink\" title=\"mounted\"></a>mounted</h3><ul>\n<li><p><strong>Type:</strong> <code>Function</code></p>\n</li>\n<li><p><strong>Details:</strong></p>\n<p>Called after the instance has been mounted, where <code>el</code> is replaced by the newly created <code>vm.$el</code>. If the root instance is mounted to an in-document element, <code>vm.$el</code> will also be in-document when <code>mounted</code> is called.</p>\n<p>Note that <code>mounted</code> does <strong>not</strong> guarantee that all child components have also been mounted. If you want to wait until the entire view has been rendered, you can use <a href=\"#vm-nextTick\">vm.$nextTick</a> inside of <code>mounted</code>:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">mounted: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.$nextTick(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// Code that will run only after the</span></span><br><span class=\"line\">    <span class=\"comment\">// entire view has been rendered</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>This hook is not called during server-side rendering.</strong></p>\n</li>\n<li><p><strong>See also:</strong> <a href=\"../guide/instance.html#Lifecycle-Diagram\">Lifecycle Diagram</a></p>\n</li>\n</ul>\n<h3 id=\"beforeUpdate\"><a href=\"#beforeUpdate\" class=\"headerlink\" title=\"beforeUpdate\"></a>beforeUpdate</h3><ul>\n<li><p><strong>Type:</strong> <code>Function</code></p>\n</li>\n<li><p><strong>Details:</strong></p>\n<p>Called when data changes, before the DOM is patched. This is a good place to access the existing DOM before an update, e.g. to remove manually added event listeners.</p>\n<p><strong>This hook is not called during server-side rendering, because only the initial render is performed server-side.</strong></p>\n</li>\n<li><p><strong>See also:</strong> <a href=\"../guide/instance.html#Lifecycle-Diagram\">Lifecycle Diagram</a></p>\n</li>\n</ul>\n<h3 id=\"updated\"><a href=\"#updated\" class=\"headerlink\" title=\"updated\"></a>updated</h3><ul>\n<li><p><strong>Type:</strong> <code>Function</code></p>\n</li>\n<li><p><strong>Details:</strong></p>\n<p>Called after a data change causes the virtual DOM to be re-rendered and patched.</p>\n<p>The component’s DOM will have been updated when this hook is called, so you can perform DOM-dependent operations here. However, in most cases you should avoid changing state inside the hook. To react to state changes, it’s usually better to use a <a href=\"#computed\">computed property</a> or <a href=\"#watch\">watcher</a> instead.</p>\n<p>Note that <code>updated</code> does <strong>not</strong> guarantee that all child components have also been re-rendered. If you want to wait until the entire view has been re-rendered, you can use <a href=\"#vm-nextTick\">vm.$nextTick</a> inside of <code>updated</code>:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">updated: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.$nextTick(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// Code that will run only after the</span></span><br><span class=\"line\">    <span class=\"comment\">// entire view has been re-rendered</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>This hook is not called during server-side rendering.</strong></p>\n</li>\n<li><p><strong>See also:</strong> <a href=\"../guide/instance.html#Lifecycle-Diagram\">Lifecycle Diagram</a></p>\n</li>\n</ul>\n<h3 id=\"activated\"><a href=\"#activated\" class=\"headerlink\" title=\"activated\"></a>activated</h3><ul>\n<li><p><strong>Type:</strong> <code>Function</code></p>\n</li>\n<li><p><strong>Details:</strong></p>\n<p>Called when a kept-alive component is activated.</p>\n<p><strong>This hook is not called during server-side rendering.</strong></p>\n</li>\n<li><p><strong>See also:</strong></p>\n<ul>\n<li><a href=\"#keep-alive\">Built-in Components - keep-alive</a></li>\n<li><a href=\"../guide/components.html#keep-alive\">Dynamic Components - keep-alive</a></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"deactivated\"><a href=\"#deactivated\" class=\"headerlink\" title=\"deactivated\"></a>deactivated</h3><ul>\n<li><p><strong>Type:</strong> <code>Function</code></p>\n</li>\n<li><p><strong>Details:</strong></p>\n<p>Called when a kept-alive component is deactivated.</p>\n<p><strong>This hook is not called during server-side rendering.</strong></p>\n</li>\n<li><p><strong>See also:</strong></p>\n<ul>\n<li><a href=\"#keep-alive\">Built-in Components - keep-alive</a></li>\n<li><a href=\"../guide/components.html#keep-alive\">Dynamic Components - keep-alive</a></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"beforeDestroy\"><a href=\"#beforeDestroy\" class=\"headerlink\" title=\"beforeDestroy\"></a>beforeDestroy</h3><ul>\n<li><p><strong>Type:</strong> <code>Function</code></p>\n</li>\n<li><p><strong>Details:</strong></p>\n<p>Called right before a Vue instance is destroyed. At this stage the instance is still fully functional.</p>\n<p><strong>This hook is not called during server-side rendering.</strong></p>\n</li>\n<li><p><strong>See also:</strong> <a href=\"../guide/instance.html#Lifecycle-Diagram\">Lifecycle Diagram</a></p>\n</li>\n</ul>\n<h3 id=\"destroyed\"><a href=\"#destroyed\" class=\"headerlink\" title=\"destroyed\"></a>destroyed</h3><ul>\n<li><p><strong>Type:</strong> <code>Function</code></p>\n</li>\n<li><p><strong>Details:</strong></p>\n<p>Called after a Vue instance has been destroyed. When this hook is called, all directives of the Vue instance have been unbound, all event listeners have been removed, and all child Vue instances have also been destroyed.</p>\n<p><strong>This hook is not called during server-side rendering.</strong></p>\n</li>\n<li><p><strong>See also:</strong> <a href=\"../guide/instance.html#Lifecycle-Diagram\">Lifecycle Diagram</a></p>\n</li>\n</ul>\n<h3 id=\"errorCaptured\"><a href=\"#errorCaptured\" class=\"headerlink\" title=\"errorCaptured\"></a>errorCaptured</h3><blockquote>\n<p>New in 2.5.0+</p>\n</blockquote>\n<ul>\n<li><p><strong>Type:</strong> <code>(err: Error, vm: Component, info: string) =&gt; ?boolean</code></p>\n</li>\n<li><p><strong>Details:</strong></p>\n<p>Called when an error from any descendent component is captured. The hook receives three arguments: the error, the component instance that triggered the error, and a string containing information on where the error was captured. The hook can return <code>false</code> to stop the error from propagating further.</p>\n<p class=\"tip\">You can modify component state in this hook. However, it is important to have conditionals in your template or render function that short circuits other content when an error has been captured; otherwise the component will be thrown into an infinite render loop.</p>\n\n<p><strong>Error Propagation Rules</strong></p>\n<ul>\n<li><p>By default, all errors are still sent to the global <code>config.errorHandler</code> if it is defined, so that these errors can still be reported to an analytics service in a single place.</p>\n</li>\n<li><p>If multiple <code>errorCaptured</code> hooks exist on a component’s inheritance chain or parent chain, all of them will be invoked on the same error.</p>\n</li>\n<li><p>If the <code>errorCaptured</code> hook itself throws an error, both this error and the original captured error are sent to the global <code>config.errorHandler</code>.</p>\n</li>\n<li><p>An <code>errorCaptured</code> hook can return <code>false</code> to prevent the error from propagating further. This is essentially saying “this error has been handled and should be ignored.” It will prevent any additional <code>errorCaptured</code> hooks or the global <code>config.errorHandler</code> from being invoked for this error.</p>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Options-Assets\"><a href=\"#Options-Assets\" class=\"headerlink\" title=\"Options / Assets\"></a>Options / Assets</h2><h3 id=\"directives\"><a href=\"#directives\" class=\"headerlink\" title=\"directives\"></a>directives</h3><ul>\n<li><p><strong>Type:</strong> <code>Object</code></p>\n</li>\n<li><p><strong>Details:</strong></p>\n<p>A hash of directives to be made available to the Vue instance.</p>\n</li>\n<li><p><strong>See also:</strong> <a href=\"../guide/custom-directive.html\">Custom Directives</a></p>\n</li>\n</ul>\n<h3 id=\"filters\"><a href=\"#filters\" class=\"headerlink\" title=\"filters\"></a>filters</h3><ul>\n<li><p><strong>Type:</strong> <code>Object</code></p>\n</li>\n<li><p><strong>Details:</strong></p>\n<p>A hash of filters to be made available to the Vue instance.</p>\n</li>\n<li><p><strong>See also:</strong> <a href=\"#Vue-filter\"><code>Vue.filter</code></a></p>\n</li>\n</ul>\n<h3 id=\"components\"><a href=\"#components\" class=\"headerlink\" title=\"components\"></a>components</h3><ul>\n<li><p><strong>Type:</strong> <code>Object</code></p>\n</li>\n<li><p><strong>Details:</strong></p>\n<p>A hash of components to be made available to the Vue instance.</p>\n</li>\n<li><p><strong>See also:</strong> <a href=\"../guide/components.html\">Components</a></p>\n</li>\n</ul>\n<h2 id=\"Options-Composition\"><a href=\"#Options-Composition\" class=\"headerlink\" title=\"Options / Composition\"></a>Options / Composition</h2><h3 id=\"parent\"><a href=\"#parent\" class=\"headerlink\" title=\"parent\"></a>parent</h3><ul>\n<li><p><strong>Type:</strong> <code>Vue instance</code></p>\n</li>\n<li><p><strong>Details:</strong></p>\n<p>Specify the parent instance for the instance to be created. Establishes a parent-child relationship between the two. The parent will be accessible as <code>this.$parent</code> for the child, and the child will be pushed into the parent’s <code>$children</code> array.</p>\n<p class=\"tip\">Use <code>$parent</code> and <code>$children</code> sparingly - they mostly serve as an escape-hatch. Prefer using props and events for parent-child communication.</p>\n\n</li>\n</ul>\n<h3 id=\"mixins\"><a href=\"#mixins\" class=\"headerlink\" title=\"mixins\"></a>mixins</h3><ul>\n<li><p><strong>Type:</strong> <code>Array&lt;Object&gt;</code></p>\n</li>\n<li><p><strong>Details:</strong></p>\n<p>The <code>mixins</code> option accepts an array of mixin objects. These mixin objects can contain instance options like normal instance objects, and they will be merged against the eventual options using the same option merging logic in <code>Vue.extend()</code>. e.g. If your mixin contains a created hook and the component itself also has one, both functions will be called.</p>\n<p>Mixin hooks are called in the order they are provided, and called before the component’s own hooks.</p>\n</li>\n<li><p><strong>Example:</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> mixin = &#123;</span><br><span class=\"line\">  created: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; <span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>) &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  created: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; <span class=\"built_in\">console</span>.log(<span class=\"number\">2</span>) &#125;,</span><br><span class=\"line\">  mixins: [mixin]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// =&gt; 1</span></span><br><span class=\"line\"><span class=\"comment\">// =&gt; 2</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>See also:</strong> <a href=\"../guide/mixins.html\">Mixins</a></p>\n</li>\n</ul>\n<h3 id=\"extends\"><a href=\"#extends\" class=\"headerlink\" title=\"extends\"></a>extends</h3><ul>\n<li><p><strong>Type:</strong> <code>Object | Function</code></p>\n</li>\n<li><p><strong>Details:</strong></p>\n<p>Allows declaratively extending another component (could be either a plain options object or a constructor) without having to use <code>Vue.extend</code>. This is primarily intended to make it easier to extend between single file components.</p>\n<p>This is similar to <code>mixins</code>.</p>\n</li>\n<li><p><strong>Example:</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> CompA = &#123; ... &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// extend CompA without having to call `Vue.extend` on either</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> CompB = &#123;</span><br><span class=\"line\">  extends: CompA,</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"provide-inject\"><a href=\"#provide-inject\" class=\"headerlink\" title=\"provide / inject\"></a>provide / inject</h3><blockquote>\n<p>New in 2.2.0+</p>\n</blockquote>\n<ul>\n<li><p><strong>Type:</strong></p>\n<ul>\n<li><strong>provide:</strong> <code>Object | () =&gt; Object</code></li>\n<li><strong>inject:</strong> <code>Array&lt;string&gt; | { [key: string]: string | Symbol | Object }</code></li>\n</ul>\n</li>\n<li><p><strong>Details:</strong></p>\n<p class=\"tip\"><code>provide</code> and <code>inject</code> are primarily provided for advanced plugin / component library use cases. It is NOT recommended to use them in generic application code.</p>\n\n<p>This pair of options are used together to allow an ancestor component to serve as a dependency injector for all its descendants, regardless of how deep the component hierarchy is, as long as they are in the same parent chain. If you are familiar with React, this is very similar to React’s context feature.</p>\n<p>The <code>provide</code> option should be an object or a function that returns an object. This object contains the properties that are available for injection into its descendants. You can use ES2015 Symbols as keys in this object, but only in environments that natively support <code>Symbol</code> and <code>Reflect.ownKeys</code>.</p>\n<p>The <code>inject</code> option should be either:</p>\n<ul>\n<li>an array of strings, or</li>\n<li>an object where the keys are the local binding name and the value is either:<ul>\n<li>the key (string or Symbol) to search for in available injections, or</li>\n<li>an object where:<ul>\n<li>the <code>from</code> property is the key (string or Symbol) to search for in available injections, and</li>\n<li>the <code>default</code> property is used as fallback value</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>Note: the <code>provide</code> and <code>inject</code> bindings are NOT reactive. This is intentional. However, if you pass down an observed object, properties on that object do remain reactive.</p>\n</blockquote>\n</li>\n<li><p><strong>Example:</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// parent component providing 'foo'</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> Provider = &#123;</span><br><span class=\"line\">  provide: &#123;</span><br><span class=\"line\">    foo: <span class=\"string\">'bar'</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// child component injecting 'foo'</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> Child = &#123;</span><br><span class=\"line\">  inject: [<span class=\"string\">'foo'</span>],</span><br><span class=\"line\">  created () &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.foo) <span class=\"comment\">// =&gt; \"bar\"</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>With ES2015 Symbols, function <code>provide</code> and object <code>inject</code>:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> s = <span class=\"built_in\">Symbol</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> Provider = &#123;</span><br><span class=\"line\">  provide () &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      [s]: <span class=\"string\">'foo'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> Child = &#123;</span><br><span class=\"line\">  inject: &#123; s &#125;,</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>The next 2 examples work with Vue 2.2.1+. Below that version, injected values were resolved after the <code>props</code> and the <code>data</code> initialization.</p>\n</blockquote>\n<p>Using an injected value as the default for a prop:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> Child = &#123;</span><br><span class=\"line\">  inject: [<span class=\"string\">'foo'</span>],</span><br><span class=\"line\">  props: &#123;</span><br><span class=\"line\">    bar: &#123;</span><br><span class=\"line\">      <span class=\"keyword\">default</span> () &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.foo</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Using an injected value as data entry:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> Child = &#123;</span><br><span class=\"line\">  inject: [<span class=\"string\">'foo'</span>],</span><br><span class=\"line\">  data () &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      bar: <span class=\"keyword\">this</span>.foo</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>In 2.5.0+ injections can be optional with default value:</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> Child = &#123;</span><br><span class=\"line\">  inject: &#123;</span><br><span class=\"line\">    foo: &#123; <span class=\"attr\">default</span>: <span class=\"string\">'foo'</span> &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>If it needs to be injected from a property with a different name, use <code>from</code> to denote the source property:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> Child = &#123;</span><br><span class=\"line\">  inject: &#123;</span><br><span class=\"line\">    foo: &#123;</span><br><span class=\"line\">      <span class=\"keyword\">from</span>: <span class=\"string\">'bar'</span>,</span><br><span class=\"line\">      <span class=\"keyword\">default</span>: <span class=\"string\">'foo'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Similar to prop defaults, you need to use a factory function for non primitive values:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> Child = &#123;</span><br><span class=\"line\">  inject: &#123;</span><br><span class=\"line\">    foo: &#123;</span><br><span class=\"line\">      <span class=\"keyword\">from</span>: <span class=\"string\">'bar'</span>,</span><br><span class=\"line\">      <span class=\"keyword\">default</span>: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"Options-Misc\"><a href=\"#Options-Misc\" class=\"headerlink\" title=\"Options / Misc\"></a>Options / Misc</h2><h3 id=\"name\"><a href=\"#name\" class=\"headerlink\" title=\"name\"></a>name</h3><ul>\n<li><p><strong>Type:</strong> <code>string</code></p>\n</li>\n<li><p><strong>Restriction:</strong> only respected when used as a component option.</p>\n</li>\n<li><p><strong>Details:</strong></p>\n<p>Allow the component to recursively invoke itself in its template. Note that when a component is registered globally with <code>Vue.component()</code>, the global ID is automatically set as its name.</p>\n<p>Another benefit of specifying a <code>name</code> option is debugging. Named components result in more helpful warning messages. Also, when inspecting an app in the <a href=\"https://github.com/vuejs/vue-devtools\" target=\"_blank\" rel=\"noopener\">vue-devtools</a>, unnamed components will show up as <code>&lt;AnonymousComponent&gt;</code>, which isn’t very informative. By providing the <code>name</code> option, you will get a much more informative component tree.</p>\n</li>\n</ul>\n<h3 id=\"delimiters\"><a href=\"#delimiters\" class=\"headerlink\" title=\"delimiters\"></a>delimiters</h3><ul>\n<li><p><strong>Type:</strong> <code>Array&lt;string&gt;</code></p>\n</li>\n<li><p><strong>Default:</strong> <code>[\"{{\", \"}}\"]</code></p>\n</li>\n<li><p><strong>Restrictions:</strong> This option is only available in the full build, with in-browser compilation.</p>\n</li>\n<li><p><strong>Details:</strong></p>\n<p>Change the plain text interpolation delimiters.</p>\n</li>\n<li><p><strong>Example:</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  delimiters: [<span class=\"string\">'$&#123;'</span>, <span class=\"string\">'&#125;'</span>]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Delimiters changed to ES6 template string style</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"functional\"><a href=\"#functional\" class=\"headerlink\" title=\"functional\"></a>functional</h3><ul>\n<li><p><strong>Type:</strong> <code>boolean</code></p>\n</li>\n<li><p><strong>Details:</strong></p>\n<p>Causes a component to be stateless (no <code>data</code>) and instanceless (no <code>this</code> context). They are only a <code>render</code> function that returns virtual nodes making them much cheaper to render.</p>\n</li>\n<li><p><strong>See also:</strong> <a href=\"../guide/render-function.html#Functional-Components\">Functional Components</a></p>\n</li>\n</ul>\n<h3 id=\"model\"><a href=\"#model\" class=\"headerlink\" title=\"model\"></a>model</h3><blockquote>\n<p>New in 2.2.0</p>\n</blockquote>\n<ul>\n<li><p><strong>Type:</strong> <code>{ prop?: string, event?: string }</code></p>\n</li>\n<li><p><strong>Details:</strong></p>\n<p>Allows a custom component to customize the prop and event used when it’s used with <code>v-model</code>. By default, <code>v-model</code> on a component uses <code>value</code> as the prop and <code>input</code> as the event, but some input types such as checkboxes and radio buttons may want to use the <code>value</code> prop for a different purpose. Using the <code>model</code> option can avoid the conflict in such cases.</p>\n</li>\n<li><p><strong>Example:</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">Vue.component(<span class=\"string\">'my-checkbox'</span>, &#123;</span><br><span class=\"line\">  model: &#123;</span><br><span class=\"line\">    prop: <span class=\"string\">'checked'</span>,</span><br><span class=\"line\">    event: <span class=\"string\">'change'</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  props: &#123;</span><br><span class=\"line\">    <span class=\"comment\">// this allows using the `value` prop for a different purpose</span></span><br><span class=\"line\">    value: <span class=\"built_in\">String</span>,</span><br><span class=\"line\">    <span class=\"comment\">// use `checked` as the prop which take the place of `value`</span></span><br><span class=\"line\">    checked: &#123;</span><br><span class=\"line\">      type: <span class=\"built_in\">Number</span>,</span><br><span class=\"line\">      <span class=\"keyword\">default</span>: <span class=\"number\">0</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">my-checkbox</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"foo\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"some value\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">my-checkbox</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>The above will be equivalent to:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">my-checkbox</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">:checked</span>=<span class=\"string\">\"foo\"</span></span></span><br><span class=\"line\"><span class=\"tag\">  @<span class=\"attr\">change</span>=<span class=\"string\">\"val =&gt; &#123; foo = val &#125;\"</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">value</span>=<span class=\"string\">\"some value\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">my-checkbox</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"inheritAttrs\"><a href=\"#inheritAttrs\" class=\"headerlink\" title=\"inheritAttrs\"></a>inheritAttrs</h3><blockquote>\n<p>New in 2.4.0+</p>\n</blockquote>\n<ul>\n<li><p><strong>Type:</strong> <code>boolean</code></p>\n</li>\n<li><p><strong>Default:</strong> <code>true</code></p>\n</li>\n<li><p><strong>Details:</strong></p>\n<p>By default, parent scope attribute bindings that are not recognized as props will “fallthrough” and be applied to the root element of the child component as normal HTML attributes. When authoring a component that wraps a target element or another component, this may not always be the desired behavior. By setting <code>inheritAttrs</code> to <code>false</code>, this default behavior can be disabled. The attributes are available via the <code>$attrs</code> instance property (also new in 2.4) and can be explicitly bound to a non-root element using <code>v-bind</code>.</p>\n<p>Note: this option does <strong>not</strong> affect <code>class</code> and <code>style</code> bindings.</p>\n</li>\n</ul>\n<h3 id=\"comments\"><a href=\"#comments\" class=\"headerlink\" title=\"comments\"></a>comments</h3><blockquote>\n<p>New in 2.4.0+</p>\n</blockquote>\n<ul>\n<li><p><strong>Type:</strong> <code>boolean</code></p>\n</li>\n<li><p><strong>Default:</strong> <code>false</code></p>\n</li>\n<li><p><strong>Restrictions:</strong> This option is only available in the full build, with in-browser compilation.</p>\n</li>\n<li><p><strong>Details:</strong></p>\n<p>When set to <code>true</code>, will preserve and render HTML comments found in templates. The default behavior is discarding them.</p>\n</li>\n</ul>\n<h2 id=\"Instance-Properties\"><a href=\"#Instance-Properties\" class=\"headerlink\" title=\"Instance Properties\"></a>Instance Properties</h2><h3 id=\"vm-data\"><a href=\"#vm-data\" class=\"headerlink\" title=\"vm.$data\"></a>vm.$data</h3><ul>\n<li><p><strong>Type:</strong> <code>Object</code></p>\n</li>\n<li><p><strong>Details:</strong></p>\n<p>The data object that the Vue instance is observing. The Vue instance proxies access to the properties on its data object.</p>\n</li>\n<li><p><strong>See also:</strong> <a href=\"#data\">Options / Data - data</a></p>\n</li>\n</ul>\n<h3 id=\"vm-props\"><a href=\"#vm-props\" class=\"headerlink\" title=\"vm.$props\"></a>vm.$props</h3><blockquote>\n<p>New in 2.2.0+</p>\n</blockquote>\n<ul>\n<li><p><strong>Type:</strong> <code>Object</code></p>\n</li>\n<li><p><strong>Details:</strong></p>\n<p>An object representing the current props a component has received. The Vue instance proxies access to the properties on its props object.</p>\n</li>\n</ul>\n<h3 id=\"vm-el\"><a href=\"#vm-el\" class=\"headerlink\" title=\"vm.$el\"></a>vm.$el</h3><ul>\n<li><p><strong>Type:</strong> <code>HTMLElement</code></p>\n</li>\n<li><p><strong>Read only</strong></p>\n</li>\n<li><p><strong>Details:</strong></p>\n<p>The root DOM element that the Vue instance is managing.</p>\n</li>\n</ul>\n<h3 id=\"vm-options\"><a href=\"#vm-options\" class=\"headerlink\" title=\"vm.$options\"></a>vm.$options</h3><ul>\n<li><p><strong>Type:</strong> <code>Object</code></p>\n</li>\n<li><p><strong>Read only</strong></p>\n</li>\n<li><p><strong>Details:</strong></p>\n<p>The instantiation options used for the current Vue instance. This is useful when you want to include custom properties in the options:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  customOption: <span class=\"string\">'foo'</span>,</span><br><span class=\"line\">  created: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.$options.customOption) <span class=\"comment\">// =&gt; 'foo'</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"vm-parent\"><a href=\"#vm-parent\" class=\"headerlink\" title=\"vm.$parent\"></a>vm.$parent</h3><ul>\n<li><p><strong>Type:</strong> <code>Vue instance</code></p>\n</li>\n<li><p><strong>Read only</strong></p>\n</li>\n<li><p><strong>Details:</strong></p>\n<p>The parent instance, if the current instance has one.</p>\n</li>\n</ul>\n<h3 id=\"vm-root\"><a href=\"#vm-root\" class=\"headerlink\" title=\"vm.$root\"></a>vm.$root</h3><ul>\n<li><p><strong>Type:</strong> <code>Vue instance</code></p>\n</li>\n<li><p><strong>Read only</strong></p>\n</li>\n<li><p><strong>Details:</strong></p>\n<p>The root Vue instance of the current component tree. If the current instance has no parents this value will be itself.</p>\n</li>\n</ul>\n<h3 id=\"vm-children\"><a href=\"#vm-children\" class=\"headerlink\" title=\"vm.$children\"></a>vm.$children</h3><ul>\n<li><p><strong>Type:</strong> <code>Array&lt;Vue instance&gt;</code></p>\n</li>\n<li><p><strong>Read only</strong></p>\n</li>\n<li><p><strong>Details:</strong></p>\n<p>The direct child components of the current instance. <strong>Note there’s no order guarantee for <code>$children</code>, and it is not reactive.</strong> If you find yourself trying to use <code>$children</code> for data binding, consider using an Array and <code>v-for</code> to generate child components, and use the Array as the source of truth.</p>\n</li>\n</ul>\n<h3 id=\"vm-slots\"><a href=\"#vm-slots\" class=\"headerlink\" title=\"vm.$slots\"></a>vm.$slots</h3><ul>\n<li><p><strong>Type:</strong> <code>{ [name: string]: ?Array&lt;VNode&gt; }</code></p>\n</li>\n<li><p><strong>Read only</strong></p>\n</li>\n<li><p><strong>Details:</strong></p>\n<p>Used to programmatically access content <a href=\"../guide/components.html#Content-Distribution-with-Slots\">distributed by slots</a>. Each <a href=\"../guide/components.html#Named-Slots\">named slot</a> has its own corresponding property (e.g. the contents of <code>slot=&quot;foo&quot;</code> will be found at <code>vm.$slots.foo</code>). The <code>default</code> property contains any nodes not included in a named slot.</p>\n<p>Accessing <code>vm.$slots</code> is most useful when writing a component with a <a href=\"../guide/render-function.html\">render function</a>.</p>\n</li>\n<li><p><strong>Example:</strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">blog-post</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h1</span> <span class=\"attr\">slot</span>=<span class=\"string\">\"header\"</span>&gt;</span></span><br><span class=\"line\">    About Me</span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Here's some page content, which will be included in vm.$slots.default, because it's not inside a named slot.<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">slot</span>=<span class=\"string\">\"footer\"</span>&gt;</span></span><br><span class=\"line\">    Copyright 2016 Evan You</span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>If I have some content down here, it will also be included in vm.$slots.default.<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span>.</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">blog-post</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">Vue.component(<span class=\"string\">'blog-post'</span>, &#123;</span><br><span class=\"line\">  render: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">createElement</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> header = <span class=\"keyword\">this</span>.$slots.header</span><br><span class=\"line\">    <span class=\"keyword\">var</span> body   = <span class=\"keyword\">this</span>.$slots.default</span><br><span class=\"line\">    <span class=\"keyword\">var</span> footer = <span class=\"keyword\">this</span>.$slots.footer</span><br><span class=\"line\">    <span class=\"keyword\">return</span> createElement(<span class=\"string\">'div'</span>, [</span><br><span class=\"line\">      createElement(<span class=\"string\">'header'</span>, header),</span><br><span class=\"line\">      createElement(<span class=\"string\">'main'</span>, body),</span><br><span class=\"line\">      createElement(<span class=\"string\">'footer'</span>, footer)</span><br><span class=\"line\">    ])</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>See also:</strong></p>\n<ul>\n<li><a href=\"#slot-1\"><code>&lt;slot&gt;</code> Component</a></li>\n<li><a href=\"../guide/components.html#Content-Distribution-with-Slots\">Content Distribution with Slots</a></li>\n<li><a href=\"../guide/render-function.html#Slots\">Render Functions - Slots</a></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"vm-scopedSlots\"><a href=\"#vm-scopedSlots\" class=\"headerlink\" title=\"vm.$scopedSlots\"></a>vm.$scopedSlots</h3><blockquote>\n<p>New in 2.1.0+</p>\n</blockquote>\n<ul>\n<li><p><strong>Type:</strong> <code>{ [name: string]: props =&gt; VNode | Array&lt;VNode&gt; }</code></p>\n</li>\n<li><p><strong>Read only</strong></p>\n</li>\n<li><p><strong>Details:</strong></p>\n<p>Used to programmatically access <a href=\"../guide/components.html#Scoped-Slots\">scoped slots</a>. For each slot, including the <code>default</code> one, the object contains a corresponding function that returns VNodes.</p>\n<p>Accessing <code>vm.$scopedSlots</code> is most useful when writing a component with a <a href=\"../guide/render-function.html\">render function</a>.</p>\n</li>\n<li><p><strong>See also:</strong></p>\n<ul>\n<li><a href=\"#slot-1\"><code>&lt;slot&gt;</code> Component</a></li>\n<li><a href=\"../guide/components.html#Scoped-Slots\">Scoped Slots</a></li>\n<li><a href=\"../guide/render-function.html#Slots\">Render Functions - Slots</a></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"vm-refs\"><a href=\"#vm-refs\" class=\"headerlink\" title=\"vm.$refs\"></a>vm.$refs</h3><ul>\n<li><p><strong>Type:</strong> <code>Object</code></p>\n</li>\n<li><p><strong>Read only</strong></p>\n</li>\n<li><p><strong>Details:</strong></p>\n<p>An object of DOM elements and component instances, registered with <a href=\"#ref\"><code>ref</code> attributes</a>.</p>\n</li>\n<li><p><strong>See also:</strong></p>\n<ul>\n<li><a href=\"../guide/components.html#Child-Component-Refs\">Child Component Refs</a></li>\n<li><a href=\"#ref\">Special Attributes - ref</a></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"vm-isServer\"><a href=\"#vm-isServer\" class=\"headerlink\" title=\"vm.$isServer\"></a>vm.$isServer</h3><ul>\n<li><p><strong>Type:</strong> <code>boolean</code></p>\n</li>\n<li><p><strong>Read only</strong></p>\n</li>\n<li><p><strong>Details:</strong></p>\n<p>Whether the current Vue instance is running on the server.</p>\n</li>\n<li><p><strong>See also:</strong> <a href=\"../guide/ssr.html\">Server-Side Rendering</a></p>\n</li>\n</ul>\n<h3 id=\"vm-attrs\"><a href=\"#vm-attrs\" class=\"headerlink\" title=\"vm.$attrs\"></a>vm.$attrs</h3><ul>\n<li><p><strong>Type:</strong> <code>{ [key: string]: string }</code></p>\n</li>\n<li><p><strong>Read only</strong></p>\n</li>\n<li><p><strong>Details:</strong></p>\n<p>Contains parent-scope attribute bindings (except for <code>class</code> and <code>style</code>) that are not recognized (and extracted) as props. When a component doesn’t have any declared props, this essentially contains all parent-scope bindings (except for <code>class</code> and <code>style</code>), and can be passed down to an inner component via <code>v-bind=&quot;$attrs&quot;</code> - useful when creating higher-order components.</p>\n</li>\n</ul>\n<h3 id=\"vm-listeners\"><a href=\"#vm-listeners\" class=\"headerlink\" title=\"vm.$listeners\"></a>vm.$listeners</h3><ul>\n<li><p><strong>Type:</strong> <code>{ [key: string]: Function | Array&lt;Function&gt; }</code></p>\n</li>\n<li><p><strong>Read only</strong></p>\n</li>\n<li><p><strong>Details:</strong></p>\n<p>Contains parent-scope <code>v-on</code> event listeners (without <code>.native</code> modifiers). This can be passed down to an inner component via <code>v-on=&quot;$listeners&quot;</code> - useful when creating transparent wrapper components.</p>\n</li>\n</ul>\n<h2 id=\"Instance-Methods-Data\"><a href=\"#Instance-Methods-Data\" class=\"headerlink\" title=\"Instance Methods / Data\"></a>Instance Methods / Data</h2><h3 id=\"vm-watch-expOrFn-callback-options\"><a href=\"#vm-watch-expOrFn-callback-options\" class=\"headerlink\" title=\"vm.$watch( expOrFn, callback, [options] )\"></a>vm.$watch( expOrFn, callback, [options] )</h3><ul>\n<li><p><strong>Arguments:</strong></p>\n<ul>\n<li><code>{string | Function} expOrFn</code></li>\n<li><code>{Function | Object} callback</code></li>\n<li><code>{Object} [options]</code><ul>\n<li><code>{boolean} deep</code></li>\n<li><code>{boolean} immediate</code></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p><strong>Returns:</strong> <code>{Function} unwatch</code></p>\n</li>\n<li><p><strong>Usage:</strong></p>\n<p>Watch an expression or a computed function on the Vue instance for changes. The callback gets called with the new value and the old value. The expression only accepts dot-delimited paths. For more complex expressions, use a function instead.</p>\n</li>\n</ul>\n<p class=\"tip\">Note: when mutating (rather than replacing) an Object or an Array, the old value will be the same as new value because they reference the same Object/Array. Vue doesn’t keep a copy of the pre-mutate value.</p>\n\n<ul>\n<li><p><strong>Example:</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// keypath</span></span><br><span class=\"line\">vm.$watch(<span class=\"string\">'a.b.c'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">newVal, oldVal</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// do something</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// function</span></span><br><span class=\"line\">vm.$watch(</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.a + <span class=\"keyword\">this</span>.b</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">newVal, oldVal</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// do something</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<p><code>vm.$watch</code> returns an unwatch function that stops firing the callback:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> unwatch = vm.$watch(<span class=\"string\">'a'</span>, cb)</span><br><span class=\"line\"><span class=\"comment\">// later, teardown the watcher</span></span><br><span class=\"line\">unwatch()</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>Option: deep</strong></p>\n<p>To also detect nested value changes inside Objects, you need to pass in <code>deep: true</code> in the options argument. Note that you don’t need to do so to listen for Array mutations.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">vm.$watch(<span class=\"string\">'someObject'</span>, callback, &#123;</span><br><span class=\"line\">  deep: <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">vm.someObject.nestedValue = <span class=\"number\">123</span></span><br><span class=\"line\"><span class=\"comment\">// callback is fired</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>Option: immediate</strong></p>\n<p>Passing in <code>immediate: true</code> in the option will trigger the callback immediately with the current value of the expression:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">vm.$watch(<span class=\"string\">'a'</span>, callback, &#123;</span><br><span class=\"line\">  immediate: <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// `callback` is fired immediately with current value of `a`</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"vm-set-target-key-value\"><a href=\"#vm-set-target-key-value\" class=\"headerlink\" title=\"vm.$set( target, key, value )\"></a>vm.$set( target, key, value )</h3><ul>\n<li><p><strong>Arguments:</strong></p>\n<ul>\n<li><code>{Object | Array} target</code></li>\n<li><code>{string | number} key</code></li>\n<li><code>{any} value</code></li>\n</ul>\n</li>\n<li><p><strong>Returns:</strong> the set value.</p>\n</li>\n<li><p><strong>Usage:</strong></p>\n<p>This is the <strong>alias</strong> of the global <code>Vue.set</code>.</p>\n</li>\n<li><p><strong>See also:</strong> <a href=\"#Vue-set\">Vue.set</a></p>\n</li>\n</ul>\n<h3 id=\"vm-delete-target-key\"><a href=\"#vm-delete-target-key\" class=\"headerlink\" title=\"vm.$delete( target, key )\"></a>vm.$delete( target, key )</h3><ul>\n<li><p><strong>Arguments:</strong></p>\n<ul>\n<li><code>{Object | Array} target</code></li>\n<li><code>{string | number} key</code></li>\n</ul>\n</li>\n<li><p><strong>Usage:</strong></p>\n<p>This is the <strong>alias</strong> of the global <code>Vue.delete</code>.</p>\n</li>\n<li><p><strong>See also:</strong> <a href=\"#Vue-delete\">Vue.delete</a></p>\n</li>\n</ul>\n<h2 id=\"Instance-Methods-Events\"><a href=\"#Instance-Methods-Events\" class=\"headerlink\" title=\"Instance Methods / Events\"></a>Instance Methods / Events</h2><h3 id=\"vm-on-event-callback\"><a href=\"#vm-on-event-callback\" class=\"headerlink\" title=\"vm.$on( event, callback )\"></a>vm.$on( event, callback )</h3><ul>\n<li><p><strong>Arguments:</strong></p>\n<ul>\n<li><code>{string | Array&lt;string&gt;} event</code> (array only supported in 2.2.0+)</li>\n<li><code>{Function} callback</code></li>\n</ul>\n</li>\n<li><p><strong>Usage:</strong></p>\n<p>Listen for a custom event on the current vm. Events can be triggered by <code>vm.$emit</code>. The callback will receive all the additional arguments passed into these event-triggering methods.</p>\n</li>\n<li><p><strong>Example:</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">vm.$on(<span class=\"string\">'test'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">msg</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(msg)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">vm.$emit(<span class=\"string\">'test'</span>, <span class=\"string\">'hi'</span>)</span><br><span class=\"line\"><span class=\"comment\">// =&gt; \"hi\"</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"vm-once-event-callback\"><a href=\"#vm-once-event-callback\" class=\"headerlink\" title=\"vm.$once( event, callback )\"></a>vm.$once( event, callback )</h3><ul>\n<li><p><strong>Arguments:</strong></p>\n<ul>\n<li><code>{string} event</code></li>\n<li><code>{Function} callback</code></li>\n</ul>\n</li>\n<li><p><strong>Usage:</strong></p>\n<p>Listen for a custom event, but only once. The listener will be removed once it triggers for the first time.</p>\n</li>\n</ul>\n<h3 id=\"vm-off-event-callback\"><a href=\"#vm-off-event-callback\" class=\"headerlink\" title=\"vm.$off( [event, callback] )\"></a>vm.$off( [event, callback] )</h3><ul>\n<li><p><strong>Arguments:</strong></p>\n<ul>\n<li><code>{string | Array&lt;string&gt;} event</code> (array only supported in 2.2.2+)</li>\n<li><code>{Function} [callback]</code></li>\n</ul>\n</li>\n<li><p><strong>Usage:</strong></p>\n<p>Remove custom event listener(s).</p>\n<ul>\n<li><p>If no arguments are provided, remove all event listeners;</p>\n</li>\n<li><p>If only the event is provided, remove all listeners for that event;</p>\n</li>\n<li><p>If both event and callback are given, remove the listener for that specific callback only.</p>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"vm-emit-eventName-…args\"><a href=\"#vm-emit-eventName-…args\" class=\"headerlink\" title=\"vm.$emit( eventName, […args] )\"></a>vm.$emit( eventName, […args] )</h3><ul>\n<li><p><strong>Arguments:</strong></p>\n<ul>\n<li><code>{string} eventName</code></li>\n<li><code>[...args]</code></li>\n</ul>\n<p>Trigger an event on the current instance. Any additional arguments will be passed into the listener’s callback function.</p>\n</li>\n<li><p><strong>Examples:</strong></p>\n<p>Using <code>$emit</code> with only an event name:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">Vue.component(<span class=\"string\">'welcome-button'</span>, &#123;</span><br><span class=\"line\">  template: <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">    &lt;button v-on:click=\"$emit('welcome')\"&gt;</span></span><br><span class=\"line\"><span class=\"string\">      Click me to be welcomed</span></span><br><span class=\"line\"><span class=\"string\">    &lt;/button&gt;</span></span><br><span class=\"line\"><span class=\"string\">  `</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"emit-example-simple\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">welcome-button</span> <span class=\"attr\">v-on:welcome</span>=<span class=\"string\">\"sayHi\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">welcome-button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  el: <span class=\"string\">'#emit-example-simple'</span>,</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    sayHi: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      alert(<span class=\"string\">'Hi!'</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n  <div id=\"emit-example-simple\" class=\"demo\">\n    <welcome-button v-on:welcome=\"sayHi\"></welcome-button>\n  </div>\n  <script>\n    Vue.component('welcome-button', {\n      template: `\n        <button v-on:click=\"$emit('welcome')\">\n          Click me to be welcomed\n        </button>\n      `\n    })\n    new Vue({\n      el: '#emit-example-simple',\n      methods: {\n        sayHi: function () {\n          alert('Hi!')\n        }\n      }\n    })\n  </script>\n  \n<p>Using <code>$emit</code> with additional arguments:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">Vue.component(<span class=\"string\">'magic-eight-ball'</span>, &#123;</span><br><span class=\"line\">  data: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      possibleAdvice: [<span class=\"string\">'Yes'</span>, <span class=\"string\">'No'</span>, <span class=\"string\">'Maybe'</span>]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    giveAdvice: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> randomAdviceIndex = <span class=\"built_in\">Math</span>.floor(<span class=\"built_in\">Math</span>.random() * <span class=\"keyword\">this</span>.possibleAdvice.length)</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.$emit(<span class=\"string\">'give-advice'</span>, <span class=\"keyword\">this</span>.possibleAdvice[randomAdviceIndex])</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  template: <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">    &lt;button v-on:click=\"giveAdvice\"&gt;</span></span><br><span class=\"line\"><span class=\"string\">      Click me for advice</span></span><br><span class=\"line\"><span class=\"string\">    &lt;/button&gt;</span></span><br><span class=\"line\"><span class=\"string\">  `</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"emit-example-argument\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">magic-eight-ball</span> <span class=\"attr\">v-on:give-advice</span>=<span class=\"string\">\"showAdvice\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">magic-eight-ball</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  el: <span class=\"string\">'#emit-example-argument'</span>,</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    showAdvice: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">advice</span>) </span>&#123;</span><br><span class=\"line\">      alert(advice)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n  <div id=\"emit-example-argument\" class=\"demo\">\n    <magic-eight-ball v-on:give-advice=\"showAdvice\"></magic-eight-ball>\n  </div>\n  <script>\n    Vue.component('magic-eight-ball', {\n      data: function () {\n        return {\n          possibleAdvice: ['Yes', 'No', 'Maybe']\n        }\n      },\n      methods: {\n        giveAdvice: function () {\n          var randomAdviceIndex = Math.floor(Math.random() * this.possibleAdvice.length)\n          this.$emit('give-advice', this.possibleAdvice[randomAdviceIndex])\n        }\n      },\n      template: `\n        <button v-on:click=\"giveAdvice\">\n          Click me for advice\n        </button>\n      `\n    })\n    new Vue({\n      el: '#emit-example-argument',\n      methods: {\n        showAdvice: function (advice) {\n          alert(advice)\n        }\n      }\n    })\n  </script>\n  \n</li>\n</ul>\n<h2 id=\"Instance-Methods-Lifecycle\"><a href=\"#Instance-Methods-Lifecycle\" class=\"headerlink\" title=\"Instance Methods / Lifecycle\"></a>Instance Methods / Lifecycle</h2><h3 id=\"vm-mount-elementOrSelector\"><a href=\"#vm-mount-elementOrSelector\" class=\"headerlink\" title=\"vm.$mount( [elementOrSelector] )\"></a>vm.$mount( [elementOrSelector] )</h3><ul>\n<li><p><strong>Arguments:</strong></p>\n<ul>\n<li><code>{Element | string} [elementOrSelector]</code></li>\n<li><code>{boolean} [hydrating]</code></li>\n</ul>\n</li>\n<li><p><strong>Returns:</strong> <code>vm</code> - the instance itself</p>\n</li>\n<li><p><strong>Usage:</strong></p>\n<p>If a Vue instance didn’t receive the <code>el</code> option at instantiation, it will be in “unmounted” state, without an associated DOM element. <code>vm.$mount()</code> can be used to manually start the mounting of an unmounted Vue instance.</p>\n<p>If <code>elementOrSelector</code> argument is not provided, the template will be rendered as an off-document element, and you will have to use native DOM API to insert it into the document yourself.</p>\n<p>The method returns the instance itself so you can chain other instance methods after it.</p>\n</li>\n<li><p><strong>Example:</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> MyComponent = Vue.extend(&#123;</span><br><span class=\"line\">  template: <span class=\"string\">'&lt;div&gt;Hello!&lt;/div&gt;'</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// create and mount to #app (will replace #app)</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> MyComponent().$mount(<span class=\"string\">'#app'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// the above is the same as:</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> MyComponent(&#123; <span class=\"attr\">el</span>: <span class=\"string\">'#app'</span> &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// or, render off-document and append afterwards:</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> component = <span class=\"keyword\">new</span> MyComponent().$mount()</span><br><span class=\"line\"><span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'app'</span>).appendChild(component.$el)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>See also:</strong></p>\n<ul>\n<li><a href=\"../guide/instance.html#Lifecycle-Diagram\">Lifecycle Diagram</a></li>\n<li><a href=\"../guide/ssr.html\">Server-Side Rendering</a></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"vm-forceUpdate\"><a href=\"#vm-forceUpdate\" class=\"headerlink\" title=\"vm.$forceUpdate()\"></a>vm.$forceUpdate()</h3><ul>\n<li><p><strong>Usage:</strong></p>\n<p>Force the Vue instance to re-render. Note it does not affect all child components, only the instance itself and child components with inserted slot content.</p>\n</li>\n</ul>\n<h3 id=\"vm-nextTick-callback\"><a href=\"#vm-nextTick-callback\" class=\"headerlink\" title=\"vm.$nextTick( [callback] )\"></a>vm.$nextTick( [callback] )</h3><ul>\n<li><p><strong>Arguments:</strong></p>\n<ul>\n<li><code>{Function} [callback]</code></li>\n</ul>\n</li>\n<li><p><strong>Usage:</strong></p>\n<p>Defer the callback to be executed after the next DOM update cycle. Use it immediately after you’ve changed some data to wait for the DOM update. This is the same as the global <code>Vue.nextTick</code>, except that the callback’s <code>this</code> context is automatically bound to the instance calling this method.</p>\n<blockquote>\n<p>New in 2.1.0+: returns a Promise if no callback is provided and Promise is supported in the execution environment. Please note that Vue does not come with a Promise polyfill, so if you target browsers that don’t support Promises natively (looking at you, IE), you will have to provide a polyfill yourself.</p>\n</blockquote>\n</li>\n<li><p><strong>Example:</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">    example: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">// modify data</span></span><br><span class=\"line\">      <span class=\"keyword\">this</span>.message = <span class=\"string\">'changed'</span></span><br><span class=\"line\">      <span class=\"comment\">// DOM is not updated yet</span></span><br><span class=\"line\">      <span class=\"keyword\">this</span>.$nextTick(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// DOM is now updated</span></span><br><span class=\"line\">        <span class=\"comment\">// `this` is bound to the current instance</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.doSomethingElse()</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>See also:</strong></p>\n<ul>\n<li><a href=\"#Vue-nextTick\">Vue.nextTick</a></li>\n<li><a href=\"../guide/reactivity.html#Async-Update-Queue\">Async Update Queue</a></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"vm-destroy\"><a href=\"#vm-destroy\" class=\"headerlink\" title=\"vm.$destroy()\"></a>vm.$destroy()</h3><ul>\n<li><p><strong>Usage:</strong></p>\n<p>Completely destroy a vm. Clean up its connections with other existing vms, unbind all its directives, turn off all event listeners.</p>\n<p>Triggers the <code>beforeDestroy</code> and <code>destroyed</code> hooks.</p>\n<p class=\"tip\">In normal use cases you shouldn’t have to call this method yourself. Prefer controlling the lifecycle of child components in a data-driven fashion using <code>v-if</code> and <code>v-for</code>.</p>\n</li>\n<li><p><strong>See also:</strong> <a href=\"../guide/instance.html#Lifecycle-Diagram\">Lifecycle Diagram</a></p>\n</li>\n</ul>\n<h2 id=\"Directives\"><a href=\"#Directives\" class=\"headerlink\" title=\"Directives\"></a>Directives</h2><h3 id=\"v-text\"><a href=\"#v-text\" class=\"headerlink\" title=\"v-text\"></a>v-text</h3><ul>\n<li><p><strong>Expects:</strong> <code>string</code></p>\n</li>\n<li><p><strong>Details:</strong></p>\n<p>Updates the element’s <code>textContent</code>. If you need to update the part of <code>textContent</code>, you should use <code>{{ Mustache }}</code> interpolations.</p>\n</li>\n<li><p><strong>Example:</strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">v-text</span>=<span class=\"string\">\"msg\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- same as --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>See also:</strong> <a href=\"../guide/syntax.html#Text\">Data Binding Syntax - Interpolations</a></p>\n</li>\n</ul>\n<h3 id=\"v-html\"><a href=\"#v-html\" class=\"headerlink\" title=\"v-html\"></a>v-html</h3><ul>\n<li><p><strong>Expects:</strong> <code>string</code></p>\n</li>\n<li><p><strong>Details:</strong></p>\n<p>Updates the element’s <code>innerHTML</code>. <strong>Note that the contents are inserted as plain HTML - they will not be compiled as Vue templates</strong>. If you find yourself trying to compose templates using <code>v-html</code>, try to rethink the solution by using components instead.</p>\n<p class=\"tip\">Dynamically rendering arbitrary HTML on your website can be very dangerous because it can easily lead to <a href=\"https://en.wikipedia.org/wiki/Cross-site_scripting\" target=\"_blank\" rel=\"noopener\">XSS attacks</a>. Only use <code>v-html</code> on trusted content and <strong>never</strong> on user-provided content.</p>\n\n<p class=\"tip\">In <a href=\"../guide/single-file-components.html\">single-file components</a>, <code>scoped</code> styles will not apply to content inside <code>v-html</code>, because that HTML is not processed by Vue’s template compiler. If you want to target <code>v-html</code> content with scoped CSS, you can instead use <a href=\"https://vue-loader.vuejs.org/en/features/css-modules.html\" target=\"_blank\" rel=\"noopener\">CSS modules</a> or an additional, global <code>&lt;style&gt;</code> element with a manual scoping strategy such as BEM.</p>\n</li>\n<li><p><strong>Example:</strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-html</span>=<span class=\"string\">\"html\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>See also:</strong> <a href=\"../guide/syntax.html#Raw-HTML\">Data Binding Syntax - Interpolations</a></p>\n</li>\n</ul>\n<h3 id=\"v-show\"><a href=\"#v-show\" class=\"headerlink\" title=\"v-show\"></a>v-show</h3><ul>\n<li><p><strong>Expects:</strong> <code>any</code></p>\n</li>\n<li><p><strong>Usage:</strong></p>\n<p>Toggles the element’s <code>display</code> CSS property based on the truthy-ness of the expression value.</p>\n<p>This directive triggers transitions when its condition changes.</p>\n</li>\n<li><p><strong>See also:</strong> <a href=\"../guide/conditional.html#v-show\">Conditional Rendering - v-show</a></p>\n</li>\n</ul>\n<h3 id=\"v-if\"><a href=\"#v-if\" class=\"headerlink\" title=\"v-if\"></a>v-if</h3><ul>\n<li><p><strong>Expects:</strong> <code>any</code></p>\n</li>\n<li><p><strong>Usage:</strong></p>\n<p>Conditionally render the element based on the truthy-ness of the expression value. The element and its contained directives / components are destroyed and re-constructed during toggles. If the element is a <code>&lt;template&gt;</code> element, its content will be extracted as the conditional block.</p>\n<p>This directive triggers transitions when its condition changes.</p>\n<p class=\"tip\">When used together with v-if, v-for has a higher priority than v-if. See the <a href=\"../guide/list.html#v-for-with-v-if\">list rendering guide</a> for details.</p>\n</li>\n<li><p><strong>See also:</strong> <a href=\"../guide/conditional.html\">Conditional Rendering - v-if</a></p>\n</li>\n</ul>\n<h3 id=\"v-else\"><a href=\"#v-else\" class=\"headerlink\" title=\"v-else\"></a>v-else</h3><ul>\n<li><p><strong>Does not expect expression</strong></p>\n</li>\n<li><p><strong>Restriction:</strong> previous sibling element must have <code>v-if</code> or <code>v-else-if</code>.</p>\n</li>\n<li><p><strong>Usage:</strong></p>\n<p>Denote the “else block” for <code>v-if</code> or a <code>v-if</code>/<code>v-else-if</code> chain.</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-if</span>=<span class=\"string\">\"Math.random() &gt; 0.5\"</span>&gt;</span></span><br><span class=\"line\">  Now you see me</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-else</span>&gt;</span></span><br><span class=\"line\">  Now you don't</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>See also:</strong> <a href=\"../guide/conditional.html#v-else\">Conditional Rendering - v-else</a></p>\n</li>\n</ul>\n<h3 id=\"v-else-if\"><a href=\"#v-else-if\" class=\"headerlink\" title=\"v-else-if\"></a>v-else-if</h3><blockquote>\n<p>New in 2.1.0+</p>\n</blockquote>\n<ul>\n<li><p><strong>Expects:</strong> <code>any</code></p>\n</li>\n<li><p><strong>Restriction:</strong> previous sibling element must have <code>v-if</code> or <code>v-else-if</code>.</p>\n</li>\n<li><p><strong>Usage:</strong></p>\n<p>Denote the “else if block” for <code>v-if</code>. Can be chained.</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-if</span>=<span class=\"string\">\"type === 'A'\"</span>&gt;</span></span><br><span class=\"line\">  A</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-else-if</span>=<span class=\"string\">\"type === 'B'\"</span>&gt;</span></span><br><span class=\"line\">  B</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-else-if</span>=<span class=\"string\">\"type === 'C'\"</span>&gt;</span></span><br><span class=\"line\">  C</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-else</span>&gt;</span></span><br><span class=\"line\">  Not A/B/C</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>See also:</strong> <a href=\"../guide/conditional.html#v-else-if\">Conditional Rendering - v-else-if</a></p>\n</li>\n</ul>\n<h3 id=\"v-for\"><a href=\"#v-for\" class=\"headerlink\" title=\"v-for\"></a>v-for</h3><ul>\n<li><p><strong>Expects:</strong> <code>Array | Object | number | string</code></p>\n</li>\n<li><p><strong>Usage:</strong></p>\n<p>Render the element or template block multiple times based on the source data. The directive’s value must use the special syntax <code>alias in expression</code> to provide an alias for the current element being iterated on:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"item in items\"</span>&gt;</span></span><br><span class=\"line\">  &#123;&#123; item.text &#125;&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>Alternatively, you can also specify an alias for the index (or the key if used on an Object):</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"(item, index) in items\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"(val, key) in object\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"(val, key, index) in object\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>The default behavior of <code>v-for</code> will try to patch the elements in-place without moving them. To force it to reorder elements, you need to provide an ordering hint with the <code>key</code> special attribute:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"item in items\"</span> <span class=\"attr\">:key</span>=<span class=\"string\">\"item.id\"</span>&gt;</span></span><br><span class=\"line\">  &#123;&#123; item.text &#125;&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p class=\"tip\">When used together with v-if, v-for has a higher priority than v-if. See the <a href=\"../guide/list.html#v-for-with-v-if\">list rendering guide</a> for details.</p>\n\n<p>The detailed usage for <code>v-for</code> is explained in the guide section linked below.</p>\n</li>\n<li><p><strong>See also:</strong></p>\n<ul>\n<li><a href=\"../guide/list.html\">List Rendering</a></li>\n<li><a href=\"../guide/list.html#key\">key</a></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"v-on\"><a href=\"#v-on\" class=\"headerlink\" title=\"v-on\"></a>v-on</h3><ul>\n<li><p><strong>Shorthand:</strong> <code>@</code></p>\n</li>\n<li><p><strong>Expects:</strong> <code>Function | Inline Statement | Object</code></p>\n</li>\n<li><p><strong>Argument:</strong> <code>event</code></p>\n</li>\n<li><p><strong>Modifiers:</strong></p>\n<ul>\n<li><code>.stop</code> - call <code>event.stopPropagation()</code>.</li>\n<li><code>.prevent</code> - call <code>event.preventDefault()</code>.</li>\n<li><code>.capture</code> - add event listener in capture mode.</li>\n<li><code>.self</code> - only trigger handler if event was dispatched from this element.</li>\n<li><code>.{keyCode | keyAlias}</code> - only trigger handler on certain keys.</li>\n<li><code>.native</code> - listen for a native event on the root element of component.</li>\n<li><code>.once</code> - trigger handler at most once.</li>\n<li><code>.left</code> - (2.2.0+) only trigger handler for left button mouse events.</li>\n<li><code>.right</code> - (2.2.0+) only trigger handler for right button mouse events.</li>\n<li><code>.middle</code> - (2.2.0+) only trigger handler for middle button mouse events.</li>\n<li><code>.passive</code> - (2.3.0+) attaches a DOM event with <code>{ passive: true }</code>.</li>\n</ul>\n</li>\n<li><p><strong>Usage:</strong></p>\n<p>Attaches an event listener to the element. The event type is denoted by the argument. The expression can be a method name, an inline statement, or omitted if there are modifiers present.</p>\n<p>When used on a normal element, it listens to <a href=\"https://developer.mozilla.org/en-US/docs/Web/Events\" target=\"_blank\" rel=\"noopener\"><strong>native DOM events</strong></a> only. When used on a custom element component, it listens to <strong>custom events</strong> emitted on that child component.</p>\n<p>When listening to native DOM events, the method receives the native event as the only argument. If using inline statement, the statement has access to the special <code>$event</code> property: <code>v-on:click=&quot;handle(&#39;ok&#39;, $event)&quot;</code>.</p>\n<p>Starting in 2.4.0+, <code>v-on</code> also supports binding to an object of event/listener pairs without an argument. Note when using the object syntax, it does not support any modifiers.</p>\n</li>\n<li><p><strong>Example:</strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- method handler --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">v-on:click</span>=<span class=\"string\">\"doThis\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- inline statement --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">v-on:click</span>=<span class=\"string\">\"doThat('hello', $event)\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- shorthand --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">\"doThis\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- stop propagation --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click.stop</span>=<span class=\"string\">\"doThis\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- prevent default --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click.prevent</span>=<span class=\"string\">\"doThis\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- prevent default without expression --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> @<span class=\"attr\">submit.prevent</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- chain modifiers --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click.stop.prevent</span>=<span class=\"string\">\"doThis\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- key modifier using keyAlias --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> @<span class=\"attr\">keyup.enter</span>=<span class=\"string\">\"onEnter\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- key modifier using keyCode --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> @<span class=\"attr\">keyup.13</span>=<span class=\"string\">\"onEnter\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- the click event will be triggered at most once --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">v-on:click.once</span>=<span class=\"string\">\"doThis\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- object syntax (2.4.0+) --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">v-on</span>=<span class=\"string\">\"&#123; mousedown: doThis, mouseup: doThat &#125;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>Listening to custom events on a child component (the handler is called when “my-event” is emitted on the child):</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">my-component</span> @<span class=\"attr\">my-event</span>=<span class=\"string\">\"handleThis\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">my-component</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- inline statement --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">my-component</span> @<span class=\"attr\">my-event</span>=<span class=\"string\">\"handleThis(123, $event)\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">my-component</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- native event on component --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">my-component</span> @<span class=\"attr\">click.native</span>=<span class=\"string\">\"onClick\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">my-component</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>See also:</strong></p>\n<ul>\n<li><a href=\"../guide/events.html\">Event Handling</a></li>\n<li><a href=\"../guide/components.html#Custom-Events\">Components - Custom Events</a></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"v-bind\"><a href=\"#v-bind\" class=\"headerlink\" title=\"v-bind\"></a>v-bind</h3><ul>\n<li><p><strong>Shorthand:</strong> <code>:</code></p>\n</li>\n<li><p><strong>Expects:</strong> <code>any (with argument) | Object (without argument)</code></p>\n</li>\n<li><p><strong>Argument:</strong> <code>attrOrProp (optional)</code></p>\n</li>\n<li><p><strong>Modifiers:</strong></p>\n<ul>\n<li><code>.prop</code> - Bind as a DOM property instead of an attribute (<a href=\"https://stackoverflow.com/questions/6003819/properties-and-attributes-in-html#answer-6004028\" target=\"_blank\" rel=\"noopener\">what’s the difference?</a>). If the tag is a component then <code>.prop</code> will set the property on the component’s <code>$el</code>.</li>\n<li><code>.camel</code> - (2.1.0+) transform the kebab-case attribute name into camelCase.</li>\n<li><code>.sync</code> - (2.3.0+) a syntax sugar that expands into a <code>v-on</code> handler for updating the bound value.</li>\n</ul>\n</li>\n<li><p><strong>Usage:</strong></p>\n<p>Dynamically bind one or more attributes, or a component prop to an expression.</p>\n<p>When used to bind the <code>class</code> or <code>style</code> attribute, it supports additional value types such as Array or Objects. See linked guide section below for more details.</p>\n<p>When used for prop binding, the prop must be properly declared in the child component.</p>\n<p>When used without an argument, can be used to bind an object containing attribute name-value pairs. Note in this mode <code>class</code> and <code>style</code> does not support Array or Objects.</p>\n</li>\n<li><p><strong>Example:</strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- bind an attribute --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">v-bind:src</span>=<span class=\"string\">\"imageSrc\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- shorthand --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">:src</span>=<span class=\"string\">\"imageSrc\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- with inline string concatenation --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">:src</span>=<span class=\"string\">\"'/path/to/images/' + fileName\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- class binding --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">:class</span>=<span class=\"string\">\"&#123; red: isRed &#125;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">:class</span>=<span class=\"string\">\"[classA, classB]\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">:class</span>=<span class=\"string\">\"[classA, &#123; classB: isB, classC: isC &#125;]\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- style binding --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">:style</span>=<span class=\"string\">\"&#123; fontSize: size + 'px' &#125;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">:style</span>=<span class=\"string\">\"[styleObjectA, styleObjectB]\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- binding an object of attributes --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-bind</span>=<span class=\"string\">\"&#123; id: someProp, 'other-attr': otherProp &#125;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- DOM attribute binding with prop modifier --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-bind:text-content.prop</span>=<span class=\"string\">\"text\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- prop binding. \"prop\" must be declared in my-component. --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">my-component</span> <span class=\"attr\">:prop</span>=<span class=\"string\">\"someThing\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">my-component</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- pass down parent props in common with a child component --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">child-component</span> <span class=\"attr\">v-bind</span>=<span class=\"string\">\"$props\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">child-component</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- XLink --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">svg</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">:xlink:special</span>=<span class=\"string\">\"foo\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">svg</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>The <code>.camel</code> modifier allows camelizing a <code>v-bind</code> attribute name when using in-DOM templates, e.g. the SVG <code>viewBox</code> attribute:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">svg</span> <span class=\"attr\">:view-box.camel</span>=<span class=\"string\">\"viewBox\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">svg</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><code>.camel</code> is not needed if you are using string templates, or compiling with <code>vue-loader</code>/<code>vueify</code>.</p>\n</li>\n<li><p><strong>See also:</strong></p>\n<ul>\n<li><a href=\"../guide/class-and-style.html\">Class and Style Bindings</a></li>\n<li><a href=\"../guide/components.html#Props\">Components - Props</a></li>\n<li><a href=\"../guide/components.html#sync-Modifier\">Components - <code>.sync</code> Modifier</a></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"v-model\"><a href=\"#v-model\" class=\"headerlink\" title=\"v-model\"></a>v-model</h3><ul>\n<li><p><strong>Expects:</strong> varies based on value of form inputs element or output of components</p>\n</li>\n<li><p><strong>Limited to:</strong></p>\n<ul>\n<li><code>&lt;input&gt;</code></li>\n<li><code>&lt;select&gt;</code></li>\n<li><code>&lt;textarea&gt;</code></li>\n<li>components</li>\n</ul>\n</li>\n<li><p><strong>Modifiers:</strong></p>\n<ul>\n<li><a href=\"../guide/forms.html#lazy\"><code>.lazy</code></a> - listen to <code>change</code> events instead of <code>input</code></li>\n<li><a href=\"../guide/forms.html#number\"><code>.number</code></a> - cast input string to numbers</li>\n<li><a href=\"../guide/forms.html#trim\"><code>.trim</code></a> - trim input</li>\n</ul>\n</li>\n<li><p><strong>Usage:</strong></p>\n<p>Create a two-way binding on a form input element or a component. For detailed usage and other notes, see the Guide section linked below.</p>\n</li>\n<li><p><strong>See also:</strong></p>\n<ul>\n<li><a href=\"../guide/forms.html\">Form Input Bindings</a></li>\n<li><a href=\"../guide/components.html#Form-Input-Components-using-Custom-Events\">Components - Form Input Components using Custom Events</a></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"v-pre\"><a href=\"#v-pre\" class=\"headerlink\" title=\"v-pre\"></a>v-pre</h3><ul>\n<li><p><strong>Does not expect expression</strong></p>\n</li>\n<li><p><strong>Usage:</strong></p>\n<p>Skip compilation for this element and all its children. You can use this for displaying raw mustache tags. Skipping large numbers of nodes with no directives on them can also speed up compilation.</p>\n</li>\n<li><p><strong>Example:</strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">v-pre</span>&gt;</span>&#123;&#123; this will not be compiled &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"v-cloak\"><a href=\"#v-cloak\" class=\"headerlink\" title=\"v-cloak\"></a>v-cloak</h3><ul>\n<li><p><strong>Does not expect expression</strong></p>\n</li>\n<li><p><strong>Usage:</strong></p>\n<p>This directive will remain on the element until the associated Vue instance finishes compilation. Combined with CSS rules such as <code>[v-cloak] { display: none }</code>, this directive can be used to hide un-compiled mustache bindings until the Vue instance is ready.</p>\n</li>\n<li><p><strong>Example:</strong></p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-attr\">[v-cloak]</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: none;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-cloak</span>&gt;</span></span><br><span class=\"line\">  &#123;&#123; message &#125;&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>The <code>&lt;div&gt;</code> will not be visible until the compilation is done.</p>\n</li>\n</ul>\n<h3 id=\"v-once\"><a href=\"#v-once\" class=\"headerlink\" title=\"v-once\"></a>v-once</h3><ul>\n<li><p><strong>Does not expect expression</strong></p>\n</li>\n<li><p><strong>Details:</strong></p>\n<p>Render the element and component <strong>once</strong> only. On subsequent re-renders, the element/component and all its children will be treated as static content and skipped. This can be used to optimize update performance.</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- single element --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">v-once</span>&gt;</span>This will never change: &#123;&#123;msg&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- the element have children --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-once</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>comment<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- component --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">my-component</span> <span class=\"attr\">v-once</span> <span class=\"attr\">:comment</span>=<span class=\"string\">\"msg\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">my-component</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- `v-for` directive --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"i in list\"</span> <span class=\"attr\">v-once</span>&gt;</span>&#123;&#123;i&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>See also:</strong></p>\n<ul>\n<li><a href=\"../guide/syntax.html#Text\">Data Binding Syntax - interpolations</a></li>\n<li><a href=\"../guide/components.html#Cheap-Static-Components-with-v-once\">Components - Cheap Static Components with <code>v-once</code></a></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Special-Attributes\"><a href=\"#Special-Attributes\" class=\"headerlink\" title=\"Special Attributes\"></a>Special Attributes</h2><h3 id=\"key\"><a href=\"#key\" class=\"headerlink\" title=\"key\"></a>key</h3><ul>\n<li><p><strong>Expects:</strong> <code>number | string</code></p>\n<p>The <code>key</code> special attribute is primarily used as a hint for Vue’s virtual DOM algorithm to identify VNodes when diffing the new list of nodes against the old list. Without keys, Vue uses an algorithm that minimizes element movement and tries to patch/reuse elements of the same type in-place as much as possible. With keys, it will reorder elements based on the order change of keys, and elements with keys that are no longer present will always be removed/destroyed.</p>\n<p>Children of the same common parent must have <strong>unique keys</strong>. Duplicate keys will cause render errors.</p>\n<p>The most common use case is combined with <code>v-for</code>:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"item in items\"</span> <span class=\"attr\">:key</span>=<span class=\"string\">\"item.id\"</span>&gt;</span>...<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>It can also be used to force replacement of an element/component instead of reusing it. This can be useful when you want to:</p>\n<ul>\n<li>Properly trigger lifecycle hooks of a component</li>\n<li>Trigger transitions</li>\n</ul>\n<p>For example:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">transition</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">:key</span>=<span class=\"string\">\"text\"</span>&gt;</span>&#123;&#123; text &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">transition</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>When <code>text</code> changes, the <code>&lt;span&gt;</code> will always be replaced instead of patched, so a transition will be triggered.</p>\n</li>\n</ul>\n<h3 id=\"ref\"><a href=\"#ref\" class=\"headerlink\" title=\"ref\"></a>ref</h3><ul>\n<li><p><strong>Expects:</strong> <code>string</code></p>\n<p><code>ref</code> is used to register a reference to an element or a child component. The reference will be registered under the parent component’s <code>$refs</code> object. If used on a plain DOM element, the reference will be that element; if used on a child component, the reference will be component instance:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- vm.$refs.p will be the DOM node --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"p\"</span>&gt;</span>hello<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- vm.$refs.child will be the child component instance --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">child-component</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"child\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">child-component</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>When used on elements/components with <code>v-for</code>, the registered reference will be an Array containing DOM nodes or component instances.</p>\n<p>An important note about the ref registration timing: because the refs themselves are created as a result of the render function, you cannot access them on the initial render - they don’t exist yet! <code>$refs</code> is also non-reactive, therefore you should not attempt to use it in templates for data-binding.</p>\n</li>\n<li><p><strong>See also:</strong> <a href=\"../guide/components.html#Child-Component-Refs\">Child Component Refs</a></p>\n</li>\n</ul>\n<h3 id=\"slot\"><a href=\"#slot\" class=\"headerlink\" title=\"slot\"></a>slot</h3><ul>\n<li><p><strong>Expects:</strong> <code>string</code></p>\n<p>Used on content inserted into child components to indicate which named slot the content belongs to.</p>\n<p>For detailed usage, see the guide section linked below.</p>\n</li>\n<li><p><strong>See also:</strong> <a href=\"../guide/components.html#Named-Slots\">Named Slots</a></p>\n</li>\n</ul>\n<h3 id=\"slot-scope\"><a href=\"#slot-scope\" class=\"headerlink\" title=\"slot-scope\"></a>slot-scope</h3><blockquote>\n<p>New in 2.5.0+</p>\n</blockquote>\n<ul>\n<li><p><strong>Expects:</strong> <code>function argument expression</code></p>\n</li>\n<li><p><strong>Usage:</strong></p>\n<p>Used to denote an element or component as a scoped slot. The attribute’s value should be a valid JavaScript expression that can appear in the argument position of a function signature. This means in supported environments you can also use ES2015 destructuring in the expression. Serves as a replacement for <a href=\"#scope-replaced\"><code>scope</code></a> in 2.5.0+.</p>\n<p>This attribute does not support dynamic binding.</p>\n</li>\n<li><p><strong>See also:</strong> <a href=\"../guide/components.html#Scoped-Slots\">Scoped Slots</a></p>\n</li>\n</ul>\n<h3 id=\"scope-replaced\"><a href=\"#scope-replaced\" class=\"headerlink\" title=\"scope replaced\"></a>scope <sup>replaced</sup></h3><p>Used to denote a <code>&lt;template&gt;</code> element as a scoped slot, which is replaced by <a href=\"#slot-scope\"><code>slot-scope</code></a> in 2.5.0+.</p>\n<ul>\n<li><p><strong>Usage:</strong></p>\n<p>Same as <a href=\"#slot-scope\"><code>slot-scope</code></a> except that <code>scope</code> can only be used on <code>&lt;template&gt;</code> elements.</p>\n</li>\n</ul>\n<h3 id=\"is\"><a href=\"#is\" class=\"headerlink\" title=\"is\"></a>is</h3><ul>\n<li><p><strong>Expects:</strong> <code>string | Object (component’s options object)</code></p>\n<p>Used for <a href=\"../guide/components.html#Dynamic-Components\">dynamic components</a> and to work around <a href=\"../guide/components.html#DOM-Template-Parsing-Caveats\">limitations of in-DOM templates</a>.</p>\n<p>For example:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- component changes when currentView changes --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">component</span> <span class=\"attr\">v-bind:is</span>=<span class=\"string\">\"currentView\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">component</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- necessary because `&lt;my-row&gt;` would be invalid inside --&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- a `&lt;table&gt;` element and so would be hoisted out      --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">table</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">tr</span> <span class=\"attr\">is</span>=<span class=\"string\">\"my-row\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>For detailed usage, follow the links in the description above.</p>\n</li>\n<li><p><strong>See also:</strong></p>\n<ul>\n<li><a href=\"../guide/components.html#Dynamic-Components\">Dynamic Components</a></li>\n<li><a href=\"../guide/components.html#DOM-Template-Parsing-Caveats\">DOM Template Parsing Caveats</a></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Built-In-Components\"><a href=\"#Built-In-Components\" class=\"headerlink\" title=\"Built-In Components\"></a>Built-In Components</h2><h3 id=\"component\"><a href=\"#component\" class=\"headerlink\" title=\"component\"></a>component</h3><ul>\n<li><p><strong>Props:</strong></p>\n<ul>\n<li><code>is</code> - string | ComponentDefinition | ComponentConstructor</li>\n<li><code>inline-template</code> - boolean</li>\n</ul>\n</li>\n<li><p><strong>Usage:</strong></p>\n<p>A “meta component” for rendering dynamic components. The actual component to render is determined by the <code>is</code> prop:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- a dynamic component controlled by --&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- the `componentId` property on the vm --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">component</span> <span class=\"attr\">:is</span>=<span class=\"string\">\"componentId\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">component</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- can also render registered component or component passed as prop --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">component</span> <span class=\"attr\">:is</span>=<span class=\"string\">\"$options.components.child\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">component</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>See also:</strong> <a href=\"../guide/components.html#Dynamic-Components\">Dynamic Components</a></p>\n</li>\n</ul>\n<h3 id=\"transition\"><a href=\"#transition\" class=\"headerlink\" title=\"transition\"></a>transition</h3><ul>\n<li><p><strong>Props:</strong></p>\n<ul>\n<li><code>name</code> - string, Used to automatically generate transition CSS class names. e.g. <code>name: &#39;fade&#39;</code> will auto expand to <code>.fade-enter</code>, <code>.fade-enter-active</code>, etc. Defaults to <code>&quot;v&quot;</code>.</li>\n<li><code>appear</code> - boolean, Whether to apply transition on initial render. Defaults to <code>false</code>.</li>\n<li><code>css</code> - boolean, Whether to apply CSS transition classes. Defaults to <code>true</code>. If set to <code>false</code>, will only trigger JavaScript hooks registered via component events.</li>\n<li><code>type</code> - string, Specify the type of transition events to wait for to determine transition end timing. Available values are <code>&quot;transition&quot;</code> and <code>&quot;animation&quot;</code>. By default, it will automatically detect the type that has a longer duration.</li>\n<li><code>mode</code> - string, Controls the timing sequence of leaving/entering transitions. Available modes are <code>&quot;out-in&quot;</code> and <code>&quot;in-out&quot;</code>; defaults to simultaneous.</li>\n<li><code>enter-class</code> - string</li>\n<li><code>leave-class</code> - string</li>\n<li><code>appear-class</code> - string</li>\n<li><code>enter-to-class</code> - string</li>\n<li><code>leave-to-class</code> - string</li>\n<li><code>appear-to-class</code> - string</li>\n<li><code>enter-active-class</code> - string</li>\n<li><code>leave-active-class</code> - string</li>\n<li><code>appear-active-class</code> - string</li>\n</ul>\n</li>\n<li><p><strong>Events:</strong></p>\n<ul>\n<li><code>before-enter</code></li>\n<li><code>before-leave</code></li>\n<li><code>before-appear</code></li>\n<li><code>enter</code></li>\n<li><code>leave</code></li>\n<li><code>appear</code></li>\n<li><code>after-enter</code></li>\n<li><code>after-leave</code></li>\n<li><code>after-appear</code></li>\n<li><code>enter-cancelled</code></li>\n<li><code>leave-cancelled</code> (<code>v-show</code> only)</li>\n<li><code>appear-cancelled</code></li>\n</ul>\n</li>\n<li><p><strong>Usage:</strong></p>\n<p><code>&lt;transition&gt;</code> serve as transition effects for <strong>single</strong> element/component. The <code>&lt;transition&gt;</code> only applies the transition behavior to the wrapped content inside; it doesn’t render an extra DOM element, or show up in the inspected component hierarchy.</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- simple element --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">transition</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-if</span>=<span class=\"string\">\"ok\"</span>&gt;</span>toggled content<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">transition</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- dynamic component --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">transition</span> <span class=\"attr\">name</span>=<span class=\"string\">\"fade\"</span> <span class=\"attr\">mode</span>=<span class=\"string\">\"out-in\"</span> <span class=\"attr\">appear</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">component</span> <span class=\"attr\">:is</span>=<span class=\"string\">\"view\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">component</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">transition</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- event hooking --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"transition-demo\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">transition</span> @<span class=\"attr\">after-enter</span>=<span class=\"string\">\"transitionComplete\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-show</span>=<span class=\"string\">\"ok\"</span>&gt;</span>toggled content<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">transition</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    transitionComplete: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">el</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">// for passed 'el' that DOM element as the argument, something ...</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;).$mount(<span class=\"string\">'#transition-demo'</span>)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>See also:</strong> <a href=\"../guide/transitions.html\">Transitions: Entering, Leaving, and Lists</a></p>\n</li>\n</ul>\n<h3 id=\"transition-group\"><a href=\"#transition-group\" class=\"headerlink\" title=\"transition-group\"></a>transition-group</h3><ul>\n<li><p><strong>Props:</strong></p>\n<ul>\n<li><code>tag</code> - string, defaults to <code>span</code>.</li>\n<li><code>move-class</code> - overwrite CSS class applied during moving transition.</li>\n<li>exposes the same props as <code>&lt;transition&gt;</code> except <code>mode</code>.</li>\n</ul>\n</li>\n<li><p><strong>Events:</strong></p>\n<ul>\n<li>exposes the same events as <code>&lt;transition&gt;</code>.</li>\n</ul>\n</li>\n<li><p><strong>Usage:</strong></p>\n<p><code>&lt;transition-group&gt;</code> serve as transition effects for <strong>multiple</strong> elements/components. The <code>&lt;transition-group&gt;</code> renders a real DOM element. By default it renders a <code>&lt;span&gt;</code>, and you can configure what element is should render via the <code>tag</code> attribute.</p>\n<p>Note every child in a <code>&lt;transition-group&gt;</code> must be <strong>uniquely keyed</strong> for the animations to work properly.</p>\n<p><code>&lt;transition-group&gt;</code> supports moving transitions via CSS transform. When a child’s position on screen has changed after an updated, it will get applied a moving CSS class (auto generated from the <code>name</code> attribute or configured with the <code>move-class</code> attribute). If the CSS <code>transform</code> property is “transition-able” when the moving class is applied, the element will be smoothly animated to its destination using the <a href=\"https://aerotwist.com/blog/flip-your-animations/\" target=\"_blank\" rel=\"noopener\">FLIP technique</a>.</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">transition-group</span> <span class=\"attr\">tag</span>=<span class=\"string\">\"ul\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"slide\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"item in items\"</span> <span class=\"attr\">:key</span>=<span class=\"string\">\"item.id\"</span>&gt;</span></span><br><span class=\"line\">    &#123;&#123; item.text &#125;&#125;</span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">transition-group</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>See also:</strong> <a href=\"../guide/transitions.html\">Transitions: Entering, Leaving, and Lists</a></p>\n</li>\n</ul>\n<h3 id=\"keep-alive\"><a href=\"#keep-alive\" class=\"headerlink\" title=\"keep-alive\"></a>keep-alive</h3><ul>\n<li><p><strong>Props:</strong></p>\n<ul>\n<li><code>include</code> - string or RegExp or Array. Only components matched by this will be cached.</li>\n<li><code>exclude</code> - string or RegExp or Array. Any component matched by this will not be cached.</li>\n</ul>\n</li>\n<li><p><strong>Usage:</strong></p>\n<p>When wrapped around a dynamic component, <code>&lt;keep-alive&gt;</code> caches the inactive component instances without destroying them. Similar to <code>&lt;transition&gt;</code>, <code>&lt;keep-alive&gt;</code> is an abstract component: it doesn’t render a DOM element itself, and doesn’t show up in the component parent chain.</p>\n<p>When a component is toggled inside <code>&lt;keep-alive&gt;</code>, its <code>activated</code> and <code>deactivated</code> lifecycle hooks will be invoked accordingly.</p>\n<blockquote>\n<p>In 2.2.0+ and above, <code>activated</code> and <code>deactivated</code> will fire for all nested components inside a <code>&lt;keep-alive&gt;</code> tree.</p>\n</blockquote>\n<p>Primarily used with preserve component state or avoid re-rendering.</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- basic --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">keep-alive</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">component</span> <span class=\"attr\">:is</span>=<span class=\"string\">\"view\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">component</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">keep-alive</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- multiple conditional children --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">keep-alive</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">comp-a</span> <span class=\"attr\">v-if</span>=<span class=\"string\">\"a &gt; 1\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">comp-a</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">comp-b</span> <span class=\"attr\">v-else</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">comp-b</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">keep-alive</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- used together with `&lt;transition&gt;` --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">transition</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">keep-alive</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">component</span> <span class=\"attr\">:is</span>=<span class=\"string\">\"view\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">component</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">keep-alive</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">transition</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>Note, <code>&lt;keep-alive&gt;</code> is designed for the case where it has one direct child component that is being toggled. It does not work if you have <code>v-for</code> inside it. When there are multiple conditional children, as above, <code>&lt;keep-alive&gt;</code> requires that only one child is rendered at a time.</p>\n</li>\n<li><p><strong><code>include</code> and <code>exclude</code></strong></p>\n<blockquote>\n<p>New in 2.1.0+</p>\n</blockquote>\n<p>The <code>include</code> and <code>exclude</code> props allow components to be conditionally cached. Both props can be a comma-delimited string, a RegExp or an Array:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- comma-delimited string --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">keep-alive</span> <span class=\"attr\">include</span>=<span class=\"string\">\"a,b\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">component</span> <span class=\"attr\">:is</span>=<span class=\"string\">\"view\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">component</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">keep-alive</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- regex (use `v-bind`) --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">keep-alive</span> <span class=\"attr\">:include</span>=<span class=\"string\">\"/a|b/\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">component</span> <span class=\"attr\">:is</span>=<span class=\"string\">\"view\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">component</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">keep-alive</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- Array (use `v-bind`) --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">keep-alive</span> <span class=\"attr\">:include</span>=<span class=\"string\">\"['a', 'b']\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">component</span> <span class=\"attr\">:is</span>=<span class=\"string\">\"view\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">component</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">keep-alive</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>The match is first checked on the component’s own <code>name</code> option, then its local registration name (the key in the parent’s <code>components</code> option) if the <code>name</code> option is not available. Anonymous components cannot be matched against.</p>\n<p class=\"tip\"><code>&lt;keep-alive&gt;</code> does not work with functional components because they do not have instances to be cached.</p>\n</li>\n<li><p><strong>See also:</strong> <a href=\"../guide/components.html#keep-alive\">Dynamic Components - keep-alive</a></p>\n</li>\n</ul>\n<h3 id=\"slot-1\"><a href=\"#slot-1\" class=\"headerlink\" title=\"slot\"></a>slot</h3><ul>\n<li><p><strong>Props:</strong></p>\n<ul>\n<li><code>name</code> - string, Used for named slot.</li>\n</ul>\n</li>\n<li><p><strong>Usage:</strong></p>\n<p><code>&lt;slot&gt;</code> serve as content distribution outlets in component templates. <code>&lt;slot&gt;</code> itself will be replaced.</p>\n<p>For detailed usage, see the guide section linked below.</p>\n</li>\n<li><p><strong>See also:</strong> <a href=\"../guide/components.html#Content-Distribution-with-Slots\">Content Distribution with Slots</a></p>\n</li>\n</ul>\n<h2 id=\"VNode-Interface\"><a href=\"#VNode-Interface\" class=\"headerlink\" title=\"VNode Interface\"></a>VNode Interface</h2><ul>\n<li>Please refer to the <a href=\"https://github.com/vuejs/vue/blob/dev/src/core/vdom/vnode.js\" target=\"_blank\" rel=\"noopener\">VNode class declaration</a>.</li>\n</ul>\n<h2 id=\"Server-Side-Rendering\"><a href=\"#Server-Side-Rendering\" class=\"headerlink\" title=\"Server-Side Rendering\"></a>Server-Side Rendering</h2><ul>\n<li>Please refer to the <a href=\"https://github.com/vuejs/vue/tree/dev/packages/vue-server-renderer\" target=\"_blank\" rel=\"noopener\">vue-server-renderer package documentation</a>.</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Global-Config\"><a href=\"#Global-Config\" class=\"headerlink\" title=\"Global Config\"></a>Global Config</h2><p><code>Vue.config</code> is an object containing Vue’s global configurations. You can modify its properties listed below before bootstrapping your application:</p>\n<h3 id=\"silent\"><a href=\"#silent\" class=\"headerlink\" title=\"silent\"></a>silent</h3><ul>\n<li><p><strong>Type:</strong> <code>boolean</code></p>\n</li>\n<li><p><strong>Default:</strong> <code>false</code></p>\n</li>\n<li><p><strong>Usage:</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">Vue.config.silent = <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<p>Suppress all Vue logs and warnings.</p>\n</li>\n</ul>\n<h3 id=\"optionMergeStrategies\"><a href=\"#optionMergeStrategies\" class=\"headerlink\" title=\"optionMergeStrategies\"></a>optionMergeStrategies</h3><ul>\n<li><p><strong>Type:</strong> <code>{ [key: string]: Function }</code></p>\n</li>\n<li><p><strong>Default:</strong> <code>{}</code></p>\n</li>\n<li><p><strong>Usage:</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">Vue.config.optionMergeStrategies._my_option = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">parent, child, vm</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> child + <span class=\"number\">1</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> Profile = Vue.extend(&#123;</span><br><span class=\"line\">  _my_option: <span class=\"number\">1</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Profile.options._my_option = 2</span></span><br></pre></td></tr></table></figure>\n<p>Define custom merging strategies for options.</p>\n<p>The merge strategy receives the value of that option defined on the parent and child instances as the first and second arguments, respectively. The context Vue instance is passed as the third argument.</p>\n</li>\n<li><p><strong>See also:</strong> <a href=\"../guide/mixins.html#Custom-Option-Merge-Strategies\">Custom Option Merging Strategies</a></p>\n</li>\n</ul>\n<h3 id=\"devtools\"><a href=\"#devtools\" class=\"headerlink\" title=\"devtools\"></a>devtools</h3><ul>\n<li><p><strong>Type:</strong> <code>boolean</code></p>\n</li>\n<li><p><strong>Default:</strong> <code>true</code> (<code>false</code> in production builds)</p>\n</li>\n<li><p><strong>Usage:</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// make sure to set this synchronously immediately after loading Vue</span></span><br><span class=\"line\">Vue.config.devtools = <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<p>Configure whether to allow <a href=\"https://github.com/vuejs/vue-devtools\" target=\"_blank\" rel=\"noopener\">vue-devtools</a> inspection. This option’s default value is <code>true</code> in development builds and <code>false</code> in production builds. You can set it to <code>true</code> to enable inspection for production builds.</p>\n</li>\n</ul>\n<h3 id=\"errorHandler\"><a href=\"#errorHandler\" class=\"headerlink\" title=\"errorHandler\"></a>errorHandler</h3><ul>\n<li><p><strong>Type:</strong> <code>Function</code></p>\n</li>\n<li><p><strong>Default:</strong> <code>undefined</code></p>\n</li>\n<li><p><strong>Usage:</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">Vue.config.errorHandler = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, vm, info</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// handle error</span></span><br><span class=\"line\">  <span class=\"comment\">// `info` is a Vue-specific error info, e.g. which lifecycle hook</span></span><br><span class=\"line\">  <span class=\"comment\">// the error was found in. Only available in 2.2.0+</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Assign a handler for uncaught errors during component render function and watchers. The handler gets called with the error and the Vue instance.</p>\n<blockquote>\n<p>In 2.2.0+, this hook also captures errors in component lifecycle hooks. Also, when this hook is <code>undefined</code>, captured errors will be logged with <code>console.error</code> instead of crashing the app.</p>\n</blockquote>\n<blockquote>\n<p>In 2.4.0+ this hook also captures errors thrown inside Vue custom event handlers.</p>\n</blockquote>\n<blockquote>\n<p>Error tracking services <a href=\"https://sentry.io/for/vue/\" target=\"_blank\" rel=\"noopener\">Sentry</a> and <a href=\"https://docs.bugsnag.com/platforms/browsers/vue/\" target=\"_blank\" rel=\"noopener\">Bugsnag</a> provide official integrations using this option.</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"warnHandler\"><a href=\"#warnHandler\" class=\"headerlink\" title=\"warnHandler\"></a>warnHandler</h3><blockquote>\n<p>New in 2.4.0+</p>\n</blockquote>\n<ul>\n<li><p><strong>Type:</strong> <code>Function</code></p>\n</li>\n<li><p><strong>Default:</strong> <code>undefined</code></p>\n</li>\n<li><p><strong>Usage:</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">Vue.config.warnHandler = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">msg, vm, trace</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// `trace` is the component hierarchy trace</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Assign a custom handler for runtime Vue warnings. Note this only works during development and is ignored in production.</p>\n</li>\n</ul>\n<h3 id=\"ignoredElements\"><a href=\"#ignoredElements\" class=\"headerlink\" title=\"ignoredElements\"></a>ignoredElements</h3><ul>\n<li><p><strong>Type:</strong> <code>Array&lt;string | RegExp&gt;</code></p>\n</li>\n<li><p><strong>Default:</strong> <code>[]</code></p>\n</li>\n<li><p><strong>Usage:</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">Vue.config.ignoredElements = [</span><br><span class=\"line\">  <span class=\"string\">'my-custom-web-component'</span>,</span><br><span class=\"line\">  <span class=\"string\">'another-web-component'</span>,</span><br><span class=\"line\">  <span class=\"comment\">// Use a `RegExp` to ignore all elements that start with \"ion-\"</span></span><br><span class=\"line\">  <span class=\"comment\">// 2.5+ only</span></span><br><span class=\"line\">  /^ion-<span class=\"regexp\">/</span></span><br><span class=\"line\"><span class=\"regexp\">]</span></span><br></pre></td></tr></table></figure>\n<p>Make Vue ignore custom elements defined outside of Vue (e.g., using the Web Components APIs). Otherwise, it will throw a warning about an <code>Unknown custom element</code>, assuming that you forgot to register a global component or misspelled a component name.</p>\n</li>\n</ul>\n<h3 id=\"keyCodes\"><a href=\"#keyCodes\" class=\"headerlink\" title=\"keyCodes\"></a>keyCodes</h3><ul>\n<li><p><strong>Type:</strong> <code>{ [key: string]: number | Array&lt;number&gt; }</code></p>\n</li>\n<li><p><strong>Default:</strong> <code>{}</code></p>\n</li>\n<li><p><strong>Usage:</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">Vue.config.keyCodes = &#123;</span><br><span class=\"line\">  v: <span class=\"number\">86</span>,</span><br><span class=\"line\">  f1: <span class=\"number\">112</span>,</span><br><span class=\"line\">  <span class=\"comment\">// camelCase won`t work</span></span><br><span class=\"line\">  mediaPlayPause: <span class=\"number\">179</span>,</span><br><span class=\"line\">  <span class=\"comment\">// instead you can use kebab-case with double quotation marks</span></span><br><span class=\"line\">  <span class=\"string\">\"media-play-pause\"</span>: <span class=\"number\">179</span>,</span><br><span class=\"line\">  up: [<span class=\"number\">38</span>, <span class=\"number\">87</span>]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> @<span class=\"attr\">keyup.media-play-pause</span>=<span class=\"string\">\"method\"</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>Define custom key alias(es) for <code>v-on</code>.</p>\n</li>\n</ul>\n<h3 id=\"performance\"><a href=\"#performance\" class=\"headerlink\" title=\"performance\"></a>performance</h3><blockquote>\n<p>New in 2.2.0+</p>\n</blockquote>\n<ul>\n<li><p><strong>Type:</strong> <code>boolean</code></p>\n</li>\n<li><p><strong>Default:</strong> <code>false (from 2.2.3+)</code></p>\n</li>\n<li><p><strong>Usage</strong>:</p>\n<p>Set this to <code>true</code> to enable component init, compile, render and patch performance tracing in the browser devtool performance/timeline panel. Only works in development mode and in browsers that support the <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Performance/mark\" target=\"_blank\" rel=\"noopener\">performance.mark</a> API.</p>\n</li>\n</ul>\n<h3 id=\"productionTip\"><a href=\"#productionTip\" class=\"headerlink\" title=\"productionTip\"></a>productionTip</h3><blockquote>\n<p>New in 2.2.0+</p>\n</blockquote>\n<ul>\n<li><p><strong>Type:</strong> <code>boolean</code></p>\n</li>\n<li><p><strong>Default:</strong> <code>true</code></p>\n</li>\n<li><p><strong>Usage</strong>:</p>\n<p>Set this to <code>false</code> to prevent the production tip on Vue startup.</p>\n</li>\n</ul>\n<h2 id=\"Global-API\"><a href=\"#Global-API\" class=\"headerlink\" title=\"Global API\"></a>Global API</h2><h3 id=\"Vue-extend-options\"><a href=\"#Vue-extend-options\" class=\"headerlink\" title=\"Vue.extend( options )\"></a>Vue.extend( options )</h3><ul>\n<li><p><strong>Arguments:</strong></p>\n<ul>\n<li><code>{Object} options</code></li>\n</ul>\n</li>\n<li><p><strong>Usage:</strong></p>\n<p>Create a “subclass” of the base Vue constructor. The argument should be an object containing component options.</p>\n<p>The special case to note here is the <code>data</code> option - it must be a function when used with <code>Vue.extend()</code>.</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"mount-point\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// create constructor</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> Profile = Vue.extend(&#123;</span><br><span class=\"line\">  template: <span class=\"string\">'&lt;p&gt;&#123;&#123;firstName&#125;&#125; &#123;&#123;lastName&#125;&#125; aka &#123;&#123;alias&#125;&#125;&lt;/p&gt;'</span>,</span><br><span class=\"line\">  data: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      firstName: <span class=\"string\">'Walter'</span>,</span><br><span class=\"line\">      lastName: <span class=\"string\">'White'</span>,</span><br><span class=\"line\">      alias: <span class=\"string\">'Heisenberg'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// create an instance of Profile and mount it on an element</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> Profile().$mount(<span class=\"string\">'#mount-point'</span>)</span><br></pre></td></tr></table></figure>\n<p>Will result in:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Walter White aka Heisenberg<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>See also:</strong> <a href=\"../guide/components.html\">Components</a></p>\n</li>\n</ul>\n<h3 id=\"Vue-nextTick-callback-context\"><a href=\"#Vue-nextTick-callback-context\" class=\"headerlink\" title=\"Vue.nextTick( [callback, context] )\"></a>Vue.nextTick( [callback, context] )</h3><ul>\n<li><p><strong>Arguments:</strong></p>\n<ul>\n<li><code>{Function} [callback]</code></li>\n<li><code>{Object} [context]</code></li>\n</ul>\n</li>\n<li><p><strong>Usage:</strong></p>\n<p>Defer the callback to be executed after the next DOM update cycle. Use it immediately after you’ve changed some data to wait for the DOM update.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// modify data</span></span><br><span class=\"line\">vm.msg = <span class=\"string\">'Hello'</span></span><br><span class=\"line\"><span class=\"comment\">// DOM not updated yet</span></span><br><span class=\"line\">Vue.nextTick(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// DOM updated</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// usage as a promise (2.1.0+, see note below)</span></span><br><span class=\"line\">Vue.nextTick()</span><br><span class=\"line\">  .then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// DOM updated</span></span><br><span class=\"line\">  &#125;)</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>New in 2.1.0+: returns a Promise if no callback is provided and Promise is supported in the execution environment. Please note that Vue does not come with a Promise polyfill, so if you target browsers that don’t support Promises natively (looking at you, IE), you will have to provide a polyfill yourself.</p>\n</blockquote>\n</li>\n<li><p><strong>See also:</strong> <a href=\"../guide/reactivity.html#Async-Update-Queue\">Async Update Queue</a></p>\n</li>\n</ul>\n<h3 id=\"Vue-set-target-key-value\"><a href=\"#Vue-set-target-key-value\" class=\"headerlink\" title=\"Vue.set( target, key, value )\"></a>Vue.set( target, key, value )</h3><ul>\n<li><p><strong>Arguments:</strong></p>\n<ul>\n<li><code>{Object | Array} target</code></li>\n<li><code>{string | number} key</code></li>\n<li><code>{any} value</code></li>\n</ul>\n</li>\n<li><p><strong>Returns:</strong> the set value.</p>\n</li>\n<li><p><strong>Usage:</strong></p>\n<p>Adds a property to a reactive object, ensuring the new property is also reactive, so triggers view updates. This must be used to add new properties to reactive objects, as Vue cannot detect normal property additions (e.g. <code>this.myObject.newProperty = &#39;hi&#39;</code>).</p>\n<p class=\"tip\">The target object cannot be a Vue instance, or the root data object of a Vue instance.</p>\n</li>\n<li><p><strong>See also:</strong> <a href=\"../guide/reactivity.html\">Reactivity in Depth</a></p>\n</li>\n</ul>\n<h3 id=\"Vue-delete-target-key\"><a href=\"#Vue-delete-target-key\" class=\"headerlink\" title=\"Vue.delete( target, key )\"></a>Vue.delete( target, key )</h3><ul>\n<li><p><strong>Arguments:</strong></p>\n<ul>\n<li><code>{Object | Array} target</code></li>\n<li><code>{string | number} key/index</code></li>\n</ul>\n<blockquote>\n<p>Only in 2.2.0+: Also works with Array + index.</p>\n</blockquote>\n</li>\n<li><p><strong>Usage:</strong></p>\n<p>Delete a property on an object. If the object is reactive, ensure the deletion triggers view updates. This is primarily used to get around the limitation that Vue cannot detect property deletions, but you should rarely need to use it.</p>\n<p class=\"tip\">The target object cannot be a Vue instance, or the root data object of a Vue instance.</p>\n</li>\n<li><p><strong>See also:</strong> <a href=\"../guide/reactivity.html\">Reactivity in Depth</a></p>\n</li>\n</ul>\n<h3 id=\"Vue-directive-id-definition\"><a href=\"#Vue-directive-id-definition\" class=\"headerlink\" title=\"Vue.directive( id, [definition] )\"></a>Vue.directive( id, [definition] )</h3><ul>\n<li><p><strong>Arguments:</strong></p>\n<ul>\n<li><code>{string} id</code></li>\n<li><code>{Function | Object} [definition]</code></li>\n</ul>\n</li>\n<li><p><strong>Usage:</strong></p>\n<p>Register or retrieve a global directive.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// register</span></span><br><span class=\"line\">Vue.directive(<span class=\"string\">'my-directive'</span>, &#123;</span><br><span class=\"line\">  bind: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;&#125;,</span><br><span class=\"line\">  inserted: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;&#125;,</span><br><span class=\"line\">  update: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;&#125;,</span><br><span class=\"line\">  componentUpdated: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;&#125;,</span><br><span class=\"line\">  unbind: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// register (function directive)</span></span><br><span class=\"line\">Vue.directive(<span class=\"string\">'my-directive'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// this will be called as `bind` and `update`</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// getter, return the directive definition if registered</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> myDirective = Vue.directive(<span class=\"string\">'my-directive'</span>)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>See also:</strong> <a href=\"../guide/custom-directive.html\">Custom Directives</a></p>\n</li>\n</ul>\n<h3 id=\"Vue-filter-id-definition\"><a href=\"#Vue-filter-id-definition\" class=\"headerlink\" title=\"Vue.filter( id, [definition] )\"></a>Vue.filter( id, [definition] )</h3><ul>\n<li><p><strong>Arguments:</strong></p>\n<ul>\n<li><code>{string} id</code></li>\n<li><code>{Function} [definition]</code></li>\n</ul>\n</li>\n<li><p><strong>Usage:</strong></p>\n<p>Register or retrieve a global filter.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// register</span></span><br><span class=\"line\">Vue.filter(<span class=\"string\">'my-filter'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// return processed value</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// getter, return the filter if registered</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> myFilter = Vue.filter(<span class=\"string\">'my-filter'</span>)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>See also:</strong> <a href=\"../guide/filters.html\">Filters</a></p>\n</li>\n</ul>\n<h3 id=\"Vue-component-id-definition\"><a href=\"#Vue-component-id-definition\" class=\"headerlink\" title=\"Vue.component( id, [definition] )\"></a>Vue.component( id, [definition] )</h3><ul>\n<li><p><strong>Arguments:</strong></p>\n<ul>\n<li><code>{string} id</code></li>\n<li><code>{Function | Object} [definition]</code></li>\n</ul>\n</li>\n<li><p><strong>Usage:</strong></p>\n<p>Register or retrieve a global component. Registration also automatically sets the component’s <code>name</code> with the given <code>id</code>.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// register an extended constructor</span></span><br><span class=\"line\">Vue.component(<span class=\"string\">'my-component'</span>, Vue.extend(&#123; <span class=\"comment\">/* ... */</span> &#125;))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// register an options object (automatically call Vue.extend)</span></span><br><span class=\"line\">Vue.component(<span class=\"string\">'my-component'</span>, &#123; <span class=\"comment\">/* ... */</span> &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// retrieve a registered component (always return constructor)</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> MyComponent = Vue.component(<span class=\"string\">'my-component'</span>)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>See also:</strong> <a href=\"../guide/components.html\">Components</a></p>\n</li>\n</ul>\n<h3 id=\"Vue-use-plugin\"><a href=\"#Vue-use-plugin\" class=\"headerlink\" title=\"Vue.use( plugin )\"></a>Vue.use( plugin )</h3><ul>\n<li><p><strong>Arguments:</strong></p>\n<ul>\n<li><code>{Object | Function} plugin</code></li>\n</ul>\n</li>\n<li><p><strong>Usage:</strong></p>\n<p>Install a Vue.js plugin. If the plugin is an Object, it must expose an <code>install</code> method. If it is a function itself, it will be treated as the install method. The install method will be called with Vue as the argument.</p>\n<p>When this method is called on the same plugin multiple times, the plugin will be installed only once.</p>\n</li>\n<li><p><strong>See also:</strong> <a href=\"../guide/plugins.html\">Plugins</a></p>\n</li>\n</ul>\n<h3 id=\"Vue-mixin-mixin\"><a href=\"#Vue-mixin-mixin\" class=\"headerlink\" title=\"Vue.mixin( mixin )\"></a>Vue.mixin( mixin )</h3><ul>\n<li><p><strong>Arguments:</strong></p>\n<ul>\n<li><code>{Object} mixin</code></li>\n</ul>\n</li>\n<li><p><strong>Usage:</strong></p>\n<p>Apply a mixin globally, which affects every Vue instance created afterwards. This can be used by plugin authors to inject custom behavior into components. <strong>Not recommended in application code</strong>.</p>\n</li>\n<li><p><strong>See also:</strong> <a href=\"../guide/mixins.html#Global-Mixin\">Global Mixin</a></p>\n</li>\n</ul>\n<h3 id=\"Vue-compile-template\"><a href=\"#Vue-compile-template\" class=\"headerlink\" title=\"Vue.compile( template )\"></a>Vue.compile( template )</h3><ul>\n<li><p><strong>Arguments:</strong></p>\n<ul>\n<li><code>{string} template</code></li>\n</ul>\n</li>\n<li><p><strong>Usage:</strong></p>\n<p>Compiles a template string into a render function. <strong>Only available in the full build.</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> res = Vue.compile(<span class=\"string\">'&lt;div&gt;&lt;span&gt;&#123;&#123; msg &#125;&#125;&lt;/span&gt;&lt;/div&gt;'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    msg: <span class=\"string\">'hello'</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  render: res.render,</span><br><span class=\"line\">  staticRenderFns: res.staticRenderFns</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>See also:</strong> <a href=\"../guide/render-function.html\">Render Functions</a></p>\n</li>\n</ul>\n<h3 id=\"Vue-version\"><a href=\"#Vue-version\" class=\"headerlink\" title=\"Vue.version\"></a>Vue.version</h3><ul>\n<li><p><strong>Details</strong>: Provides the installed version of Vue as a string. This is especially useful for community plugins and components, where you might use different strategies for different versions.</p>\n</li>\n<li><p><strong>Usage</strong>:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> version = <span class=\"built_in\">Number</span>(Vue.version.split(<span class=\"string\">'.'</span>)[<span class=\"number\">0</span>])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (version === <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// Vue v2.x.x</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (version === <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// Vue v1.x.x</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// Unsupported versions of Vue</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"Options-Data\"><a href=\"#Options-Data\" class=\"headerlink\" title=\"Options / Data\"></a>Options / Data</h2><h3 id=\"data\"><a href=\"#data\" class=\"headerlink\" title=\"data\"></a>data</h3><ul>\n<li><p><strong>Type:</strong> <code>Object | Function</code></p>\n</li>\n<li><p><strong>Restriction:</strong> Only accepts <code>Function</code> when used in a component definition.</p>\n</li>\n<li><p><strong>Details:</strong></p>\n<p>The data object for the Vue instance. Vue will recursively convert its properties into getter/setters to make it “reactive”. <strong>The object must be plain</strong>: native objects such as browser API objects and prototype properties are ignored. A rule of thumb is that data should just be data - it is not recommended to observe objects with their own stateful behavior.</p>\n<p>Once observed, you can no longer add reactive properties to the root data object. It is therefore recommended to declare all root-level reactive properties upfront, before creating the instance.</p>\n<p>After the instance is created, the original data object can be accessed as <code>vm.$data</code>. The Vue instance also proxies all the properties found on the data object, so <code>vm.a</code> will be equivalent to <code>vm.$data.a</code>.</p>\n<p>Properties that start with <code>_</code> or <code>$</code> will <strong>not</strong> be proxied on the Vue instance because they may conflict with Vue’s internal properties and API methods. You will have to access them as <code>vm.$data._property</code>.</p>\n<p>When defining a <strong>component</strong>, <code>data</code> must be declared as a function that returns the initial data object, because there will be many instances created using the same definition. If we use a plain object for <code>data</code>, that same object will be <strong>shared by reference</strong> across all instances created! By providing a <code>data</code> function, every time a new instance is created we can call it to return a fresh copy of the initial data.</p>\n<p>If required, a deep clone of the original object can be obtained by passing <code>vm.$data</code> through <code>JSON.parse(JSON.stringify(...))</code>.</p>\n</li>\n<li><p><strong>Example:</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> data = &#123; <span class=\"attr\">a</span>: <span class=\"number\">1</span> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// direct instance creation</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  data: data</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">vm.a <span class=\"comment\">// =&gt; 1</span></span><br><span class=\"line\">vm.$data === data <span class=\"comment\">// =&gt; true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// must use function when in Vue.extend()</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> Component = Vue.extend(&#123;</span><br><span class=\"line\">  data: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123; <span class=\"attr\">a</span>: <span class=\"number\">1</span> &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>Note that if you use an arrow function with the <code>data</code> property, <code>this</code> won’t be the component’s instance, but you can still access the instance as the function’s first argument:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">data: <span class=\"function\"><span class=\"params\">vm</span> =&gt;</span> (&#123; <span class=\"attr\">a</span>: vm.myProp &#125;)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>See also:</strong> <a href=\"../guide/reactivity.html\">Reactivity in Depth</a></p>\n</li>\n</ul>\n<h3 id=\"props\"><a href=\"#props\" class=\"headerlink\" title=\"props\"></a>props</h3><ul>\n<li><p><strong>Type:</strong> <code>Array&lt;string&gt; | Object</code></p>\n</li>\n<li><p><strong>Details:</strong></p>\n<p>A list/hash of attributes that are exposed to accept data from the parent component. It has an Array-based simple syntax and an alternative Object-based syntax that allows advanced configurations such as type checking, custom validation and default values.</p>\n</li>\n<li><p><strong>Example:</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// simple syntax</span></span><br><span class=\"line\">Vue.component(<span class=\"string\">'props-demo-simple'</span>, &#123;</span><br><span class=\"line\">  props: [<span class=\"string\">'size'</span>, <span class=\"string\">'myMessage'</span>]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// object syntax with validation</span></span><br><span class=\"line\">Vue.component(<span class=\"string\">'props-demo-advanced'</span>, &#123;</span><br><span class=\"line\">  props: &#123;</span><br><span class=\"line\">    <span class=\"comment\">// type check</span></span><br><span class=\"line\">    height: <span class=\"built_in\">Number</span>,</span><br><span class=\"line\">    <span class=\"comment\">// type check plus other validations</span></span><br><span class=\"line\">    age: &#123;</span><br><span class=\"line\">      type: <span class=\"built_in\">Number</span>,</span><br><span class=\"line\">      <span class=\"keyword\">default</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">      required: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      validator: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> value &gt;= <span class=\"number\">0</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>See also:</strong> <a href=\"../guide/components.html#Props\">Props</a></p>\n</li>\n</ul>\n<h3 id=\"propsData\"><a href=\"#propsData\" class=\"headerlink\" title=\"propsData\"></a>propsData</h3><ul>\n<li><p><strong>Type:</strong> <code>{ [key: string]: any }</code></p>\n</li>\n<li><p><strong>Restriction:</strong> only respected in instance creation via <code>new</code>.</p>\n</li>\n<li><p><strong>Details:</strong></p>\n<p>Pass props to an instance during its creation. This is primarily intended to make unit testing easier.</p>\n</li>\n<li><p><strong>Example:</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> Comp = Vue.extend(&#123;</span><br><span class=\"line\">  props: [<span class=\"string\">'msg'</span>],</span><br><span class=\"line\">  template: <span class=\"string\">'&lt;div&gt;&#123;&#123; msg &#125;&#125;&lt;/div&gt;'</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> Comp(&#123;</span><br><span class=\"line\">  propsData: &#123;</span><br><span class=\"line\">    msg: <span class=\"string\">'hello'</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"computed\"><a href=\"#computed\" class=\"headerlink\" title=\"computed\"></a>computed</h3><ul>\n<li><p><strong>Type:</strong> <code>{ [key: string]: Function | { get: Function, set: Function } }</code></p>\n</li>\n<li><p><strong>Details:</strong></p>\n<p>Computed properties to be mixed into the Vue instance. All getters and setters have their <code>this</code> context automatically bound to the Vue instance.</p>\n<p>Note that if you use an arrow function with a computed property, <code>this</code> won’t be the component’s instance, but you can still access the instance as the function’s first argument:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">computed: &#123;</span><br><span class=\"line\">  aDouble: <span class=\"function\"><span class=\"params\">vm</span> =&gt;</span> vm.a * <span class=\"number\">2</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Computed properties are cached, and only re-computed on reactive dependency changes. Note that if a certain dependency is out of the instance’s scope (i.e. not reactive), the computed property will <strong>not</strong> be updated.</p>\n</li>\n<li><p><strong>Example:</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  data: &#123; <span class=\"attr\">a</span>: <span class=\"number\">1</span> &#125;,</span><br><span class=\"line\">  computed: &#123;</span><br><span class=\"line\">    <span class=\"comment\">// get only</span></span><br><span class=\"line\">    aDouble: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.a * <span class=\"number\">2</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"comment\">// both get and set</span></span><br><span class=\"line\">    aPlus: &#123;</span><br><span class=\"line\">      get: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.a + <span class=\"number\">1</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      set: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">v</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.a = v - <span class=\"number\">1</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">vm.aPlus   <span class=\"comment\">// =&gt; 2</span></span><br><span class=\"line\">vm.aPlus = <span class=\"number\">3</span></span><br><span class=\"line\">vm.a       <span class=\"comment\">// =&gt; 2</span></span><br><span class=\"line\">vm.aDouble <span class=\"comment\">// =&gt; 4</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>See also:</strong> <a href=\"../guide/computed.html\">Computed Properties</a></p>\n</li>\n</ul>\n<h3 id=\"methods\"><a href=\"#methods\" class=\"headerlink\" title=\"methods\"></a>methods</h3><ul>\n<li><p><strong>Type:</strong> <code>{ [key: string]: Function }</code></p>\n</li>\n<li><p><strong>Details:</strong></p>\n<p>Methods to be mixed into the Vue instance. You can access these methods directly on the VM instance, or use them in directive expressions. All methods will have their <code>this</code> context automatically bound to the Vue instance.</p>\n<p class=\"tip\">Note that <strong>you should not use an arrow function to define a method</strong> (e.g. <code>plus: () =&gt; this.a++</code>). The reason is arrow functions bind the parent context, so <code>this</code> will not be the Vue instance as you expect and <code>this.a</code> will be undefined.</p>\n</li>\n<li><p><strong>Example:</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  data: &#123; <span class=\"attr\">a</span>: <span class=\"number\">1</span> &#125;,</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    plus: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.a++</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">vm.plus()</span><br><span class=\"line\">vm.a <span class=\"comment\">// 2</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>See also:</strong> <a href=\"../guide/events.html\">Event Handling</a></p>\n</li>\n</ul>\n<h3 id=\"watch\"><a href=\"#watch\" class=\"headerlink\" title=\"watch\"></a>watch</h3><ul>\n<li><p><strong>Type:</strong> <code>{ [key: string]: string | Function | Object | Array}</code></p>\n</li>\n<li><p><strong>Details:</strong></p>\n<p>An object where keys are expressions to watch and values are the corresponding callbacks. The value can also be a string of a method name, or an Object that contains additional options. The Vue instance will call <code>$watch()</code> for each entry in the object at instantiation.</p>\n</li>\n<li><p><strong>Example:</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    a: <span class=\"number\">1</span>,</span><br><span class=\"line\">    b: <span class=\"number\">2</span>,</span><br><span class=\"line\">    c: <span class=\"number\">3</span>,</span><br><span class=\"line\">    d: <span class=\"number\">4</span>,</span><br><span class=\"line\">    e: &#123;</span><br><span class=\"line\">      f: &#123;</span><br><span class=\"line\">        g: <span class=\"number\">5</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  watch: &#123;</span><br><span class=\"line\">    a: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">val, oldVal</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">'new: %s, old: %s'</span>, val, oldVal)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"comment\">// string method name</span></span><br><span class=\"line\">    b: <span class=\"string\">'someMethod'</span>,</span><br><span class=\"line\">    <span class=\"comment\">// deep watcher</span></span><br><span class=\"line\">    c: &#123;</span><br><span class=\"line\">      handler: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">val, oldVal</span>) </span>&#123; <span class=\"comment\">/* ... */</span> &#125;,</span><br><span class=\"line\">      deep: <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"comment\">// the callback will be called immediately after the start of the observation</span></span><br><span class=\"line\">    d: &#123;</span><br><span class=\"line\">      handler: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">val, oldVal</span>) </span>&#123; <span class=\"comment\">/* ... */</span> &#125;,</span><br><span class=\"line\">      immediate: <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    e: [</span><br><span class=\"line\">      <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">handle1</span> (<span class=\"params\">val, oldVal</span>) </span>&#123; <span class=\"comment\">/* ... */</span> &#125;,</span><br><span class=\"line\">      <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">handle2</span> (<span class=\"params\">val, oldVal</span>) </span>&#123; <span class=\"comment\">/* ... */</span> &#125;</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    <span class=\"comment\">// watch vm.e.f's value: &#123;g: 5&#125;</span></span><br><span class=\"line\">    <span class=\"string\">'e.f'</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">val, oldVal</span>) </span>&#123; <span class=\"comment\">/* ... */</span> &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">vm.a = <span class=\"number\">2</span> <span class=\"comment\">// =&gt; new: 2, old: 1</span></span><br></pre></td></tr></table></figure>\n<p class=\"tip\">Note that <strong>you should not use an arrow function to define a watcher</strong> (e.g. <code>searchQuery: newValue =&gt; this.updateAutocomplete(newValue)</code>). The reason is arrow functions bind the parent context, so <code>this</code> will not be the Vue instance as you expect and <code>this.updateAutocomplete</code> will be undefined.</p>\n</li>\n<li><p><strong>See also:</strong> <a href=\"#vm-watch\">Instance Methods / Data - vm.$watch</a></p>\n</li>\n</ul>\n<h2 id=\"Options-DOM\"><a href=\"#Options-DOM\" class=\"headerlink\" title=\"Options / DOM\"></a>Options / DOM</h2><h3 id=\"el\"><a href=\"#el\" class=\"headerlink\" title=\"el\"></a>el</h3><ul>\n<li><p><strong>Type:</strong> <code>string | HTMLElement</code></p>\n</li>\n<li><p><strong>Restriction:</strong> only respected in instance creation via <code>new</code>.</p>\n</li>\n<li><p><strong>Details:</strong></p>\n<p>Provide the Vue instance an existing DOM element to mount on. It can be a CSS selector string or an actual HTMLElement.</p>\n<p>After the instance is mounted, the resolved element will be accessible as <code>vm.$el</code>.</p>\n<p>If this option is available at instantiation, the instance will immediately enter compilation; otherwise, the user will have to explicitly call <code>vm.$mount()</code> to manually start the compilation.</p>\n<p class=\"tip\">The provided element merely serves as a mounting point. Unlike in Vue 1.x, the mounted element will be replaced with Vue-generated DOM in all cases. It is therefore not recommended to mount the root instance to <code>&lt;html&gt;</code> or <code>&lt;body&gt;</code>.</p>\n\n<p class=\"tip\">If neither <code>render</code> function nor <code>template</code> option is present, the in-DOM HTML of the mounting DOM element will be extracted as the template. In this case, Runtime + Compiler build of Vue should be used.</p>\n</li>\n<li><p><strong>See also:</strong></p>\n<ul>\n<li><a href=\"../guide/instance.html#Lifecycle-Diagram\">Lifecycle Diagram</a></li>\n<li><a href=\"../guide/installation.html#Runtime-Compiler-vs-Runtime-only\">Runtime + Compiler vs. Runtime-only</a></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"template\"><a href=\"#template\" class=\"headerlink\" title=\"template\"></a>template</h3><ul>\n<li><p><strong>Type:</strong> <code>string</code></p>\n</li>\n<li><p><strong>Details:</strong></p>\n<p>A string template to be used as the markup for the Vue instance. The template will <strong>replace</strong> the mounted element. Any existing markup inside the mounted element will be ignored, unless content distribution slots are present in the template.</p>\n<p>If the string starts with <code>#</code> it will be used as a querySelector and use the selected element’s innerHTML as the template string. This allows the use of the common <code>&lt;script type=&quot;x-template&quot;&gt;</code> trick to include templates.</p>\n<p class=\"tip\">From a security perspective, you should only use Vue templates that you can trust. Never use user-generated content as your template.</p>\n\n<p class=\"tip\">If render function is present in the Vue option, the template will be ignored.</p>\n</li>\n<li><p><strong>See also:</strong></p>\n<ul>\n<li><a href=\"../guide/instance.html#Lifecycle-Diagram\">Lifecycle Diagram</a></li>\n<li><a href=\"../guide/components.html#Content-Distribution-with-Slots\">Content Distribution with Slots</a></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"render\"><a href=\"#render\" class=\"headerlink\" title=\"render\"></a>render</h3><ul>\n<li><p><strong>Type:</strong> <code>(createElement: () =&gt; VNode) =&gt; VNode</code></p>\n</li>\n<li><p><strong>Details:</strong></p>\n<p>An alternative to string templates allowing you to leverage the full programmatic power of JavaScript. The render function receives a <code>createElement</code> method as it’s first argument used to create <code>VNode</code>s.</p>\n<p>If the component is a functional component, the render function also receives an extra argument <code>context</code>, which provides access to contextual data since functional components are instance-less.</p>\n<p class=\"tip\">The <code>render</code> function has priority over the render function compiled from <code>template</code> option or in-DOM HTML template of the mounting element which is specified by the <code>el</code> option.</p>\n</li>\n<li><p><strong>See also:</strong> <a href=\"../guide/render-function.html\">Render Functions</a></p>\n</li>\n</ul>\n<h3 id=\"renderError\"><a href=\"#renderError\" class=\"headerlink\" title=\"renderError\"></a>renderError</h3><blockquote>\n<p>New in 2.2.0+</p>\n</blockquote>\n<ul>\n<li><p><strong>Type:</strong> <code>(createElement: () =&gt; VNode, error: Error) =&gt; VNode</code></p>\n</li>\n<li><p><strong>Details:</strong></p>\n<p><strong>Only works in development mode.</strong></p>\n<p>Provide an alternative render output when the default <code>render</code> function encounters an error. The error will be passed to <code>renderError</code> as the second argument. This is particularly useful when used together with hot-reload.</p>\n</li>\n<li><p><strong>Example:</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  render (h) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'oops'</span>)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  renderError (h, err) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> h(<span class=\"string\">'pre'</span>, &#123; <span class=\"attr\">style</span>: &#123; <span class=\"attr\">color</span>: <span class=\"string\">'red'</span> &#125;&#125;, err.stack)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;).$mount(<span class=\"string\">'#app'</span>)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>See also:</strong> <a href=\"../guide/render-function.html\">Render Functions</a></p>\n</li>\n</ul>\n<h2 id=\"Options-Lifecycle-Hooks\"><a href=\"#Options-Lifecycle-Hooks\" class=\"headerlink\" title=\"Options / Lifecycle Hooks\"></a>Options / Lifecycle Hooks</h2><p class=\"tip\">All lifecycle hooks automatically have their <code>this</code> context bound to the instance, so that you can access data, computed properties, and methods. This means <strong>you should not use an arrow function to define a lifecycle method</strong> (e.g. <code>created: () =&gt; this.fetchTodos()</code>). The reason is arrow functions bind the parent context, so <code>this</code> will not be the Vue instance as you expect and <code>this.fetchTodos</code> will be undefined.</p>\n\n<h3 id=\"beforeCreate\"><a href=\"#beforeCreate\" class=\"headerlink\" title=\"beforeCreate\"></a>beforeCreate</h3><ul>\n<li><p><strong>Type:</strong> <code>Function</code></p>\n</li>\n<li><p><strong>Details:</strong></p>\n<p>Called synchronously immediately after the instance has been initialized, before data observation and event/watcher setup.</p>\n</li>\n<li><p><strong>See also:</strong> <a href=\"../guide/instance.html#Lifecycle-Diagram\">Lifecycle Diagram</a></p>\n</li>\n</ul>\n<h3 id=\"created\"><a href=\"#created\" class=\"headerlink\" title=\"created\"></a>created</h3><ul>\n<li><p><strong>Type:</strong> <code>Function</code></p>\n</li>\n<li><p><strong>Details:</strong></p>\n<p>Called synchronously after the instance is created. At this stage, the instance has finished processing the options which means the following have been set up: data observation, computed properties, methods, watch/event callbacks. However, the mounting phase has not been started, and the <code>$el</code> property will not be available yet.</p>\n</li>\n<li><p><strong>See also:</strong> <a href=\"../guide/instance.html#Lifecycle-Diagram\">Lifecycle Diagram</a></p>\n</li>\n</ul>\n<h3 id=\"beforeMount\"><a href=\"#beforeMount\" class=\"headerlink\" title=\"beforeMount\"></a>beforeMount</h3><ul>\n<li><p><strong>Type:</strong> <code>Function</code></p>\n</li>\n<li><p><strong>Details:</strong></p>\n<p>Called right before the mounting begins: the <code>render</code> function is about to be called for the first time.</p>\n<p><strong>This hook is not called during server-side rendering.</strong></p>\n</li>\n<li><p><strong>See also:</strong> <a href=\"../guide/instance.html#Lifecycle-Diagram\">Lifecycle Diagram</a></p>\n</li>\n</ul>\n<h3 id=\"mounted\"><a href=\"#mounted\" class=\"headerlink\" title=\"mounted\"></a>mounted</h3><ul>\n<li><p><strong>Type:</strong> <code>Function</code></p>\n</li>\n<li><p><strong>Details:</strong></p>\n<p>Called after the instance has been mounted, where <code>el</code> is replaced by the newly created <code>vm.$el</code>. If the root instance is mounted to an in-document element, <code>vm.$el</code> will also be in-document when <code>mounted</code> is called.</p>\n<p>Note that <code>mounted</code> does <strong>not</strong> guarantee that all child components have also been mounted. If you want to wait until the entire view has been rendered, you can use <a href=\"#vm-nextTick\">vm.$nextTick</a> inside of <code>mounted</code>:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">mounted: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.$nextTick(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// Code that will run only after the</span></span><br><span class=\"line\">    <span class=\"comment\">// entire view has been rendered</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>This hook is not called during server-side rendering.</strong></p>\n</li>\n<li><p><strong>See also:</strong> <a href=\"../guide/instance.html#Lifecycle-Diagram\">Lifecycle Diagram</a></p>\n</li>\n</ul>\n<h3 id=\"beforeUpdate\"><a href=\"#beforeUpdate\" class=\"headerlink\" title=\"beforeUpdate\"></a>beforeUpdate</h3><ul>\n<li><p><strong>Type:</strong> <code>Function</code></p>\n</li>\n<li><p><strong>Details:</strong></p>\n<p>Called when data changes, before the DOM is patched. This is a good place to access the existing DOM before an update, e.g. to remove manually added event listeners.</p>\n<p><strong>This hook is not called during server-side rendering, because only the initial render is performed server-side.</strong></p>\n</li>\n<li><p><strong>See also:</strong> <a href=\"../guide/instance.html#Lifecycle-Diagram\">Lifecycle Diagram</a></p>\n</li>\n</ul>\n<h3 id=\"updated\"><a href=\"#updated\" class=\"headerlink\" title=\"updated\"></a>updated</h3><ul>\n<li><p><strong>Type:</strong> <code>Function</code></p>\n</li>\n<li><p><strong>Details:</strong></p>\n<p>Called after a data change causes the virtual DOM to be re-rendered and patched.</p>\n<p>The component’s DOM will have been updated when this hook is called, so you can perform DOM-dependent operations here. However, in most cases you should avoid changing state inside the hook. To react to state changes, it’s usually better to use a <a href=\"#computed\">computed property</a> or <a href=\"#watch\">watcher</a> instead.</p>\n<p>Note that <code>updated</code> does <strong>not</strong> guarantee that all child components have also been re-rendered. If you want to wait until the entire view has been re-rendered, you can use <a href=\"#vm-nextTick\">vm.$nextTick</a> inside of <code>updated</code>:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">updated: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.$nextTick(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// Code that will run only after the</span></span><br><span class=\"line\">    <span class=\"comment\">// entire view has been re-rendered</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>This hook is not called during server-side rendering.</strong></p>\n</li>\n<li><p><strong>See also:</strong> <a href=\"../guide/instance.html#Lifecycle-Diagram\">Lifecycle Diagram</a></p>\n</li>\n</ul>\n<h3 id=\"activated\"><a href=\"#activated\" class=\"headerlink\" title=\"activated\"></a>activated</h3><ul>\n<li><p><strong>Type:</strong> <code>Function</code></p>\n</li>\n<li><p><strong>Details:</strong></p>\n<p>Called when a kept-alive component is activated.</p>\n<p><strong>This hook is not called during server-side rendering.</strong></p>\n</li>\n<li><p><strong>See also:</strong></p>\n<ul>\n<li><a href=\"#keep-alive\">Built-in Components - keep-alive</a></li>\n<li><a href=\"../guide/components.html#keep-alive\">Dynamic Components - keep-alive</a></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"deactivated\"><a href=\"#deactivated\" class=\"headerlink\" title=\"deactivated\"></a>deactivated</h3><ul>\n<li><p><strong>Type:</strong> <code>Function</code></p>\n</li>\n<li><p><strong>Details:</strong></p>\n<p>Called when a kept-alive component is deactivated.</p>\n<p><strong>This hook is not called during server-side rendering.</strong></p>\n</li>\n<li><p><strong>See also:</strong></p>\n<ul>\n<li><a href=\"#keep-alive\">Built-in Components - keep-alive</a></li>\n<li><a href=\"../guide/components.html#keep-alive\">Dynamic Components - keep-alive</a></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"beforeDestroy\"><a href=\"#beforeDestroy\" class=\"headerlink\" title=\"beforeDestroy\"></a>beforeDestroy</h3><ul>\n<li><p><strong>Type:</strong> <code>Function</code></p>\n</li>\n<li><p><strong>Details:</strong></p>\n<p>Called right before a Vue instance is destroyed. At this stage the instance is still fully functional.</p>\n<p><strong>This hook is not called during server-side rendering.</strong></p>\n</li>\n<li><p><strong>See also:</strong> <a href=\"../guide/instance.html#Lifecycle-Diagram\">Lifecycle Diagram</a></p>\n</li>\n</ul>\n<h3 id=\"destroyed\"><a href=\"#destroyed\" class=\"headerlink\" title=\"destroyed\"></a>destroyed</h3><ul>\n<li><p><strong>Type:</strong> <code>Function</code></p>\n</li>\n<li><p><strong>Details:</strong></p>\n<p>Called after a Vue instance has been destroyed. When this hook is called, all directives of the Vue instance have been unbound, all event listeners have been removed, and all child Vue instances have also been destroyed.</p>\n<p><strong>This hook is not called during server-side rendering.</strong></p>\n</li>\n<li><p><strong>See also:</strong> <a href=\"../guide/instance.html#Lifecycle-Diagram\">Lifecycle Diagram</a></p>\n</li>\n</ul>\n<h3 id=\"errorCaptured\"><a href=\"#errorCaptured\" class=\"headerlink\" title=\"errorCaptured\"></a>errorCaptured</h3><blockquote>\n<p>New in 2.5.0+</p>\n</blockquote>\n<ul>\n<li><p><strong>Type:</strong> <code>(err: Error, vm: Component, info: string) =&gt; ?boolean</code></p>\n</li>\n<li><p><strong>Details:</strong></p>\n<p>Called when an error from any descendent component is captured. The hook receives three arguments: the error, the component instance that triggered the error, and a string containing information on where the error was captured. The hook can return <code>false</code> to stop the error from propagating further.</p>\n<p class=\"tip\">You can modify component state in this hook. However, it is important to have conditionals in your template or render function that short circuits other content when an error has been captured; otherwise the component will be thrown into an infinite render loop.</p>\n\n<p><strong>Error Propagation Rules</strong></p>\n<ul>\n<li><p>By default, all errors are still sent to the global <code>config.errorHandler</code> if it is defined, so that these errors can still be reported to an analytics service in a single place.</p>\n</li>\n<li><p>If multiple <code>errorCaptured</code> hooks exist on a component’s inheritance chain or parent chain, all of them will be invoked on the same error.</p>\n</li>\n<li><p>If the <code>errorCaptured</code> hook itself throws an error, both this error and the original captured error are sent to the global <code>config.errorHandler</code>.</p>\n</li>\n<li><p>An <code>errorCaptured</code> hook can return <code>false</code> to prevent the error from propagating further. This is essentially saying “this error has been handled and should be ignored.” It will prevent any additional <code>errorCaptured</code> hooks or the global <code>config.errorHandler</code> from being invoked for this error.</p>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Options-Assets\"><a href=\"#Options-Assets\" class=\"headerlink\" title=\"Options / Assets\"></a>Options / Assets</h2><h3 id=\"directives\"><a href=\"#directives\" class=\"headerlink\" title=\"directives\"></a>directives</h3><ul>\n<li><p><strong>Type:</strong> <code>Object</code></p>\n</li>\n<li><p><strong>Details:</strong></p>\n<p>A hash of directives to be made available to the Vue instance.</p>\n</li>\n<li><p><strong>See also:</strong> <a href=\"../guide/custom-directive.html\">Custom Directives</a></p>\n</li>\n</ul>\n<h3 id=\"filters\"><a href=\"#filters\" class=\"headerlink\" title=\"filters\"></a>filters</h3><ul>\n<li><p><strong>Type:</strong> <code>Object</code></p>\n</li>\n<li><p><strong>Details:</strong></p>\n<p>A hash of filters to be made available to the Vue instance.</p>\n</li>\n<li><p><strong>See also:</strong> <a href=\"#Vue-filter\"><code>Vue.filter</code></a></p>\n</li>\n</ul>\n<h3 id=\"components\"><a href=\"#components\" class=\"headerlink\" title=\"components\"></a>components</h3><ul>\n<li><p><strong>Type:</strong> <code>Object</code></p>\n</li>\n<li><p><strong>Details:</strong></p>\n<p>A hash of components to be made available to the Vue instance.</p>\n</li>\n<li><p><strong>See also:</strong> <a href=\"../guide/components.html\">Components</a></p>\n</li>\n</ul>\n<h2 id=\"Options-Composition\"><a href=\"#Options-Composition\" class=\"headerlink\" title=\"Options / Composition\"></a>Options / Composition</h2><h3 id=\"parent\"><a href=\"#parent\" class=\"headerlink\" title=\"parent\"></a>parent</h3><ul>\n<li><p><strong>Type:</strong> <code>Vue instance</code></p>\n</li>\n<li><p><strong>Details:</strong></p>\n<p>Specify the parent instance for the instance to be created. Establishes a parent-child relationship between the two. The parent will be accessible as <code>this.$parent</code> for the child, and the child will be pushed into the parent’s <code>$children</code> array.</p>\n<p class=\"tip\">Use <code>$parent</code> and <code>$children</code> sparingly - they mostly serve as an escape-hatch. Prefer using props and events for parent-child communication.</p>\n\n</li>\n</ul>\n<h3 id=\"mixins\"><a href=\"#mixins\" class=\"headerlink\" title=\"mixins\"></a>mixins</h3><ul>\n<li><p><strong>Type:</strong> <code>Array&lt;Object&gt;</code></p>\n</li>\n<li><p><strong>Details:</strong></p>\n<p>The <code>mixins</code> option accepts an array of mixin objects. These mixin objects can contain instance options like normal instance objects, and they will be merged against the eventual options using the same option merging logic in <code>Vue.extend()</code>. e.g. If your mixin contains a created hook and the component itself also has one, both functions will be called.</p>\n<p>Mixin hooks are called in the order they are provided, and called before the component’s own hooks.</p>\n</li>\n<li><p><strong>Example:</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> mixin = &#123;</span><br><span class=\"line\">  created: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; <span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>) &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  created: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; <span class=\"built_in\">console</span>.log(<span class=\"number\">2</span>) &#125;,</span><br><span class=\"line\">  mixins: [mixin]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// =&gt; 1</span></span><br><span class=\"line\"><span class=\"comment\">// =&gt; 2</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>See also:</strong> <a href=\"../guide/mixins.html\">Mixins</a></p>\n</li>\n</ul>\n<h3 id=\"extends\"><a href=\"#extends\" class=\"headerlink\" title=\"extends\"></a>extends</h3><ul>\n<li><p><strong>Type:</strong> <code>Object | Function</code></p>\n</li>\n<li><p><strong>Details:</strong></p>\n<p>Allows declaratively extending another component (could be either a plain options object or a constructor) without having to use <code>Vue.extend</code>. This is primarily intended to make it easier to extend between single file components.</p>\n<p>This is similar to <code>mixins</code>.</p>\n</li>\n<li><p><strong>Example:</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> CompA = &#123; ... &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// extend CompA without having to call `Vue.extend` on either</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> CompB = &#123;</span><br><span class=\"line\">  extends: CompA,</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"provide-inject\"><a href=\"#provide-inject\" class=\"headerlink\" title=\"provide / inject\"></a>provide / inject</h3><blockquote>\n<p>New in 2.2.0+</p>\n</blockquote>\n<ul>\n<li><p><strong>Type:</strong></p>\n<ul>\n<li><strong>provide:</strong> <code>Object | () =&gt; Object</code></li>\n<li><strong>inject:</strong> <code>Array&lt;string&gt; | { [key: string]: string | Symbol | Object }</code></li>\n</ul>\n</li>\n<li><p><strong>Details:</strong></p>\n<p class=\"tip\"><code>provide</code> and <code>inject</code> are primarily provided for advanced plugin / component library use cases. It is NOT recommended to use them in generic application code.</p>\n\n<p>This pair of options are used together to allow an ancestor component to serve as a dependency injector for all its descendants, regardless of how deep the component hierarchy is, as long as they are in the same parent chain. If you are familiar with React, this is very similar to React’s context feature.</p>\n<p>The <code>provide</code> option should be an object or a function that returns an object. This object contains the properties that are available for injection into its descendants. You can use ES2015 Symbols as keys in this object, but only in environments that natively support <code>Symbol</code> and <code>Reflect.ownKeys</code>.</p>\n<p>The <code>inject</code> option should be either:</p>\n<ul>\n<li>an array of strings, or</li>\n<li>an object where the keys are the local binding name and the value is either:<ul>\n<li>the key (string or Symbol) to search for in available injections, or</li>\n<li>an object where:<ul>\n<li>the <code>from</code> property is the key (string or Symbol) to search for in available injections, and</li>\n<li>the <code>default</code> property is used as fallback value</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>Note: the <code>provide</code> and <code>inject</code> bindings are NOT reactive. This is intentional. However, if you pass down an observed object, properties on that object do remain reactive.</p>\n</blockquote>\n</li>\n<li><p><strong>Example:</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// parent component providing 'foo'</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> Provider = &#123;</span><br><span class=\"line\">  provide: &#123;</span><br><span class=\"line\">    foo: <span class=\"string\">'bar'</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// child component injecting 'foo'</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> Child = &#123;</span><br><span class=\"line\">  inject: [<span class=\"string\">'foo'</span>],</span><br><span class=\"line\">  created () &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.foo) <span class=\"comment\">// =&gt; \"bar\"</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>With ES2015 Symbols, function <code>provide</code> and object <code>inject</code>:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> s = <span class=\"built_in\">Symbol</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> Provider = &#123;</span><br><span class=\"line\">  provide () &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      [s]: <span class=\"string\">'foo'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> Child = &#123;</span><br><span class=\"line\">  inject: &#123; s &#125;,</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>The next 2 examples work with Vue 2.2.1+. Below that version, injected values were resolved after the <code>props</code> and the <code>data</code> initialization.</p>\n</blockquote>\n<p>Using an injected value as the default for a prop:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> Child = &#123;</span><br><span class=\"line\">  inject: [<span class=\"string\">'foo'</span>],</span><br><span class=\"line\">  props: &#123;</span><br><span class=\"line\">    bar: &#123;</span><br><span class=\"line\">      <span class=\"keyword\">default</span> () &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.foo</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Using an injected value as data entry:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> Child = &#123;</span><br><span class=\"line\">  inject: [<span class=\"string\">'foo'</span>],</span><br><span class=\"line\">  data () &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      bar: <span class=\"keyword\">this</span>.foo</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>In 2.5.0+ injections can be optional with default value:</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> Child = &#123;</span><br><span class=\"line\">  inject: &#123;</span><br><span class=\"line\">    foo: &#123; <span class=\"attr\">default</span>: <span class=\"string\">'foo'</span> &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>If it needs to be injected from a property with a different name, use <code>from</code> to denote the source property:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> Child = &#123;</span><br><span class=\"line\">  inject: &#123;</span><br><span class=\"line\">    foo: &#123;</span><br><span class=\"line\">      <span class=\"keyword\">from</span>: <span class=\"string\">'bar'</span>,</span><br><span class=\"line\">      <span class=\"keyword\">default</span>: <span class=\"string\">'foo'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Similar to prop defaults, you need to use a factory function for non primitive values:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> Child = &#123;</span><br><span class=\"line\">  inject: &#123;</span><br><span class=\"line\">    foo: &#123;</span><br><span class=\"line\">      <span class=\"keyword\">from</span>: <span class=\"string\">'bar'</span>,</span><br><span class=\"line\">      <span class=\"keyword\">default</span>: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"Options-Misc\"><a href=\"#Options-Misc\" class=\"headerlink\" title=\"Options / Misc\"></a>Options / Misc</h2><h3 id=\"name\"><a href=\"#name\" class=\"headerlink\" title=\"name\"></a>name</h3><ul>\n<li><p><strong>Type:</strong> <code>string</code></p>\n</li>\n<li><p><strong>Restriction:</strong> only respected when used as a component option.</p>\n</li>\n<li><p><strong>Details:</strong></p>\n<p>Allow the component to recursively invoke itself in its template. Note that when a component is registered globally with <code>Vue.component()</code>, the global ID is automatically set as its name.</p>\n<p>Another benefit of specifying a <code>name</code> option is debugging. Named components result in more helpful warning messages. Also, when inspecting an app in the <a href=\"https://github.com/vuejs/vue-devtools\" target=\"_blank\" rel=\"noopener\">vue-devtools</a>, unnamed components will show up as <code>&lt;AnonymousComponent&gt;</code>, which isn’t very informative. By providing the <code>name</code> option, you will get a much more informative component tree.</p>\n</li>\n</ul>\n<h3 id=\"delimiters\"><a href=\"#delimiters\" class=\"headerlink\" title=\"delimiters\"></a>delimiters</h3><ul>\n<li><p><strong>Type:</strong> <code>Array&lt;string&gt;</code></p>\n</li>\n<li><p><strong>Default:</strong> <code>[\"{{\", \"}}\"]</code></p>\n</li>\n<li><p><strong>Restrictions:</strong> This option is only available in the full build, with in-browser compilation.</p>\n</li>\n<li><p><strong>Details:</strong></p>\n<p>Change the plain text interpolation delimiters.</p>\n</li>\n<li><p><strong>Example:</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  delimiters: [<span class=\"string\">'$&#123;'</span>, <span class=\"string\">'&#125;'</span>]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Delimiters changed to ES6 template string style</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"functional\"><a href=\"#functional\" class=\"headerlink\" title=\"functional\"></a>functional</h3><ul>\n<li><p><strong>Type:</strong> <code>boolean</code></p>\n</li>\n<li><p><strong>Details:</strong></p>\n<p>Causes a component to be stateless (no <code>data</code>) and instanceless (no <code>this</code> context). They are only a <code>render</code> function that returns virtual nodes making them much cheaper to render.</p>\n</li>\n<li><p><strong>See also:</strong> <a href=\"../guide/render-function.html#Functional-Components\">Functional Components</a></p>\n</li>\n</ul>\n<h3 id=\"model\"><a href=\"#model\" class=\"headerlink\" title=\"model\"></a>model</h3><blockquote>\n<p>New in 2.2.0</p>\n</blockquote>\n<ul>\n<li><p><strong>Type:</strong> <code>{ prop?: string, event?: string }</code></p>\n</li>\n<li><p><strong>Details:</strong></p>\n<p>Allows a custom component to customize the prop and event used when it’s used with <code>v-model</code>. By default, <code>v-model</code> on a component uses <code>value</code> as the prop and <code>input</code> as the event, but some input types such as checkboxes and radio buttons may want to use the <code>value</code> prop for a different purpose. Using the <code>model</code> option can avoid the conflict in such cases.</p>\n</li>\n<li><p><strong>Example:</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">Vue.component(<span class=\"string\">'my-checkbox'</span>, &#123;</span><br><span class=\"line\">  model: &#123;</span><br><span class=\"line\">    prop: <span class=\"string\">'checked'</span>,</span><br><span class=\"line\">    event: <span class=\"string\">'change'</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  props: &#123;</span><br><span class=\"line\">    <span class=\"comment\">// this allows using the `value` prop for a different purpose</span></span><br><span class=\"line\">    value: <span class=\"built_in\">String</span>,</span><br><span class=\"line\">    <span class=\"comment\">// use `checked` as the prop which take the place of `value`</span></span><br><span class=\"line\">    checked: &#123;</span><br><span class=\"line\">      type: <span class=\"built_in\">Number</span>,</span><br><span class=\"line\">      <span class=\"keyword\">default</span>: <span class=\"number\">0</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">my-checkbox</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"foo\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"some value\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">my-checkbox</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>The above will be equivalent to:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">my-checkbox</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">:checked</span>=<span class=\"string\">\"foo\"</span></span></span><br><span class=\"line\"><span class=\"tag\">  @<span class=\"attr\">change</span>=<span class=\"string\">\"val =&gt; &#123; foo = val &#125;\"</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">value</span>=<span class=\"string\">\"some value\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">my-checkbox</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"inheritAttrs\"><a href=\"#inheritAttrs\" class=\"headerlink\" title=\"inheritAttrs\"></a>inheritAttrs</h3><blockquote>\n<p>New in 2.4.0+</p>\n</blockquote>\n<ul>\n<li><p><strong>Type:</strong> <code>boolean</code></p>\n</li>\n<li><p><strong>Default:</strong> <code>true</code></p>\n</li>\n<li><p><strong>Details:</strong></p>\n<p>By default, parent scope attribute bindings that are not recognized as props will “fallthrough” and be applied to the root element of the child component as normal HTML attributes. When authoring a component that wraps a target element or another component, this may not always be the desired behavior. By setting <code>inheritAttrs</code> to <code>false</code>, this default behavior can be disabled. The attributes are available via the <code>$attrs</code> instance property (also new in 2.4) and can be explicitly bound to a non-root element using <code>v-bind</code>.</p>\n<p>Note: this option does <strong>not</strong> affect <code>class</code> and <code>style</code> bindings.</p>\n</li>\n</ul>\n<h3 id=\"comments\"><a href=\"#comments\" class=\"headerlink\" title=\"comments\"></a>comments</h3><blockquote>\n<p>New in 2.4.0+</p>\n</blockquote>\n<ul>\n<li><p><strong>Type:</strong> <code>boolean</code></p>\n</li>\n<li><p><strong>Default:</strong> <code>false</code></p>\n</li>\n<li><p><strong>Restrictions:</strong> This option is only available in the full build, with in-browser compilation.</p>\n</li>\n<li><p><strong>Details:</strong></p>\n<p>When set to <code>true</code>, will preserve and render HTML comments found in templates. The default behavior is discarding them.</p>\n</li>\n</ul>\n<h2 id=\"Instance-Properties\"><a href=\"#Instance-Properties\" class=\"headerlink\" title=\"Instance Properties\"></a>Instance Properties</h2><h3 id=\"vm-data\"><a href=\"#vm-data\" class=\"headerlink\" title=\"vm.$data\"></a>vm.$data</h3><ul>\n<li><p><strong>Type:</strong> <code>Object</code></p>\n</li>\n<li><p><strong>Details:</strong></p>\n<p>The data object that the Vue instance is observing. The Vue instance proxies access to the properties on its data object.</p>\n</li>\n<li><p><strong>See also:</strong> <a href=\"#data\">Options / Data - data</a></p>\n</li>\n</ul>\n<h3 id=\"vm-props\"><a href=\"#vm-props\" class=\"headerlink\" title=\"vm.$props\"></a>vm.$props</h3><blockquote>\n<p>New in 2.2.0+</p>\n</blockquote>\n<ul>\n<li><p><strong>Type:</strong> <code>Object</code></p>\n</li>\n<li><p><strong>Details:</strong></p>\n<p>An object representing the current props a component has received. The Vue instance proxies access to the properties on its props object.</p>\n</li>\n</ul>\n<h3 id=\"vm-el\"><a href=\"#vm-el\" class=\"headerlink\" title=\"vm.$el\"></a>vm.$el</h3><ul>\n<li><p><strong>Type:</strong> <code>HTMLElement</code></p>\n</li>\n<li><p><strong>Read only</strong></p>\n</li>\n<li><p><strong>Details:</strong></p>\n<p>The root DOM element that the Vue instance is managing.</p>\n</li>\n</ul>\n<h3 id=\"vm-options\"><a href=\"#vm-options\" class=\"headerlink\" title=\"vm.$options\"></a>vm.$options</h3><ul>\n<li><p><strong>Type:</strong> <code>Object</code></p>\n</li>\n<li><p><strong>Read only</strong></p>\n</li>\n<li><p><strong>Details:</strong></p>\n<p>The instantiation options used for the current Vue instance. This is useful when you want to include custom properties in the options:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  customOption: <span class=\"string\">'foo'</span>,</span><br><span class=\"line\">  created: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.$options.customOption) <span class=\"comment\">// =&gt; 'foo'</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"vm-parent\"><a href=\"#vm-parent\" class=\"headerlink\" title=\"vm.$parent\"></a>vm.$parent</h3><ul>\n<li><p><strong>Type:</strong> <code>Vue instance</code></p>\n</li>\n<li><p><strong>Read only</strong></p>\n</li>\n<li><p><strong>Details:</strong></p>\n<p>The parent instance, if the current instance has one.</p>\n</li>\n</ul>\n<h3 id=\"vm-root\"><a href=\"#vm-root\" class=\"headerlink\" title=\"vm.$root\"></a>vm.$root</h3><ul>\n<li><p><strong>Type:</strong> <code>Vue instance</code></p>\n</li>\n<li><p><strong>Read only</strong></p>\n</li>\n<li><p><strong>Details:</strong></p>\n<p>The root Vue instance of the current component tree. If the current instance has no parents this value will be itself.</p>\n</li>\n</ul>\n<h3 id=\"vm-children\"><a href=\"#vm-children\" class=\"headerlink\" title=\"vm.$children\"></a>vm.$children</h3><ul>\n<li><p><strong>Type:</strong> <code>Array&lt;Vue instance&gt;</code></p>\n</li>\n<li><p><strong>Read only</strong></p>\n</li>\n<li><p><strong>Details:</strong></p>\n<p>The direct child components of the current instance. <strong>Note there’s no order guarantee for <code>$children</code>, and it is not reactive.</strong> If you find yourself trying to use <code>$children</code> for data binding, consider using an Array and <code>v-for</code> to generate child components, and use the Array as the source of truth.</p>\n</li>\n</ul>\n<h3 id=\"vm-slots\"><a href=\"#vm-slots\" class=\"headerlink\" title=\"vm.$slots\"></a>vm.$slots</h3><ul>\n<li><p><strong>Type:</strong> <code>{ [name: string]: ?Array&lt;VNode&gt; }</code></p>\n</li>\n<li><p><strong>Read only</strong></p>\n</li>\n<li><p><strong>Details:</strong></p>\n<p>Used to programmatically access content <a href=\"../guide/components.html#Content-Distribution-with-Slots\">distributed by slots</a>. Each <a href=\"../guide/components.html#Named-Slots\">named slot</a> has its own corresponding property (e.g. the contents of <code>slot=&quot;foo&quot;</code> will be found at <code>vm.$slots.foo</code>). The <code>default</code> property contains any nodes not included in a named slot.</p>\n<p>Accessing <code>vm.$slots</code> is most useful when writing a component with a <a href=\"../guide/render-function.html\">render function</a>.</p>\n</li>\n<li><p><strong>Example:</strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">blog-post</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h1</span> <span class=\"attr\">slot</span>=<span class=\"string\">\"header\"</span>&gt;</span></span><br><span class=\"line\">    About Me</span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Here's some page content, which will be included in vm.$slots.default, because it's not inside a named slot.<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">slot</span>=<span class=\"string\">\"footer\"</span>&gt;</span></span><br><span class=\"line\">    Copyright 2016 Evan You</span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>If I have some content down here, it will also be included in vm.$slots.default.<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span>.</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">blog-post</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">Vue.component(<span class=\"string\">'blog-post'</span>, &#123;</span><br><span class=\"line\">  render: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">createElement</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> header = <span class=\"keyword\">this</span>.$slots.header</span><br><span class=\"line\">    <span class=\"keyword\">var</span> body   = <span class=\"keyword\">this</span>.$slots.default</span><br><span class=\"line\">    <span class=\"keyword\">var</span> footer = <span class=\"keyword\">this</span>.$slots.footer</span><br><span class=\"line\">    <span class=\"keyword\">return</span> createElement(<span class=\"string\">'div'</span>, [</span><br><span class=\"line\">      createElement(<span class=\"string\">'header'</span>, header),</span><br><span class=\"line\">      createElement(<span class=\"string\">'main'</span>, body),</span><br><span class=\"line\">      createElement(<span class=\"string\">'footer'</span>, footer)</span><br><span class=\"line\">    ])</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>See also:</strong></p>\n<ul>\n<li><a href=\"#slot-1\"><code>&lt;slot&gt;</code> Component</a></li>\n<li><a href=\"../guide/components.html#Content-Distribution-with-Slots\">Content Distribution with Slots</a></li>\n<li><a href=\"../guide/render-function.html#Slots\">Render Functions - Slots</a></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"vm-scopedSlots\"><a href=\"#vm-scopedSlots\" class=\"headerlink\" title=\"vm.$scopedSlots\"></a>vm.$scopedSlots</h3><blockquote>\n<p>New in 2.1.0+</p>\n</blockquote>\n<ul>\n<li><p><strong>Type:</strong> <code>{ [name: string]: props =&gt; VNode | Array&lt;VNode&gt; }</code></p>\n</li>\n<li><p><strong>Read only</strong></p>\n</li>\n<li><p><strong>Details:</strong></p>\n<p>Used to programmatically access <a href=\"../guide/components.html#Scoped-Slots\">scoped slots</a>. For each slot, including the <code>default</code> one, the object contains a corresponding function that returns VNodes.</p>\n<p>Accessing <code>vm.$scopedSlots</code> is most useful when writing a component with a <a href=\"../guide/render-function.html\">render function</a>.</p>\n</li>\n<li><p><strong>See also:</strong></p>\n<ul>\n<li><a href=\"#slot-1\"><code>&lt;slot&gt;</code> Component</a></li>\n<li><a href=\"../guide/components.html#Scoped-Slots\">Scoped Slots</a></li>\n<li><a href=\"../guide/render-function.html#Slots\">Render Functions - Slots</a></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"vm-refs\"><a href=\"#vm-refs\" class=\"headerlink\" title=\"vm.$refs\"></a>vm.$refs</h3><ul>\n<li><p><strong>Type:</strong> <code>Object</code></p>\n</li>\n<li><p><strong>Read only</strong></p>\n</li>\n<li><p><strong>Details:</strong></p>\n<p>An object of DOM elements and component instances, registered with <a href=\"#ref\"><code>ref</code> attributes</a>.</p>\n</li>\n<li><p><strong>See also:</strong></p>\n<ul>\n<li><a href=\"../guide/components.html#Child-Component-Refs\">Child Component Refs</a></li>\n<li><a href=\"#ref\">Special Attributes - ref</a></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"vm-isServer\"><a href=\"#vm-isServer\" class=\"headerlink\" title=\"vm.$isServer\"></a>vm.$isServer</h3><ul>\n<li><p><strong>Type:</strong> <code>boolean</code></p>\n</li>\n<li><p><strong>Read only</strong></p>\n</li>\n<li><p><strong>Details:</strong></p>\n<p>Whether the current Vue instance is running on the server.</p>\n</li>\n<li><p><strong>See also:</strong> <a href=\"../guide/ssr.html\">Server-Side Rendering</a></p>\n</li>\n</ul>\n<h3 id=\"vm-attrs\"><a href=\"#vm-attrs\" class=\"headerlink\" title=\"vm.$attrs\"></a>vm.$attrs</h3><ul>\n<li><p><strong>Type:</strong> <code>{ [key: string]: string }</code></p>\n</li>\n<li><p><strong>Read only</strong></p>\n</li>\n<li><p><strong>Details:</strong></p>\n<p>Contains parent-scope attribute bindings (except for <code>class</code> and <code>style</code>) that are not recognized (and extracted) as props. When a component doesn’t have any declared props, this essentially contains all parent-scope bindings (except for <code>class</code> and <code>style</code>), and can be passed down to an inner component via <code>v-bind=&quot;$attrs&quot;</code> - useful when creating higher-order components.</p>\n</li>\n</ul>\n<h3 id=\"vm-listeners\"><a href=\"#vm-listeners\" class=\"headerlink\" title=\"vm.$listeners\"></a>vm.$listeners</h3><ul>\n<li><p><strong>Type:</strong> <code>{ [key: string]: Function | Array&lt;Function&gt; }</code></p>\n</li>\n<li><p><strong>Read only</strong></p>\n</li>\n<li><p><strong>Details:</strong></p>\n<p>Contains parent-scope <code>v-on</code> event listeners (without <code>.native</code> modifiers). This can be passed down to an inner component via <code>v-on=&quot;$listeners&quot;</code> - useful when creating transparent wrapper components.</p>\n</li>\n</ul>\n<h2 id=\"Instance-Methods-Data\"><a href=\"#Instance-Methods-Data\" class=\"headerlink\" title=\"Instance Methods / Data\"></a>Instance Methods / Data</h2><h3 id=\"vm-watch-expOrFn-callback-options\"><a href=\"#vm-watch-expOrFn-callback-options\" class=\"headerlink\" title=\"vm.$watch( expOrFn, callback, [options] )\"></a>vm.$watch( expOrFn, callback, [options] )</h3><ul>\n<li><p><strong>Arguments:</strong></p>\n<ul>\n<li><code>{string | Function} expOrFn</code></li>\n<li><code>{Function | Object} callback</code></li>\n<li><code>{Object} [options]</code><ul>\n<li><code>{boolean} deep</code></li>\n<li><code>{boolean} immediate</code></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p><strong>Returns:</strong> <code>{Function} unwatch</code></p>\n</li>\n<li><p><strong>Usage:</strong></p>\n<p>Watch an expression or a computed function on the Vue instance for changes. The callback gets called with the new value and the old value. The expression only accepts dot-delimited paths. For more complex expressions, use a function instead.</p>\n</li>\n</ul>\n<p class=\"tip\">Note: when mutating (rather than replacing) an Object or an Array, the old value will be the same as new value because they reference the same Object/Array. Vue doesn’t keep a copy of the pre-mutate value.</p>\n\n<ul>\n<li><p><strong>Example:</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// keypath</span></span><br><span class=\"line\">vm.$watch(<span class=\"string\">'a.b.c'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">newVal, oldVal</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// do something</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// function</span></span><br><span class=\"line\">vm.$watch(</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.a + <span class=\"keyword\">this</span>.b</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">newVal, oldVal</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// do something</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<p><code>vm.$watch</code> returns an unwatch function that stops firing the callback:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> unwatch = vm.$watch(<span class=\"string\">'a'</span>, cb)</span><br><span class=\"line\"><span class=\"comment\">// later, teardown the watcher</span></span><br><span class=\"line\">unwatch()</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>Option: deep</strong></p>\n<p>To also detect nested value changes inside Objects, you need to pass in <code>deep: true</code> in the options argument. Note that you don’t need to do so to listen for Array mutations.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">vm.$watch(<span class=\"string\">'someObject'</span>, callback, &#123;</span><br><span class=\"line\">  deep: <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">vm.someObject.nestedValue = <span class=\"number\">123</span></span><br><span class=\"line\"><span class=\"comment\">// callback is fired</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>Option: immediate</strong></p>\n<p>Passing in <code>immediate: true</code> in the option will trigger the callback immediately with the current value of the expression:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">vm.$watch(<span class=\"string\">'a'</span>, callback, &#123;</span><br><span class=\"line\">  immediate: <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// `callback` is fired immediately with current value of `a`</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"vm-set-target-key-value\"><a href=\"#vm-set-target-key-value\" class=\"headerlink\" title=\"vm.$set( target, key, value )\"></a>vm.$set( target, key, value )</h3><ul>\n<li><p><strong>Arguments:</strong></p>\n<ul>\n<li><code>{Object | Array} target</code></li>\n<li><code>{string | number} key</code></li>\n<li><code>{any} value</code></li>\n</ul>\n</li>\n<li><p><strong>Returns:</strong> the set value.</p>\n</li>\n<li><p><strong>Usage:</strong></p>\n<p>This is the <strong>alias</strong> of the global <code>Vue.set</code>.</p>\n</li>\n<li><p><strong>See also:</strong> <a href=\"#Vue-set\">Vue.set</a></p>\n</li>\n</ul>\n<h3 id=\"vm-delete-target-key\"><a href=\"#vm-delete-target-key\" class=\"headerlink\" title=\"vm.$delete( target, key )\"></a>vm.$delete( target, key )</h3><ul>\n<li><p><strong>Arguments:</strong></p>\n<ul>\n<li><code>{Object | Array} target</code></li>\n<li><code>{string | number} key</code></li>\n</ul>\n</li>\n<li><p><strong>Usage:</strong></p>\n<p>This is the <strong>alias</strong> of the global <code>Vue.delete</code>.</p>\n</li>\n<li><p><strong>See also:</strong> <a href=\"#Vue-delete\">Vue.delete</a></p>\n</li>\n</ul>\n<h2 id=\"Instance-Methods-Events\"><a href=\"#Instance-Methods-Events\" class=\"headerlink\" title=\"Instance Methods / Events\"></a>Instance Methods / Events</h2><h3 id=\"vm-on-event-callback\"><a href=\"#vm-on-event-callback\" class=\"headerlink\" title=\"vm.$on( event, callback )\"></a>vm.$on( event, callback )</h3><ul>\n<li><p><strong>Arguments:</strong></p>\n<ul>\n<li><code>{string | Array&lt;string&gt;} event</code> (array only supported in 2.2.0+)</li>\n<li><code>{Function} callback</code></li>\n</ul>\n</li>\n<li><p><strong>Usage:</strong></p>\n<p>Listen for a custom event on the current vm. Events can be triggered by <code>vm.$emit</code>. The callback will receive all the additional arguments passed into these event-triggering methods.</p>\n</li>\n<li><p><strong>Example:</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">vm.$on(<span class=\"string\">'test'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">msg</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(msg)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">vm.$emit(<span class=\"string\">'test'</span>, <span class=\"string\">'hi'</span>)</span><br><span class=\"line\"><span class=\"comment\">// =&gt; \"hi\"</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"vm-once-event-callback\"><a href=\"#vm-once-event-callback\" class=\"headerlink\" title=\"vm.$once( event, callback )\"></a>vm.$once( event, callback )</h3><ul>\n<li><p><strong>Arguments:</strong></p>\n<ul>\n<li><code>{string} event</code></li>\n<li><code>{Function} callback</code></li>\n</ul>\n</li>\n<li><p><strong>Usage:</strong></p>\n<p>Listen for a custom event, but only once. The listener will be removed once it triggers for the first time.</p>\n</li>\n</ul>\n<h3 id=\"vm-off-event-callback\"><a href=\"#vm-off-event-callback\" class=\"headerlink\" title=\"vm.$off( [event, callback] )\"></a>vm.$off( [event, callback] )</h3><ul>\n<li><p><strong>Arguments:</strong></p>\n<ul>\n<li><code>{string | Array&lt;string&gt;} event</code> (array only supported in 2.2.2+)</li>\n<li><code>{Function} [callback]</code></li>\n</ul>\n</li>\n<li><p><strong>Usage:</strong></p>\n<p>Remove custom event listener(s).</p>\n<ul>\n<li><p>If no arguments are provided, remove all event listeners;</p>\n</li>\n<li><p>If only the event is provided, remove all listeners for that event;</p>\n</li>\n<li><p>If both event and callback are given, remove the listener for that specific callback only.</p>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"vm-emit-eventName-…args\"><a href=\"#vm-emit-eventName-…args\" class=\"headerlink\" title=\"vm.$emit( eventName, […args] )\"></a>vm.$emit( eventName, […args] )</h3><ul>\n<li><p><strong>Arguments:</strong></p>\n<ul>\n<li><code>{string} eventName</code></li>\n<li><code>[...args]</code></li>\n</ul>\n<p>Trigger an event on the current instance. Any additional arguments will be passed into the listener’s callback function.</p>\n</li>\n<li><p><strong>Examples:</strong></p>\n<p>Using <code>$emit</code> with only an event name:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">Vue.component(<span class=\"string\">'welcome-button'</span>, &#123;</span><br><span class=\"line\">  template: <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">    &lt;button v-on:click=\"$emit('welcome')\"&gt;</span></span><br><span class=\"line\"><span class=\"string\">      Click me to be welcomed</span></span><br><span class=\"line\"><span class=\"string\">    &lt;/button&gt;</span></span><br><span class=\"line\"><span class=\"string\">  `</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"emit-example-simple\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">welcome-button</span> <span class=\"attr\">v-on:welcome</span>=<span class=\"string\">\"sayHi\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">welcome-button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  el: <span class=\"string\">'#emit-example-simple'</span>,</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    sayHi: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      alert(<span class=\"string\">'Hi!'</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n  <div id=\"emit-example-simple\" class=\"demo\">\n    <welcome-button v-on:welcome=\"sayHi\"></welcome-button>\n  </div>\n  <script>\n    Vue.component('welcome-button', {\n      template: `\n        <button v-on:click=\"$emit('welcome')\">\n          Click me to be welcomed\n        </button>\n      `\n    })\n    new Vue({\n      el: '#emit-example-simple',\n      methods: {\n        sayHi: function () {\n          alert('Hi!')\n        }\n      }\n    })\n  </script>\n  \n<p>Using <code>$emit</code> with additional arguments:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">Vue.component(<span class=\"string\">'magic-eight-ball'</span>, &#123;</span><br><span class=\"line\">  data: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      possibleAdvice: [<span class=\"string\">'Yes'</span>, <span class=\"string\">'No'</span>, <span class=\"string\">'Maybe'</span>]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    giveAdvice: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> randomAdviceIndex = <span class=\"built_in\">Math</span>.floor(<span class=\"built_in\">Math</span>.random() * <span class=\"keyword\">this</span>.possibleAdvice.length)</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.$emit(<span class=\"string\">'give-advice'</span>, <span class=\"keyword\">this</span>.possibleAdvice[randomAdviceIndex])</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  template: <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">    &lt;button v-on:click=\"giveAdvice\"&gt;</span></span><br><span class=\"line\"><span class=\"string\">      Click me for advice</span></span><br><span class=\"line\"><span class=\"string\">    &lt;/button&gt;</span></span><br><span class=\"line\"><span class=\"string\">  `</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"emit-example-argument\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">magic-eight-ball</span> <span class=\"attr\">v-on:give-advice</span>=<span class=\"string\">\"showAdvice\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">magic-eight-ball</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  el: <span class=\"string\">'#emit-example-argument'</span>,</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    showAdvice: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">advice</span>) </span>&#123;</span><br><span class=\"line\">      alert(advice)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n  <div id=\"emit-example-argument\" class=\"demo\">\n    <magic-eight-ball v-on:give-advice=\"showAdvice\"></magic-eight-ball>\n  </div>\n  <script>\n    Vue.component('magic-eight-ball', {\n      data: function () {\n        return {\n          possibleAdvice: ['Yes', 'No', 'Maybe']\n        }\n      },\n      methods: {\n        giveAdvice: function () {\n          var randomAdviceIndex = Math.floor(Math.random() * this.possibleAdvice.length)\n          this.$emit('give-advice', this.possibleAdvice[randomAdviceIndex])\n        }\n      },\n      template: `\n        <button v-on:click=\"giveAdvice\">\n          Click me for advice\n        </button>\n      `\n    })\n    new Vue({\n      el: '#emit-example-argument',\n      methods: {\n        showAdvice: function (advice) {\n          alert(advice)\n        }\n      }\n    })\n  </script>\n  \n</li>\n</ul>\n<h2 id=\"Instance-Methods-Lifecycle\"><a href=\"#Instance-Methods-Lifecycle\" class=\"headerlink\" title=\"Instance Methods / Lifecycle\"></a>Instance Methods / Lifecycle</h2><h3 id=\"vm-mount-elementOrSelector\"><a href=\"#vm-mount-elementOrSelector\" class=\"headerlink\" title=\"vm.$mount( [elementOrSelector] )\"></a>vm.$mount( [elementOrSelector] )</h3><ul>\n<li><p><strong>Arguments:</strong></p>\n<ul>\n<li><code>{Element | string} [elementOrSelector]</code></li>\n<li><code>{boolean} [hydrating]</code></li>\n</ul>\n</li>\n<li><p><strong>Returns:</strong> <code>vm</code> - the instance itself</p>\n</li>\n<li><p><strong>Usage:</strong></p>\n<p>If a Vue instance didn’t receive the <code>el</code> option at instantiation, it will be in “unmounted” state, without an associated DOM element. <code>vm.$mount()</code> can be used to manually start the mounting of an unmounted Vue instance.</p>\n<p>If <code>elementOrSelector</code> argument is not provided, the template will be rendered as an off-document element, and you will have to use native DOM API to insert it into the document yourself.</p>\n<p>The method returns the instance itself so you can chain other instance methods after it.</p>\n</li>\n<li><p><strong>Example:</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> MyComponent = Vue.extend(&#123;</span><br><span class=\"line\">  template: <span class=\"string\">'&lt;div&gt;Hello!&lt;/div&gt;'</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// create and mount to #app (will replace #app)</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> MyComponent().$mount(<span class=\"string\">'#app'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// the above is the same as:</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> MyComponent(&#123; <span class=\"attr\">el</span>: <span class=\"string\">'#app'</span> &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// or, render off-document and append afterwards:</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> component = <span class=\"keyword\">new</span> MyComponent().$mount()</span><br><span class=\"line\"><span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'app'</span>).appendChild(component.$el)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>See also:</strong></p>\n<ul>\n<li><a href=\"../guide/instance.html#Lifecycle-Diagram\">Lifecycle Diagram</a></li>\n<li><a href=\"../guide/ssr.html\">Server-Side Rendering</a></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"vm-forceUpdate\"><a href=\"#vm-forceUpdate\" class=\"headerlink\" title=\"vm.$forceUpdate()\"></a>vm.$forceUpdate()</h3><ul>\n<li><p><strong>Usage:</strong></p>\n<p>Force the Vue instance to re-render. Note it does not affect all child components, only the instance itself and child components with inserted slot content.</p>\n</li>\n</ul>\n<h3 id=\"vm-nextTick-callback\"><a href=\"#vm-nextTick-callback\" class=\"headerlink\" title=\"vm.$nextTick( [callback] )\"></a>vm.$nextTick( [callback] )</h3><ul>\n<li><p><strong>Arguments:</strong></p>\n<ul>\n<li><code>{Function} [callback]</code></li>\n</ul>\n</li>\n<li><p><strong>Usage:</strong></p>\n<p>Defer the callback to be executed after the next DOM update cycle. Use it immediately after you’ve changed some data to wait for the DOM update. This is the same as the global <code>Vue.nextTick</code>, except that the callback’s <code>this</code> context is automatically bound to the instance calling this method.</p>\n<blockquote>\n<p>New in 2.1.0+: returns a Promise if no callback is provided and Promise is supported in the execution environment. Please note that Vue does not come with a Promise polyfill, so if you target browsers that don’t support Promises natively (looking at you, IE), you will have to provide a polyfill yourself.</p>\n</blockquote>\n</li>\n<li><p><strong>Example:</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">    example: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">// modify data</span></span><br><span class=\"line\">      <span class=\"keyword\">this</span>.message = <span class=\"string\">'changed'</span></span><br><span class=\"line\">      <span class=\"comment\">// DOM is not updated yet</span></span><br><span class=\"line\">      <span class=\"keyword\">this</span>.$nextTick(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// DOM is now updated</span></span><br><span class=\"line\">        <span class=\"comment\">// `this` is bound to the current instance</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.doSomethingElse()</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>See also:</strong></p>\n<ul>\n<li><a href=\"#Vue-nextTick\">Vue.nextTick</a></li>\n<li><a href=\"../guide/reactivity.html#Async-Update-Queue\">Async Update Queue</a></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"vm-destroy\"><a href=\"#vm-destroy\" class=\"headerlink\" title=\"vm.$destroy()\"></a>vm.$destroy()</h3><ul>\n<li><p><strong>Usage:</strong></p>\n<p>Completely destroy a vm. Clean up its connections with other existing vms, unbind all its directives, turn off all event listeners.</p>\n<p>Triggers the <code>beforeDestroy</code> and <code>destroyed</code> hooks.</p>\n<p class=\"tip\">In normal use cases you shouldn’t have to call this method yourself. Prefer controlling the lifecycle of child components in a data-driven fashion using <code>v-if</code> and <code>v-for</code>.</p>\n</li>\n<li><p><strong>See also:</strong> <a href=\"../guide/instance.html#Lifecycle-Diagram\">Lifecycle Diagram</a></p>\n</li>\n</ul>\n<h2 id=\"Directives\"><a href=\"#Directives\" class=\"headerlink\" title=\"Directives\"></a>Directives</h2><h3 id=\"v-text\"><a href=\"#v-text\" class=\"headerlink\" title=\"v-text\"></a>v-text</h3><ul>\n<li><p><strong>Expects:</strong> <code>string</code></p>\n</li>\n<li><p><strong>Details:</strong></p>\n<p>Updates the element’s <code>textContent</code>. If you need to update the part of <code>textContent</code>, you should use <code>{{ Mustache }}</code> interpolations.</p>\n</li>\n<li><p><strong>Example:</strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">v-text</span>=<span class=\"string\">\"msg\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- same as --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>See also:</strong> <a href=\"../guide/syntax.html#Text\">Data Binding Syntax - Interpolations</a></p>\n</li>\n</ul>\n<h3 id=\"v-html\"><a href=\"#v-html\" class=\"headerlink\" title=\"v-html\"></a>v-html</h3><ul>\n<li><p><strong>Expects:</strong> <code>string</code></p>\n</li>\n<li><p><strong>Details:</strong></p>\n<p>Updates the element’s <code>innerHTML</code>. <strong>Note that the contents are inserted as plain HTML - they will not be compiled as Vue templates</strong>. If you find yourself trying to compose templates using <code>v-html</code>, try to rethink the solution by using components instead.</p>\n<p class=\"tip\">Dynamically rendering arbitrary HTML on your website can be very dangerous because it can easily lead to <a href=\"https://en.wikipedia.org/wiki/Cross-site_scripting\" target=\"_blank\" rel=\"noopener\">XSS attacks</a>. Only use <code>v-html</code> on trusted content and <strong>never</strong> on user-provided content.</p>\n\n<p class=\"tip\">In <a href=\"../guide/single-file-components.html\">single-file components</a>, <code>scoped</code> styles will not apply to content inside <code>v-html</code>, because that HTML is not processed by Vue’s template compiler. If you want to target <code>v-html</code> content with scoped CSS, you can instead use <a href=\"https://vue-loader.vuejs.org/en/features/css-modules.html\" target=\"_blank\" rel=\"noopener\">CSS modules</a> or an additional, global <code>&lt;style&gt;</code> element with a manual scoping strategy such as BEM.</p>\n</li>\n<li><p><strong>Example:</strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-html</span>=<span class=\"string\">\"html\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>See also:</strong> <a href=\"../guide/syntax.html#Raw-HTML\">Data Binding Syntax - Interpolations</a></p>\n</li>\n</ul>\n<h3 id=\"v-show\"><a href=\"#v-show\" class=\"headerlink\" title=\"v-show\"></a>v-show</h3><ul>\n<li><p><strong>Expects:</strong> <code>any</code></p>\n</li>\n<li><p><strong>Usage:</strong></p>\n<p>Toggles the element’s <code>display</code> CSS property based on the truthy-ness of the expression value.</p>\n<p>This directive triggers transitions when its condition changes.</p>\n</li>\n<li><p><strong>See also:</strong> <a href=\"../guide/conditional.html#v-show\">Conditional Rendering - v-show</a></p>\n</li>\n</ul>\n<h3 id=\"v-if\"><a href=\"#v-if\" class=\"headerlink\" title=\"v-if\"></a>v-if</h3><ul>\n<li><p><strong>Expects:</strong> <code>any</code></p>\n</li>\n<li><p><strong>Usage:</strong></p>\n<p>Conditionally render the element based on the truthy-ness of the expression value. The element and its contained directives / components are destroyed and re-constructed during toggles. If the element is a <code>&lt;template&gt;</code> element, its content will be extracted as the conditional block.</p>\n<p>This directive triggers transitions when its condition changes.</p>\n<p class=\"tip\">When used together with v-if, v-for has a higher priority than v-if. See the <a href=\"../guide/list.html#v-for-with-v-if\">list rendering guide</a> for details.</p>\n</li>\n<li><p><strong>See also:</strong> <a href=\"../guide/conditional.html\">Conditional Rendering - v-if</a></p>\n</li>\n</ul>\n<h3 id=\"v-else\"><a href=\"#v-else\" class=\"headerlink\" title=\"v-else\"></a>v-else</h3><ul>\n<li><p><strong>Does not expect expression</strong></p>\n</li>\n<li><p><strong>Restriction:</strong> previous sibling element must have <code>v-if</code> or <code>v-else-if</code>.</p>\n</li>\n<li><p><strong>Usage:</strong></p>\n<p>Denote the “else block” for <code>v-if</code> or a <code>v-if</code>/<code>v-else-if</code> chain.</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-if</span>=<span class=\"string\">\"Math.random() &gt; 0.5\"</span>&gt;</span></span><br><span class=\"line\">  Now you see me</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-else</span>&gt;</span></span><br><span class=\"line\">  Now you don't</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>See also:</strong> <a href=\"../guide/conditional.html#v-else\">Conditional Rendering - v-else</a></p>\n</li>\n</ul>\n<h3 id=\"v-else-if\"><a href=\"#v-else-if\" class=\"headerlink\" title=\"v-else-if\"></a>v-else-if</h3><blockquote>\n<p>New in 2.1.0+</p>\n</blockquote>\n<ul>\n<li><p><strong>Expects:</strong> <code>any</code></p>\n</li>\n<li><p><strong>Restriction:</strong> previous sibling element must have <code>v-if</code> or <code>v-else-if</code>.</p>\n</li>\n<li><p><strong>Usage:</strong></p>\n<p>Denote the “else if block” for <code>v-if</code>. Can be chained.</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-if</span>=<span class=\"string\">\"type === 'A'\"</span>&gt;</span></span><br><span class=\"line\">  A</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-else-if</span>=<span class=\"string\">\"type === 'B'\"</span>&gt;</span></span><br><span class=\"line\">  B</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-else-if</span>=<span class=\"string\">\"type === 'C'\"</span>&gt;</span></span><br><span class=\"line\">  C</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-else</span>&gt;</span></span><br><span class=\"line\">  Not A/B/C</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>See also:</strong> <a href=\"../guide/conditional.html#v-else-if\">Conditional Rendering - v-else-if</a></p>\n</li>\n</ul>\n<h3 id=\"v-for\"><a href=\"#v-for\" class=\"headerlink\" title=\"v-for\"></a>v-for</h3><ul>\n<li><p><strong>Expects:</strong> <code>Array | Object | number | string</code></p>\n</li>\n<li><p><strong>Usage:</strong></p>\n<p>Render the element or template block multiple times based on the source data. The directive’s value must use the special syntax <code>alias in expression</code> to provide an alias for the current element being iterated on:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"item in items\"</span>&gt;</span></span><br><span class=\"line\">  &#123;&#123; item.text &#125;&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>Alternatively, you can also specify an alias for the index (or the key if used on an Object):</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"(item, index) in items\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"(val, key) in object\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"(val, key, index) in object\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>The default behavior of <code>v-for</code> will try to patch the elements in-place without moving them. To force it to reorder elements, you need to provide an ordering hint with the <code>key</code> special attribute:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"item in items\"</span> <span class=\"attr\">:key</span>=<span class=\"string\">\"item.id\"</span>&gt;</span></span><br><span class=\"line\">  &#123;&#123; item.text &#125;&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p class=\"tip\">When used together with v-if, v-for has a higher priority than v-if. See the <a href=\"../guide/list.html#v-for-with-v-if\">list rendering guide</a> for details.</p>\n\n<p>The detailed usage for <code>v-for</code> is explained in the guide section linked below.</p>\n</li>\n<li><p><strong>See also:</strong></p>\n<ul>\n<li><a href=\"../guide/list.html\">List Rendering</a></li>\n<li><a href=\"../guide/list.html#key\">key</a></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"v-on\"><a href=\"#v-on\" class=\"headerlink\" title=\"v-on\"></a>v-on</h3><ul>\n<li><p><strong>Shorthand:</strong> <code>@</code></p>\n</li>\n<li><p><strong>Expects:</strong> <code>Function | Inline Statement | Object</code></p>\n</li>\n<li><p><strong>Argument:</strong> <code>event</code></p>\n</li>\n<li><p><strong>Modifiers:</strong></p>\n<ul>\n<li><code>.stop</code> - call <code>event.stopPropagation()</code>.</li>\n<li><code>.prevent</code> - call <code>event.preventDefault()</code>.</li>\n<li><code>.capture</code> - add event listener in capture mode.</li>\n<li><code>.self</code> - only trigger handler if event was dispatched from this element.</li>\n<li><code>.{keyCode | keyAlias}</code> - only trigger handler on certain keys.</li>\n<li><code>.native</code> - listen for a native event on the root element of component.</li>\n<li><code>.once</code> - trigger handler at most once.</li>\n<li><code>.left</code> - (2.2.0+) only trigger handler for left button mouse events.</li>\n<li><code>.right</code> - (2.2.0+) only trigger handler for right button mouse events.</li>\n<li><code>.middle</code> - (2.2.0+) only trigger handler for middle button mouse events.</li>\n<li><code>.passive</code> - (2.3.0+) attaches a DOM event with <code>{ passive: true }</code>.</li>\n</ul>\n</li>\n<li><p><strong>Usage:</strong></p>\n<p>Attaches an event listener to the element. The event type is denoted by the argument. The expression can be a method name, an inline statement, or omitted if there are modifiers present.</p>\n<p>When used on a normal element, it listens to <a href=\"https://developer.mozilla.org/en-US/docs/Web/Events\" target=\"_blank\" rel=\"noopener\"><strong>native DOM events</strong></a> only. When used on a custom element component, it listens to <strong>custom events</strong> emitted on that child component.</p>\n<p>When listening to native DOM events, the method receives the native event as the only argument. If using inline statement, the statement has access to the special <code>$event</code> property: <code>v-on:click=&quot;handle(&#39;ok&#39;, $event)&quot;</code>.</p>\n<p>Starting in 2.4.0+, <code>v-on</code> also supports binding to an object of event/listener pairs without an argument. Note when using the object syntax, it does not support any modifiers.</p>\n</li>\n<li><p><strong>Example:</strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- method handler --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">v-on:click</span>=<span class=\"string\">\"doThis\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- inline statement --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">v-on:click</span>=<span class=\"string\">\"doThat('hello', $event)\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- shorthand --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">\"doThis\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- stop propagation --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click.stop</span>=<span class=\"string\">\"doThis\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- prevent default --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click.prevent</span>=<span class=\"string\">\"doThis\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- prevent default without expression --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> @<span class=\"attr\">submit.prevent</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- chain modifiers --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click.stop.prevent</span>=<span class=\"string\">\"doThis\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- key modifier using keyAlias --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> @<span class=\"attr\">keyup.enter</span>=<span class=\"string\">\"onEnter\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- key modifier using keyCode --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> @<span class=\"attr\">keyup.13</span>=<span class=\"string\">\"onEnter\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- the click event will be triggered at most once --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">v-on:click.once</span>=<span class=\"string\">\"doThis\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- object syntax (2.4.0+) --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">v-on</span>=<span class=\"string\">\"&#123; mousedown: doThis, mouseup: doThat &#125;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>Listening to custom events on a child component (the handler is called when “my-event” is emitted on the child):</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">my-component</span> @<span class=\"attr\">my-event</span>=<span class=\"string\">\"handleThis\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">my-component</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- inline statement --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">my-component</span> @<span class=\"attr\">my-event</span>=<span class=\"string\">\"handleThis(123, $event)\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">my-component</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- native event on component --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">my-component</span> @<span class=\"attr\">click.native</span>=<span class=\"string\">\"onClick\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">my-component</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>See also:</strong></p>\n<ul>\n<li><a href=\"../guide/events.html\">Event Handling</a></li>\n<li><a href=\"../guide/components.html#Custom-Events\">Components - Custom Events</a></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"v-bind\"><a href=\"#v-bind\" class=\"headerlink\" title=\"v-bind\"></a>v-bind</h3><ul>\n<li><p><strong>Shorthand:</strong> <code>:</code></p>\n</li>\n<li><p><strong>Expects:</strong> <code>any (with argument) | Object (without argument)</code></p>\n</li>\n<li><p><strong>Argument:</strong> <code>attrOrProp (optional)</code></p>\n</li>\n<li><p><strong>Modifiers:</strong></p>\n<ul>\n<li><code>.prop</code> - Bind as a DOM property instead of an attribute (<a href=\"https://stackoverflow.com/questions/6003819/properties-and-attributes-in-html#answer-6004028\" target=\"_blank\" rel=\"noopener\">what’s the difference?</a>). If the tag is a component then <code>.prop</code> will set the property on the component’s <code>$el</code>.</li>\n<li><code>.camel</code> - (2.1.0+) transform the kebab-case attribute name into camelCase.</li>\n<li><code>.sync</code> - (2.3.0+) a syntax sugar that expands into a <code>v-on</code> handler for updating the bound value.</li>\n</ul>\n</li>\n<li><p><strong>Usage:</strong></p>\n<p>Dynamically bind one or more attributes, or a component prop to an expression.</p>\n<p>When used to bind the <code>class</code> or <code>style</code> attribute, it supports additional value types such as Array or Objects. See linked guide section below for more details.</p>\n<p>When used for prop binding, the prop must be properly declared in the child component.</p>\n<p>When used without an argument, can be used to bind an object containing attribute name-value pairs. Note in this mode <code>class</code> and <code>style</code> does not support Array or Objects.</p>\n</li>\n<li><p><strong>Example:</strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- bind an attribute --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">v-bind:src</span>=<span class=\"string\">\"imageSrc\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- shorthand --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">:src</span>=<span class=\"string\">\"imageSrc\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- with inline string concatenation --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">:src</span>=<span class=\"string\">\"'/path/to/images/' + fileName\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- class binding --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">:class</span>=<span class=\"string\">\"&#123; red: isRed &#125;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">:class</span>=<span class=\"string\">\"[classA, classB]\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">:class</span>=<span class=\"string\">\"[classA, &#123; classB: isB, classC: isC &#125;]\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- style binding --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">:style</span>=<span class=\"string\">\"&#123; fontSize: size + 'px' &#125;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">:style</span>=<span class=\"string\">\"[styleObjectA, styleObjectB]\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- binding an object of attributes --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-bind</span>=<span class=\"string\">\"&#123; id: someProp, 'other-attr': otherProp &#125;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- DOM attribute binding with prop modifier --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-bind:text-content.prop</span>=<span class=\"string\">\"text\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- prop binding. \"prop\" must be declared in my-component. --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">my-component</span> <span class=\"attr\">:prop</span>=<span class=\"string\">\"someThing\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">my-component</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- pass down parent props in common with a child component --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">child-component</span> <span class=\"attr\">v-bind</span>=<span class=\"string\">\"$props\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">child-component</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- XLink --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">svg</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">:xlink:special</span>=<span class=\"string\">\"foo\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">svg</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>The <code>.camel</code> modifier allows camelizing a <code>v-bind</code> attribute name when using in-DOM templates, e.g. the SVG <code>viewBox</code> attribute:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">svg</span> <span class=\"attr\">:view-box.camel</span>=<span class=\"string\">\"viewBox\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">svg</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><code>.camel</code> is not needed if you are using string templates, or compiling with <code>vue-loader</code>/<code>vueify</code>.</p>\n</li>\n<li><p><strong>See also:</strong></p>\n<ul>\n<li><a href=\"../guide/class-and-style.html\">Class and Style Bindings</a></li>\n<li><a href=\"../guide/components.html#Props\">Components - Props</a></li>\n<li><a href=\"../guide/components.html#sync-Modifier\">Components - <code>.sync</code> Modifier</a></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"v-model\"><a href=\"#v-model\" class=\"headerlink\" title=\"v-model\"></a>v-model</h3><ul>\n<li><p><strong>Expects:</strong> varies based on value of form inputs element or output of components</p>\n</li>\n<li><p><strong>Limited to:</strong></p>\n<ul>\n<li><code>&lt;input&gt;</code></li>\n<li><code>&lt;select&gt;</code></li>\n<li><code>&lt;textarea&gt;</code></li>\n<li>components</li>\n</ul>\n</li>\n<li><p><strong>Modifiers:</strong></p>\n<ul>\n<li><a href=\"../guide/forms.html#lazy\"><code>.lazy</code></a> - listen to <code>change</code> events instead of <code>input</code></li>\n<li><a href=\"../guide/forms.html#number\"><code>.number</code></a> - cast input string to numbers</li>\n<li><a href=\"../guide/forms.html#trim\"><code>.trim</code></a> - trim input</li>\n</ul>\n</li>\n<li><p><strong>Usage:</strong></p>\n<p>Create a two-way binding on a form input element or a component. For detailed usage and other notes, see the Guide section linked below.</p>\n</li>\n<li><p><strong>See also:</strong></p>\n<ul>\n<li><a href=\"../guide/forms.html\">Form Input Bindings</a></li>\n<li><a href=\"../guide/components.html#Form-Input-Components-using-Custom-Events\">Components - Form Input Components using Custom Events</a></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"v-pre\"><a href=\"#v-pre\" class=\"headerlink\" title=\"v-pre\"></a>v-pre</h3><ul>\n<li><p><strong>Does not expect expression</strong></p>\n</li>\n<li><p><strong>Usage:</strong></p>\n<p>Skip compilation for this element and all its children. You can use this for displaying raw mustache tags. Skipping large numbers of nodes with no directives on them can also speed up compilation.</p>\n</li>\n<li><p><strong>Example:</strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">v-pre</span>&gt;</span>&#123;&#123; this will not be compiled &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"v-cloak\"><a href=\"#v-cloak\" class=\"headerlink\" title=\"v-cloak\"></a>v-cloak</h3><ul>\n<li><p><strong>Does not expect expression</strong></p>\n</li>\n<li><p><strong>Usage:</strong></p>\n<p>This directive will remain on the element until the associated Vue instance finishes compilation. Combined with CSS rules such as <code>[v-cloak] { display: none }</code>, this directive can be used to hide un-compiled mustache bindings until the Vue instance is ready.</p>\n</li>\n<li><p><strong>Example:</strong></p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-attr\">[v-cloak]</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: none;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-cloak</span>&gt;</span></span><br><span class=\"line\">  &#123;&#123; message &#125;&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>The <code>&lt;div&gt;</code> will not be visible until the compilation is done.</p>\n</li>\n</ul>\n<h3 id=\"v-once\"><a href=\"#v-once\" class=\"headerlink\" title=\"v-once\"></a>v-once</h3><ul>\n<li><p><strong>Does not expect expression</strong></p>\n</li>\n<li><p><strong>Details:</strong></p>\n<p>Render the element and component <strong>once</strong> only. On subsequent re-renders, the element/component and all its children will be treated as static content and skipped. This can be used to optimize update performance.</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- single element --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">v-once</span>&gt;</span>This will never change: &#123;&#123;msg&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- the element have children --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-once</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>comment<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- component --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">my-component</span> <span class=\"attr\">v-once</span> <span class=\"attr\">:comment</span>=<span class=\"string\">\"msg\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">my-component</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- `v-for` directive --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"i in list\"</span> <span class=\"attr\">v-once</span>&gt;</span>&#123;&#123;i&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>See also:</strong></p>\n<ul>\n<li><a href=\"../guide/syntax.html#Text\">Data Binding Syntax - interpolations</a></li>\n<li><a href=\"../guide/components.html#Cheap-Static-Components-with-v-once\">Components - Cheap Static Components with <code>v-once</code></a></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Special-Attributes\"><a href=\"#Special-Attributes\" class=\"headerlink\" title=\"Special Attributes\"></a>Special Attributes</h2><h3 id=\"key\"><a href=\"#key\" class=\"headerlink\" title=\"key\"></a>key</h3><ul>\n<li><p><strong>Expects:</strong> <code>number | string</code></p>\n<p>The <code>key</code> special attribute is primarily used as a hint for Vue’s virtual DOM algorithm to identify VNodes when diffing the new list of nodes against the old list. Without keys, Vue uses an algorithm that minimizes element movement and tries to patch/reuse elements of the same type in-place as much as possible. With keys, it will reorder elements based on the order change of keys, and elements with keys that are no longer present will always be removed/destroyed.</p>\n<p>Children of the same common parent must have <strong>unique keys</strong>. Duplicate keys will cause render errors.</p>\n<p>The most common use case is combined with <code>v-for</code>:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"item in items\"</span> <span class=\"attr\">:key</span>=<span class=\"string\">\"item.id\"</span>&gt;</span>...<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>It can also be used to force replacement of an element/component instead of reusing it. This can be useful when you want to:</p>\n<ul>\n<li>Properly trigger lifecycle hooks of a component</li>\n<li>Trigger transitions</li>\n</ul>\n<p>For example:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">transition</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">:key</span>=<span class=\"string\">\"text\"</span>&gt;</span>&#123;&#123; text &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">transition</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>When <code>text</code> changes, the <code>&lt;span&gt;</code> will always be replaced instead of patched, so a transition will be triggered.</p>\n</li>\n</ul>\n<h3 id=\"ref\"><a href=\"#ref\" class=\"headerlink\" title=\"ref\"></a>ref</h3><ul>\n<li><p><strong>Expects:</strong> <code>string</code></p>\n<p><code>ref</code> is used to register a reference to an element or a child component. The reference will be registered under the parent component’s <code>$refs</code> object. If used on a plain DOM element, the reference will be that element; if used on a child component, the reference will be component instance:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- vm.$refs.p will be the DOM node --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"p\"</span>&gt;</span>hello<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- vm.$refs.child will be the child component instance --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">child-component</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"child\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">child-component</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>When used on elements/components with <code>v-for</code>, the registered reference will be an Array containing DOM nodes or component instances.</p>\n<p>An important note about the ref registration timing: because the refs themselves are created as a result of the render function, you cannot access them on the initial render - they don’t exist yet! <code>$refs</code> is also non-reactive, therefore you should not attempt to use it in templates for data-binding.</p>\n</li>\n<li><p><strong>See also:</strong> <a href=\"../guide/components.html#Child-Component-Refs\">Child Component Refs</a></p>\n</li>\n</ul>\n<h3 id=\"slot\"><a href=\"#slot\" class=\"headerlink\" title=\"slot\"></a>slot</h3><ul>\n<li><p><strong>Expects:</strong> <code>string</code></p>\n<p>Used on content inserted into child components to indicate which named slot the content belongs to.</p>\n<p>For detailed usage, see the guide section linked below.</p>\n</li>\n<li><p><strong>See also:</strong> <a href=\"../guide/components.html#Named-Slots\">Named Slots</a></p>\n</li>\n</ul>\n<h3 id=\"slot-scope\"><a href=\"#slot-scope\" class=\"headerlink\" title=\"slot-scope\"></a>slot-scope</h3><blockquote>\n<p>New in 2.5.0+</p>\n</blockquote>\n<ul>\n<li><p><strong>Expects:</strong> <code>function argument expression</code></p>\n</li>\n<li><p><strong>Usage:</strong></p>\n<p>Used to denote an element or component as a scoped slot. The attribute’s value should be a valid JavaScript expression that can appear in the argument position of a function signature. This means in supported environments you can also use ES2015 destructuring in the expression. Serves as a replacement for <a href=\"#scope-replaced\"><code>scope</code></a> in 2.5.0+.</p>\n<p>This attribute does not support dynamic binding.</p>\n</li>\n<li><p><strong>See also:</strong> <a href=\"../guide/components.html#Scoped-Slots\">Scoped Slots</a></p>\n</li>\n</ul>\n<h3 id=\"scope-replaced\"><a href=\"#scope-replaced\" class=\"headerlink\" title=\"scope replaced\"></a>scope <sup>replaced</sup></h3><p>Used to denote a <code>&lt;template&gt;</code> element as a scoped slot, which is replaced by <a href=\"#slot-scope\"><code>slot-scope</code></a> in 2.5.0+.</p>\n<ul>\n<li><p><strong>Usage:</strong></p>\n<p>Same as <a href=\"#slot-scope\"><code>slot-scope</code></a> except that <code>scope</code> can only be used on <code>&lt;template&gt;</code> elements.</p>\n</li>\n</ul>\n<h3 id=\"is\"><a href=\"#is\" class=\"headerlink\" title=\"is\"></a>is</h3><ul>\n<li><p><strong>Expects:</strong> <code>string | Object (component’s options object)</code></p>\n<p>Used for <a href=\"../guide/components.html#Dynamic-Components\">dynamic components</a> and to work around <a href=\"../guide/components.html#DOM-Template-Parsing-Caveats\">limitations of in-DOM templates</a>.</p>\n<p>For example:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- component changes when currentView changes --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">component</span> <span class=\"attr\">v-bind:is</span>=<span class=\"string\">\"currentView\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">component</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- necessary because `&lt;my-row&gt;` would be invalid inside --&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- a `&lt;table&gt;` element and so would be hoisted out      --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">table</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">tr</span> <span class=\"attr\">is</span>=<span class=\"string\">\"my-row\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>For detailed usage, follow the links in the description above.</p>\n</li>\n<li><p><strong>See also:</strong></p>\n<ul>\n<li><a href=\"../guide/components.html#Dynamic-Components\">Dynamic Components</a></li>\n<li><a href=\"../guide/components.html#DOM-Template-Parsing-Caveats\">DOM Template Parsing Caveats</a></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Built-In-Components\"><a href=\"#Built-In-Components\" class=\"headerlink\" title=\"Built-In Components\"></a>Built-In Components</h2><h3 id=\"component\"><a href=\"#component\" class=\"headerlink\" title=\"component\"></a>component</h3><ul>\n<li><p><strong>Props:</strong></p>\n<ul>\n<li><code>is</code> - string | ComponentDefinition | ComponentConstructor</li>\n<li><code>inline-template</code> - boolean</li>\n</ul>\n</li>\n<li><p><strong>Usage:</strong></p>\n<p>A “meta component” for rendering dynamic components. The actual component to render is determined by the <code>is</code> prop:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- a dynamic component controlled by --&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- the `componentId` property on the vm --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">component</span> <span class=\"attr\">:is</span>=<span class=\"string\">\"componentId\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">component</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- can also render registered component or component passed as prop --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">component</span> <span class=\"attr\">:is</span>=<span class=\"string\">\"$options.components.child\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">component</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>See also:</strong> <a href=\"../guide/components.html#Dynamic-Components\">Dynamic Components</a></p>\n</li>\n</ul>\n<h3 id=\"transition\"><a href=\"#transition\" class=\"headerlink\" title=\"transition\"></a>transition</h3><ul>\n<li><p><strong>Props:</strong></p>\n<ul>\n<li><code>name</code> - string, Used to automatically generate transition CSS class names. e.g. <code>name: &#39;fade&#39;</code> will auto expand to <code>.fade-enter</code>, <code>.fade-enter-active</code>, etc. Defaults to <code>&quot;v&quot;</code>.</li>\n<li><code>appear</code> - boolean, Whether to apply transition on initial render. Defaults to <code>false</code>.</li>\n<li><code>css</code> - boolean, Whether to apply CSS transition classes. Defaults to <code>true</code>. If set to <code>false</code>, will only trigger JavaScript hooks registered via component events.</li>\n<li><code>type</code> - string, Specify the type of transition events to wait for to determine transition end timing. Available values are <code>&quot;transition&quot;</code> and <code>&quot;animation&quot;</code>. By default, it will automatically detect the type that has a longer duration.</li>\n<li><code>mode</code> - string, Controls the timing sequence of leaving/entering transitions. Available modes are <code>&quot;out-in&quot;</code> and <code>&quot;in-out&quot;</code>; defaults to simultaneous.</li>\n<li><code>enter-class</code> - string</li>\n<li><code>leave-class</code> - string</li>\n<li><code>appear-class</code> - string</li>\n<li><code>enter-to-class</code> - string</li>\n<li><code>leave-to-class</code> - string</li>\n<li><code>appear-to-class</code> - string</li>\n<li><code>enter-active-class</code> - string</li>\n<li><code>leave-active-class</code> - string</li>\n<li><code>appear-active-class</code> - string</li>\n</ul>\n</li>\n<li><p><strong>Events:</strong></p>\n<ul>\n<li><code>before-enter</code></li>\n<li><code>before-leave</code></li>\n<li><code>before-appear</code></li>\n<li><code>enter</code></li>\n<li><code>leave</code></li>\n<li><code>appear</code></li>\n<li><code>after-enter</code></li>\n<li><code>after-leave</code></li>\n<li><code>after-appear</code></li>\n<li><code>enter-cancelled</code></li>\n<li><code>leave-cancelled</code> (<code>v-show</code> only)</li>\n<li><code>appear-cancelled</code></li>\n</ul>\n</li>\n<li><p><strong>Usage:</strong></p>\n<p><code>&lt;transition&gt;</code> serve as transition effects for <strong>single</strong> element/component. The <code>&lt;transition&gt;</code> only applies the transition behavior to the wrapped content inside; it doesn’t render an extra DOM element, or show up in the inspected component hierarchy.</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- simple element --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">transition</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-if</span>=<span class=\"string\">\"ok\"</span>&gt;</span>toggled content<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">transition</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- dynamic component --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">transition</span> <span class=\"attr\">name</span>=<span class=\"string\">\"fade\"</span> <span class=\"attr\">mode</span>=<span class=\"string\">\"out-in\"</span> <span class=\"attr\">appear</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">component</span> <span class=\"attr\">:is</span>=<span class=\"string\">\"view\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">component</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">transition</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- event hooking --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"transition-demo\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">transition</span> @<span class=\"attr\">after-enter</span>=<span class=\"string\">\"transitionComplete\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-show</span>=<span class=\"string\">\"ok\"</span>&gt;</span>toggled content<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">transition</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    transitionComplete: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">el</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">// for passed 'el' that DOM element as the argument, something ...</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;).$mount(<span class=\"string\">'#transition-demo'</span>)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>See also:</strong> <a href=\"../guide/transitions.html\">Transitions: Entering, Leaving, and Lists</a></p>\n</li>\n</ul>\n<h3 id=\"transition-group\"><a href=\"#transition-group\" class=\"headerlink\" title=\"transition-group\"></a>transition-group</h3><ul>\n<li><p><strong>Props:</strong></p>\n<ul>\n<li><code>tag</code> - string, defaults to <code>span</code>.</li>\n<li><code>move-class</code> - overwrite CSS class applied during moving transition.</li>\n<li>exposes the same props as <code>&lt;transition&gt;</code> except <code>mode</code>.</li>\n</ul>\n</li>\n<li><p><strong>Events:</strong></p>\n<ul>\n<li>exposes the same events as <code>&lt;transition&gt;</code>.</li>\n</ul>\n</li>\n<li><p><strong>Usage:</strong></p>\n<p><code>&lt;transition-group&gt;</code> serve as transition effects for <strong>multiple</strong> elements/components. The <code>&lt;transition-group&gt;</code> renders a real DOM element. By default it renders a <code>&lt;span&gt;</code>, and you can configure what element is should render via the <code>tag</code> attribute.</p>\n<p>Note every child in a <code>&lt;transition-group&gt;</code> must be <strong>uniquely keyed</strong> for the animations to work properly.</p>\n<p><code>&lt;transition-group&gt;</code> supports moving transitions via CSS transform. When a child’s position on screen has changed after an updated, it will get applied a moving CSS class (auto generated from the <code>name</code> attribute or configured with the <code>move-class</code> attribute). If the CSS <code>transform</code> property is “transition-able” when the moving class is applied, the element will be smoothly animated to its destination using the <a href=\"https://aerotwist.com/blog/flip-your-animations/\" target=\"_blank\" rel=\"noopener\">FLIP technique</a>.</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">transition-group</span> <span class=\"attr\">tag</span>=<span class=\"string\">\"ul\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"slide\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"item in items\"</span> <span class=\"attr\">:key</span>=<span class=\"string\">\"item.id\"</span>&gt;</span></span><br><span class=\"line\">    &#123;&#123; item.text &#125;&#125;</span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">transition-group</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>See also:</strong> <a href=\"../guide/transitions.html\">Transitions: Entering, Leaving, and Lists</a></p>\n</li>\n</ul>\n<h3 id=\"keep-alive\"><a href=\"#keep-alive\" class=\"headerlink\" title=\"keep-alive\"></a>keep-alive</h3><ul>\n<li><p><strong>Props:</strong></p>\n<ul>\n<li><code>include</code> - string or RegExp or Array. Only components matched by this will be cached.</li>\n<li><code>exclude</code> - string or RegExp or Array. Any component matched by this will not be cached.</li>\n</ul>\n</li>\n<li><p><strong>Usage:</strong></p>\n<p>When wrapped around a dynamic component, <code>&lt;keep-alive&gt;</code> caches the inactive component instances without destroying them. Similar to <code>&lt;transition&gt;</code>, <code>&lt;keep-alive&gt;</code> is an abstract component: it doesn’t render a DOM element itself, and doesn’t show up in the component parent chain.</p>\n<p>When a component is toggled inside <code>&lt;keep-alive&gt;</code>, its <code>activated</code> and <code>deactivated</code> lifecycle hooks will be invoked accordingly.</p>\n<blockquote>\n<p>In 2.2.0+ and above, <code>activated</code> and <code>deactivated</code> will fire for all nested components inside a <code>&lt;keep-alive&gt;</code> tree.</p>\n</blockquote>\n<p>Primarily used with preserve component state or avoid re-rendering.</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- basic --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">keep-alive</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">component</span> <span class=\"attr\">:is</span>=<span class=\"string\">\"view\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">component</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">keep-alive</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- multiple conditional children --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">keep-alive</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">comp-a</span> <span class=\"attr\">v-if</span>=<span class=\"string\">\"a &gt; 1\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">comp-a</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">comp-b</span> <span class=\"attr\">v-else</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">comp-b</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">keep-alive</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- used together with `&lt;transition&gt;` --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">transition</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">keep-alive</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">component</span> <span class=\"attr\">:is</span>=<span class=\"string\">\"view\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">component</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">keep-alive</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">transition</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>Note, <code>&lt;keep-alive&gt;</code> is designed for the case where it has one direct child component that is being toggled. It does not work if you have <code>v-for</code> inside it. When there are multiple conditional children, as above, <code>&lt;keep-alive&gt;</code> requires that only one child is rendered at a time.</p>\n</li>\n<li><p><strong><code>include</code> and <code>exclude</code></strong></p>\n<blockquote>\n<p>New in 2.1.0+</p>\n</blockquote>\n<p>The <code>include</code> and <code>exclude</code> props allow components to be conditionally cached. Both props can be a comma-delimited string, a RegExp or an Array:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- comma-delimited string --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">keep-alive</span> <span class=\"attr\">include</span>=<span class=\"string\">\"a,b\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">component</span> <span class=\"attr\">:is</span>=<span class=\"string\">\"view\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">component</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">keep-alive</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- regex (use `v-bind`) --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">keep-alive</span> <span class=\"attr\">:include</span>=<span class=\"string\">\"/a|b/\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">component</span> <span class=\"attr\">:is</span>=<span class=\"string\">\"view\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">component</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">keep-alive</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- Array (use `v-bind`) --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">keep-alive</span> <span class=\"attr\">:include</span>=<span class=\"string\">\"['a', 'b']\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">component</span> <span class=\"attr\">:is</span>=<span class=\"string\">\"view\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">component</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">keep-alive</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>The match is first checked on the component’s own <code>name</code> option, then its local registration name (the key in the parent’s <code>components</code> option) if the <code>name</code> option is not available. Anonymous components cannot be matched against.</p>\n<p class=\"tip\"><code>&lt;keep-alive&gt;</code> does not work with functional components because they do not have instances to be cached.</p>\n</li>\n<li><p><strong>See also:</strong> <a href=\"../guide/components.html#keep-alive\">Dynamic Components - keep-alive</a></p>\n</li>\n</ul>\n<h3 id=\"slot-1\"><a href=\"#slot-1\" class=\"headerlink\" title=\"slot\"></a>slot</h3><ul>\n<li><p><strong>Props:</strong></p>\n<ul>\n<li><code>name</code> - string, Used for named slot.</li>\n</ul>\n</li>\n<li><p><strong>Usage:</strong></p>\n<p><code>&lt;slot&gt;</code> serve as content distribution outlets in component templates. <code>&lt;slot&gt;</code> itself will be replaced.</p>\n<p>For detailed usage, see the guide section linked below.</p>\n</li>\n<li><p><strong>See also:</strong> <a href=\"../guide/components.html#Content-Distribution-with-Slots\">Content Distribution with Slots</a></p>\n</li>\n</ul>\n<h2 id=\"VNode-Interface\"><a href=\"#VNode-Interface\" class=\"headerlink\" title=\"VNode Interface\"></a>VNode Interface</h2><ul>\n<li>Please refer to the <a href=\"https://github.com/vuejs/vue/blob/dev/src/core/vdom/vnode.js\" target=\"_blank\" rel=\"noopener\">VNode class declaration</a>.</li>\n</ul>\n<h2 id=\"Server-Side-Rendering\"><a href=\"#Server-Side-Rendering\" class=\"headerlink\" title=\"Server-Side Rendering\"></a>Server-Side Rendering</h2><ul>\n<li>Please refer to the <a href=\"https://github.com/vuejs/vue/tree/dev/packages/vue-server-renderer\" target=\"_blank\" rel=\"noopener\">vue-server-renderer package documentation</a>.</li>\n</ul>\n"}],"Post":[{"title":"0.11 Component Tips","date":"2014-12-08T07:02:14.000Z","_content":"\n<p class=\"tip\">Note: this post contains information for the outdated 0.11 version. Please refer to the [0.12 release notes](https://github.com/yyx990803/vue/releases) for the changes in the API.</p>\n\nThe release of 0.11 introduced [many changes](https://github.com/yyx990803/vue/blob/master/changes.md), but the most important one is how the new component scope works. Previously in 0.10.x, components have inherited scope by default. That means in a child component template you can reference parent scope properties. This often leads to tightly-coupled components, where a child component assumes knowledge of what properties are present in the parent scope. It is also possible to accidentally refer to a parent scope property in a child component.\n\n<!-- more -->\n\n### Isolated Scope and Data Passing\n\nStarting in 0.11, all child components have isolated scope by default, and the recommended way to control component data access is via [Explicit Data Passing](/guide/components.html#Explicit_Data_Passing) using [`v-with`](/api/directives.html#v-with) or [`paramAttributes`](/api/options.html#paramAttributes).\n\n`paramAttributes` enables us to write Web Component style templates:\n\n``` js\nVue.component('my-component', {\n  paramAttributes: ['params'],\n  compiled: function () {\n    console.log(this.params) // passed from parent\n  }\n})\n```\n\n``` html\n<my-component params=\"{{params}}\"></my-component>\n```\n\n### Where Does It Belong?\n\nPreviously in 0.10, all directives on a component's container element are compiled in the child component's scope. Because it inherited parent scope, this worked in most situations. Starting in 0.11.1, we want to provide a cleaner separation between component scopes. The rule of thumbs is: if something appears in the parent template, it will be compiled in parent scope; if it appears in child template, it will be compiled in child scope. For example:\n\n``` html\n<!-- parent template -->\n<div v-component=\"child\" v-on=\"click:onParentClick\">\n  <p>{{parentMessage}}</p>\n</div>\n```\n\n``` html\n<!-- child template, with replace: true -->\n<div v-on=\"click:onChildClick\">\n  <h1>{{childMessage}}</h1>\n  <content></content>\n</div>\n```\n\nEverything in the parent template will be compiled in the parent's scope, including the content that's going to be inserted into the child component.\n\nThe only exception to the rule is `v-with` (and `paramAttributes` which compiles down to `v-with`), which works in both places - so you don't need to worry about it too much.\n\n### Cleaner Event Communication\n\nPreviously the standard way for a child component to communicate to its parent is via dispatching events. However, with this approach, the event listeners on the parent component are not guaranteed to be listening on the desired child component only. It's also possible to trigger undesired listeners further up the chain if we do not cancel the event.\n\nThe most common use case is for a parent to react to the events from a specific, direct child component. So in 0.11.4, [a new directive `v-events`](/api/directives.html#v-events) has been introduced to enable exactly this behavior.\n\n0.11.4 has already been released, go try it out!\n","source":"_posts/011-component.md","raw":"---\ntitle: 0.11 Component Tips\ndate: 2014-12-08 15:02:14\ntags:\n---\n\n<p class=\"tip\">Note: this post contains information for the outdated 0.11 version. Please refer to the [0.12 release notes](https://github.com/yyx990803/vue/releases) for the changes in the API.</p>\n\nThe release of 0.11 introduced [many changes](https://github.com/yyx990803/vue/blob/master/changes.md), but the most important one is how the new component scope works. Previously in 0.10.x, components have inherited scope by default. That means in a child component template you can reference parent scope properties. This often leads to tightly-coupled components, where a child component assumes knowledge of what properties are present in the parent scope. It is also possible to accidentally refer to a parent scope property in a child component.\n\n<!-- more -->\n\n### Isolated Scope and Data Passing\n\nStarting in 0.11, all child components have isolated scope by default, and the recommended way to control component data access is via [Explicit Data Passing](/guide/components.html#Explicit_Data_Passing) using [`v-with`](/api/directives.html#v-with) or [`paramAttributes`](/api/options.html#paramAttributes).\n\n`paramAttributes` enables us to write Web Component style templates:\n\n``` js\nVue.component('my-component', {\n  paramAttributes: ['params'],\n  compiled: function () {\n    console.log(this.params) // passed from parent\n  }\n})\n```\n\n``` html\n<my-component params=\"{{params}}\"></my-component>\n```\n\n### Where Does It Belong?\n\nPreviously in 0.10, all directives on a component's container element are compiled in the child component's scope. Because it inherited parent scope, this worked in most situations. Starting in 0.11.1, we want to provide a cleaner separation between component scopes. The rule of thumbs is: if something appears in the parent template, it will be compiled in parent scope; if it appears in child template, it will be compiled in child scope. For example:\n\n``` html\n<!-- parent template -->\n<div v-component=\"child\" v-on=\"click:onParentClick\">\n  <p>{{parentMessage}}</p>\n</div>\n```\n\n``` html\n<!-- child template, with replace: true -->\n<div v-on=\"click:onChildClick\">\n  <h1>{{childMessage}}</h1>\n  <content></content>\n</div>\n```\n\nEverything in the parent template will be compiled in the parent's scope, including the content that's going to be inserted into the child component.\n\nThe only exception to the rule is `v-with` (and `paramAttributes` which compiles down to `v-with`), which works in both places - so you don't need to worry about it too much.\n\n### Cleaner Event Communication\n\nPreviously the standard way for a child component to communicate to its parent is via dispatching events. However, with this approach, the event listeners on the parent component are not guaranteed to be listening on the desired child component only. It's also possible to trigger undesired listeners further up the chain if we do not cancel the event.\n\nThe most common use case is for a parent to react to the events from a specific, direct child component. So in 0.11.4, [a new directive `v-events`](/api/directives.html#v-events) has been introduced to enable exactly this behavior.\n\n0.11.4 has already been released, go try it out!\n","slug":"011-component","published":1,"updated":"2018-07-19T04:04:16.809Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjk0zidnd0001vkrtt5am3u53","content":"<p class=\"tip\">Note: this post contains information for the outdated 0.11 version. Please refer to the <a href=\"https://github.com/yyx990803/vue/releases\" target=\"_blank\" rel=\"noopener\">0.12 release notes</a> for the changes in the API.</p>\n\n<p>The release of 0.11 introduced <a href=\"https://github.com/yyx990803/vue/blob/master/changes.md\" target=\"_blank\" rel=\"noopener\">many changes</a>, but the most important one is how the new component scope works. Previously in 0.10.x, components have inherited scope by default. That means in a child component template you can reference parent scope properties. This often leads to tightly-coupled components, where a child component assumes knowledge of what properties are present in the parent scope. It is also possible to accidentally refer to a parent scope property in a child component.</p>\n<a id=\"more\"></a>\n<h3 id=\"Isolated-Scope-and-Data-Passing\"><a href=\"#Isolated-Scope-and-Data-Passing\" class=\"headerlink\" title=\"Isolated Scope and Data Passing\"></a>Isolated Scope and Data Passing</h3><p>Starting in 0.11, all child components have isolated scope by default, and the recommended way to control component data access is via <a href=\"/guide/components.html#Explicit_Data_Passing\">Explicit Data Passing</a> using <a href=\"/api/directives.html#v-with\"><code>v-with</code></a> or <a href=\"/api/options.html#paramAttributes\"><code>paramAttributes</code></a>.</p>\n<p><code>paramAttributes</code> enables us to write Web Component style templates:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">Vue.component(<span class=\"string\">'my-component'</span>, &#123;</span><br><span class=\"line\">  paramAttributes: [<span class=\"string\">'params'</span>],</span><br><span class=\"line\">  compiled: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.params) <span class=\"comment\">// passed from parent</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">my-component</span> <span class=\"attr\">params</span>=<span class=\"string\">\"&#123;&#123;params&#125;&#125;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">my-component</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"Where-Does-It-Belong\"><a href=\"#Where-Does-It-Belong\" class=\"headerlink\" title=\"Where Does It Belong?\"></a>Where Does It Belong?</h3><p>Previously in 0.10, all directives on a component’s container element are compiled in the child component’s scope. Because it inherited parent scope, this worked in most situations. Starting in 0.11.1, we want to provide a cleaner separation between component scopes. The rule of thumbs is: if something appears in the parent template, it will be compiled in parent scope; if it appears in child template, it will be compiled in child scope. For example:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- parent template --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-component</span>=<span class=\"string\">\"child\"</span> <span class=\"attr\">v-on</span>=<span class=\"string\">\"click:onParentClick\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;&#123;parentMessage&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- child template, with replace: true --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-on</span>=<span class=\"string\">\"click:onChildClick\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>&#123;&#123;childMessage&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">content</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">content</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>Everything in the parent template will be compiled in the parent’s scope, including the content that’s going to be inserted into the child component.</p>\n<p>The only exception to the rule is <code>v-with</code> (and <code>paramAttributes</code> which compiles down to <code>v-with</code>), which works in both places - so you don’t need to worry about it too much.</p>\n<h3 id=\"Cleaner-Event-Communication\"><a href=\"#Cleaner-Event-Communication\" class=\"headerlink\" title=\"Cleaner Event Communication\"></a>Cleaner Event Communication</h3><p>Previously the standard way for a child component to communicate to its parent is via dispatching events. However, with this approach, the event listeners on the parent component are not guaranteed to be listening on the desired child component only. It’s also possible to trigger undesired listeners further up the chain if we do not cancel the event.</p>\n<p>The most common use case is for a parent to react to the events from a specific, direct child component. So in 0.11.4, <a href=\"/api/directives.html#v-events\">a new directive <code>v-events</code></a> has been introduced to enable exactly this behavior.</p>\n<p>0.11.4 has already been released, go try it out!</p>\n","site":{"data":{}},"excerpt":"<p class=\"tip\">Note: this post contains information for the outdated 0.11 version. Please refer to the <a href=\"https://github.com/yyx990803/vue/releases\" target=\"_blank\" rel=\"noopener\">0.12 release notes</a> for the changes in the API.</p>\n\n<p>The release of 0.11 introduced <a href=\"https://github.com/yyx990803/vue/blob/master/changes.md\" target=\"_blank\" rel=\"noopener\">many changes</a>, but the most important one is how the new component scope works. Previously in 0.10.x, components have inherited scope by default. That means in a child component template you can reference parent scope properties. This often leads to tightly-coupled components, where a child component assumes knowledge of what properties are present in the parent scope. It is also possible to accidentally refer to a parent scope property in a child component.</p>","more":"<h3 id=\"Isolated-Scope-and-Data-Passing\"><a href=\"#Isolated-Scope-and-Data-Passing\" class=\"headerlink\" title=\"Isolated Scope and Data Passing\"></a>Isolated Scope and Data Passing</h3><p>Starting in 0.11, all child components have isolated scope by default, and the recommended way to control component data access is via <a href=\"/guide/components.html#Explicit_Data_Passing\">Explicit Data Passing</a> using <a href=\"/api/directives.html#v-with\"><code>v-with</code></a> or <a href=\"/api/options.html#paramAttributes\"><code>paramAttributes</code></a>.</p>\n<p><code>paramAttributes</code> enables us to write Web Component style templates:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">Vue.component(<span class=\"string\">'my-component'</span>, &#123;</span><br><span class=\"line\">  paramAttributes: [<span class=\"string\">'params'</span>],</span><br><span class=\"line\">  compiled: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.params) <span class=\"comment\">// passed from parent</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">my-component</span> <span class=\"attr\">params</span>=<span class=\"string\">\"&#123;&#123;params&#125;&#125;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">my-component</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"Where-Does-It-Belong\"><a href=\"#Where-Does-It-Belong\" class=\"headerlink\" title=\"Where Does It Belong?\"></a>Where Does It Belong?</h3><p>Previously in 0.10, all directives on a component’s container element are compiled in the child component’s scope. Because it inherited parent scope, this worked in most situations. Starting in 0.11.1, we want to provide a cleaner separation between component scopes. The rule of thumbs is: if something appears in the parent template, it will be compiled in parent scope; if it appears in child template, it will be compiled in child scope. For example:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- parent template --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-component</span>=<span class=\"string\">\"child\"</span> <span class=\"attr\">v-on</span>=<span class=\"string\">\"click:onParentClick\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;&#123;parentMessage&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- child template, with replace: true --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-on</span>=<span class=\"string\">\"click:onChildClick\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>&#123;&#123;childMessage&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">content</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">content</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>Everything in the parent template will be compiled in the parent’s scope, including the content that’s going to be inserted into the child component.</p>\n<p>The only exception to the rule is <code>v-with</code> (and <code>paramAttributes</code> which compiles down to <code>v-with</code>), which works in both places - so you don’t need to worry about it too much.</p>\n<h3 id=\"Cleaner-Event-Communication\"><a href=\"#Cleaner-Event-Communication\" class=\"headerlink\" title=\"Cleaner Event Communication\"></a>Cleaner Event Communication</h3><p>Previously the standard way for a child component to communicate to its parent is via dispatching events. However, with this approach, the event listeners on the parent component are not guaranteed to be listening on the desired child component only. It’s also possible to trigger undesired listeners further up the chain if we do not cancel the event.</p>\n<p>The most common use case is for a parent to react to the events from a specific, direct child component. So in 0.11.4, <a href=\"/api/directives.html#v-events\">a new directive <code>v-events</code></a> has been introduced to enable exactly this behavior.</p>\n<p>0.11.4 has already been released, go try it out!</p>"},{"title":"Vue.js 0.12 released!","date":"2015-06-11T09:37:30.000Z","_content":"\nI'm really excited to announce that [Vue.js 0.12: Dragon Ball](https://github.com/yyx990803/vue/releases/tag/0.12.0) is finally here! Thanks to everyone who tried out the beta/rc versions and provided feedback / bug reports along the way.\n\nThere's a lot to cover in this release, and we will talk about a few highlights below. However, it is still recommended to carefully go through the [Full Release Note](https://github.com/yyx990803/vue/releases/tag/0.12.0) and updated docs if you are upgrading from 0.11. You can report bugs on GitHub, send questions to [vuejs/Discussion](https://github.com/vuejs/Discussion/issues), or join us in the [Gitter chat channel](https://gitter.im/yyx990803/vue).\n\n<!-- more -->\n\n### More Consistent Component Syntax\n\nPreviously in 0.11 you have two ways to use a Vue.js component: using the `v-component` directive, or using custom elements. There are also two ways to pass data down to child components: using the `v-with` directive, or using the `paramAttributes` option. Although both custom elements and param attributes get compiled down to directives eventually, it is confusing and redundant to have two sets of syntax for the same functionality.\n\nIn addition, it should be noted that the component system is a first-class concept in Vue.js, even more important than directives. It defines how we encapsulate our higher-level view logic and compose our application. In the meanwhile, having a clear and declarative way to pass data into child components is also very important. Components and param attributes really deserve their own dedicated syntax to differentiate from other directives.\n\nAs a result, `v-component` and `v-with` have been deprecated in 0.12. `paramAttributes` has also been renamed to `props`, which is shorter and cleaner. From now on, most Vue.js components will look like this:\n\n``` html\n<my-component prop=\"{{parentData}}\"></my-component>\n```\n\nThere are also additional props-related improvements such as explicit one-time or one-way props, expression as props, methods as prop callbacks and more. You can find out more details in the 0.12 release notes linked above and the updated [Component System](/guide/components.html) section of the guide.\n\n### Filter Arguments Improvements\n\nIn 0.11, filters always receive their arguments as plain strings. An argument can be enclosed in quotes to include whitespace, but the quotes are not automatically stripped when passed into the filter function. Some users were also confused about how to retrieve a dynamic value on the vm instead of a plain string.\n\nIn 0.12, the filter argument syntax now follows a simple rule: if an argument is enclosed in quotes, it will be passed in as a plain string; otherwise, it will be evaluated against the current vm as a dynamic value.\n\nThis means the usage of some existing filters will have to change:\n\n``` html\n<a v-on=\"keyup: onKeyUp | key 'enter'\"></a>\n{{ items.length | pluralize 'item' }}\n```\n\nBut it would make custom filters that rely on dynamic values much easier to write:\n\n``` html\n{{ msg | concat otherMsg }}\n```\n\nHere the first argument to the `concat` filter will be the value of `this.otherMsg`.\n\n### Asynchronous Components\n\nIt is common practice to bundle all the JavaScript into one file when building large single page applications. But when the file becomes too large, we may want to defer loading parts of our application for a faster initial load. However, this does pose some constraints on how the application architecture should be designed. It could be very tricky to figure out how to properly split up your JavaScript bundles.\n\nWell, with Vue.js we can already build our applications as decoupled components. If we can lazily load a dynamic component only when it is needed, wouldn't it be awesome? As a matter of fact, in 0.12 this would be trivially easy with the new Asynchronous Component feature.\n\nIn 0.12, you can define a component as a factory function that asynchronously resolves a component definition (can be just a plain options object). Vue.js will only trigger the factory function when the component actually needs to be rendered, and will cache the result for future re-renders:\n\n``` js\nVue.component('async-example', function (resolve, reject) {\n  setTimeout(function () {\n    resolve({\n      template: '<div>I am async!</div>'\n    })\n  }, 1000)\n})\n```\n\nIt is up to you to decide how to load the component from the server, e.g. `$.getScript()` or require.js; but the recommended usage is to pair it up with Webpack's [Code Splitting feature](http://webpack.github.io/docs/code-splitting.html):\n\n``` js\nVue.component('async-webpack-example', function (resolve, reject) {\n  // In Webpack AMD like syntax indicates a code split point\n  require(['./my-async-component'], resolve)\n})\n```\n\nThat's all you need to do. You can use the component just like before, without even thinking about it being async. Webpack will automatically split your final JavaScript into separate bundles with correct dependencies, and automatically load a bundle via Ajax when it is required. You can check out a fully functional example [here](https://github.com/vuejs/vue-webpack-example).\n\n### Improved Transition System\n\nVue.js' transition system is really easy to use, but in the past it has the limitation that you cannot mix CSS and JavaScript-based transitions together. In 0.12 that is no longer the case! The improved transition system now allows you to add JavaScript hooks to a CSS-based transition for additional control. The amount of hooks exposed have also been expanded to give you finer-grained control at every stage of the transition.\n\n`v-repeat` now also ships with built-in support for staggering transitions. It is as simple as adding `stagger=\"100\"` to your repeated element. It is also possible to define separate staggering for enter and leaving, or even dynamically calculate the staggering delay in a JavaScript hook.\n\nFor full details on the new transition system, check out the [updated guide](/guide/transitions.html).\n\n### Performance Tuning\n\nVue.js' precise dependency tracking makes it the one of the most efficient view layer for small hot updates, but there's always room for improvement. In 0.12, internal instance creation and compilation refactors have improved first-render performance for large lists by up to 40%. With proper `track-by` usage, [re-rendering with large, brand new dataset](http://vuejs.github.io/js-repaint-perfs/vue/) is also comparable to, or even faster than other Virtual-DOM based frameworks.\n\n### One More Thing...\n\nWith 0.12 out of the door, more efforts will now be spent on the official vue-router, a dedicated routing library for Vue.js with nested view matching, full transition support, and asynchronous data hooks. I have expressed that Vue.js core intends to stay as a no-frills, drop-in view layer library, and that will not change. The vue-router will be shipped separately and is totally optional, however you can expect it to work seamlessly with Vue.js core when you need it.\n","source":"_posts/012-release.md","raw":"---\ntitle: Vue.js 0.12 released!\ndate: 2015-06-11 17:37:30\n---\n\nI'm really excited to announce that [Vue.js 0.12: Dragon Ball](https://github.com/yyx990803/vue/releases/tag/0.12.0) is finally here! Thanks to everyone who tried out the beta/rc versions and provided feedback / bug reports along the way.\n\nThere's a lot to cover in this release, and we will talk about a few highlights below. However, it is still recommended to carefully go through the [Full Release Note](https://github.com/yyx990803/vue/releases/tag/0.12.0) and updated docs if you are upgrading from 0.11. You can report bugs on GitHub, send questions to [vuejs/Discussion](https://github.com/vuejs/Discussion/issues), or join us in the [Gitter chat channel](https://gitter.im/yyx990803/vue).\n\n<!-- more -->\n\n### More Consistent Component Syntax\n\nPreviously in 0.11 you have two ways to use a Vue.js component: using the `v-component` directive, or using custom elements. There are also two ways to pass data down to child components: using the `v-with` directive, or using the `paramAttributes` option. Although both custom elements and param attributes get compiled down to directives eventually, it is confusing and redundant to have two sets of syntax for the same functionality.\n\nIn addition, it should be noted that the component system is a first-class concept in Vue.js, even more important than directives. It defines how we encapsulate our higher-level view logic and compose our application. In the meanwhile, having a clear and declarative way to pass data into child components is also very important. Components and param attributes really deserve their own dedicated syntax to differentiate from other directives.\n\nAs a result, `v-component` and `v-with` have been deprecated in 0.12. `paramAttributes` has also been renamed to `props`, which is shorter and cleaner. From now on, most Vue.js components will look like this:\n\n``` html\n<my-component prop=\"{{parentData}}\"></my-component>\n```\n\nThere are also additional props-related improvements such as explicit one-time or one-way props, expression as props, methods as prop callbacks and more. You can find out more details in the 0.12 release notes linked above and the updated [Component System](/guide/components.html) section of the guide.\n\n### Filter Arguments Improvements\n\nIn 0.11, filters always receive their arguments as plain strings. An argument can be enclosed in quotes to include whitespace, but the quotes are not automatically stripped when passed into the filter function. Some users were also confused about how to retrieve a dynamic value on the vm instead of a plain string.\n\nIn 0.12, the filter argument syntax now follows a simple rule: if an argument is enclosed in quotes, it will be passed in as a plain string; otherwise, it will be evaluated against the current vm as a dynamic value.\n\nThis means the usage of some existing filters will have to change:\n\n``` html\n<a v-on=\"keyup: onKeyUp | key 'enter'\"></a>\n{{ items.length | pluralize 'item' }}\n```\n\nBut it would make custom filters that rely on dynamic values much easier to write:\n\n``` html\n{{ msg | concat otherMsg }}\n```\n\nHere the first argument to the `concat` filter will be the value of `this.otherMsg`.\n\n### Asynchronous Components\n\nIt is common practice to bundle all the JavaScript into one file when building large single page applications. But when the file becomes too large, we may want to defer loading parts of our application for a faster initial load. However, this does pose some constraints on how the application architecture should be designed. It could be very tricky to figure out how to properly split up your JavaScript bundles.\n\nWell, with Vue.js we can already build our applications as decoupled components. If we can lazily load a dynamic component only when it is needed, wouldn't it be awesome? As a matter of fact, in 0.12 this would be trivially easy with the new Asynchronous Component feature.\n\nIn 0.12, you can define a component as a factory function that asynchronously resolves a component definition (can be just a plain options object). Vue.js will only trigger the factory function when the component actually needs to be rendered, and will cache the result for future re-renders:\n\n``` js\nVue.component('async-example', function (resolve, reject) {\n  setTimeout(function () {\n    resolve({\n      template: '<div>I am async!</div>'\n    })\n  }, 1000)\n})\n```\n\nIt is up to you to decide how to load the component from the server, e.g. `$.getScript()` or require.js; but the recommended usage is to pair it up with Webpack's [Code Splitting feature](http://webpack.github.io/docs/code-splitting.html):\n\n``` js\nVue.component('async-webpack-example', function (resolve, reject) {\n  // In Webpack AMD like syntax indicates a code split point\n  require(['./my-async-component'], resolve)\n})\n```\n\nThat's all you need to do. You can use the component just like before, without even thinking about it being async. Webpack will automatically split your final JavaScript into separate bundles with correct dependencies, and automatically load a bundle via Ajax when it is required. You can check out a fully functional example [here](https://github.com/vuejs/vue-webpack-example).\n\n### Improved Transition System\n\nVue.js' transition system is really easy to use, but in the past it has the limitation that you cannot mix CSS and JavaScript-based transitions together. In 0.12 that is no longer the case! The improved transition system now allows you to add JavaScript hooks to a CSS-based transition for additional control. The amount of hooks exposed have also been expanded to give you finer-grained control at every stage of the transition.\n\n`v-repeat` now also ships with built-in support for staggering transitions. It is as simple as adding `stagger=\"100\"` to your repeated element. It is also possible to define separate staggering for enter and leaving, or even dynamically calculate the staggering delay in a JavaScript hook.\n\nFor full details on the new transition system, check out the [updated guide](/guide/transitions.html).\n\n### Performance Tuning\n\nVue.js' precise dependency tracking makes it the one of the most efficient view layer for small hot updates, but there's always room for improvement. In 0.12, internal instance creation and compilation refactors have improved first-render performance for large lists by up to 40%. With proper `track-by` usage, [re-rendering with large, brand new dataset](http://vuejs.github.io/js-repaint-perfs/vue/) is also comparable to, or even faster than other Virtual-DOM based frameworks.\n\n### One More Thing...\n\nWith 0.12 out of the door, more efforts will now be spent on the official vue-router, a dedicated routing library for Vue.js with nested view matching, full transition support, and asynchronous data hooks. I have expressed that Vue.js core intends to stay as a no-frills, drop-in view layer library, and that will not change. The vue-router will be shipped separately and is totally optional, however you can expect it to work seamlessly with Vue.js core when you need it.\n","slug":"012-release","published":1,"updated":"2018-07-19T04:04:16.809Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjk0zidni0003vkrtta40xnna","content":"<p>I’m really excited to announce that <a href=\"https://github.com/yyx990803/vue/releases/tag/0.12.0\" target=\"_blank\" rel=\"noopener\">Vue.js 0.12: Dragon Ball</a> is finally here! Thanks to everyone who tried out the beta/rc versions and provided feedback / bug reports along the way.</p>\n<p>There’s a lot to cover in this release, and we will talk about a few highlights below. However, it is still recommended to carefully go through the <a href=\"https://github.com/yyx990803/vue/releases/tag/0.12.0\" target=\"_blank\" rel=\"noopener\">Full Release Note</a> and updated docs if you are upgrading from 0.11. You can report bugs on GitHub, send questions to <a href=\"https://github.com/vuejs/Discussion/issues\" target=\"_blank\" rel=\"noopener\">vuejs/Discussion</a>, or join us in the <a href=\"https://gitter.im/yyx990803/vue\" target=\"_blank\" rel=\"noopener\">Gitter chat channel</a>.</p>\n<a id=\"more\"></a>\n<h3 id=\"More-Consistent-Component-Syntax\"><a href=\"#More-Consistent-Component-Syntax\" class=\"headerlink\" title=\"More Consistent Component Syntax\"></a>More Consistent Component Syntax</h3><p>Previously in 0.11 you have two ways to use a Vue.js component: using the <code>v-component</code> directive, or using custom elements. There are also two ways to pass data down to child components: using the <code>v-with</code> directive, or using the <code>paramAttributes</code> option. Although both custom elements and param attributes get compiled down to directives eventually, it is confusing and redundant to have two sets of syntax for the same functionality.</p>\n<p>In addition, it should be noted that the component system is a first-class concept in Vue.js, even more important than directives. It defines how we encapsulate our higher-level view logic and compose our application. In the meanwhile, having a clear and declarative way to pass data into child components is also very important. Components and param attributes really deserve their own dedicated syntax to differentiate from other directives.</p>\n<p>As a result, <code>v-component</code> and <code>v-with</code> have been deprecated in 0.12. <code>paramAttributes</code> has also been renamed to <code>props</code>, which is shorter and cleaner. From now on, most Vue.js components will look like this:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">my-component</span> <span class=\"attr\">prop</span>=<span class=\"string\">\"&#123;&#123;parentData&#125;&#125;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">my-component</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>There are also additional props-related improvements such as explicit one-time or one-way props, expression as props, methods as prop callbacks and more. You can find out more details in the 0.12 release notes linked above and the updated <a href=\"/guide/components.html\">Component System</a> section of the guide.</p>\n<h3 id=\"Filter-Arguments-Improvements\"><a href=\"#Filter-Arguments-Improvements\" class=\"headerlink\" title=\"Filter Arguments Improvements\"></a>Filter Arguments Improvements</h3><p>In 0.11, filters always receive their arguments as plain strings. An argument can be enclosed in quotes to include whitespace, but the quotes are not automatically stripped when passed into the filter function. Some users were also confused about how to retrieve a dynamic value on the vm instead of a plain string.</p>\n<p>In 0.12, the filter argument syntax now follows a simple rule: if an argument is enclosed in quotes, it will be passed in as a plain string; otherwise, it will be evaluated against the current vm as a dynamic value.</p>\n<p>This means the usage of some existing filters will have to change:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">v-on</span>=<span class=\"string\">\"keyup: onKeyUp | key 'enter'\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">&#123;&#123; items.length | pluralize 'item' &#125;&#125;</span><br></pre></td></tr></table></figure>\n<p>But it would make custom filters that rely on dynamic values much easier to write:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;&#123; msg | concat otherMsg &#125;&#125;</span><br></pre></td></tr></table></figure>\n<p>Here the first argument to the <code>concat</code> filter will be the value of <code>this.otherMsg</code>.</p>\n<h3 id=\"Asynchronous-Components\"><a href=\"#Asynchronous-Components\" class=\"headerlink\" title=\"Asynchronous Components\"></a>Asynchronous Components</h3><p>It is common practice to bundle all the JavaScript into one file when building large single page applications. But when the file becomes too large, we may want to defer loading parts of our application for a faster initial load. However, this does pose some constraints on how the application architecture should be designed. It could be very tricky to figure out how to properly split up your JavaScript bundles.</p>\n<p>Well, with Vue.js we can already build our applications as decoupled components. If we can lazily load a dynamic component only when it is needed, wouldn’t it be awesome? As a matter of fact, in 0.12 this would be trivially easy with the new Asynchronous Component feature.</p>\n<p>In 0.12, you can define a component as a factory function that asynchronously resolves a component definition (can be just a plain options object). Vue.js will only trigger the factory function when the component actually needs to be rendered, and will cache the result for future re-renders:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">Vue.component(<span class=\"string\">'async-example'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">  setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    resolve(&#123;</span><br><span class=\"line\">      template: <span class=\"string\">'&lt;div&gt;I am async!&lt;/div&gt;'</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;, <span class=\"number\">1000</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>It is up to you to decide how to load the component from the server, e.g. <code>$.getScript()</code> or require.js; but the recommended usage is to pair it up with Webpack’s <a href=\"http://webpack.github.io/docs/code-splitting.html\" target=\"_blank\" rel=\"noopener\">Code Splitting feature</a>:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">Vue.component(<span class=\"string\">'async-webpack-example'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// In Webpack AMD like syntax indicates a code split point</span></span><br><span class=\"line\">  <span class=\"built_in\">require</span>([<span class=\"string\">'./my-async-component'</span>], resolve)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>That’s all you need to do. You can use the component just like before, without even thinking about it being async. Webpack will automatically split your final JavaScript into separate bundles with correct dependencies, and automatically load a bundle via Ajax when it is required. You can check out a fully functional example <a href=\"https://github.com/vuejs/vue-webpack-example\" target=\"_blank\" rel=\"noopener\">here</a>.</p>\n<h3 id=\"Improved-Transition-System\"><a href=\"#Improved-Transition-System\" class=\"headerlink\" title=\"Improved Transition System\"></a>Improved Transition System</h3><p>Vue.js’ transition system is really easy to use, but in the past it has the limitation that you cannot mix CSS and JavaScript-based transitions together. In 0.12 that is no longer the case! The improved transition system now allows you to add JavaScript hooks to a CSS-based transition for additional control. The amount of hooks exposed have also been expanded to give you finer-grained control at every stage of the transition.</p>\n<p><code>v-repeat</code> now also ships with built-in support for staggering transitions. It is as simple as adding <code>stagger=&quot;100&quot;</code> to your repeated element. It is also possible to define separate staggering for enter and leaving, or even dynamically calculate the staggering delay in a JavaScript hook.</p>\n<p>For full details on the new transition system, check out the <a href=\"/guide/transitions.html\">updated guide</a>.</p>\n<h3 id=\"Performance-Tuning\"><a href=\"#Performance-Tuning\" class=\"headerlink\" title=\"Performance Tuning\"></a>Performance Tuning</h3><p>Vue.js’ precise dependency tracking makes it the one of the most efficient view layer for small hot updates, but there’s always room for improvement. In 0.12, internal instance creation and compilation refactors have improved first-render performance for large lists by up to 40%. With proper <code>track-by</code> usage, <a href=\"http://vuejs.github.io/js-repaint-perfs/vue/\" target=\"_blank\" rel=\"noopener\">re-rendering with large, brand new dataset</a> is also comparable to, or even faster than other Virtual-DOM based frameworks.</p>\n<h3 id=\"One-More-Thing…\"><a href=\"#One-More-Thing…\" class=\"headerlink\" title=\"One More Thing…\"></a>One More Thing…</h3><p>With 0.12 out of the door, more efforts will now be spent on the official vue-router, a dedicated routing library for Vue.js with nested view matching, full transition support, and asynchronous data hooks. I have expressed that Vue.js core intends to stay as a no-frills, drop-in view layer library, and that will not change. The vue-router will be shipped separately and is totally optional, however you can expect it to work seamlessly with Vue.js core when you need it.</p>\n","site":{"data":{}},"excerpt":"<p>I’m really excited to announce that <a href=\"https://github.com/yyx990803/vue/releases/tag/0.12.0\" target=\"_blank\" rel=\"noopener\">Vue.js 0.12: Dragon Ball</a> is finally here! Thanks to everyone who tried out the beta/rc versions and provided feedback / bug reports along the way.</p>\n<p>There’s a lot to cover in this release, and we will talk about a few highlights below. However, it is still recommended to carefully go through the <a href=\"https://github.com/yyx990803/vue/releases/tag/0.12.0\" target=\"_blank\" rel=\"noopener\">Full Release Note</a> and updated docs if you are upgrading from 0.11. You can report bugs on GitHub, send questions to <a href=\"https://github.com/vuejs/Discussion/issues\" target=\"_blank\" rel=\"noopener\">vuejs/Discussion</a>, or join us in the <a href=\"https://gitter.im/yyx990803/vue\" target=\"_blank\" rel=\"noopener\">Gitter chat channel</a>.</p>","more":"<h3 id=\"More-Consistent-Component-Syntax\"><a href=\"#More-Consistent-Component-Syntax\" class=\"headerlink\" title=\"More Consistent Component Syntax\"></a>More Consistent Component Syntax</h3><p>Previously in 0.11 you have two ways to use a Vue.js component: using the <code>v-component</code> directive, or using custom elements. There are also two ways to pass data down to child components: using the <code>v-with</code> directive, or using the <code>paramAttributes</code> option. Although both custom elements and param attributes get compiled down to directives eventually, it is confusing and redundant to have two sets of syntax for the same functionality.</p>\n<p>In addition, it should be noted that the component system is a first-class concept in Vue.js, even more important than directives. It defines how we encapsulate our higher-level view logic and compose our application. In the meanwhile, having a clear and declarative way to pass data into child components is also very important. Components and param attributes really deserve their own dedicated syntax to differentiate from other directives.</p>\n<p>As a result, <code>v-component</code> and <code>v-with</code> have been deprecated in 0.12. <code>paramAttributes</code> has also been renamed to <code>props</code>, which is shorter and cleaner. From now on, most Vue.js components will look like this:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">my-component</span> <span class=\"attr\">prop</span>=<span class=\"string\">\"&#123;&#123;parentData&#125;&#125;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">my-component</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>There are also additional props-related improvements such as explicit one-time or one-way props, expression as props, methods as prop callbacks and more. You can find out more details in the 0.12 release notes linked above and the updated <a href=\"/guide/components.html\">Component System</a> section of the guide.</p>\n<h3 id=\"Filter-Arguments-Improvements\"><a href=\"#Filter-Arguments-Improvements\" class=\"headerlink\" title=\"Filter Arguments Improvements\"></a>Filter Arguments Improvements</h3><p>In 0.11, filters always receive their arguments as plain strings. An argument can be enclosed in quotes to include whitespace, but the quotes are not automatically stripped when passed into the filter function. Some users were also confused about how to retrieve a dynamic value on the vm instead of a plain string.</p>\n<p>In 0.12, the filter argument syntax now follows a simple rule: if an argument is enclosed in quotes, it will be passed in as a plain string; otherwise, it will be evaluated against the current vm as a dynamic value.</p>\n<p>This means the usage of some existing filters will have to change:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">v-on</span>=<span class=\"string\">\"keyup: onKeyUp | key 'enter'\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">&#123;&#123; items.length | pluralize 'item' &#125;&#125;</span><br></pre></td></tr></table></figure>\n<p>But it would make custom filters that rely on dynamic values much easier to write:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;&#123; msg | concat otherMsg &#125;&#125;</span><br></pre></td></tr></table></figure>\n<p>Here the first argument to the <code>concat</code> filter will be the value of <code>this.otherMsg</code>.</p>\n<h3 id=\"Asynchronous-Components\"><a href=\"#Asynchronous-Components\" class=\"headerlink\" title=\"Asynchronous Components\"></a>Asynchronous Components</h3><p>It is common practice to bundle all the JavaScript into one file when building large single page applications. But when the file becomes too large, we may want to defer loading parts of our application for a faster initial load. However, this does pose some constraints on how the application architecture should be designed. It could be very tricky to figure out how to properly split up your JavaScript bundles.</p>\n<p>Well, with Vue.js we can already build our applications as decoupled components. If we can lazily load a dynamic component only when it is needed, wouldn’t it be awesome? As a matter of fact, in 0.12 this would be trivially easy with the new Asynchronous Component feature.</p>\n<p>In 0.12, you can define a component as a factory function that asynchronously resolves a component definition (can be just a plain options object). Vue.js will only trigger the factory function when the component actually needs to be rendered, and will cache the result for future re-renders:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">Vue.component(<span class=\"string\">'async-example'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">  setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    resolve(&#123;</span><br><span class=\"line\">      template: <span class=\"string\">'&lt;div&gt;I am async!&lt;/div&gt;'</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;, <span class=\"number\">1000</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>It is up to you to decide how to load the component from the server, e.g. <code>$.getScript()</code> or require.js; but the recommended usage is to pair it up with Webpack’s <a href=\"http://webpack.github.io/docs/code-splitting.html\" target=\"_blank\" rel=\"noopener\">Code Splitting feature</a>:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">Vue.component(<span class=\"string\">'async-webpack-example'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// In Webpack AMD like syntax indicates a code split point</span></span><br><span class=\"line\">  <span class=\"built_in\">require</span>([<span class=\"string\">'./my-async-component'</span>], resolve)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>That’s all you need to do. You can use the component just like before, without even thinking about it being async. Webpack will automatically split your final JavaScript into separate bundles with correct dependencies, and automatically load a bundle via Ajax when it is required. You can check out a fully functional example <a href=\"https://github.com/vuejs/vue-webpack-example\" target=\"_blank\" rel=\"noopener\">here</a>.</p>\n<h3 id=\"Improved-Transition-System\"><a href=\"#Improved-Transition-System\" class=\"headerlink\" title=\"Improved Transition System\"></a>Improved Transition System</h3><p>Vue.js’ transition system is really easy to use, but in the past it has the limitation that you cannot mix CSS and JavaScript-based transitions together. In 0.12 that is no longer the case! The improved transition system now allows you to add JavaScript hooks to a CSS-based transition for additional control. The amount of hooks exposed have also been expanded to give you finer-grained control at every stage of the transition.</p>\n<p><code>v-repeat</code> now also ships with built-in support for staggering transitions. It is as simple as adding <code>stagger=&quot;100&quot;</code> to your repeated element. It is also possible to define separate staggering for enter and leaving, or even dynamically calculate the staggering delay in a JavaScript hook.</p>\n<p>For full details on the new transition system, check out the <a href=\"/guide/transitions.html\">updated guide</a>.</p>\n<h3 id=\"Performance-Tuning\"><a href=\"#Performance-Tuning\" class=\"headerlink\" title=\"Performance Tuning\"></a>Performance Tuning</h3><p>Vue.js’ precise dependency tracking makes it the one of the most efficient view layer for small hot updates, but there’s always room for improvement. In 0.12, internal instance creation and compilation refactors have improved first-render performance for large lists by up to 40%. With proper <code>track-by</code> usage, <a href=\"http://vuejs.github.io/js-repaint-perfs/vue/\" target=\"_blank\" rel=\"noopener\">re-rendering with large, brand new dataset</a> is also comparable to, or even faster than other Virtual-DOM based frameworks.</p>\n<h3 id=\"One-More-Thing…\"><a href=\"#One-More-Thing…\" class=\"headerlink\" title=\"One More Thing…\"></a>One More Thing…</h3><p>With 0.12 out of the door, more efforts will now be spent on the official vue-router, a dedicated routing library for Vue.js with nested view matching, full transition support, and asynchronous data hooks. I have expressed that Vue.js core intends to stay as a no-frills, drop-in view layer library, and that will not change. The vue-router will be shipped separately and is totally optional, however you can expect it to work seamlessly with Vue.js core when you need it.</p>"},{"title":"Vue.js 1.0.0 Released","date":"2015-10-26T02:00:00.000Z","_content":"\n> Hi HN! If you are not familiar with Vue.js, you might want to read this [blog post](http://blog.evanyou.me/2015/10/25/vuejs-re-introduction/) for a higher level overview.\n\nAfter 300+ commits, 8 alphas, 4 betas and 2 release candidates, today I am very proud to announce the release of [Vue.js 1.0.0 Evangelion](https://github.com/vuejs/vue/releases/tag/1.0.0)! Many thanks to all those who participated in the API re-design process - it would not have been possible without all the input from the community.\n\n<!-- more -->\n\n### Improved Template Syntax\n\nThe 1.0 template syntax resolves a lot of subtle consistency issues and makes Vue templates more concise and more readable in general. The most notable new feature is the shorthand syntax for `v-on` and `v-bind`:\n\n``` html\n<!-- short for v-bind:href -->\n<a :href=\"someURL\"></a>\n\n<!-- short for v-on:click -->\n<button @click=\"onClick\"></button>\n```\n\nWhen used on a child component, `v-on` listens for custom events and `v-bind` can be used to bind props. The shorthands using child components very succinct:\n\n``` html\n<item-list\n  :items=\"items\"\n  @ready=\"onItemsReady\"\n  @update=\"onItemsUpdate\">\n</item-list>\n```\n\n### API Cleanup\n\nThe overall goal for Vue.js 1.0 is to make it suitable for larger projects. This is why there are many API deprecations. Except for ones that are barely used, the most common reason for a deprecation is that the feature leads to patterns that damages maintainability. Specifically, we are deprecating features that make it hard to maintain and refactor a component in isolation without affecting the rest of the project.\n\nFor example, the default asset resolution in 0.12 has implicit fallbacks to parents in the component tree. This makes the assets available to a component non-deterministic and subject how it is used at runtime. In 1.0, all assets are now resolved in strict mode and there are no longer implicit fallbacks to parent. The `inherit` option is also removed, because it too often leads to tightly coupled components that are hard to refactor.\n\n### Faster Initial Rendering\n\n1.0 replaces the old `v-repeat` directive with `v-for`. In addition to providing the same functionality and more intuitive scoping, `v-for` provides up to **100%** initial render performance boost when rendering large lists and tables!\n\n### More Powerful Tooling\n\nThere are also exciting things going on outside of Vue.js core - [vue-loader](https://github.com/vuejs/vue-loader) and [vueify](https://github.com/vuejs/vueify) have received major upgrades including:\n\n- Hot component reloading. When a `*.vue` component is edited, all of its active instances are hot swapped without reloading the page. This means when making small changes, e.g. tweaking the styles or the template, your app doesn't need to fully reload; the state of the app the swapped component can be preserved, drastically improving the development experience.\n\n- Scoped CSS. By simply adding a `scoped` attribute to your `*.vue` component style tags, the component's template and final generated CSS are magically re-written to ensure a component's styles are only applied to its own elements. Most importantly, the styles specified in a parent component **does not** leak down to child components nested within it.\n\n- ES2015 by default. JavaScript is evolving. You can write much cleaner and expressive code using the latest syntax. `vue-loader` and `vueify` now transpiles the JavaScript in your `*.vue` components out of the box, without the need for extra setup. Write future JavaScript today!\n\nCombined with [vue-router](https://github.com/vuejs/vue-router), Vue.js is now more than a library - it provides a solid foundation for building complex SPAs.\n\n### What's Next?\n\nAs what 1.0.0 usually suggests, the core API will stay stable for the foreseeable future and the library is ready for production use. Future development will focus on:\n\n1. Improving `vue-router` and make it production ready.\n\n2. Streamlining the developer experience, e.g. a better devtool and a CLI for scaffolding Vue.js projects and components.\n\n3. Providing more learning resources such as tutorials and examples.\n","source":"_posts/1.0.0-release.md","raw":"---\ntitle: Vue.js 1.0.0 Released\ndate: 2015-10-26 10:00:00\n---\n\n> Hi HN! If you are not familiar with Vue.js, you might want to read this [blog post](http://blog.evanyou.me/2015/10/25/vuejs-re-introduction/) for a higher level overview.\n\nAfter 300+ commits, 8 alphas, 4 betas and 2 release candidates, today I am very proud to announce the release of [Vue.js 1.0.0 Evangelion](https://github.com/vuejs/vue/releases/tag/1.0.0)! Many thanks to all those who participated in the API re-design process - it would not have been possible without all the input from the community.\n\n<!-- more -->\n\n### Improved Template Syntax\n\nThe 1.0 template syntax resolves a lot of subtle consistency issues and makes Vue templates more concise and more readable in general. The most notable new feature is the shorthand syntax for `v-on` and `v-bind`:\n\n``` html\n<!-- short for v-bind:href -->\n<a :href=\"someURL\"></a>\n\n<!-- short for v-on:click -->\n<button @click=\"onClick\"></button>\n```\n\nWhen used on a child component, `v-on` listens for custom events and `v-bind` can be used to bind props. The shorthands using child components very succinct:\n\n``` html\n<item-list\n  :items=\"items\"\n  @ready=\"onItemsReady\"\n  @update=\"onItemsUpdate\">\n</item-list>\n```\n\n### API Cleanup\n\nThe overall goal for Vue.js 1.0 is to make it suitable for larger projects. This is why there are many API deprecations. Except for ones that are barely used, the most common reason for a deprecation is that the feature leads to patterns that damages maintainability. Specifically, we are deprecating features that make it hard to maintain and refactor a component in isolation without affecting the rest of the project.\n\nFor example, the default asset resolution in 0.12 has implicit fallbacks to parents in the component tree. This makes the assets available to a component non-deterministic and subject how it is used at runtime. In 1.0, all assets are now resolved in strict mode and there are no longer implicit fallbacks to parent. The `inherit` option is also removed, because it too often leads to tightly coupled components that are hard to refactor.\n\n### Faster Initial Rendering\n\n1.0 replaces the old `v-repeat` directive with `v-for`. In addition to providing the same functionality and more intuitive scoping, `v-for` provides up to **100%** initial render performance boost when rendering large lists and tables!\n\n### More Powerful Tooling\n\nThere are also exciting things going on outside of Vue.js core - [vue-loader](https://github.com/vuejs/vue-loader) and [vueify](https://github.com/vuejs/vueify) have received major upgrades including:\n\n- Hot component reloading. When a `*.vue` component is edited, all of its active instances are hot swapped without reloading the page. This means when making small changes, e.g. tweaking the styles or the template, your app doesn't need to fully reload; the state of the app the swapped component can be preserved, drastically improving the development experience.\n\n- Scoped CSS. By simply adding a `scoped` attribute to your `*.vue` component style tags, the component's template and final generated CSS are magically re-written to ensure a component's styles are only applied to its own elements. Most importantly, the styles specified in a parent component **does not** leak down to child components nested within it.\n\n- ES2015 by default. JavaScript is evolving. You can write much cleaner and expressive code using the latest syntax. `vue-loader` and `vueify` now transpiles the JavaScript in your `*.vue` components out of the box, without the need for extra setup. Write future JavaScript today!\n\nCombined with [vue-router](https://github.com/vuejs/vue-router), Vue.js is now more than a library - it provides a solid foundation for building complex SPAs.\n\n### What's Next?\n\nAs what 1.0.0 usually suggests, the core API will stay stable for the foreseeable future and the library is ready for production use. Future development will focus on:\n\n1. Improving `vue-router` and make it production ready.\n\n2. Streamlining the developer experience, e.g. a better devtool and a CLI for scaffolding Vue.js projects and components.\n\n3. Providing more learning resources such as tutorials and examples.\n","slug":"1.0.0-release","published":1,"updated":"2018-07-19T04:04:16.810Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjk0zidnl0005vkrtrqqad27y","content":"<blockquote>\n<p>Hi HN! If you are not familiar with Vue.js, you might want to read this <a href=\"http://blog.evanyou.me/2015/10/25/vuejs-re-introduction/\" target=\"_blank\" rel=\"noopener\">blog post</a> for a higher level overview.</p>\n</blockquote>\n<p>After 300+ commits, 8 alphas, 4 betas and 2 release candidates, today I am very proud to announce the release of <a href=\"https://github.com/vuejs/vue/releases/tag/1.0.0\" target=\"_blank\" rel=\"noopener\">Vue.js 1.0.0 Evangelion</a>! Many thanks to all those who participated in the API re-design process - it would not have been possible without all the input from the community.</p>\n<a id=\"more\"></a>\n<h3 id=\"Improved-Template-Syntax\"><a href=\"#Improved-Template-Syntax\" class=\"headerlink\" title=\"Improved Template Syntax\"></a>Improved Template Syntax</h3><p>The 1.0 template syntax resolves a lot of subtle consistency issues and makes Vue templates more concise and more readable in general. The most notable new feature is the shorthand syntax for <code>v-on</code> and <code>v-bind</code>:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- short for v-bind:href --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">:href</span>=<span class=\"string\">\"someURL\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- short for v-on:click --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">\"onClick\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>When used on a child component, <code>v-on</code> listens for custom events and <code>v-bind</code> can be used to bind props. The shorthands using child components very succinct:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">item-list</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">:items</span>=<span class=\"string\">\"items\"</span></span></span><br><span class=\"line\"><span class=\"tag\">  @<span class=\"attr\">ready</span>=<span class=\"string\">\"onItemsReady\"</span></span></span><br><span class=\"line\"><span class=\"tag\">  @<span class=\"attr\">update</span>=<span class=\"string\">\"onItemsUpdate\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">item-list</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"API-Cleanup\"><a href=\"#API-Cleanup\" class=\"headerlink\" title=\"API Cleanup\"></a>API Cleanup</h3><p>The overall goal for Vue.js 1.0 is to make it suitable for larger projects. This is why there are many API deprecations. Except for ones that are barely used, the most common reason for a deprecation is that the feature leads to patterns that damages maintainability. Specifically, we are deprecating features that make it hard to maintain and refactor a component in isolation without affecting the rest of the project.</p>\n<p>For example, the default asset resolution in 0.12 has implicit fallbacks to parents in the component tree. This makes the assets available to a component non-deterministic and subject how it is used at runtime. In 1.0, all assets are now resolved in strict mode and there are no longer implicit fallbacks to parent. The <code>inherit</code> option is also removed, because it too often leads to tightly coupled components that are hard to refactor.</p>\n<h3 id=\"Faster-Initial-Rendering\"><a href=\"#Faster-Initial-Rendering\" class=\"headerlink\" title=\"Faster Initial Rendering\"></a>Faster Initial Rendering</h3><p>1.0 replaces the old <code>v-repeat</code> directive with <code>v-for</code>. In addition to providing the same functionality and more intuitive scoping, <code>v-for</code> provides up to <strong>100%</strong> initial render performance boost when rendering large lists and tables!</p>\n<h3 id=\"More-Powerful-Tooling\"><a href=\"#More-Powerful-Tooling\" class=\"headerlink\" title=\"More Powerful Tooling\"></a>More Powerful Tooling</h3><p>There are also exciting things going on outside of Vue.js core - <a href=\"https://github.com/vuejs/vue-loader\" target=\"_blank\" rel=\"noopener\">vue-loader</a> and <a href=\"https://github.com/vuejs/vueify\" target=\"_blank\" rel=\"noopener\">vueify</a> have received major upgrades including:</p>\n<ul>\n<li><p>Hot component reloading. When a <code>*.vue</code> component is edited, all of its active instances are hot swapped without reloading the page. This means when making small changes, e.g. tweaking the styles or the template, your app doesn’t need to fully reload; the state of the app the swapped component can be preserved, drastically improving the development experience.</p>\n</li>\n<li><p>Scoped CSS. By simply adding a <code>scoped</code> attribute to your <code>*.vue</code> component style tags, the component’s template and final generated CSS are magically re-written to ensure a component’s styles are only applied to its own elements. Most importantly, the styles specified in a parent component <strong>does not</strong> leak down to child components nested within it.</p>\n</li>\n<li><p>ES2015 by default. JavaScript is evolving. You can write much cleaner and expressive code using the latest syntax. <code>vue-loader</code> and <code>vueify</code> now transpiles the JavaScript in your <code>*.vue</code> components out of the box, without the need for extra setup. Write future JavaScript today!</p>\n</li>\n</ul>\n<p>Combined with <a href=\"https://github.com/vuejs/vue-router\" target=\"_blank\" rel=\"noopener\">vue-router</a>, Vue.js is now more than a library - it provides a solid foundation for building complex SPAs.</p>\n<h3 id=\"What’s-Next\"><a href=\"#What’s-Next\" class=\"headerlink\" title=\"What’s Next?\"></a>What’s Next?</h3><p>As what 1.0.0 usually suggests, the core API will stay stable for the foreseeable future and the library is ready for production use. Future development will focus on:</p>\n<ol>\n<li><p>Improving <code>vue-router</code> and make it production ready.</p>\n</li>\n<li><p>Streamlining the developer experience, e.g. a better devtool and a CLI for scaffolding Vue.js projects and components.</p>\n</li>\n<li><p>Providing more learning resources such as tutorials and examples.</p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>Hi HN! If you are not familiar with Vue.js, you might want to read this <a href=\"http://blog.evanyou.me/2015/10/25/vuejs-re-introduction/\" target=\"_blank\" rel=\"noopener\">blog post</a> for a higher level overview.</p>\n</blockquote>\n<p>After 300+ commits, 8 alphas, 4 betas and 2 release candidates, today I am very proud to announce the release of <a href=\"https://github.com/vuejs/vue/releases/tag/1.0.0\" target=\"_blank\" rel=\"noopener\">Vue.js 1.0.0 Evangelion</a>! Many thanks to all those who participated in the API re-design process - it would not have been possible without all the input from the community.</p>","more":"<h3 id=\"Improved-Template-Syntax\"><a href=\"#Improved-Template-Syntax\" class=\"headerlink\" title=\"Improved Template Syntax\"></a>Improved Template Syntax</h3><p>The 1.0 template syntax resolves a lot of subtle consistency issues and makes Vue templates more concise and more readable in general. The most notable new feature is the shorthand syntax for <code>v-on</code> and <code>v-bind</code>:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- short for v-bind:href --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">:href</span>=<span class=\"string\">\"someURL\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- short for v-on:click --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">\"onClick\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>When used on a child component, <code>v-on</code> listens for custom events and <code>v-bind</code> can be used to bind props. The shorthands using child components very succinct:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">item-list</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">:items</span>=<span class=\"string\">\"items\"</span></span></span><br><span class=\"line\"><span class=\"tag\">  @<span class=\"attr\">ready</span>=<span class=\"string\">\"onItemsReady\"</span></span></span><br><span class=\"line\"><span class=\"tag\">  @<span class=\"attr\">update</span>=<span class=\"string\">\"onItemsUpdate\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">item-list</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"API-Cleanup\"><a href=\"#API-Cleanup\" class=\"headerlink\" title=\"API Cleanup\"></a>API Cleanup</h3><p>The overall goal for Vue.js 1.0 is to make it suitable for larger projects. This is why there are many API deprecations. Except for ones that are barely used, the most common reason for a deprecation is that the feature leads to patterns that damages maintainability. Specifically, we are deprecating features that make it hard to maintain and refactor a component in isolation without affecting the rest of the project.</p>\n<p>For example, the default asset resolution in 0.12 has implicit fallbacks to parents in the component tree. This makes the assets available to a component non-deterministic and subject how it is used at runtime. In 1.0, all assets are now resolved in strict mode and there are no longer implicit fallbacks to parent. The <code>inherit</code> option is also removed, because it too often leads to tightly coupled components that are hard to refactor.</p>\n<h3 id=\"Faster-Initial-Rendering\"><a href=\"#Faster-Initial-Rendering\" class=\"headerlink\" title=\"Faster Initial Rendering\"></a>Faster Initial Rendering</h3><p>1.0 replaces the old <code>v-repeat</code> directive with <code>v-for</code>. In addition to providing the same functionality and more intuitive scoping, <code>v-for</code> provides up to <strong>100%</strong> initial render performance boost when rendering large lists and tables!</p>\n<h3 id=\"More-Powerful-Tooling\"><a href=\"#More-Powerful-Tooling\" class=\"headerlink\" title=\"More Powerful Tooling\"></a>More Powerful Tooling</h3><p>There are also exciting things going on outside of Vue.js core - <a href=\"https://github.com/vuejs/vue-loader\" target=\"_blank\" rel=\"noopener\">vue-loader</a> and <a href=\"https://github.com/vuejs/vueify\" target=\"_blank\" rel=\"noopener\">vueify</a> have received major upgrades including:</p>\n<ul>\n<li><p>Hot component reloading. When a <code>*.vue</code> component is edited, all of its active instances are hot swapped without reloading the page. This means when making small changes, e.g. tweaking the styles or the template, your app doesn’t need to fully reload; the state of the app the swapped component can be preserved, drastically improving the development experience.</p>\n</li>\n<li><p>Scoped CSS. By simply adding a <code>scoped</code> attribute to your <code>*.vue</code> component style tags, the component’s template and final generated CSS are magically re-written to ensure a component’s styles are only applied to its own elements. Most importantly, the styles specified in a parent component <strong>does not</strong> leak down to child components nested within it.</p>\n</li>\n<li><p>ES2015 by default. JavaScript is evolving. You can write much cleaner and expressive code using the latest syntax. <code>vue-loader</code> and <code>vueify</code> now transpiles the JavaScript in your <code>*.vue</code> components out of the box, without the need for extra setup. Write future JavaScript today!</p>\n</li>\n</ul>\n<p>Combined with <a href=\"https://github.com/vuejs/vue-router\" target=\"_blank\" rel=\"noopener\">vue-router</a>, Vue.js is now more than a library - it provides a solid foundation for building complex SPAs.</p>\n<h3 id=\"What’s-Next\"><a href=\"#What’s-Next\" class=\"headerlink\" title=\"What’s Next?\"></a>What’s Next?</h3><p>As what 1.0.0 usually suggests, the core API will stay stable for the foreseeable future and the library is ready for production use. Future development will focus on:</p>\n<ol>\n<li><p>Improving <code>vue-router</code> and make it production ready.</p>\n</li>\n<li><p>Streamlining the developer experience, e.g. a better devtool and a CLI for scaffolding Vue.js projects and components.</p>\n</li>\n<li><p>Providing more learning resources such as tutorials and examples.</p>\n</li>\n</ol>"},{"title":"Announcing Vue.js 2.0","date":"2016-04-27T05:33:00.000Z","_content":"\nToday I am thrilled to announce the first public preview of Vue.js 2.0, which brings along many exciting improvements and new features. Let's take a peek at what's in store!\n\n<!-- more -->\n\n## Even Leaner, Even Faster\n\nVue.js has always focused on staying light and fast, but 2.0 pushes it even further. The rendering layer is now based on a lightweight virtual-DOM implementation (based on [Snabbdom](https://github.com/paldepind/snabbdom)) that improves initial rendering speed and memory consumption by up to 2~4x in most scenarios (check out [these benchmarks](https://github.com/vuejs/vue/tree/next/benchmarks)). The template-to-virtual-DOM compiler and the runtime can be separated, so you can pre-compile templates and ship your app with only the runtime, which is less than 12KB min+gzip (as a reference, React 15 is 44KB min+gzip). The compiler also works in the browser, which means you can still drop in one script tag and start hacking, just like before. Even with the compiler included, the build is sitting at 17KB min+gzip, still lighter than the current 1.0 build.\n\n## Not Your Average Virtual-DOM\n\nNow, just virtual-DOM sounds boring because there are so many implementations out there - but this one is different. Combined with Vue's reactivity system, it provides optimized re-rendering out of the box without you having to do anything. Each component keeps track of its reactive dependencies during its render, so the system knows precisely when to re-render, and which components to re-render. No need for `shouldComponentUpdate` or immutable data structures - **it just works**.\n\nIn addition, Vue 2.0 applies some advanced optimizations during the template-to-virtual-DOM compilation phase:\n\n1. It detects static class names and attributes so that they are never diffed after the initial render.\n\n2. It detects the maximum static sub trees (sub trees with no dynamic bindings) and hoist them out of the render function. So on each re-render, it directly reuses the exact same virtual nodes and skips the diffing.\n\nThese advanced optimizations can usually only be achieved via Babel plugins when using JSX, but with Vue 2.0 you can get them even using the in-browser compiler.\n\nThe new rendering system also allows you to disable reactive conversions by simply freezing your data and manually force updates, essentially giving you full control over the re-rendering process.\n\nWith these techniques combined, Vue 2.0 ensures blazing fast performance in every possible scenario while requiring minimal optimization efforts from the developer.\n\n## Templates, JSX, or Hyperscript?\n\nDevelopers tend to have strong opinions on templates vs. JSX. On the one hand, templates are closer to HTML - they map better to the semantic structure of your app and make it much easier to think visually about the design, layout and styling. On the other hand, templates are limited to the DSL while the programmatic nature of JSX/hyperscript provides the full expressive power of a turing-complete language.\n\nBeing a designer/developer hybrid, I prefer writing most of my interfaces in templates, but in certain cases I do miss the flexibility of JSX/hyperscript. An example would be writing a component that programmatically handles its children, something not feasible with just the template-based slot mechanism.\n\nWell, why not have both? In Vue 2.0, you can keep using the familiar template syntax, or drop down to the virtual-DOM layer whenever you feel constrained by the template DSL. Instead of the `template` option, just replace it with a `render` function. You can even embed render functions in your templates using the special `<render>` tag! The best of both worlds, in the same framework.\n\n## Streaming Server-side Rendering\n\nWith the migration to virtual-DOM, Vue 2.0 naturally supports server-side rendering with client-side hydration. One pain point of current mainstream server rendering implementations, such as React's, is that the rendering is synchronous so it can block the server's event loop if the app is complex. Synchronous server-side rendering may even adversely affect time-to-content on the client. Vue 2.0 provides built-in streaming server-side rendering, so that you can render your component, get a readable stream back and directly pipe it to the HTTP response. This ensures your server is responsive, and gets the rendered content to your users faster.\n\n## Unlocking More Possibilities\n\nWith the new architecture, there are even more possibilities to explore - for example, rendering to native interfaces on mobile. Currently, we are exploring a port of Vue.js 2.0 that uses [weex](http://alibaba.github.io/weex/) as a native rendering backend, a project maintained by engineers at Alibaba Group, the biggest tech enterprise of China. It is also technically feasible to adapt Vue 2.0's virtual-DOM to run inside ReactNative. We are excited to see how it goes!\n\n## Compatibility and What to Expect Next\n\nVue.js 2.0 is still in pre-alpha, but you can checkout the source code [here](https://github.com/vuejs/vue/tree/next/). Despite being a full rewrite, the API is largely compatible with 1.0 with the exception of some intentional deprecations. Check out [the same official examples written in 2.0](https://github.com/vuejs/vue/tree/next/examples) - you will see that not much has changed!\n\nThe feature deprecations are part of our continued effort to provide the simplest API possible for maximum developer productivity. You can check out a 1.0 vs. 2.0 feature comparison [here](https://github.com/vuejs/vue/wiki/2.0-features). This does mean that it will take some effort to migrate an existing app if you happen to use some of these deprecated features heavily, but we will provide detailed upgrade guides in the future.\n\nThere is still much work left to be done. We will be releasing the first alpha once we reach satisfactory test coverage, and we are aiming for beta by end of May / early June. In addition to more tests, we also need to update the supporting libraries (vue-router, Vuex, vue-loader, vueify...). Currently only Vuex works with 2.0 out of the box, but we will make sure that everything works smoothly together when 2.0 ships.\n\nWe are also not forgetting about 1.x! 1.1 will be released alongside 2.0 beta, with an LTS period of 6-month critical bug fixes and 9-month security updates. It will also ship with optional deprecation warnings to get you prepared for upgrading to 2.0. Stay tuned!\n","source":"_posts/announcing-2.0.md","raw":"---\ntitle: Announcing Vue.js 2.0\ndate: 2016-04-27 13:33:00\n---\n\nToday I am thrilled to announce the first public preview of Vue.js 2.0, which brings along many exciting improvements and new features. Let's take a peek at what's in store!\n\n<!-- more -->\n\n## Even Leaner, Even Faster\n\nVue.js has always focused on staying light and fast, but 2.0 pushes it even further. The rendering layer is now based on a lightweight virtual-DOM implementation (based on [Snabbdom](https://github.com/paldepind/snabbdom)) that improves initial rendering speed and memory consumption by up to 2~4x in most scenarios (check out [these benchmarks](https://github.com/vuejs/vue/tree/next/benchmarks)). The template-to-virtual-DOM compiler and the runtime can be separated, so you can pre-compile templates and ship your app with only the runtime, which is less than 12KB min+gzip (as a reference, React 15 is 44KB min+gzip). The compiler also works in the browser, which means you can still drop in one script tag and start hacking, just like before. Even with the compiler included, the build is sitting at 17KB min+gzip, still lighter than the current 1.0 build.\n\n## Not Your Average Virtual-DOM\n\nNow, just virtual-DOM sounds boring because there are so many implementations out there - but this one is different. Combined with Vue's reactivity system, it provides optimized re-rendering out of the box without you having to do anything. Each component keeps track of its reactive dependencies during its render, so the system knows precisely when to re-render, and which components to re-render. No need for `shouldComponentUpdate` or immutable data structures - **it just works**.\n\nIn addition, Vue 2.0 applies some advanced optimizations during the template-to-virtual-DOM compilation phase:\n\n1. It detects static class names and attributes so that they are never diffed after the initial render.\n\n2. It detects the maximum static sub trees (sub trees with no dynamic bindings) and hoist them out of the render function. So on each re-render, it directly reuses the exact same virtual nodes and skips the diffing.\n\nThese advanced optimizations can usually only be achieved via Babel plugins when using JSX, but with Vue 2.0 you can get them even using the in-browser compiler.\n\nThe new rendering system also allows you to disable reactive conversions by simply freezing your data and manually force updates, essentially giving you full control over the re-rendering process.\n\nWith these techniques combined, Vue 2.0 ensures blazing fast performance in every possible scenario while requiring minimal optimization efforts from the developer.\n\n## Templates, JSX, or Hyperscript?\n\nDevelopers tend to have strong opinions on templates vs. JSX. On the one hand, templates are closer to HTML - they map better to the semantic structure of your app and make it much easier to think visually about the design, layout and styling. On the other hand, templates are limited to the DSL while the programmatic nature of JSX/hyperscript provides the full expressive power of a turing-complete language.\n\nBeing a designer/developer hybrid, I prefer writing most of my interfaces in templates, but in certain cases I do miss the flexibility of JSX/hyperscript. An example would be writing a component that programmatically handles its children, something not feasible with just the template-based slot mechanism.\n\nWell, why not have both? In Vue 2.0, you can keep using the familiar template syntax, or drop down to the virtual-DOM layer whenever you feel constrained by the template DSL. Instead of the `template` option, just replace it with a `render` function. You can even embed render functions in your templates using the special `<render>` tag! The best of both worlds, in the same framework.\n\n## Streaming Server-side Rendering\n\nWith the migration to virtual-DOM, Vue 2.0 naturally supports server-side rendering with client-side hydration. One pain point of current mainstream server rendering implementations, such as React's, is that the rendering is synchronous so it can block the server's event loop if the app is complex. Synchronous server-side rendering may even adversely affect time-to-content on the client. Vue 2.0 provides built-in streaming server-side rendering, so that you can render your component, get a readable stream back and directly pipe it to the HTTP response. This ensures your server is responsive, and gets the rendered content to your users faster.\n\n## Unlocking More Possibilities\n\nWith the new architecture, there are even more possibilities to explore - for example, rendering to native interfaces on mobile. Currently, we are exploring a port of Vue.js 2.0 that uses [weex](http://alibaba.github.io/weex/) as a native rendering backend, a project maintained by engineers at Alibaba Group, the biggest tech enterprise of China. It is also technically feasible to adapt Vue 2.0's virtual-DOM to run inside ReactNative. We are excited to see how it goes!\n\n## Compatibility and What to Expect Next\n\nVue.js 2.0 is still in pre-alpha, but you can checkout the source code [here](https://github.com/vuejs/vue/tree/next/). Despite being a full rewrite, the API is largely compatible with 1.0 with the exception of some intentional deprecations. Check out [the same official examples written in 2.0](https://github.com/vuejs/vue/tree/next/examples) - you will see that not much has changed!\n\nThe feature deprecations are part of our continued effort to provide the simplest API possible for maximum developer productivity. You can check out a 1.0 vs. 2.0 feature comparison [here](https://github.com/vuejs/vue/wiki/2.0-features). This does mean that it will take some effort to migrate an existing app if you happen to use some of these deprecated features heavily, but we will provide detailed upgrade guides in the future.\n\nThere is still much work left to be done. We will be releasing the first alpha once we reach satisfactory test coverage, and we are aiming for beta by end of May / early June. In addition to more tests, we also need to update the supporting libraries (vue-router, Vuex, vue-loader, vueify...). Currently only Vuex works with 2.0 out of the box, but we will make sure that everything works smoothly together when 2.0 ships.\n\nWe are also not forgetting about 1.x! 1.1 will be released alongside 2.0 beta, with an LTS period of 6-month critical bug fixes and 9-month security updates. It will also ship with optional deprecation warnings to get you prepared for upgrading to 2.0. Stay tuned!\n","slug":"announcing-2.0","published":1,"updated":"2018-07-19T04:04:16.810Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjk0zidnm0007vkrtu5y4poir","content":"<p>Today I am thrilled to announce the first public preview of Vue.js 2.0, which brings along many exciting improvements and new features. Let’s take a peek at what’s in store!</p>\n<a id=\"more\"></a>\n<h2 id=\"Even-Leaner-Even-Faster\"><a href=\"#Even-Leaner-Even-Faster\" class=\"headerlink\" title=\"Even Leaner, Even Faster\"></a>Even Leaner, Even Faster</h2><p>Vue.js has always focused on staying light and fast, but 2.0 pushes it even further. The rendering layer is now based on a lightweight virtual-DOM implementation (based on <a href=\"https://github.com/paldepind/snabbdom\" target=\"_blank\" rel=\"noopener\">Snabbdom</a>) that improves initial rendering speed and memory consumption by up to 2~4x in most scenarios (check out <a href=\"https://github.com/vuejs/vue/tree/next/benchmarks\" target=\"_blank\" rel=\"noopener\">these benchmarks</a>). The template-to-virtual-DOM compiler and the runtime can be separated, so you can pre-compile templates and ship your app with only the runtime, which is less than 12KB min+gzip (as a reference, React 15 is 44KB min+gzip). The compiler also works in the browser, which means you can still drop in one script tag and start hacking, just like before. Even with the compiler included, the build is sitting at 17KB min+gzip, still lighter than the current 1.0 build.</p>\n<h2 id=\"Not-Your-Average-Virtual-DOM\"><a href=\"#Not-Your-Average-Virtual-DOM\" class=\"headerlink\" title=\"Not Your Average Virtual-DOM\"></a>Not Your Average Virtual-DOM</h2><p>Now, just virtual-DOM sounds boring because there are so many implementations out there - but this one is different. Combined with Vue’s reactivity system, it provides optimized re-rendering out of the box without you having to do anything. Each component keeps track of its reactive dependencies during its render, so the system knows precisely when to re-render, and which components to re-render. No need for <code>shouldComponentUpdate</code> or immutable data structures - <strong>it just works</strong>.</p>\n<p>In addition, Vue 2.0 applies some advanced optimizations during the template-to-virtual-DOM compilation phase:</p>\n<ol>\n<li><p>It detects static class names and attributes so that they are never diffed after the initial render.</p>\n</li>\n<li><p>It detects the maximum static sub trees (sub trees with no dynamic bindings) and hoist them out of the render function. So on each re-render, it directly reuses the exact same virtual nodes and skips the diffing.</p>\n</li>\n</ol>\n<p>These advanced optimizations can usually only be achieved via Babel plugins when using JSX, but with Vue 2.0 you can get them even using the in-browser compiler.</p>\n<p>The new rendering system also allows you to disable reactive conversions by simply freezing your data and manually force updates, essentially giving you full control over the re-rendering process.</p>\n<p>With these techniques combined, Vue 2.0 ensures blazing fast performance in every possible scenario while requiring minimal optimization efforts from the developer.</p>\n<h2 id=\"Templates-JSX-or-Hyperscript\"><a href=\"#Templates-JSX-or-Hyperscript\" class=\"headerlink\" title=\"Templates, JSX, or Hyperscript?\"></a>Templates, JSX, or Hyperscript?</h2><p>Developers tend to have strong opinions on templates vs. JSX. On the one hand, templates are closer to HTML - they map better to the semantic structure of your app and make it much easier to think visually about the design, layout and styling. On the other hand, templates are limited to the DSL while the programmatic nature of JSX/hyperscript provides the full expressive power of a turing-complete language.</p>\n<p>Being a designer/developer hybrid, I prefer writing most of my interfaces in templates, but in certain cases I do miss the flexibility of JSX/hyperscript. An example would be writing a component that programmatically handles its children, something not feasible with just the template-based slot mechanism.</p>\n<p>Well, why not have both? In Vue 2.0, you can keep using the familiar template syntax, or drop down to the virtual-DOM layer whenever you feel constrained by the template DSL. Instead of the <code>template</code> option, just replace it with a <code>render</code> function. You can even embed render functions in your templates using the special <code>&lt;render&gt;</code> tag! The best of both worlds, in the same framework.</p>\n<h2 id=\"Streaming-Server-side-Rendering\"><a href=\"#Streaming-Server-side-Rendering\" class=\"headerlink\" title=\"Streaming Server-side Rendering\"></a>Streaming Server-side Rendering</h2><p>With the migration to virtual-DOM, Vue 2.0 naturally supports server-side rendering with client-side hydration. One pain point of current mainstream server rendering implementations, such as React’s, is that the rendering is synchronous so it can block the server’s event loop if the app is complex. Synchronous server-side rendering may even adversely affect time-to-content on the client. Vue 2.0 provides built-in streaming server-side rendering, so that you can render your component, get a readable stream back and directly pipe it to the HTTP response. This ensures your server is responsive, and gets the rendered content to your users faster.</p>\n<h2 id=\"Unlocking-More-Possibilities\"><a href=\"#Unlocking-More-Possibilities\" class=\"headerlink\" title=\"Unlocking More Possibilities\"></a>Unlocking More Possibilities</h2><p>With the new architecture, there are even more possibilities to explore - for example, rendering to native interfaces on mobile. Currently, we are exploring a port of Vue.js 2.0 that uses <a href=\"http://alibaba.github.io/weex/\" target=\"_blank\" rel=\"noopener\">weex</a> as a native rendering backend, a project maintained by engineers at Alibaba Group, the biggest tech enterprise of China. It is also technically feasible to adapt Vue 2.0’s virtual-DOM to run inside ReactNative. We are excited to see how it goes!</p>\n<h2 id=\"Compatibility-and-What-to-Expect-Next\"><a href=\"#Compatibility-and-What-to-Expect-Next\" class=\"headerlink\" title=\"Compatibility and What to Expect Next\"></a>Compatibility and What to Expect Next</h2><p>Vue.js 2.0 is still in pre-alpha, but you can checkout the source code <a href=\"https://github.com/vuejs/vue/tree/next/\" target=\"_blank\" rel=\"noopener\">here</a>. Despite being a full rewrite, the API is largely compatible with 1.0 with the exception of some intentional deprecations. Check out <a href=\"https://github.com/vuejs/vue/tree/next/examples\" target=\"_blank\" rel=\"noopener\">the same official examples written in 2.0</a> - you will see that not much has changed!</p>\n<p>The feature deprecations are part of our continued effort to provide the simplest API possible for maximum developer productivity. You can check out a 1.0 vs. 2.0 feature comparison <a href=\"https://github.com/vuejs/vue/wiki/2.0-features\" target=\"_blank\" rel=\"noopener\">here</a>. This does mean that it will take some effort to migrate an existing app if you happen to use some of these deprecated features heavily, but we will provide detailed upgrade guides in the future.</p>\n<p>There is still much work left to be done. We will be releasing the first alpha once we reach satisfactory test coverage, and we are aiming for beta by end of May / early June. In addition to more tests, we also need to update the supporting libraries (vue-router, Vuex, vue-loader, vueify…). Currently only Vuex works with 2.0 out of the box, but we will make sure that everything works smoothly together when 2.0 ships.</p>\n<p>We are also not forgetting about 1.x! 1.1 will be released alongside 2.0 beta, with an LTS period of 6-month critical bug fixes and 9-month security updates. It will also ship with optional deprecation warnings to get you prepared for upgrading to 2.0. Stay tuned!</p>\n","site":{"data":{}},"excerpt":"<p>Today I am thrilled to announce the first public preview of Vue.js 2.0, which brings along many exciting improvements and new features. Let’s take a peek at what’s in store!</p>","more":"<h2 id=\"Even-Leaner-Even-Faster\"><a href=\"#Even-Leaner-Even-Faster\" class=\"headerlink\" title=\"Even Leaner, Even Faster\"></a>Even Leaner, Even Faster</h2><p>Vue.js has always focused on staying light and fast, but 2.0 pushes it even further. The rendering layer is now based on a lightweight virtual-DOM implementation (based on <a href=\"https://github.com/paldepind/snabbdom\" target=\"_blank\" rel=\"noopener\">Snabbdom</a>) that improves initial rendering speed and memory consumption by up to 2~4x in most scenarios (check out <a href=\"https://github.com/vuejs/vue/tree/next/benchmarks\" target=\"_blank\" rel=\"noopener\">these benchmarks</a>). The template-to-virtual-DOM compiler and the runtime can be separated, so you can pre-compile templates and ship your app with only the runtime, which is less than 12KB min+gzip (as a reference, React 15 is 44KB min+gzip). The compiler also works in the browser, which means you can still drop in one script tag and start hacking, just like before. Even with the compiler included, the build is sitting at 17KB min+gzip, still lighter than the current 1.0 build.</p>\n<h2 id=\"Not-Your-Average-Virtual-DOM\"><a href=\"#Not-Your-Average-Virtual-DOM\" class=\"headerlink\" title=\"Not Your Average Virtual-DOM\"></a>Not Your Average Virtual-DOM</h2><p>Now, just virtual-DOM sounds boring because there are so many implementations out there - but this one is different. Combined with Vue’s reactivity system, it provides optimized re-rendering out of the box without you having to do anything. Each component keeps track of its reactive dependencies during its render, so the system knows precisely when to re-render, and which components to re-render. No need for <code>shouldComponentUpdate</code> or immutable data structures - <strong>it just works</strong>.</p>\n<p>In addition, Vue 2.0 applies some advanced optimizations during the template-to-virtual-DOM compilation phase:</p>\n<ol>\n<li><p>It detects static class names and attributes so that they are never diffed after the initial render.</p>\n</li>\n<li><p>It detects the maximum static sub trees (sub trees with no dynamic bindings) and hoist them out of the render function. So on each re-render, it directly reuses the exact same virtual nodes and skips the diffing.</p>\n</li>\n</ol>\n<p>These advanced optimizations can usually only be achieved via Babel plugins when using JSX, but with Vue 2.0 you can get them even using the in-browser compiler.</p>\n<p>The new rendering system also allows you to disable reactive conversions by simply freezing your data and manually force updates, essentially giving you full control over the re-rendering process.</p>\n<p>With these techniques combined, Vue 2.0 ensures blazing fast performance in every possible scenario while requiring minimal optimization efforts from the developer.</p>\n<h2 id=\"Templates-JSX-or-Hyperscript\"><a href=\"#Templates-JSX-or-Hyperscript\" class=\"headerlink\" title=\"Templates, JSX, or Hyperscript?\"></a>Templates, JSX, or Hyperscript?</h2><p>Developers tend to have strong opinions on templates vs. JSX. On the one hand, templates are closer to HTML - they map better to the semantic structure of your app and make it much easier to think visually about the design, layout and styling. On the other hand, templates are limited to the DSL while the programmatic nature of JSX/hyperscript provides the full expressive power of a turing-complete language.</p>\n<p>Being a designer/developer hybrid, I prefer writing most of my interfaces in templates, but in certain cases I do miss the flexibility of JSX/hyperscript. An example would be writing a component that programmatically handles its children, something not feasible with just the template-based slot mechanism.</p>\n<p>Well, why not have both? In Vue 2.0, you can keep using the familiar template syntax, or drop down to the virtual-DOM layer whenever you feel constrained by the template DSL. Instead of the <code>template</code> option, just replace it with a <code>render</code> function. You can even embed render functions in your templates using the special <code>&lt;render&gt;</code> tag! The best of both worlds, in the same framework.</p>\n<h2 id=\"Streaming-Server-side-Rendering\"><a href=\"#Streaming-Server-side-Rendering\" class=\"headerlink\" title=\"Streaming Server-side Rendering\"></a>Streaming Server-side Rendering</h2><p>With the migration to virtual-DOM, Vue 2.0 naturally supports server-side rendering with client-side hydration. One pain point of current mainstream server rendering implementations, such as React’s, is that the rendering is synchronous so it can block the server’s event loop if the app is complex. Synchronous server-side rendering may even adversely affect time-to-content on the client. Vue 2.0 provides built-in streaming server-side rendering, so that you can render your component, get a readable stream back and directly pipe it to the HTTP response. This ensures your server is responsive, and gets the rendered content to your users faster.</p>\n<h2 id=\"Unlocking-More-Possibilities\"><a href=\"#Unlocking-More-Possibilities\" class=\"headerlink\" title=\"Unlocking More Possibilities\"></a>Unlocking More Possibilities</h2><p>With the new architecture, there are even more possibilities to explore - for example, rendering to native interfaces on mobile. Currently, we are exploring a port of Vue.js 2.0 that uses <a href=\"http://alibaba.github.io/weex/\" target=\"_blank\" rel=\"noopener\">weex</a> as a native rendering backend, a project maintained by engineers at Alibaba Group, the biggest tech enterprise of China. It is also technically feasible to adapt Vue 2.0’s virtual-DOM to run inside ReactNative. We are excited to see how it goes!</p>\n<h2 id=\"Compatibility-and-What-to-Expect-Next\"><a href=\"#Compatibility-and-What-to-Expect-Next\" class=\"headerlink\" title=\"Compatibility and What to Expect Next\"></a>Compatibility and What to Expect Next</h2><p>Vue.js 2.0 is still in pre-alpha, but you can checkout the source code <a href=\"https://github.com/vuejs/vue/tree/next/\" target=\"_blank\" rel=\"noopener\">here</a>. Despite being a full rewrite, the API is largely compatible with 1.0 with the exception of some intentional deprecations. Check out <a href=\"https://github.com/vuejs/vue/tree/next/examples\" target=\"_blank\" rel=\"noopener\">the same official examples written in 2.0</a> - you will see that not much has changed!</p>\n<p>The feature deprecations are part of our continued effort to provide the simplest API possible for maximum developer productivity. You can check out a 1.0 vs. 2.0 feature comparison <a href=\"https://github.com/vuejs/vue/wiki/2.0-features\" target=\"_blank\" rel=\"noopener\">here</a>. This does mean that it will take some effort to migrate an existing app if you happen to use some of these deprecated features heavily, but we will provide detailed upgrade guides in the future.</p>\n<p>There is still much work left to be done. We will be releasing the first alpha once we reach satisfactory test coverage, and we are aiming for beta by end of May / early June. In addition to more tests, we also need to update the supporting libraries (vue-router, Vuex, vue-loader, vueify…). Currently only Vuex works with 2.0 out of the box, but we will make sure that everything works smoothly together when 2.0 ships.</p>\n<p>We are also not forgetting about 1.x! 1.1 will be released alongside 2.0 beta, with an LTS period of 6-month critical bug fixes and 9-month security updates. It will also ship with optional deprecation warnings to get you prepared for upgrading to 2.0. Stay tuned!</p>"},{"title":"Common Beginner Gotchas","date":"2016-02-06T02:00:00.000Z","_content":"\nThere are few types of questions that we frequently see from users who are new to Vue.js. Although they are all mentioned somewhere in the guide, they are easy to miss and can be hard to find when you do get bitten by the gotchas. Therefore we are aggregating them in this post and hopefully it can save you some time!\n\n<!-- more -->\n\n### Why isn't the DOM updating?\n\nMost of the time, when you change a Vue instance's data, the view updates. But there are two edge cases:\n\n1. When you are **adding a new property** that wasn't present when the data was observed. Due to the limitation of ES5 and to ensure consistent behavior across browsers, Vue.js cannot detect property addition/deletions. The best practice is to always declare properties that need to be reactive upfront. In cases where you absolutely need to add or delete properties at runtime, use the global [`Vue.set`](/api/#Vue-set) or [`Vue.delete`](/api/#Vue-delete) methods.\n\n2. When you modify an Array by directly setting an index (e.g. `arr[0] = val`) or modifying its `length` property. Similarly, Vue.js cannot pickup these changes. Always modify arrays by using an Array instance method, or replacing it entirely. Vue provides a convenience method `arr.$set(index, value)` which is syntax sugar for `arr.splice(index, 1, value)`.\n\nFurther reading: [Reactivity in Depth](/guide/reactivity.html) and [Array Change Detection](http://vuejs.org/guide/list.html#Array-Change-Detection).\n\n### When is the DOM updated?\n\nVue.js uses an asynchronous queue to batch DOM updates. This means when you modify some data, the DOM updates do not happen instantly: they are applied asynchronously when the queue is flushed. So how do you know when the DOM has been updated? Use `Vue.nextTick` right after you modify the data. The callback function you pass to it will be called once the queue has been flushed.\n\nFurther reading: [Async Update Queue](/guide/reactivity.html#Async-Update-Queue).\n\n### Why does `data` need to be a function?\n\nIn the basic examples, we declare the `data` directly as a plain object. This is because we are creating only a single instance with `new Vue()`. However, when defining a **component**, `data` must be declared as a function that returns the initial data object. Why? Because there will be many instances created using the same definition. If we still use a plain object for `data`, that same object will be **shared by reference** across all instance created! By providing a `data` function, every time a new instance is created we can call it to return a fresh copy of the initial data.\n\nFurther reading: [Component Option Caveats](/guide/components.html#Component-Option-Caveats).\n\n### HTML case insensitivity\n\nAll Vue.js templates are valid, parsable HTML markup, and Vue.js relies on spec-compliant parsers to process its templates. However, as specified in the standard, HTML is case-insensitive when matching tag and attribute names. This means camelCase attributes like `:myProp=\"123\"` will be matched as `:myprop=\"123\"`. As a rule of thumb, you should use camelCase in JavaScript and kebab-case in templates. For example a prop defined in JavaScript as `myProp` should be bound in templates as `:my-prop`.\n\nFurther reading: [camelCase vs. kebab-case](http://vuejs.org/guide/components.html#camelCase-vs-kebab-case).\n\nWe are also discussing the possibility of eliminating this inconsistency by resolving props and components in a case-insensitive manner. Join the conversation [here](https://github.com/vuejs/vue/issues/2308).\n","source":"_posts/common-gotchas.md","raw":"---\ntitle: Common Beginner Gotchas\ndate: 2016-02-06 10:00:00\n---\n\nThere are few types of questions that we frequently see from users who are new to Vue.js. Although they are all mentioned somewhere in the guide, they are easy to miss and can be hard to find when you do get bitten by the gotchas. Therefore we are aggregating them in this post and hopefully it can save you some time!\n\n<!-- more -->\n\n### Why isn't the DOM updating?\n\nMost of the time, when you change a Vue instance's data, the view updates. But there are two edge cases:\n\n1. When you are **adding a new property** that wasn't present when the data was observed. Due to the limitation of ES5 and to ensure consistent behavior across browsers, Vue.js cannot detect property addition/deletions. The best practice is to always declare properties that need to be reactive upfront. In cases where you absolutely need to add or delete properties at runtime, use the global [`Vue.set`](/api/#Vue-set) or [`Vue.delete`](/api/#Vue-delete) methods.\n\n2. When you modify an Array by directly setting an index (e.g. `arr[0] = val`) or modifying its `length` property. Similarly, Vue.js cannot pickup these changes. Always modify arrays by using an Array instance method, or replacing it entirely. Vue provides a convenience method `arr.$set(index, value)` which is syntax sugar for `arr.splice(index, 1, value)`.\n\nFurther reading: [Reactivity in Depth](/guide/reactivity.html) and [Array Change Detection](http://vuejs.org/guide/list.html#Array-Change-Detection).\n\n### When is the DOM updated?\n\nVue.js uses an asynchronous queue to batch DOM updates. This means when you modify some data, the DOM updates do not happen instantly: they are applied asynchronously when the queue is flushed. So how do you know when the DOM has been updated? Use `Vue.nextTick` right after you modify the data. The callback function you pass to it will be called once the queue has been flushed.\n\nFurther reading: [Async Update Queue](/guide/reactivity.html#Async-Update-Queue).\n\n### Why does `data` need to be a function?\n\nIn the basic examples, we declare the `data` directly as a plain object. This is because we are creating only a single instance with `new Vue()`. However, when defining a **component**, `data` must be declared as a function that returns the initial data object. Why? Because there will be many instances created using the same definition. If we still use a plain object for `data`, that same object will be **shared by reference** across all instance created! By providing a `data` function, every time a new instance is created we can call it to return a fresh copy of the initial data.\n\nFurther reading: [Component Option Caveats](/guide/components.html#Component-Option-Caveats).\n\n### HTML case insensitivity\n\nAll Vue.js templates are valid, parsable HTML markup, and Vue.js relies on spec-compliant parsers to process its templates. However, as specified in the standard, HTML is case-insensitive when matching tag and attribute names. This means camelCase attributes like `:myProp=\"123\"` will be matched as `:myprop=\"123\"`. As a rule of thumb, you should use camelCase in JavaScript and kebab-case in templates. For example a prop defined in JavaScript as `myProp` should be bound in templates as `:my-prop`.\n\nFurther reading: [camelCase vs. kebab-case](http://vuejs.org/guide/components.html#camelCase-vs-kebab-case).\n\nWe are also discussing the possibility of eliminating this inconsistency by resolving props and components in a case-insensitive manner. Join the conversation [here](https://github.com/vuejs/vue/issues/2308).\n","slug":"common-gotchas","published":1,"updated":"2018-07-19T04:04:16.810Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjk0zidnn0008vkrtwkakipc7","content":"<p>There are few types of questions that we frequently see from users who are new to Vue.js. Although they are all mentioned somewhere in the guide, they are easy to miss and can be hard to find when you do get bitten by the gotchas. Therefore we are aggregating them in this post and hopefully it can save you some time!</p>\n<a id=\"more\"></a>\n<h3 id=\"Why-isn’t-the-DOM-updating\"><a href=\"#Why-isn’t-the-DOM-updating\" class=\"headerlink\" title=\"Why isn’t the DOM updating?\"></a>Why isn’t the DOM updating?</h3><p>Most of the time, when you change a Vue instance’s data, the view updates. But there are two edge cases:</p>\n<ol>\n<li><p>When you are <strong>adding a new property</strong> that wasn’t present when the data was observed. Due to the limitation of ES5 and to ensure consistent behavior across browsers, Vue.js cannot detect property addition/deletions. The best practice is to always declare properties that need to be reactive upfront. In cases where you absolutely need to add or delete properties at runtime, use the global <a href=\"/api/#Vue-set\"><code>Vue.set</code></a> or <a href=\"/api/#Vue-delete\"><code>Vue.delete</code></a> methods.</p>\n</li>\n<li><p>When you modify an Array by directly setting an index (e.g. <code>arr[0] = val</code>) or modifying its <code>length</code> property. Similarly, Vue.js cannot pickup these changes. Always modify arrays by using an Array instance method, or replacing it entirely. Vue provides a convenience method <code>arr.$set(index, value)</code> which is syntax sugar for <code>arr.splice(index, 1, value)</code>.</p>\n</li>\n</ol>\n<p>Further reading: <a href=\"/guide/reactivity.html\">Reactivity in Depth</a> and <a href=\"http://vuejs.org/guide/list.html#Array-Change-Detection\">Array Change Detection</a>.</p>\n<h3 id=\"When-is-the-DOM-updated\"><a href=\"#When-is-the-DOM-updated\" class=\"headerlink\" title=\"When is the DOM updated?\"></a>When is the DOM updated?</h3><p>Vue.js uses an asynchronous queue to batch DOM updates. This means when you modify some data, the DOM updates do not happen instantly: they are applied asynchronously when the queue is flushed. So how do you know when the DOM has been updated? Use <code>Vue.nextTick</code> right after you modify the data. The callback function you pass to it will be called once the queue has been flushed.</p>\n<p>Further reading: <a href=\"/guide/reactivity.html#Async-Update-Queue\">Async Update Queue</a>.</p>\n<h3 id=\"Why-does-data-need-to-be-a-function\"><a href=\"#Why-does-data-need-to-be-a-function\" class=\"headerlink\" title=\"Why does data need to be a function?\"></a>Why does <code>data</code> need to be a function?</h3><p>In the basic examples, we declare the <code>data</code> directly as a plain object. This is because we are creating only a single instance with <code>new Vue()</code>. However, when defining a <strong>component</strong>, <code>data</code> must be declared as a function that returns the initial data object. Why? Because there will be many instances created using the same definition. If we still use a plain object for <code>data</code>, that same object will be <strong>shared by reference</strong> across all instance created! By providing a <code>data</code> function, every time a new instance is created we can call it to return a fresh copy of the initial data.</p>\n<p>Further reading: <a href=\"/guide/components.html#Component-Option-Caveats\">Component Option Caveats</a>.</p>\n<h3 id=\"HTML-case-insensitivity\"><a href=\"#HTML-case-insensitivity\" class=\"headerlink\" title=\"HTML case insensitivity\"></a>HTML case insensitivity</h3><p>All Vue.js templates are valid, parsable HTML markup, and Vue.js relies on spec-compliant parsers to process its templates. However, as specified in the standard, HTML is case-insensitive when matching tag and attribute names. This means camelCase attributes like <code>:myProp=&quot;123&quot;</code> will be matched as <code>:myprop=&quot;123&quot;</code>. As a rule of thumb, you should use camelCase in JavaScript and kebab-case in templates. For example a prop defined in JavaScript as <code>myProp</code> should be bound in templates as <code>:my-prop</code>.</p>\n<p>Further reading: <a href=\"http://vuejs.org/guide/components.html#camelCase-vs-kebab-case\">camelCase vs. kebab-case</a>.</p>\n<p>We are also discussing the possibility of eliminating this inconsistency by resolving props and components in a case-insensitive manner. Join the conversation <a href=\"https://github.com/vuejs/vue/issues/2308\" target=\"_blank\" rel=\"noopener\">here</a>.</p>\n","site":{"data":{}},"excerpt":"<p>There are few types of questions that we frequently see from users who are new to Vue.js. Although they are all mentioned somewhere in the guide, they are easy to miss and can be hard to find when you do get bitten by the gotchas. Therefore we are aggregating them in this post and hopefully it can save you some time!</p>","more":"<h3 id=\"Why-isn’t-the-DOM-updating\"><a href=\"#Why-isn’t-the-DOM-updating\" class=\"headerlink\" title=\"Why isn’t the DOM updating?\"></a>Why isn’t the DOM updating?</h3><p>Most of the time, when you change a Vue instance’s data, the view updates. But there are two edge cases:</p>\n<ol>\n<li><p>When you are <strong>adding a new property</strong> that wasn’t present when the data was observed. Due to the limitation of ES5 and to ensure consistent behavior across browsers, Vue.js cannot detect property addition/deletions. The best practice is to always declare properties that need to be reactive upfront. In cases where you absolutely need to add or delete properties at runtime, use the global <a href=\"/api/#Vue-set\"><code>Vue.set</code></a> or <a href=\"/api/#Vue-delete\"><code>Vue.delete</code></a> methods.</p>\n</li>\n<li><p>When you modify an Array by directly setting an index (e.g. <code>arr[0] = val</code>) or modifying its <code>length</code> property. Similarly, Vue.js cannot pickup these changes. Always modify arrays by using an Array instance method, or replacing it entirely. Vue provides a convenience method <code>arr.$set(index, value)</code> which is syntax sugar for <code>arr.splice(index, 1, value)</code>.</p>\n</li>\n</ol>\n<p>Further reading: <a href=\"/guide/reactivity.html\">Reactivity in Depth</a> and <a href=\"http://vuejs.org/guide/list.html#Array-Change-Detection\">Array Change Detection</a>.</p>\n<h3 id=\"When-is-the-DOM-updated\"><a href=\"#When-is-the-DOM-updated\" class=\"headerlink\" title=\"When is the DOM updated?\"></a>When is the DOM updated?</h3><p>Vue.js uses an asynchronous queue to batch DOM updates. This means when you modify some data, the DOM updates do not happen instantly: they are applied asynchronously when the queue is flushed. So how do you know when the DOM has been updated? Use <code>Vue.nextTick</code> right after you modify the data. The callback function you pass to it will be called once the queue has been flushed.</p>\n<p>Further reading: <a href=\"/guide/reactivity.html#Async-Update-Queue\">Async Update Queue</a>.</p>\n<h3 id=\"Why-does-data-need-to-be-a-function\"><a href=\"#Why-does-data-need-to-be-a-function\" class=\"headerlink\" title=\"Why does data need to be a function?\"></a>Why does <code>data</code> need to be a function?</h3><p>In the basic examples, we declare the <code>data</code> directly as a plain object. This is because we are creating only a single instance with <code>new Vue()</code>. However, when defining a <strong>component</strong>, <code>data</code> must be declared as a function that returns the initial data object. Why? Because there will be many instances created using the same definition. If we still use a plain object for <code>data</code>, that same object will be <strong>shared by reference</strong> across all instance created! By providing a <code>data</code> function, every time a new instance is created we can call it to return a fresh copy of the initial data.</p>\n<p>Further reading: <a href=\"/guide/components.html#Component-Option-Caveats\">Component Option Caveats</a>.</p>\n<h3 id=\"HTML-case-insensitivity\"><a href=\"#HTML-case-insensitivity\" class=\"headerlink\" title=\"HTML case insensitivity\"></a>HTML case insensitivity</h3><p>All Vue.js templates are valid, parsable HTML markup, and Vue.js relies on spec-compliant parsers to process its templates. However, as specified in the standard, HTML is case-insensitive when matching tag and attribute names. This means camelCase attributes like <code>:myProp=&quot;123&quot;</code> will be matched as <code>:myprop=&quot;123&quot;</code>. As a rule of thumb, you should use camelCase in JavaScript and kebab-case in templates. For example a prop defined in JavaScript as <code>myProp</code> should be bound in templates as <code>:my-prop</code>.</p>\n<p>Further reading: <a href=\"http://vuejs.org/guide/components.html#camelCase-vs-kebab-case\">camelCase vs. kebab-case</a>.</p>\n<p>We are also discussing the possibility of eliminating this inconsistency by resolving props and components in a case-insensitive manner. Join the conversation <a href=\"https://github.com/vuejs/vue/issues/2308\" target=\"_blank\" rel=\"noopener\">here</a>.</p>"},{"title":"March 2016 Update","date":"2016-03-14T10:45:00.000Z","_content":"\n## Growing Community\n\nVue's growth in the past year has been nothing short of amazing. As of today we are at over 15,000 stars on GitHub, over 500k downloads from npm, and over 2,000 users in the Gitter channel. What's more exciting though, is that the community successfully organized the first [London Vue.js Meetup](http://www.meetup.com/London-Vue-js-Meetup/) and the first [Paris Vue.js Meetup](http://www.meetup.com/Vuejs-Paris/?scroll=true)! A big shoutout to the awesome organizers: [Jack](https://twitter.com/JackBarham), [James](https://twitter.com/onejamesbrowne/) and [Eduardo](https://twitter.com/posva/).\n\n<!-- more -->\n\nIf you are interested in connecting with Vue.js users near you and share your experiences in using Vue.js, joining a local Meetup is a great idea - even better, maybe you can organize one :)\n\n## Cool Things Being Built\n\nMore and more amazing things are being built with Vue. There are products like [PageKit](https://pagekit.com/), Laravel Spark (coming soon) and [Statamic](https://v2.statamic.com/), sleek apps like [Koel](http://koel.phanan.net/) and [Gokotta](https://github.com/Zhangdroid/Gokotta), UI components like [VueStrap](http://yuche.github.io/vue-strap/) and [Vue-MDL](http://posva.net/vue-mdl/), and smooth, interactive experiences like [YouTube Adblitz](https://adblitz.withyoutube.com) and even the [Facebook NewsFeed Marketing Site](https://newsfeed.fb.com/)!\n\nThere are many other great projects - too many to be listed here - but you can check them all out in [awesome-vue](https://github.com/vuejs/awesome-vue). If you've built great things with Vue, you should also add them to the list!\n\n## A New Vision For the Project\n\nSome of you may have noticed that the development on the Vue.js core repo has slowed down lately - in the meanwhile, a lot of efforts went into other sub projects, namely [Vuex](https://github.com/vuejs/vuex), [vue-devtools](https://github.com/vuejs/vue-devtools) and the official [Webpack project boilerplate](https://github.com/vuejs-templates/webpack). The next step is a new release for [vue-router](https://github.com/vuejs/vue-router), and better documentation/examples demonstrating how Vue.js core, Vuex and vue-router work together in a large single page application.\n\nAll this adds together towards a new vision for the Vue.js project: a progressive framework that can adapt to different complexity levels. Vue.js core will remain \"just the view layer\" - you can still drop it on whatever existing page to replace jQuery, but the Vue.js project also includes other pieces like vue-router, Vuex, vue-loader/vueify and vue-cli that works together as a more complete, opinionated framework for single page applications. More on this in a later post.\n\n## Vue.js needs your help!\n\nOpen source is awesome, and I'm proud that Vue.js is helping people build real products all over the world. However, as the scope of the project grows, pushing new features while maintaining everything becomes a very demanding job. The good news is you can help!\n\n### Looking for collaborators\n\nThere are already users who frequently helps out in various ways, but this is an invitation to make things official. I'm looking for contributors to join the \"team\", which is currently mostly just me. If that sounds interesting to you, take a look at the application [here](https://docs.google.com/forms/d/1SgDgKZqyivEf5xl0EOWNfs68Xy3f4oBzLXIlwlS0BIs/viewform).\n\n### Looking for sponsors\n\nAnother way to help making Vue development sustainable is providing direct financial support. The more financial support I receive, the more time I get to spend on making Vue even better.\n\nIf you run a business and is using Vue in a revenue-generating product, it would make business sense to sponsor Vue development: it ensures the project that your product relies on stays healthy and actively maintained. It can also help your exposure in the Vue community and makes it easier to attract Vue developers.\n\nIf you are an individual user and have enjoyed the productivity of using Vue, consider donating as a sign of appreciation - like buying me coffee once in a while :)\n\nIn either case, you can provide recurring funding through Vue's [Patreon campaign](https://www.patreon.com/evanyou), or provide one-time donations via [PayPal](https://www.paypal.me/evanyou). There are many ideas for Vue that I have lined up but haven't had the time to embark on, and I would love to be able to work on them full time - I hope you can help me make that happen!\n","source":"_posts/march-update.md","raw":"---\ntitle: March 2016 Update\ndate: 2016-03-14 18:45:00\n---\n\n## Growing Community\n\nVue's growth in the past year has been nothing short of amazing. As of today we are at over 15,000 stars on GitHub, over 500k downloads from npm, and over 2,000 users in the Gitter channel. What's more exciting though, is that the community successfully organized the first [London Vue.js Meetup](http://www.meetup.com/London-Vue-js-Meetup/) and the first [Paris Vue.js Meetup](http://www.meetup.com/Vuejs-Paris/?scroll=true)! A big shoutout to the awesome organizers: [Jack](https://twitter.com/JackBarham), [James](https://twitter.com/onejamesbrowne/) and [Eduardo](https://twitter.com/posva/).\n\n<!-- more -->\n\nIf you are interested in connecting with Vue.js users near you and share your experiences in using Vue.js, joining a local Meetup is a great idea - even better, maybe you can organize one :)\n\n## Cool Things Being Built\n\nMore and more amazing things are being built with Vue. There are products like [PageKit](https://pagekit.com/), Laravel Spark (coming soon) and [Statamic](https://v2.statamic.com/), sleek apps like [Koel](http://koel.phanan.net/) and [Gokotta](https://github.com/Zhangdroid/Gokotta), UI components like [VueStrap](http://yuche.github.io/vue-strap/) and [Vue-MDL](http://posva.net/vue-mdl/), and smooth, interactive experiences like [YouTube Adblitz](https://adblitz.withyoutube.com) and even the [Facebook NewsFeed Marketing Site](https://newsfeed.fb.com/)!\n\nThere are many other great projects - too many to be listed here - but you can check them all out in [awesome-vue](https://github.com/vuejs/awesome-vue). If you've built great things with Vue, you should also add them to the list!\n\n## A New Vision For the Project\n\nSome of you may have noticed that the development on the Vue.js core repo has slowed down lately - in the meanwhile, a lot of efforts went into other sub projects, namely [Vuex](https://github.com/vuejs/vuex), [vue-devtools](https://github.com/vuejs/vue-devtools) and the official [Webpack project boilerplate](https://github.com/vuejs-templates/webpack). The next step is a new release for [vue-router](https://github.com/vuejs/vue-router), and better documentation/examples demonstrating how Vue.js core, Vuex and vue-router work together in a large single page application.\n\nAll this adds together towards a new vision for the Vue.js project: a progressive framework that can adapt to different complexity levels. Vue.js core will remain \"just the view layer\" - you can still drop it on whatever existing page to replace jQuery, but the Vue.js project also includes other pieces like vue-router, Vuex, vue-loader/vueify and vue-cli that works together as a more complete, opinionated framework for single page applications. More on this in a later post.\n\n## Vue.js needs your help!\n\nOpen source is awesome, and I'm proud that Vue.js is helping people build real products all over the world. However, as the scope of the project grows, pushing new features while maintaining everything becomes a very demanding job. The good news is you can help!\n\n### Looking for collaborators\n\nThere are already users who frequently helps out in various ways, but this is an invitation to make things official. I'm looking for contributors to join the \"team\", which is currently mostly just me. If that sounds interesting to you, take a look at the application [here](https://docs.google.com/forms/d/1SgDgKZqyivEf5xl0EOWNfs68Xy3f4oBzLXIlwlS0BIs/viewform).\n\n### Looking for sponsors\n\nAnother way to help making Vue development sustainable is providing direct financial support. The more financial support I receive, the more time I get to spend on making Vue even better.\n\nIf you run a business and is using Vue in a revenue-generating product, it would make business sense to sponsor Vue development: it ensures the project that your product relies on stays healthy and actively maintained. It can also help your exposure in the Vue community and makes it easier to attract Vue developers.\n\nIf you are an individual user and have enjoyed the productivity of using Vue, consider donating as a sign of appreciation - like buying me coffee once in a while :)\n\nIn either case, you can provide recurring funding through Vue's [Patreon campaign](https://www.patreon.com/evanyou), or provide one-time donations via [PayPal](https://www.paypal.me/evanyou). There are many ideas for Vue that I have lined up but haven't had the time to embark on, and I would love to be able to work on them full time - I hope you can help me make that happen!\n","slug":"march-update","published":1,"updated":"2018-07-19T04:04:16.811Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjk0zidno0009vkrt5lppqp41","content":"<h2 id=\"Growing-Community\"><a href=\"#Growing-Community\" class=\"headerlink\" title=\"Growing Community\"></a>Growing Community</h2><p>Vue’s growth in the past year has been nothing short of amazing. As of today we are at over 15,000 stars on GitHub, over 500k downloads from npm, and over 2,000 users in the Gitter channel. What’s more exciting though, is that the community successfully organized the first <a href=\"http://www.meetup.com/London-Vue-js-Meetup/\" target=\"_blank\" rel=\"noopener\">London Vue.js Meetup</a> and the first <a href=\"http://www.meetup.com/Vuejs-Paris/?scroll=true\" target=\"_blank\" rel=\"noopener\">Paris Vue.js Meetup</a>! A big shoutout to the awesome organizers: <a href=\"https://twitter.com/JackBarham\" target=\"_blank\" rel=\"noopener\">Jack</a>, <a href=\"https://twitter.com/onejamesbrowne/\" target=\"_blank\" rel=\"noopener\">James</a> and <a href=\"https://twitter.com/posva/\" target=\"_blank\" rel=\"noopener\">Eduardo</a>.</p>\n<a id=\"more\"></a>\n<p>If you are interested in connecting with Vue.js users near you and share your experiences in using Vue.js, joining a local Meetup is a great idea - even better, maybe you can organize one :)</p>\n<h2 id=\"Cool-Things-Being-Built\"><a href=\"#Cool-Things-Being-Built\" class=\"headerlink\" title=\"Cool Things Being Built\"></a>Cool Things Being Built</h2><p>More and more amazing things are being built with Vue. There are products like <a href=\"https://pagekit.com/\" target=\"_blank\" rel=\"noopener\">PageKit</a>, Laravel Spark (coming soon) and <a href=\"https://v2.statamic.com/\" target=\"_blank\" rel=\"noopener\">Statamic</a>, sleek apps like <a href=\"http://koel.phanan.net/\" target=\"_blank\" rel=\"noopener\">Koel</a> and <a href=\"https://github.com/Zhangdroid/Gokotta\" target=\"_blank\" rel=\"noopener\">Gokotta</a>, UI components like <a href=\"http://yuche.github.io/vue-strap/\" target=\"_blank\" rel=\"noopener\">VueStrap</a> and <a href=\"http://posva.net/vue-mdl/\" target=\"_blank\" rel=\"noopener\">Vue-MDL</a>, and smooth, interactive experiences like <a href=\"https://adblitz.withyoutube.com\" target=\"_blank\" rel=\"noopener\">YouTube Adblitz</a> and even the <a href=\"https://newsfeed.fb.com/\" target=\"_blank\" rel=\"noopener\">Facebook NewsFeed Marketing Site</a>!</p>\n<p>There are many other great projects - too many to be listed here - but you can check them all out in <a href=\"https://github.com/vuejs/awesome-vue\" target=\"_blank\" rel=\"noopener\">awesome-vue</a>. If you’ve built great things with Vue, you should also add them to the list!</p>\n<h2 id=\"A-New-Vision-For-the-Project\"><a href=\"#A-New-Vision-For-the-Project\" class=\"headerlink\" title=\"A New Vision For the Project\"></a>A New Vision For the Project</h2><p>Some of you may have noticed that the development on the Vue.js core repo has slowed down lately - in the meanwhile, a lot of efforts went into other sub projects, namely <a href=\"https://github.com/vuejs/vuex\" target=\"_blank\" rel=\"noopener\">Vuex</a>, <a href=\"https://github.com/vuejs/vue-devtools\" target=\"_blank\" rel=\"noopener\">vue-devtools</a> and the official <a href=\"https://github.com/vuejs-templates/webpack\" target=\"_blank\" rel=\"noopener\">Webpack project boilerplate</a>. The next step is a new release for <a href=\"https://github.com/vuejs/vue-router\" target=\"_blank\" rel=\"noopener\">vue-router</a>, and better documentation/examples demonstrating how Vue.js core, Vuex and vue-router work together in a large single page application.</p>\n<p>All this adds together towards a new vision for the Vue.js project: a progressive framework that can adapt to different complexity levels. Vue.js core will remain “just the view layer” - you can still drop it on whatever existing page to replace jQuery, but the Vue.js project also includes other pieces like vue-router, Vuex, vue-loader/vueify and vue-cli that works together as a more complete, opinionated framework for single page applications. More on this in a later post.</p>\n<h2 id=\"Vue-js-needs-your-help\"><a href=\"#Vue-js-needs-your-help\" class=\"headerlink\" title=\"Vue.js needs your help!\"></a>Vue.js needs your help!</h2><p>Open source is awesome, and I’m proud that Vue.js is helping people build real products all over the world. However, as the scope of the project grows, pushing new features while maintaining everything becomes a very demanding job. The good news is you can help!</p>\n<h3 id=\"Looking-for-collaborators\"><a href=\"#Looking-for-collaborators\" class=\"headerlink\" title=\"Looking for collaborators\"></a>Looking for collaborators</h3><p>There are already users who frequently helps out in various ways, but this is an invitation to make things official. I’m looking for contributors to join the “team”, which is currently mostly just me. If that sounds interesting to you, take a look at the application <a href=\"https://docs.google.com/forms/d/1SgDgKZqyivEf5xl0EOWNfs68Xy3f4oBzLXIlwlS0BIs/viewform\" target=\"_blank\" rel=\"noopener\">here</a>.</p>\n<h3 id=\"Looking-for-sponsors\"><a href=\"#Looking-for-sponsors\" class=\"headerlink\" title=\"Looking for sponsors\"></a>Looking for sponsors</h3><p>Another way to help making Vue development sustainable is providing direct financial support. The more financial support I receive, the more time I get to spend on making Vue even better.</p>\n<p>If you run a business and is using Vue in a revenue-generating product, it would make business sense to sponsor Vue development: it ensures the project that your product relies on stays healthy and actively maintained. It can also help your exposure in the Vue community and makes it easier to attract Vue developers.</p>\n<p>If you are an individual user and have enjoyed the productivity of using Vue, consider donating as a sign of appreciation - like buying me coffee once in a while :)</p>\n<p>In either case, you can provide recurring funding through Vue’s <a href=\"https://www.patreon.com/evanyou\" target=\"_blank\" rel=\"noopener\">Patreon campaign</a>, or provide one-time donations via <a href=\"https://www.paypal.me/evanyou\" target=\"_blank\" rel=\"noopener\">PayPal</a>. There are many ideas for Vue that I have lined up but haven’t had the time to embark on, and I would love to be able to work on them full time - I hope you can help me make that happen!</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"Growing-Community\"><a href=\"#Growing-Community\" class=\"headerlink\" title=\"Growing Community\"></a>Growing Community</h2><p>Vue’s growth in the past year has been nothing short of amazing. As of today we are at over 15,000 stars on GitHub, over 500k downloads from npm, and over 2,000 users in the Gitter channel. What’s more exciting though, is that the community successfully organized the first <a href=\"http://www.meetup.com/London-Vue-js-Meetup/\" target=\"_blank\" rel=\"noopener\">London Vue.js Meetup</a> and the first <a href=\"http://www.meetup.com/Vuejs-Paris/?scroll=true\" target=\"_blank\" rel=\"noopener\">Paris Vue.js Meetup</a>! A big shoutout to the awesome organizers: <a href=\"https://twitter.com/JackBarham\" target=\"_blank\" rel=\"noopener\">Jack</a>, <a href=\"https://twitter.com/onejamesbrowne/\" target=\"_blank\" rel=\"noopener\">James</a> and <a href=\"https://twitter.com/posva/\" target=\"_blank\" rel=\"noopener\">Eduardo</a>.</p>","more":"<p>If you are interested in connecting with Vue.js users near you and share your experiences in using Vue.js, joining a local Meetup is a great idea - even better, maybe you can organize one :)</p>\n<h2 id=\"Cool-Things-Being-Built\"><a href=\"#Cool-Things-Being-Built\" class=\"headerlink\" title=\"Cool Things Being Built\"></a>Cool Things Being Built</h2><p>More and more amazing things are being built with Vue. There are products like <a href=\"https://pagekit.com/\" target=\"_blank\" rel=\"noopener\">PageKit</a>, Laravel Spark (coming soon) and <a href=\"https://v2.statamic.com/\" target=\"_blank\" rel=\"noopener\">Statamic</a>, sleek apps like <a href=\"http://koel.phanan.net/\" target=\"_blank\" rel=\"noopener\">Koel</a> and <a href=\"https://github.com/Zhangdroid/Gokotta\" target=\"_blank\" rel=\"noopener\">Gokotta</a>, UI components like <a href=\"http://yuche.github.io/vue-strap/\" target=\"_blank\" rel=\"noopener\">VueStrap</a> and <a href=\"http://posva.net/vue-mdl/\" target=\"_blank\" rel=\"noopener\">Vue-MDL</a>, and smooth, interactive experiences like <a href=\"https://adblitz.withyoutube.com\" target=\"_blank\" rel=\"noopener\">YouTube Adblitz</a> and even the <a href=\"https://newsfeed.fb.com/\" target=\"_blank\" rel=\"noopener\">Facebook NewsFeed Marketing Site</a>!</p>\n<p>There are many other great projects - too many to be listed here - but you can check them all out in <a href=\"https://github.com/vuejs/awesome-vue\" target=\"_blank\" rel=\"noopener\">awesome-vue</a>. If you’ve built great things with Vue, you should also add them to the list!</p>\n<h2 id=\"A-New-Vision-For-the-Project\"><a href=\"#A-New-Vision-For-the-Project\" class=\"headerlink\" title=\"A New Vision For the Project\"></a>A New Vision For the Project</h2><p>Some of you may have noticed that the development on the Vue.js core repo has slowed down lately - in the meanwhile, a lot of efforts went into other sub projects, namely <a href=\"https://github.com/vuejs/vuex\" target=\"_blank\" rel=\"noopener\">Vuex</a>, <a href=\"https://github.com/vuejs/vue-devtools\" target=\"_blank\" rel=\"noopener\">vue-devtools</a> and the official <a href=\"https://github.com/vuejs-templates/webpack\" target=\"_blank\" rel=\"noopener\">Webpack project boilerplate</a>. The next step is a new release for <a href=\"https://github.com/vuejs/vue-router\" target=\"_blank\" rel=\"noopener\">vue-router</a>, and better documentation/examples demonstrating how Vue.js core, Vuex and vue-router work together in a large single page application.</p>\n<p>All this adds together towards a new vision for the Vue.js project: a progressive framework that can adapt to different complexity levels. Vue.js core will remain “just the view layer” - you can still drop it on whatever existing page to replace jQuery, but the Vue.js project also includes other pieces like vue-router, Vuex, vue-loader/vueify and vue-cli that works together as a more complete, opinionated framework for single page applications. More on this in a later post.</p>\n<h2 id=\"Vue-js-needs-your-help\"><a href=\"#Vue-js-needs-your-help\" class=\"headerlink\" title=\"Vue.js needs your help!\"></a>Vue.js needs your help!</h2><p>Open source is awesome, and I’m proud that Vue.js is helping people build real products all over the world. However, as the scope of the project grows, pushing new features while maintaining everything becomes a very demanding job. The good news is you can help!</p>\n<h3 id=\"Looking-for-collaborators\"><a href=\"#Looking-for-collaborators\" class=\"headerlink\" title=\"Looking for collaborators\"></a>Looking for collaborators</h3><p>There are already users who frequently helps out in various ways, but this is an invitation to make things official. I’m looking for contributors to join the “team”, which is currently mostly just me. If that sounds interesting to you, take a look at the application <a href=\"https://docs.google.com/forms/d/1SgDgKZqyivEf5xl0EOWNfs68Xy3f4oBzLXIlwlS0BIs/viewform\" target=\"_blank\" rel=\"noopener\">here</a>.</p>\n<h3 id=\"Looking-for-sponsors\"><a href=\"#Looking-for-sponsors\" class=\"headerlink\" title=\"Looking for sponsors\"></a>Looking for sponsors</h3><p>Another way to help making Vue development sustainable is providing direct financial support. The more financial support I receive, the more time I get to spend on making Vue even better.</p>\n<p>If you run a business and is using Vue in a revenue-generating product, it would make business sense to sponsor Vue development: it ensures the project that your product relies on stays healthy and actively maintained. It can also help your exposure in the Vue community and makes it easier to attract Vue developers.</p>\n<p>If you are an individual user and have enjoyed the productivity of using Vue, consider donating as a sign of appreciation - like buying me coffee once in a while :)</p>\n<p>In either case, you can provide recurring funding through Vue’s <a href=\"https://www.patreon.com/evanyou\" target=\"_blank\" rel=\"noopener\">Patreon campaign</a>, or provide one-time donations via <a href=\"https://www.paypal.me/evanyou\" target=\"_blank\" rel=\"noopener\">PayPal</a>. There are many ideas for Vue that I have lined up but haven’t had the time to embark on, and I would love to be able to work on them full time - I hope you can help me make that happen!</p>"},{"title":"Vue.js 0.11 released!","date":"2014-11-09T01:23:40.000Z","_content":"\nAfter the long wait, [Vue.js 0.11 **Cowboy Bebop**](https://github.com/yyx990803/vue/releases/tag/0.11.0) is finally here! Thanks to everyone who tried out the release candidate versions and provided feedback / bug reports along the way.\n\n<!-- more -->\n\nThe 0.11 release introduced many new features and also a fair number of breaking changes, so please carefully read through the [0.11 Change List](https://github.com/yyx990803/vue/blob/master/changes.md) before upgrading. Aside from the API changes, 0.11 also ships with better [code quality](https://codeclimate.com/github/yyx990803/vue) and [test coverage](https://coveralls.io/r/yyx990803/vue), and is considerably more robust in almost every aspect.\n\nThis documentation site has been fully upgraded to match the new 0.11 API. For the now legacy 0.10.6 version, you can still find documentations for it at [legacy.vuejs.org](http://legacy.vuejs.org).\n","source":"_posts/vue-011-release.md","raw":"---\ntitle: Vue.js 0.11 released!\ndate: 2014-11-09 09:23:40\n---\n\nAfter the long wait, [Vue.js 0.11 **Cowboy Bebop**](https://github.com/yyx990803/vue/releases/tag/0.11.0) is finally here! Thanks to everyone who tried out the release candidate versions and provided feedback / bug reports along the way.\n\n<!-- more -->\n\nThe 0.11 release introduced many new features and also a fair number of breaking changes, so please carefully read through the [0.11 Change List](https://github.com/yyx990803/vue/blob/master/changes.md) before upgrading. Aside from the API changes, 0.11 also ships with better [code quality](https://codeclimate.com/github/yyx990803/vue) and [test coverage](https://coveralls.io/r/yyx990803/vue), and is considerably more robust in almost every aspect.\n\nThis documentation site has been fully upgraded to match the new 0.11 API. For the now legacy 0.10.6 version, you can still find documentations for it at [legacy.vuejs.org](http://legacy.vuejs.org).\n","slug":"vue-011-release","published":1,"updated":"2018-07-19T04:04:16.811Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjk0zidnq000avkrtx6lokozg","content":"<p>After the long wait, <a href=\"https://github.com/yyx990803/vue/releases/tag/0.11.0\" target=\"_blank\" rel=\"noopener\">Vue.js 0.11 <strong>Cowboy Bebop</strong></a> is finally here! Thanks to everyone who tried out the release candidate versions and provided feedback / bug reports along the way.</p>\n<a id=\"more\"></a>\n<p>The 0.11 release introduced many new features and also a fair number of breaking changes, so please carefully read through the <a href=\"https://github.com/yyx990803/vue/blob/master/changes.md\" target=\"_blank\" rel=\"noopener\">0.11 Change List</a> before upgrading. Aside from the API changes, 0.11 also ships with better <a href=\"https://codeclimate.com/github/yyx990803/vue\" target=\"_blank\" rel=\"noopener\">code quality</a> and <a href=\"https://coveralls.io/r/yyx990803/vue\" target=\"_blank\" rel=\"noopener\">test coverage</a>, and is considerably more robust in almost every aspect.</p>\n<p>This documentation site has been fully upgraded to match the new 0.11 API. For the now legacy 0.10.6 version, you can still find documentations for it at <a href=\"http://legacy.vuejs.org\" target=\"_blank\" rel=\"noopener\">legacy.vuejs.org</a>.</p>\n","site":{"data":{}},"excerpt":"<p>After the long wait, <a href=\"https://github.com/yyx990803/vue/releases/tag/0.11.0\" target=\"_blank\" rel=\"noopener\">Vue.js 0.11 <strong>Cowboy Bebop</strong></a> is finally here! Thanks to everyone who tried out the release candidate versions and provided feedback / bug reports along the way.</p>","more":"<p>The 0.11 release introduced many new features and also a fair number of breaking changes, so please carefully read through the <a href=\"https://github.com/yyx990803/vue/blob/master/changes.md\" target=\"_blank\" rel=\"noopener\">0.11 Change List</a> before upgrading. Aside from the API changes, 0.11 also ships with better <a href=\"https://codeclimate.com/github/yyx990803/vue\" target=\"_blank\" rel=\"noopener\">code quality</a> and <a href=\"https://coveralls.io/r/yyx990803/vue\" target=\"_blank\" rel=\"noopener\">test coverage</a>, and is considerably more robust in almost every aspect.</p>\n<p>This documentation site has been fully upgraded to match the new 0.11 API. For the now legacy 0.10.6 version, you can still find documentations for it at <a href=\"http://legacy.vuejs.org\" target=\"_blank\" rel=\"noopener\">legacy.vuejs.org</a>.</p>"},{"title":"Announcing vue-cli","date":"2015-12-27T16:00:00.000Z","_content":"\nRecently there has been a lot of [discussion around the tooling hurdle](https://medium.com/@ericclemmons/javascript-fatigue-48d4011b6fc4#.chg95e5p6) when you start a React project. Luckily for Vue.js, all you need to do to start with a quick prototype is including it from a CDN via a `<script>` tag, so we've got that part covered. However, that's not how you'd build a real world application. In real world applications we inevitably need a certain amount of tooling to give us modularization, transpilers, pre-processors, hot-reload, linting and testing. These tools are necessary for the long-term maintainability and productivity of large projects, but the initial setup can be a big pain. This is why we are announcing [vue-cli](https://github.com/vuejs/vue-cli), a simple CLI tool to help you quickly scaffold Vue.js projects with opinionated, battery-included build setups.\n\n<!-- more -->\n\n### Just The Scaffolding\n\nThe usage looks like this:\n\n``` bash\nnpm install -g vue-cli\nvue init webpack my-project\n# answer prompts\ncd my-project\nnpm install\nnpm run dev # tada!\n```\n\nAll the CLI does is pulling down templates from the [vuejs-templates](https://github.com/vuejs-templates) organization on GitHub. Dependencies are handled via NPM, and build tasks are simply NPM scripts.\n\n### Official Templates\n\nThe purpose of official Vue project templates is providing opinionated, battery-included development tooling setups so that users can get started with actual app code as fast as possible. However, these templates are un-opinionated in terms of how you structure your app code and what libraries you use in addition to Vue.js.\n\nAll official project templates are repos in the [vuejs-templates organization](https://github.com/vuejs-templates). When a new template is added to the organization, you will be able to run `vue init <template-name> <project-name>` to use that template. You can also run `vue list` to see all available official templates.\n\nCurrent available templates include:\n\n- [browserify](https://github.com/vuejs-templates/browserify) - A full-featured Browserify + vueify setup with hot-reload, linting & unit testing.\n\n- [browserify-simple](https://github.com/vuejs-templates/browserify-simple) - A simple Browserify + vueify setup for quick prototyping.\n\n- [webpack](https://github.com/vuejs-templates/webpack) - A full-featured Webpack + vue-loader setup with hot reload, linting, testing & css extraction.\n\n- [webpack-simple](https://github.com/vuejs-templates/webpack-simple) - A simple Webpack + vue-loader setup for quick prototyping.\n\n### Bring Your Own Setup\n\nIf you are not happy with the official templates, you can fork these templates, modify them to fit your specific needs (or even create your own from scratch), and use them via `vue-cli` too, because `vue-cli` can work directly on GitHub repos:\n\n``` bash\nvue init username/repo my-project\n```\n\n### Vue Components Everywhere\n\nThere are different templates for different purposes: simple setups for quick prototyping, and full-featured setups for ambitious applications. A common feature among these templates though, is that they all support `*.vue` single file components. This means any third party Vue components written as valid `*.vue` files can be shared among projects using these setups, and simply be distributed over NPM - let's create more reusable components!\n","source":"_posts/vue-cli.md","raw":"---\ntitle: Announcing vue-cli\ndate: 2015-12-28 00:00:00\n---\n\nRecently there has been a lot of [discussion around the tooling hurdle](https://medium.com/@ericclemmons/javascript-fatigue-48d4011b6fc4#.chg95e5p6) when you start a React project. Luckily for Vue.js, all you need to do to start with a quick prototype is including it from a CDN via a `<script>` tag, so we've got that part covered. However, that's not how you'd build a real world application. In real world applications we inevitably need a certain amount of tooling to give us modularization, transpilers, pre-processors, hot-reload, linting and testing. These tools are necessary for the long-term maintainability and productivity of large projects, but the initial setup can be a big pain. This is why we are announcing [vue-cli](https://github.com/vuejs/vue-cli), a simple CLI tool to help you quickly scaffold Vue.js projects with opinionated, battery-included build setups.\n\n<!-- more -->\n\n### Just The Scaffolding\n\nThe usage looks like this:\n\n``` bash\nnpm install -g vue-cli\nvue init webpack my-project\n# answer prompts\ncd my-project\nnpm install\nnpm run dev # tada!\n```\n\nAll the CLI does is pulling down templates from the [vuejs-templates](https://github.com/vuejs-templates) organization on GitHub. Dependencies are handled via NPM, and build tasks are simply NPM scripts.\n\n### Official Templates\n\nThe purpose of official Vue project templates is providing opinionated, battery-included development tooling setups so that users can get started with actual app code as fast as possible. However, these templates are un-opinionated in terms of how you structure your app code and what libraries you use in addition to Vue.js.\n\nAll official project templates are repos in the [vuejs-templates organization](https://github.com/vuejs-templates). When a new template is added to the organization, you will be able to run `vue init <template-name> <project-name>` to use that template. You can also run `vue list` to see all available official templates.\n\nCurrent available templates include:\n\n- [browserify](https://github.com/vuejs-templates/browserify) - A full-featured Browserify + vueify setup with hot-reload, linting & unit testing.\n\n- [browserify-simple](https://github.com/vuejs-templates/browserify-simple) - A simple Browserify + vueify setup for quick prototyping.\n\n- [webpack](https://github.com/vuejs-templates/webpack) - A full-featured Webpack + vue-loader setup with hot reload, linting, testing & css extraction.\n\n- [webpack-simple](https://github.com/vuejs-templates/webpack-simple) - A simple Webpack + vue-loader setup for quick prototyping.\n\n### Bring Your Own Setup\n\nIf you are not happy with the official templates, you can fork these templates, modify them to fit your specific needs (or even create your own from scratch), and use them via `vue-cli` too, because `vue-cli` can work directly on GitHub repos:\n\n``` bash\nvue init username/repo my-project\n```\n\n### Vue Components Everywhere\n\nThere are different templates for different purposes: simple setups for quick prototyping, and full-featured setups for ambitious applications. A common feature among these templates though, is that they all support `*.vue` single file components. This means any third party Vue components written as valid `*.vue` files can be shared among projects using these setups, and simply be distributed over NPM - let's create more reusable components!\n","slug":"vue-cli","published":1,"updated":"2018-07-19T04:04:16.811Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjk0zidnr000bvkrtoza4a6wk","content":"<p>Recently there has been a lot of <a href=\"https://medium.com/@ericclemmons/javascript-fatigue-48d4011b6fc4#.chg95e5p6\" target=\"_blank\" rel=\"noopener\">discussion around the tooling hurdle</a> when you start a React project. Luckily for Vue.js, all you need to do to start with a quick prototype is including it from a CDN via a <code>&lt;script&gt;</code> tag, so we’ve got that part covered. However, that’s not how you’d build a real world application. In real world applications we inevitably need a certain amount of tooling to give us modularization, transpilers, pre-processors, hot-reload, linting and testing. These tools are necessary for the long-term maintainability and productivity of large projects, but the initial setup can be a big pain. This is why we are announcing <a href=\"https://github.com/vuejs/vue-cli\" target=\"_blank\" rel=\"noopener\">vue-cli</a>, a simple CLI tool to help you quickly scaffold Vue.js projects with opinionated, battery-included build setups.</p>\n<a id=\"more\"></a>\n<h3 id=\"Just-The-Scaffolding\"><a href=\"#Just-The-Scaffolding\" class=\"headerlink\" title=\"Just The Scaffolding\"></a>Just The Scaffolding</h3><p>The usage looks like this:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install -g vue-cli</span><br><span class=\"line\">vue init webpack my-project</span><br><span class=\"line\"><span class=\"comment\"># answer prompts</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> my-project</span><br><span class=\"line\">npm install</span><br><span class=\"line\">npm run dev <span class=\"comment\"># tada!</span></span><br></pre></td></tr></table></figure>\n<p>All the CLI does is pulling down templates from the <a href=\"https://github.com/vuejs-templates\" target=\"_blank\" rel=\"noopener\">vuejs-templates</a> organization on GitHub. Dependencies are handled via NPM, and build tasks are simply NPM scripts.</p>\n<h3 id=\"Official-Templates\"><a href=\"#Official-Templates\" class=\"headerlink\" title=\"Official Templates\"></a>Official Templates</h3><p>The purpose of official Vue project templates is providing opinionated, battery-included development tooling setups so that users can get started with actual app code as fast as possible. However, these templates are un-opinionated in terms of how you structure your app code and what libraries you use in addition to Vue.js.</p>\n<p>All official project templates are repos in the <a href=\"https://github.com/vuejs-templates\" target=\"_blank\" rel=\"noopener\">vuejs-templates organization</a>. When a new template is added to the organization, you will be able to run <code>vue init &lt;template-name&gt; &lt;project-name&gt;</code> to use that template. You can also run <code>vue list</code> to see all available official templates.</p>\n<p>Current available templates include:</p>\n<ul>\n<li><p><a href=\"https://github.com/vuejs-templates/browserify\" target=\"_blank\" rel=\"noopener\">browserify</a> - A full-featured Browserify + vueify setup with hot-reload, linting &amp; unit testing.</p>\n</li>\n<li><p><a href=\"https://github.com/vuejs-templates/browserify-simple\" target=\"_blank\" rel=\"noopener\">browserify-simple</a> - A simple Browserify + vueify setup for quick prototyping.</p>\n</li>\n<li><p><a href=\"https://github.com/vuejs-templates/webpack\" target=\"_blank\" rel=\"noopener\">webpack</a> - A full-featured Webpack + vue-loader setup with hot reload, linting, testing &amp; css extraction.</p>\n</li>\n<li><p><a href=\"https://github.com/vuejs-templates/webpack-simple\" target=\"_blank\" rel=\"noopener\">webpack-simple</a> - A simple Webpack + vue-loader setup for quick prototyping.</p>\n</li>\n</ul>\n<h3 id=\"Bring-Your-Own-Setup\"><a href=\"#Bring-Your-Own-Setup\" class=\"headerlink\" title=\"Bring Your Own Setup\"></a>Bring Your Own Setup</h3><p>If you are not happy with the official templates, you can fork these templates, modify them to fit your specific needs (or even create your own from scratch), and use them via <code>vue-cli</code> too, because <code>vue-cli</code> can work directly on GitHub repos:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">vue init username/repo my-project</span><br></pre></td></tr></table></figure>\n<h3 id=\"Vue-Components-Everywhere\"><a href=\"#Vue-Components-Everywhere\" class=\"headerlink\" title=\"Vue Components Everywhere\"></a>Vue Components Everywhere</h3><p>There are different templates for different purposes: simple setups for quick prototyping, and full-featured setups for ambitious applications. A common feature among these templates though, is that they all support <code>*.vue</code> single file components. This means any third party Vue components written as valid <code>*.vue</code> files can be shared among projects using these setups, and simply be distributed over NPM - let’s create more reusable components!</p>\n","site":{"data":{}},"excerpt":"<p>Recently there has been a lot of <a href=\"https://medium.com/@ericclemmons/javascript-fatigue-48d4011b6fc4#.chg95e5p6\" target=\"_blank\" rel=\"noopener\">discussion around the tooling hurdle</a> when you start a React project. Luckily for Vue.js, all you need to do to start with a quick prototype is including it from a CDN via a <code>&lt;script&gt;</code> tag, so we’ve got that part covered. However, that’s not how you’d build a real world application. In real world applications we inevitably need a certain amount of tooling to give us modularization, transpilers, pre-processors, hot-reload, linting and testing. These tools are necessary for the long-term maintainability and productivity of large projects, but the initial setup can be a big pain. This is why we are announcing <a href=\"https://github.com/vuejs/vue-cli\" target=\"_blank\" rel=\"noopener\">vue-cli</a>, a simple CLI tool to help you quickly scaffold Vue.js projects with opinionated, battery-included build setups.</p>","more":"<h3 id=\"Just-The-Scaffolding\"><a href=\"#Just-The-Scaffolding\" class=\"headerlink\" title=\"Just The Scaffolding\"></a>Just The Scaffolding</h3><p>The usage looks like this:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install -g vue-cli</span><br><span class=\"line\">vue init webpack my-project</span><br><span class=\"line\"><span class=\"comment\"># answer prompts</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> my-project</span><br><span class=\"line\">npm install</span><br><span class=\"line\">npm run dev <span class=\"comment\"># tada!</span></span><br></pre></td></tr></table></figure>\n<p>All the CLI does is pulling down templates from the <a href=\"https://github.com/vuejs-templates\" target=\"_blank\" rel=\"noopener\">vuejs-templates</a> organization on GitHub. Dependencies are handled via NPM, and build tasks are simply NPM scripts.</p>\n<h3 id=\"Official-Templates\"><a href=\"#Official-Templates\" class=\"headerlink\" title=\"Official Templates\"></a>Official Templates</h3><p>The purpose of official Vue project templates is providing opinionated, battery-included development tooling setups so that users can get started with actual app code as fast as possible. However, these templates are un-opinionated in terms of how you structure your app code and what libraries you use in addition to Vue.js.</p>\n<p>All official project templates are repos in the <a href=\"https://github.com/vuejs-templates\" target=\"_blank\" rel=\"noopener\">vuejs-templates organization</a>. When a new template is added to the organization, you will be able to run <code>vue init &lt;template-name&gt; &lt;project-name&gt;</code> to use that template. You can also run <code>vue list</code> to see all available official templates.</p>\n<p>Current available templates include:</p>\n<ul>\n<li><p><a href=\"https://github.com/vuejs-templates/browserify\" target=\"_blank\" rel=\"noopener\">browserify</a> - A full-featured Browserify + vueify setup with hot-reload, linting &amp; unit testing.</p>\n</li>\n<li><p><a href=\"https://github.com/vuejs-templates/browserify-simple\" target=\"_blank\" rel=\"noopener\">browserify-simple</a> - A simple Browserify + vueify setup for quick prototyping.</p>\n</li>\n<li><p><a href=\"https://github.com/vuejs-templates/webpack\" target=\"_blank\" rel=\"noopener\">webpack</a> - A full-featured Webpack + vue-loader setup with hot reload, linting, testing &amp; css extraction.</p>\n</li>\n<li><p><a href=\"https://github.com/vuejs-templates/webpack-simple\" target=\"_blank\" rel=\"noopener\">webpack-simple</a> - A simple Webpack + vue-loader setup for quick prototyping.</p>\n</li>\n</ul>\n<h3 id=\"Bring-Your-Own-Setup\"><a href=\"#Bring-Your-Own-Setup\" class=\"headerlink\" title=\"Bring Your Own Setup\"></a>Bring Your Own Setup</h3><p>If you are not happy with the official templates, you can fork these templates, modify them to fit your specific needs (or even create your own from scratch), and use them via <code>vue-cli</code> too, because <code>vue-cli</code> can work directly on GitHub repos:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">vue init username/repo my-project</span><br></pre></td></tr></table></figure>\n<h3 id=\"Vue-Components-Everywhere\"><a href=\"#Vue-Components-Everywhere\" class=\"headerlink\" title=\"Vue Components Everywhere\"></a>Vue Components Everywhere</h3><p>There are different templates for different purposes: simple setups for quick prototyping, and full-featured setups for ambitious applications. A common feature among these templates though, is that they all support <code>*.vue</code> single file components. This means any third party Vue components written as valid <code>*.vue</code> files can be shared among projects using these setups, and simply be distributed over NPM - let’s create more reusable components!</p>"},{"title":"Vue.js 0.10.6, and what's next","date":"2014-07-28T16:04:55.000Z","_content":"\n## 0.10.6\n\nVue.js 0.10.6 has been released! This is another small bug-fix release and will be the last maintenance version before the next major release.\n\n<!-- more -->\n\n- fix `v-style` error when value is falsy or a number. ( thanks to [@dmfilipenko](https://github.com/dmfilipenko) )\n- fix the built-in `currency` filter error when value is a string ( thanks to [@dmfilipenko](https://github.com/dmfilipenko) )\n- fix `Vue.require` for building with Component v1.0+ ( thanks to [@kewah](https://github.com/kewah) )\n- Allow template nodes to be passed as a template option ( thanks to [@jordangarcia](https://github.com/jordangarcia) )\n- `vm.$destroy()` now accepts an optional argument `noRemove`. When passed in as `true` it will leave the vm's DOM node intact after the vm is destroyed.\n\n## Vue-next\n\nSome of you might have noticed there is a [next](https://github.com/yyx990803/vue/tree/next) branch in the repo. And yes, I am re-writing Vue.js from scratch. There are two main reasons:\n\n- Fix some issues that are caused by design flaws in the current version. Because these changes affect the design of some core modules, it is actually easier to rewrite than to apply on the current codebase.\n- Improve general code quality (in particular, `compiler.js` as of now is a big pile of mess, and comments are not consistent across the codebase.)\n\nTake note that the `next` branch is still in **very** early stage. The internals will change a lot, and when it comes out it **will** break current applications. Despite that I will try to keep the API changes to a minimum. Major differences with current 0.10 branch are documented in [`changes.md`](https://github.com/yyx990803/vue/blob/next/changes.md). The list is obviously incomplete and subject to change, some of them are simply ideas, but it at least gives you a taste of what to expect, and I'd appreciate your feedback on any of the topics.\n\nShare your thoughts at [vuejs/Discussion](https://github.com/vuejs/Discussion/issues).\n","source":"_posts/vue-next.md","raw":"---\ntitle: Vue.js 0.10.6, and what's next\ndate: 2014-07-29 00:04:55\n---\n\n## 0.10.6\n\nVue.js 0.10.6 has been released! This is another small bug-fix release and will be the last maintenance version before the next major release.\n\n<!-- more -->\n\n- fix `v-style` error when value is falsy or a number. ( thanks to [@dmfilipenko](https://github.com/dmfilipenko) )\n- fix the built-in `currency` filter error when value is a string ( thanks to [@dmfilipenko](https://github.com/dmfilipenko) )\n- fix `Vue.require` for building with Component v1.0+ ( thanks to [@kewah](https://github.com/kewah) )\n- Allow template nodes to be passed as a template option ( thanks to [@jordangarcia](https://github.com/jordangarcia) )\n- `vm.$destroy()` now accepts an optional argument `noRemove`. When passed in as `true` it will leave the vm's DOM node intact after the vm is destroyed.\n\n## Vue-next\n\nSome of you might have noticed there is a [next](https://github.com/yyx990803/vue/tree/next) branch in the repo. And yes, I am re-writing Vue.js from scratch. There are two main reasons:\n\n- Fix some issues that are caused by design flaws in the current version. Because these changes affect the design of some core modules, it is actually easier to rewrite than to apply on the current codebase.\n- Improve general code quality (in particular, `compiler.js` as of now is a big pile of mess, and comments are not consistent across the codebase.)\n\nTake note that the `next` branch is still in **very** early stage. The internals will change a lot, and when it comes out it **will** break current applications. Despite that I will try to keep the API changes to a minimum. Major differences with current 0.10 branch are documented in [`changes.md`](https://github.com/yyx990803/vue/blob/next/changes.md). The list is obviously incomplete and subject to change, some of them are simply ideas, but it at least gives you a taste of what to expect, and I'd appreciate your feedback on any of the topics.\n\nShare your thoughts at [vuejs/Discussion](https://github.com/vuejs/Discussion/issues).\n","slug":"vue-next","published":1,"updated":"2018-07-19T04:04:16.811Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjk0zidns000cvkrt39g6o1bj","content":"<h2 id=\"0-10-6\"><a href=\"#0-10-6\" class=\"headerlink\" title=\"0.10.6\"></a>0.10.6</h2><p>Vue.js 0.10.6 has been released! This is another small bug-fix release and will be the last maintenance version before the next major release.</p>\n<a id=\"more\"></a>\n<ul>\n<li>fix <code>v-style</code> error when value is falsy or a number. ( thanks to <a href=\"https://github.com/dmfilipenko\" target=\"_blank\" rel=\"noopener\">@dmfilipenko</a> )</li>\n<li>fix the built-in <code>currency</code> filter error when value is a string ( thanks to <a href=\"https://github.com/dmfilipenko\" target=\"_blank\" rel=\"noopener\">@dmfilipenko</a> )</li>\n<li>fix <code>Vue.require</code> for building with Component v1.0+ ( thanks to <a href=\"https://github.com/kewah\" target=\"_blank\" rel=\"noopener\">@kewah</a> )</li>\n<li>Allow template nodes to be passed as a template option ( thanks to <a href=\"https://github.com/jordangarcia\" target=\"_blank\" rel=\"noopener\">@jordangarcia</a> )</li>\n<li><code>vm.$destroy()</code> now accepts an optional argument <code>noRemove</code>. When passed in as <code>true</code> it will leave the vm’s DOM node intact after the vm is destroyed.</li>\n</ul>\n<h2 id=\"Vue-next\"><a href=\"#Vue-next\" class=\"headerlink\" title=\"Vue-next\"></a>Vue-next</h2><p>Some of you might have noticed there is a <a href=\"https://github.com/yyx990803/vue/tree/next\" target=\"_blank\" rel=\"noopener\">next</a> branch in the repo. And yes, I am re-writing Vue.js from scratch. There are two main reasons:</p>\n<ul>\n<li>Fix some issues that are caused by design flaws in the current version. Because these changes affect the design of some core modules, it is actually easier to rewrite than to apply on the current codebase.</li>\n<li>Improve general code quality (in particular, <code>compiler.js</code> as of now is a big pile of mess, and comments are not consistent across the codebase.)</li>\n</ul>\n<p>Take note that the <code>next</code> branch is still in <strong>very</strong> early stage. The internals will change a lot, and when it comes out it <strong>will</strong> break current applications. Despite that I will try to keep the API changes to a minimum. Major differences with current 0.10 branch are documented in <a href=\"https://github.com/yyx990803/vue/blob/next/changes.md\" target=\"_blank\" rel=\"noopener\"><code>changes.md</code></a>. The list is obviously incomplete and subject to change, some of them are simply ideas, but it at least gives you a taste of what to expect, and I’d appreciate your feedback on any of the topics.</p>\n<p>Share your thoughts at <a href=\"https://github.com/vuejs/Discussion/issues\" target=\"_blank\" rel=\"noopener\">vuejs/Discussion</a>.</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"0-10-6\"><a href=\"#0-10-6\" class=\"headerlink\" title=\"0.10.6\"></a>0.10.6</h2><p>Vue.js 0.10.6 has been released! This is another small bug-fix release and will be the last maintenance version before the next major release.</p>","more":"<ul>\n<li>fix <code>v-style</code> error when value is falsy or a number. ( thanks to <a href=\"https://github.com/dmfilipenko\" target=\"_blank\" rel=\"noopener\">@dmfilipenko</a> )</li>\n<li>fix the built-in <code>currency</code> filter error when value is a string ( thanks to <a href=\"https://github.com/dmfilipenko\" target=\"_blank\" rel=\"noopener\">@dmfilipenko</a> )</li>\n<li>fix <code>Vue.require</code> for building with Component v1.0+ ( thanks to <a href=\"https://github.com/kewah\" target=\"_blank\" rel=\"noopener\">@kewah</a> )</li>\n<li>Allow template nodes to be passed as a template option ( thanks to <a href=\"https://github.com/jordangarcia\" target=\"_blank\" rel=\"noopener\">@jordangarcia</a> )</li>\n<li><code>vm.$destroy()</code> now accepts an optional argument <code>noRemove</code>. When passed in as <code>true</code> it will leave the vm’s DOM node intact after the vm is destroyed.</li>\n</ul>\n<h2 id=\"Vue-next\"><a href=\"#Vue-next\" class=\"headerlink\" title=\"Vue-next\"></a>Vue-next</h2><p>Some of you might have noticed there is a <a href=\"https://github.com/yyx990803/vue/tree/next\" target=\"_blank\" rel=\"noopener\">next</a> branch in the repo. And yes, I am re-writing Vue.js from scratch. There are two main reasons:</p>\n<ul>\n<li>Fix some issues that are caused by design flaws in the current version. Because these changes affect the design of some core modules, it is actually easier to rewrite than to apply on the current codebase.</li>\n<li>Improve general code quality (in particular, <code>compiler.js</code> as of now is a big pile of mess, and comments are not consistent across the codebase.)</li>\n</ul>\n<p>Take note that the <code>next</code> branch is still in <strong>very</strong> early stage. The internals will change a lot, and when it comes out it <strong>will</strong> break current applications. Despite that I will try to keep the API changes to a minimum. Major differences with current 0.10 branch are documented in <a href=\"https://github.com/yyx990803/vue/blob/next/changes.md\" target=\"_blank\" rel=\"noopener\"><code>changes.md</code></a>. The list is obviously incomplete and subject to change, some of them are simply ideas, but it at least gives you a taste of what to expect, and I’d appreciate your feedback on any of the topics.</p>\n<p>Share your thoughts at <a href=\"https://github.com/vuejs/Discussion/issues\" target=\"_blank\" rel=\"noopener\">vuejs/Discussion</a>.</p>"},{"title":"Vue.js 0.10 is here!","date":"2014-03-22T11:00:13.000Z","type":"{{type}}","yield":"{{>yield}}","_content":"\nVue.js 0.10.0 (Blade Runner) has been released! This release comes with many useful additions based on the suggestions from the users, notably interpolation in literal directives, dynamic components with the new `v-view` directive, array filters, and the option to configure interpolation delimiters. Internally, the codebase has received many refactoring and improvements which makes Vue.js [even faster](http://vuejs.org/perf/).\n\n<!-- more -->\n\nSee the [Installation](/guide/installation.html) page for the latest builds.\n\n### New\n\n- Literal directives can now contain interpolation tags. These tags will be evaluated only once at compile time. An example usage is conditionally decide which component to instantiate with `v-component=\"{{type}}\"`. [Doc](/guide/directives.html#Literal_Directives).\n- Attributes listed in the `paramAttributes` option now accept mustache interpolations too. They will also only be evaluated once.\n- `v-repeat` now accepts an argument which will be used as the identifier for the wrapped object. This allows more explicit property access in repeaters. [Doc](/guide/list.html#Using_an_Identifier).\n- Added `v-view` directive which binds to a string value and dynamically instantiate different components using that string as the component ID. [Doc](/api/directives.html#v-view).\n- Added `filterBy` and `orderBy` filters for `v-repeat`. [Doc](/api/filters.html#filterBy).\n- Custom filters that access properties on its `this` context will be considered **computed filters**. [Doc](/guide/custom-filter.html#Filter_Context).\n- You can now access the event in `v-on` handler expressions as `$event`. Example: `<a v-on=\"click:handle('hello', $event)\">Hello</a>`\n- Interpolation delimiters can now be customized via the `delimiters` global config option. Example: `Vue.config({ delimiters: [\"[\", \"]\"] })` will change the matched interpolation tags to `[[ ]]` for text bindings and `[[[ ]]]` for html bindings.\n\n### Changed\n\n- `{{yield}}` syntax has been deprecated. A Web Components spec compatible content insertion mechanism using `<content>` elements has been introduced. [Doc](/guide/components.html#Content_Insertion).\n- To use a component as a custom element, the component ID must now contain a hyphen (`-`). This is consistent with the current custom element spec draft.\n- `v-repeat` Arrays' augmented methods have been renamed from `set` to `$set(index, value)` and `remove` to `$remove(index | value)`. The prefix better differentiates them from native methods. The `replace` method has been removed.\n- When iterating over an Object with `v-repeat`, the object no longer gets a `$repeater` array. Instead, the object is now augmented with two methods: `$add(key, value)` and `$delete(key)`, which will trigger corresponding view updates.\n- `v-if` now creates and destroys a child ViewModel instance when the binding value changes, instead of simply removing/inserting the DOM node. In addition, it can no longer be used with `v-repeat`. Use `v-show` or the new built-in array filters instead.\n- `v-with` can no longer be used alone. It now must be used with either `v-component` or `v-view`. `v-component` can also be used as an empty directive just to create a child VM using the default `Vue` constructor.\n- Production build now strips all warnings and debug logs. To leverage `debug: true`, use the development version. The development version now has more detailed warning messages.\n\n### Fixed\n\n- `event.stopPropagation()` and `event.preventDefault()` inside `v-on` handlers now work as expected.\n- `parent` option now works properly when used in `Vue.extend`\n- Mustache bindings inside `<textarea>` are now properly interpolated before being set as value.\n\n### Internal\n\n- `v-component`, `v-with` and `v-if` have been re-written for a cleaner compile flow.\n- `v-repeat` has been re-written to use refined diff algorithm which triggers minimum DOM manipulations when the array is set to a different instance containing overlapping elements. This makes it efficient to pipe an Array through filters.\n- `template` option now directly clones native `<template>`'s content when available.\n- Overall performance improvements for both initialization and rendering.\n","source":"_posts/vuejs-010-release.md","raw":"---\ntitle: Vue.js 0.10 is here!\ndate: 2014-03-22 19:00:13\ntype: '{{type}}'\nyield: '{{>yield}}'\n---\n\nVue.js 0.10.0 (Blade Runner) has been released! This release comes with many useful additions based on the suggestions from the users, notably interpolation in literal directives, dynamic components with the new `v-view` directive, array filters, and the option to configure interpolation delimiters. Internally, the codebase has received many refactoring and improvements which makes Vue.js [even faster](http://vuejs.org/perf/).\n\n<!-- more -->\n\nSee the [Installation](/guide/installation.html) page for the latest builds.\n\n### New\n\n- Literal directives can now contain interpolation tags. These tags will be evaluated only once at compile time. An example usage is conditionally decide which component to instantiate with `v-component=\"{{type}}\"`. [Doc](/guide/directives.html#Literal_Directives).\n- Attributes listed in the `paramAttributes` option now accept mustache interpolations too. They will also only be evaluated once.\n- `v-repeat` now accepts an argument which will be used as the identifier for the wrapped object. This allows more explicit property access in repeaters. [Doc](/guide/list.html#Using_an_Identifier).\n- Added `v-view` directive which binds to a string value and dynamically instantiate different components using that string as the component ID. [Doc](/api/directives.html#v-view).\n- Added `filterBy` and `orderBy` filters for `v-repeat`. [Doc](/api/filters.html#filterBy).\n- Custom filters that access properties on its `this` context will be considered **computed filters**. [Doc](/guide/custom-filter.html#Filter_Context).\n- You can now access the event in `v-on` handler expressions as `$event`. Example: `<a v-on=\"click:handle('hello', $event)\">Hello</a>`\n- Interpolation delimiters can now be customized via the `delimiters` global config option. Example: `Vue.config({ delimiters: [\"[\", \"]\"] })` will change the matched interpolation tags to `[[ ]]` for text bindings and `[[[ ]]]` for html bindings.\n\n### Changed\n\n- `{{yield}}` syntax has been deprecated. A Web Components spec compatible content insertion mechanism using `<content>` elements has been introduced. [Doc](/guide/components.html#Content_Insertion).\n- To use a component as a custom element, the component ID must now contain a hyphen (`-`). This is consistent with the current custom element spec draft.\n- `v-repeat` Arrays' augmented methods have been renamed from `set` to `$set(index, value)` and `remove` to `$remove(index | value)`. The prefix better differentiates them from native methods. The `replace` method has been removed.\n- When iterating over an Object with `v-repeat`, the object no longer gets a `$repeater` array. Instead, the object is now augmented with two methods: `$add(key, value)` and `$delete(key)`, which will trigger corresponding view updates.\n- `v-if` now creates and destroys a child ViewModel instance when the binding value changes, instead of simply removing/inserting the DOM node. In addition, it can no longer be used with `v-repeat`. Use `v-show` or the new built-in array filters instead.\n- `v-with` can no longer be used alone. It now must be used with either `v-component` or `v-view`. `v-component` can also be used as an empty directive just to create a child VM using the default `Vue` constructor.\n- Production build now strips all warnings and debug logs. To leverage `debug: true`, use the development version. The development version now has more detailed warning messages.\n\n### Fixed\n\n- `event.stopPropagation()` and `event.preventDefault()` inside `v-on` handlers now work as expected.\n- `parent` option now works properly when used in `Vue.extend`\n- Mustache bindings inside `<textarea>` are now properly interpolated before being set as value.\n\n### Internal\n\n- `v-component`, `v-with` and `v-if` have been re-written for a cleaner compile flow.\n- `v-repeat` has been re-written to use refined diff algorithm which triggers minimum DOM manipulations when the array is set to a different instance containing overlapping elements. This makes it efficient to pipe an Array through filters.\n- `template` option now directly clones native `<template>`'s content when available.\n- Overall performance improvements for both initialization and rendering.\n","slug":"vuejs-010-release","published":1,"updated":"2018-07-19T04:04:16.811Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjk0zidnu000dvkrtctcj8mwt","content":"<p>Vue.js 0.10.0 (Blade Runner) has been released! This release comes with many useful additions based on the suggestions from the users, notably interpolation in literal directives, dynamic components with the new <code>v-view</code> directive, array filters, and the option to configure interpolation delimiters. Internally, the codebase has received many refactoring and improvements which makes Vue.js <a href=\"http://vuejs.org/perf/\">even faster</a>.</p>\n<a id=\"more\"></a>\n<p>See the <a href=\"/guide/installation.html\">Installation</a> page for the latest builds.</p>\n<h3 id=\"New\"><a href=\"#New\" class=\"headerlink\" title=\"New\"></a>New</h3><ul>\n<li>Literal directives can now contain interpolation tags. These tags will be evaluated only once at compile time. An example usage is conditionally decide which component to instantiate with <code>v-component=&quot;{{type}}&quot;</code>. <a href=\"/guide/directives.html#Literal_Directives\">Doc</a>.</li>\n<li>Attributes listed in the <code>paramAttributes</code> option now accept mustache interpolations too. They will also only be evaluated once.</li>\n<li><code>v-repeat</code> now accepts an argument which will be used as the identifier for the wrapped object. This allows more explicit property access in repeaters. <a href=\"/guide/list.html#Using_an_Identifier\">Doc</a>.</li>\n<li>Added <code>v-view</code> directive which binds to a string value and dynamically instantiate different components using that string as the component ID. <a href=\"/api/directives.html#v-view\">Doc</a>.</li>\n<li>Added <code>filterBy</code> and <code>orderBy</code> filters for <code>v-repeat</code>. <a href=\"/api/filters.html#filterBy\">Doc</a>.</li>\n<li>Custom filters that access properties on its <code>this</code> context will be considered <strong>computed filters</strong>. <a href=\"/guide/custom-filter.html#Filter_Context\">Doc</a>.</li>\n<li>You can now access the event in <code>v-on</code> handler expressions as <code>$event</code>. Example: <code>&lt;a v-on=&quot;click:handle(&#39;hello&#39;, $event)&quot;&gt;Hello&lt;/a&gt;</code></li>\n<li>Interpolation delimiters can now be customized via the <code>delimiters</code> global config option. Example: <code>Vue.config({ delimiters: [&quot;[&quot;, &quot;]&quot;] })</code> will change the matched interpolation tags to <code>[[ ]]</code> for text bindings and <code>[[[ ]]]</code> for html bindings.</li>\n</ul>\n<h3 id=\"Changed\"><a href=\"#Changed\" class=\"headerlink\" title=\"Changed\"></a>Changed</h3><ul>\n<li><code>{{>yield}}</code> syntax has been deprecated. A Web Components spec compatible content insertion mechanism using <code>&lt;content&gt;</code> elements has been introduced. <a href=\"/guide/components.html#Content_Insertion\">Doc</a>.</li>\n<li>To use a component as a custom element, the component ID must now contain a hyphen (<code>-</code>). This is consistent with the current custom element spec draft.</li>\n<li><code>v-repeat</code> Arrays’ augmented methods have been renamed from <code>set</code> to <code>$set(index, value)</code> and <code>remove</code> to <code>$remove(index | value)</code>. The prefix better differentiates them from native methods. The <code>replace</code> method has been removed.</li>\n<li>When iterating over an Object with <code>v-repeat</code>, the object no longer gets a <code>$repeater</code> array. Instead, the object is now augmented with two methods: <code>$add(key, value)</code> and <code>$delete(key)</code>, which will trigger corresponding view updates.</li>\n<li><code>v-if</code> now creates and destroys a child ViewModel instance when the binding value changes, instead of simply removing/inserting the DOM node. In addition, it can no longer be used with <code>v-repeat</code>. Use <code>v-show</code> or the new built-in array filters instead.</li>\n<li><code>v-with</code> can no longer be used alone. It now must be used with either <code>v-component</code> or <code>v-view</code>. <code>v-component</code> can also be used as an empty directive just to create a child VM using the default <code>Vue</code> constructor.</li>\n<li>Production build now strips all warnings and debug logs. To leverage <code>debug: true</code>, use the development version. The development version now has more detailed warning messages.</li>\n</ul>\n<h3 id=\"Fixed\"><a href=\"#Fixed\" class=\"headerlink\" title=\"Fixed\"></a>Fixed</h3><ul>\n<li><code>event.stopPropagation()</code> and <code>event.preventDefault()</code> inside <code>v-on</code> handlers now work as expected.</li>\n<li><code>parent</code> option now works properly when used in <code>Vue.extend</code></li>\n<li>Mustache bindings inside <code>&lt;textarea&gt;</code> are now properly interpolated before being set as value.</li>\n</ul>\n<h3 id=\"Internal\"><a href=\"#Internal\" class=\"headerlink\" title=\"Internal\"></a>Internal</h3><ul>\n<li><code>v-component</code>, <code>v-with</code> and <code>v-if</code> have been re-written for a cleaner compile flow.</li>\n<li><code>v-repeat</code> has been re-written to use refined diff algorithm which triggers minimum DOM manipulations when the array is set to a different instance containing overlapping elements. This makes it efficient to pipe an Array through filters.</li>\n<li><code>template</code> option now directly clones native <code>&lt;template&gt;</code>‘s content when available.</li>\n<li>Overall performance improvements for both initialization and rendering.</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>Vue.js 0.10.0 (Blade Runner) has been released! This release comes with many useful additions based on the suggestions from the users, notably interpolation in literal directives, dynamic components with the new <code>v-view</code> directive, array filters, and the option to configure interpolation delimiters. Internally, the codebase has received many refactoring and improvements which makes Vue.js <a href=\"http://vuejs.org/perf/\">even faster</a>.</p>","more":"<p>See the <a href=\"/guide/installation.html\">Installation</a> page for the latest builds.</p>\n<h3 id=\"New\"><a href=\"#New\" class=\"headerlink\" title=\"New\"></a>New</h3><ul>\n<li>Literal directives can now contain interpolation tags. These tags will be evaluated only once at compile time. An example usage is conditionally decide which component to instantiate with <code>v-component=&quot;{{type}}&quot;</code>. <a href=\"/guide/directives.html#Literal_Directives\">Doc</a>.</li>\n<li>Attributes listed in the <code>paramAttributes</code> option now accept mustache interpolations too. They will also only be evaluated once.</li>\n<li><code>v-repeat</code> now accepts an argument which will be used as the identifier for the wrapped object. This allows more explicit property access in repeaters. <a href=\"/guide/list.html#Using_an_Identifier\">Doc</a>.</li>\n<li>Added <code>v-view</code> directive which binds to a string value and dynamically instantiate different components using that string as the component ID. <a href=\"/api/directives.html#v-view\">Doc</a>.</li>\n<li>Added <code>filterBy</code> and <code>orderBy</code> filters for <code>v-repeat</code>. <a href=\"/api/filters.html#filterBy\">Doc</a>.</li>\n<li>Custom filters that access properties on its <code>this</code> context will be considered <strong>computed filters</strong>. <a href=\"/guide/custom-filter.html#Filter_Context\">Doc</a>.</li>\n<li>You can now access the event in <code>v-on</code> handler expressions as <code>$event</code>. Example: <code>&lt;a v-on=&quot;click:handle(&#39;hello&#39;, $event)&quot;&gt;Hello&lt;/a&gt;</code></li>\n<li>Interpolation delimiters can now be customized via the <code>delimiters</code> global config option. Example: <code>Vue.config({ delimiters: [&quot;[&quot;, &quot;]&quot;] })</code> will change the matched interpolation tags to <code>[[ ]]</code> for text bindings and <code>[[[ ]]]</code> for html bindings.</li>\n</ul>\n<h3 id=\"Changed\"><a href=\"#Changed\" class=\"headerlink\" title=\"Changed\"></a>Changed</h3><ul>\n<li><code>{{>yield}}</code> syntax has been deprecated. A Web Components spec compatible content insertion mechanism using <code>&lt;content&gt;</code> elements has been introduced. <a href=\"/guide/components.html#Content_Insertion\">Doc</a>.</li>\n<li>To use a component as a custom element, the component ID must now contain a hyphen (<code>-</code>). This is consistent with the current custom element spec draft.</li>\n<li><code>v-repeat</code> Arrays’ augmented methods have been renamed from <code>set</code> to <code>$set(index, value)</code> and <code>remove</code> to <code>$remove(index | value)</code>. The prefix better differentiates them from native methods. The <code>replace</code> method has been removed.</li>\n<li>When iterating over an Object with <code>v-repeat</code>, the object no longer gets a <code>$repeater</code> array. Instead, the object is now augmented with two methods: <code>$add(key, value)</code> and <code>$delete(key)</code>, which will trigger corresponding view updates.</li>\n<li><code>v-if</code> now creates and destroys a child ViewModel instance when the binding value changes, instead of simply removing/inserting the DOM node. In addition, it can no longer be used with <code>v-repeat</code>. Use <code>v-show</code> or the new built-in array filters instead.</li>\n<li><code>v-with</code> can no longer be used alone. It now must be used with either <code>v-component</code> or <code>v-view</code>. <code>v-component</code> can also be used as an empty directive just to create a child VM using the default <code>Vue</code> constructor.</li>\n<li>Production build now strips all warnings and debug logs. To leverage <code>debug: true</code>, use the development version. The development version now has more detailed warning messages.</li>\n</ul>\n<h3 id=\"Fixed\"><a href=\"#Fixed\" class=\"headerlink\" title=\"Fixed\"></a>Fixed</h3><ul>\n<li><code>event.stopPropagation()</code> and <code>event.preventDefault()</code> inside <code>v-on</code> handlers now work as expected.</li>\n<li><code>parent</code> option now works properly when used in <code>Vue.extend</code></li>\n<li>Mustache bindings inside <code>&lt;textarea&gt;</code> are now properly interpolated before being set as value.</li>\n</ul>\n<h3 id=\"Internal\"><a href=\"#Internal\" class=\"headerlink\" title=\"Internal\"></a>Internal</h3><ul>\n<li><code>v-component</code>, <code>v-with</code> and <code>v-if</code> have been re-written for a cleaner compile flow.</li>\n<li><code>v-repeat</code> has been re-written to use refined diff algorithm which triggers minimum DOM manipulations when the array is set to a different instance containing overlapping elements. This makes it efficient to pipe an Array through filters.</li>\n<li><code>template</code> option now directly clones native <code>&lt;template&gt;</code>‘s content when available.</li>\n<li>Overall performance improvements for both initialization and rendering.</li>\n</ul>"},{"title":"Why Vue.js doesn't support templateURL","date":"2015-10-28T02:56:00.000Z","_content":"\nA very common question from new Vue users, especially those who used Angular before, is \"can I have `templateURL`?\". I have answered this so many times and I figure it's better to write something about it.\n\n<!-- more -->\n\nIn Angular, `templateURL` or `ng-include` allows the user to dynamically load a remote template file at runtime. This seems pretty convenient as a built-in feature, but let's rethink what problem it solves.\n\nFirst, it allows us to write our template in a separate HTML file. This gives us proper syntax highlighting in editors, which is probably why many prefer to do so. But is splitting your JavaScript code and the template really the best way? For a Vue.js component, its template and its JavaScript is tightly coupled by nature - it's in fact much simpler if things are just in the same file. The context switching of jumping back and forth between two files actually makes the development experience much worse. Conceptually, components are the basic building block of a Vue.js app, not templates. Every Vue.js template is coupled to an accompanying JavaScript context - there's no point in splitting them further apart.\n\nSecond, because `templateURL` loads the template via Ajax at runtime, you don't need a build step in order to split up your files. This is convenient during development, but comes at a serious cost when you want to deploy it to production. Before HTTP/2 is universally supported, the number of HTTP requests is still probably the most critical factor in your app's initial load performance. Now imagine you use `templateURL` for every component in your app - the browser needs to perform dozens of HTTP requests before even being able to display anything! In case you don't know, most browsers limit the number of parallel requests it can perform to a single server. When you exceed that limit, your app's initial rendering will suffer for every extra round trip the browser has to wait for. Sure, there are build tools that can help you pre-register all those templates in `$templateCache` - but that shows us a build step is, in fact, inevitable for any serious frontend development.\n\nSo, without `templateURL`, how do we deal with the development experience problem? Writing templates as inline JavaScript strings is terrible, faking templates with `<script type=\"x/template\">` also feels like a hack. Well, maybe it's time to up the game a bit and use a proper module bundler like [Webpack](http://webpack.github.io/) or [Browserify](http://browserify.org/). It might seem daunting if you've never dealt with them before, but trust me it's worth it to take the leap. Proper modularization is a necessity if you want to build anything large and maintainable. More importantly, you get to write your [Vue components in a single file](http://vuejs.org/guide/single-file-components.html), with proper syntax highlighting and the extra benefits of custom pre-processors, hot-reloading, ES2015 by default, autoprefixing and scoped CSS, which makes the development experience 10 times better.\n\nFinally, Vue does allow you to [lazy load your components](http://vuejs.org/guide/components.html#Async-Components), and with Webpack it is trivially easy. Although this is only a concern when your initial bundle is so large that you are better off splitting it apart.\n\nThink in components, not templates.\n","source":"_posts/why-no-template-url.md","raw":"---\ntitle: \"Why Vue.js doesn't support templateURL\"\ndate: 2015-10-28 10:56:00\n---\n\nA very common question from new Vue users, especially those who used Angular before, is \"can I have `templateURL`?\". I have answered this so many times and I figure it's better to write something about it.\n\n<!-- more -->\n\nIn Angular, `templateURL` or `ng-include` allows the user to dynamically load a remote template file at runtime. This seems pretty convenient as a built-in feature, but let's rethink what problem it solves.\n\nFirst, it allows us to write our template in a separate HTML file. This gives us proper syntax highlighting in editors, which is probably why many prefer to do so. But is splitting your JavaScript code and the template really the best way? For a Vue.js component, its template and its JavaScript is tightly coupled by nature - it's in fact much simpler if things are just in the same file. The context switching of jumping back and forth between two files actually makes the development experience much worse. Conceptually, components are the basic building block of a Vue.js app, not templates. Every Vue.js template is coupled to an accompanying JavaScript context - there's no point in splitting them further apart.\n\nSecond, because `templateURL` loads the template via Ajax at runtime, you don't need a build step in order to split up your files. This is convenient during development, but comes at a serious cost when you want to deploy it to production. Before HTTP/2 is universally supported, the number of HTTP requests is still probably the most critical factor in your app's initial load performance. Now imagine you use `templateURL` for every component in your app - the browser needs to perform dozens of HTTP requests before even being able to display anything! In case you don't know, most browsers limit the number of parallel requests it can perform to a single server. When you exceed that limit, your app's initial rendering will suffer for every extra round trip the browser has to wait for. Sure, there are build tools that can help you pre-register all those templates in `$templateCache` - but that shows us a build step is, in fact, inevitable for any serious frontend development.\n\nSo, without `templateURL`, how do we deal with the development experience problem? Writing templates as inline JavaScript strings is terrible, faking templates with `<script type=\"x/template\">` also feels like a hack. Well, maybe it's time to up the game a bit and use a proper module bundler like [Webpack](http://webpack.github.io/) or [Browserify](http://browserify.org/). It might seem daunting if you've never dealt with them before, but trust me it's worth it to take the leap. Proper modularization is a necessity if you want to build anything large and maintainable. More importantly, you get to write your [Vue components in a single file](http://vuejs.org/guide/single-file-components.html), with proper syntax highlighting and the extra benefits of custom pre-processors, hot-reloading, ES2015 by default, autoprefixing and scoped CSS, which makes the development experience 10 times better.\n\nFinally, Vue does allow you to [lazy load your components](http://vuejs.org/guide/components.html#Async-Components), and with Webpack it is trivially easy. Although this is only a concern when your initial bundle is so large that you are better off splitting it apart.\n\nThink in components, not templates.\n","slug":"why-no-template-url","published":1,"updated":"2018-07-19T04:04:16.812Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjk0zidnv000evkrt8bujvvnt","content":"<p>A very common question from new Vue users, especially those who used Angular before, is “can I have <code>templateURL</code>?”. I have answered this so many times and I figure it’s better to write something about it.</p>\n<a id=\"more\"></a>\n<p>In Angular, <code>templateURL</code> or <code>ng-include</code> allows the user to dynamically load a remote template file at runtime. This seems pretty convenient as a built-in feature, but let’s rethink what problem it solves.</p>\n<p>First, it allows us to write our template in a separate HTML file. This gives us proper syntax highlighting in editors, which is probably why many prefer to do so. But is splitting your JavaScript code and the template really the best way? For a Vue.js component, its template and its JavaScript is tightly coupled by nature - it’s in fact much simpler if things are just in the same file. The context switching of jumping back and forth between two files actually makes the development experience much worse. Conceptually, components are the basic building block of a Vue.js app, not templates. Every Vue.js template is coupled to an accompanying JavaScript context - there’s no point in splitting them further apart.</p>\n<p>Second, because <code>templateURL</code> loads the template via Ajax at runtime, you don’t need a build step in order to split up your files. This is convenient during development, but comes at a serious cost when you want to deploy it to production. Before HTTP/2 is universally supported, the number of HTTP requests is still probably the most critical factor in your app’s initial load performance. Now imagine you use <code>templateURL</code> for every component in your app - the browser needs to perform dozens of HTTP requests before even being able to display anything! In case you don’t know, most browsers limit the number of parallel requests it can perform to a single server. When you exceed that limit, your app’s initial rendering will suffer for every extra round trip the browser has to wait for. Sure, there are build tools that can help you pre-register all those templates in <code>$templateCache</code> - but that shows us a build step is, in fact, inevitable for any serious frontend development.</p>\n<p>So, without <code>templateURL</code>, how do we deal with the development experience problem? Writing templates as inline JavaScript strings is terrible, faking templates with <code>&lt;script type=&quot;x/template&quot;&gt;</code> also feels like a hack. Well, maybe it’s time to up the game a bit and use a proper module bundler like <a href=\"http://webpack.github.io/\" target=\"_blank\" rel=\"noopener\">Webpack</a> or <a href=\"http://browserify.org/\" target=\"_blank\" rel=\"noopener\">Browserify</a>. It might seem daunting if you’ve never dealt with them before, but trust me it’s worth it to take the leap. Proper modularization is a necessity if you want to build anything large and maintainable. More importantly, you get to write your <a href=\"http://vuejs.org/guide/single-file-components.html\">Vue components in a single file</a>, with proper syntax highlighting and the extra benefits of custom pre-processors, hot-reloading, ES2015 by default, autoprefixing and scoped CSS, which makes the development experience 10 times better.</p>\n<p>Finally, Vue does allow you to <a href=\"http://vuejs.org/guide/components.html#Async-Components\">lazy load your components</a>, and with Webpack it is trivially easy. Although this is only a concern when your initial bundle is so large that you are better off splitting it apart.</p>\n<p>Think in components, not templates.</p>\n","site":{"data":{}},"excerpt":"<p>A very common question from new Vue users, especially those who used Angular before, is “can I have <code>templateURL</code>?”. I have answered this so many times and I figure it’s better to write something about it.</p>","more":"<p>In Angular, <code>templateURL</code> or <code>ng-include</code> allows the user to dynamically load a remote template file at runtime. This seems pretty convenient as a built-in feature, but let’s rethink what problem it solves.</p>\n<p>First, it allows us to write our template in a separate HTML file. This gives us proper syntax highlighting in editors, which is probably why many prefer to do so. But is splitting your JavaScript code and the template really the best way? For a Vue.js component, its template and its JavaScript is tightly coupled by nature - it’s in fact much simpler if things are just in the same file. The context switching of jumping back and forth between two files actually makes the development experience much worse. Conceptually, components are the basic building block of a Vue.js app, not templates. Every Vue.js template is coupled to an accompanying JavaScript context - there’s no point in splitting them further apart.</p>\n<p>Second, because <code>templateURL</code> loads the template via Ajax at runtime, you don’t need a build step in order to split up your files. This is convenient during development, but comes at a serious cost when you want to deploy it to production. Before HTTP/2 is universally supported, the number of HTTP requests is still probably the most critical factor in your app’s initial load performance. Now imagine you use <code>templateURL</code> for every component in your app - the browser needs to perform dozens of HTTP requests before even being able to display anything! In case you don’t know, most browsers limit the number of parallel requests it can perform to a single server. When you exceed that limit, your app’s initial rendering will suffer for every extra round trip the browser has to wait for. Sure, there are build tools that can help you pre-register all those templates in <code>$templateCache</code> - but that shows us a build step is, in fact, inevitable for any serious frontend development.</p>\n<p>So, without <code>templateURL</code>, how do we deal with the development experience problem? Writing templates as inline JavaScript strings is terrible, faking templates with <code>&lt;script type=&quot;x/template&quot;&gt;</code> also feels like a hack. Well, maybe it’s time to up the game a bit and use a proper module bundler like <a href=\"http://webpack.github.io/\" target=\"_blank\" rel=\"noopener\">Webpack</a> or <a href=\"http://browserify.org/\" target=\"_blank\" rel=\"noopener\">Browserify</a>. It might seem daunting if you’ve never dealt with them before, but trust me it’s worth it to take the leap. Proper modularization is a necessity if you want to build anything large and maintainable. More importantly, you get to write your <a href=\"http://vuejs.org/guide/single-file-components.html\">Vue components in a single file</a>, with proper syntax highlighting and the extra benefits of custom pre-processors, hot-reloading, ES2015 by default, autoprefixing and scoped CSS, which makes the development experience 10 times better.</p>\n<p>Finally, Vue does allow you to <a href=\"http://vuejs.org/guide/components.html#Async-Components\">lazy load your components</a>, and with Webpack it is trivially easy. Although this is only a concern when your initial bundle is so large that you are better off splitting it apart.</p>\n<p>Think in components, not templates.</p>"}],"PostAsset":[],"PostCategory":[],"PostTag":[],"Tag":[]}}